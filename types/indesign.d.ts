/**
 * An assignment.
 * @class
 */
export declare class Assignment {
	/**
	 * The path to the document that the hyperlink destination 
	 * points to.
	 */
	readonly documentPath: File;
	/** The status of the assignment file. */
	readonly assignmentFileStatus: AssignmentStatus;
	/** If true, the assignment is packaged. */
	readonly packaged: boolean;
	/** If true, the assignment package is up to date. */
	readonly packageUpToDate: boolean;
	/**
	 * The file path (colon delimited on the Mac OS). Can also 
	 * accept: File.
	 */
	readonly filePath: string;
	/** The unique ID of the Assignment. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Assignment (a Document). */
	readonly parent: Document;
	/** The index of the Assignment within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of assigned stories. */
	readonly assignedStories: AssignedStories;
	/** The name of the Assignment. */
	name: string;
	/** The user name to assign to tracked changes and notes. */
	userName: string;
	/** The content to export in the assignment. */
	exportOptions: AssignmentExportOptions;
	/**
	 * The color of the assignment's frames. Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator or NothingEnum 
	 * enumerator.
	 */
	frameColor: any;
	/**
	 * If true, includes linked files when packaging the 
	 * assignment.
	 */
	includeLinksWhenPackage: boolean;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Updates the assignment file.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	update(versionComments: string, forceSave?: boolean): void;
	/** Deletes the assignment and its file. */
	remove(): void;
	/**
	 * Creates an assignment package.
	 * @param {File} filePath - The full path name of the 
	 * assignment package file.
	 * @param {boolean} submit - If true, submits assigned stories 
	 * before packaging the assignment. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Assignment (Optional)
	 */
	createPackage(filePath: File, submit?: boolean, withProperties?: Object): File;
	/** Cancels the package for an assignment. */
	cancelPackage(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Assignment.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Assignment;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of assignments.
 * @class
 */
export declare class Assignments {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new assignment.
	 * @param {File} filePath - The full path name of the new 
	 * assignment.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Assignment (Optional)
	 */
	add(filePath: File, versionComments: string, forceSave?: boolean, withProperties?: Object): Assignment;
	/** Displays the number of elements in the Assignment. */
	count(): number;
	/**
	 * Returns the Assignment with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Assignment;
	/**
	 * Returns the Assignment with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Assignment;
	/**
	 * Returns the Assignment with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Assignment;
	/**
	 * Returns the Assignments within the specified range.
	 * @param {any} _from - The Assignment, index, or name at the 
	 * beginning of the range. Can accept: Assignment, Long Integer 
	 * or String.
	 * @param {any} to - The Assignment, index, or name at the end 
	 * of the range. Can accept: Assignment, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): Assignment;
	/** Returns the first Assignment in the collection. */
	firstItem(): Assignment;
	/** Returns the last Assignment in the collection. */
	lastItem(): Assignment;
	/** Returns the middle Assignment in the collection. */
	middleItem(): Assignment;
	/**
	 * Returns the Assignment with the index previous to the 
	 * specified index.
	 * @param {Assignment} obj - The index of the Assignment that 
	 * follows the desired Assignment.
	 */
	previousItem(obj: Assignment): Assignment;
	/**
	 * Returns the Assignment whose index follows the specified 
	 * Assignment in the collection.
	 * @param {Assignment} obj - The Assignment whose index comes 
	 * before the desired Assignment.
	 */
	nextItem(obj: Assignment): Assignment;
	/** Returns any Assignment in the collection. */
	anyItem(): Assignment;
	/** Returns every Assignment in the collection. */
	everyItem(): Assignment;
	/**
	 * Generates a string which, if executed, will return the 
	 * Assignment.
	 */
	toSource(): string;
	/**
	 * Returns the Assignment with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Assignment;
}

/**
 * An assigned story.
 * @class
 */
export declare class AssignedStory {
	/**
	 * A reference to the assigned story. Can return: Story, 
	 * PageItem, Oval, Rectangle or Polygon.
	 */
	readonly storyReference: any;
	/**
	 * The file path (colon delimited on the Mac OS). Can also 
	 * accept: File.
	 */
	readonly filePath: string;
	/** The unique ID of the AssignedStory. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the AssignedStory (a Assignment). */
	readonly parent: Assignment;
	/**
	 * The index of the AssignedStory within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the AssignedStory. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Moves the assigned story to the specified location.
	 * @param {LocationOptions} to - The location of the assigned 
	 * story relative to the reference object or within the 
	 * containing object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Assignment or AssignedStory. (Optional)
	 */
	move(to?: LocationOptions, reference?: any): AssignedStory;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * AssignedStory.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): AssignedStory;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of assigned stories.
 * @class
 */
export declare class AssignedStories {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the AssignedStory. */
	count(): number;
	/**
	 * Returns the AssignedStory with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): AssignedStory;
	/**
	 * Returns the AssignedStory with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): AssignedStory;
	/**
	 * Returns the AssignedStory with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): AssignedStory;
	/**
	 * Returns the AssignedStories within the specified range.
	 * @param {any} _from - The AssignedStory, index, or name at 
	 * the beginning of the range. Can accept: AssignedStory, Long 
	 * Integer or String.
	 * @param {any} to - The AssignedStory, index, or name at the 
	 * end of the range. Can accept: AssignedStory, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): AssignedStory;
	/** Returns the first AssignedStory in the collection. */
	firstItem(): AssignedStory;
	/** Returns the last AssignedStory in the collection. */
	lastItem(): AssignedStory;
	/** Returns the middle AssignedStory in the collection. */
	middleItem(): AssignedStory;
	/**
	 * Returns the AssignedStory with the index previous to the 
	 * specified index.
	 * @param {AssignedStory} obj - The index of the AssignedStory 
	 * that follows the desired AssignedStory.
	 */
	previousItem(obj: AssignedStory): AssignedStory;
	/**
	 * Returns the AssignedStory whose index follows the specified 
	 * AssignedStory in the collection.
	 * @param {AssignedStory} obj - The AssignedStory whose index 
	 * comes before the desired AssignedStory.
	 */
	nextItem(obj: AssignedStory): AssignedStory;
	/** Returns any AssignedStory in the collection. */
	anyItem(): AssignedStory;
	/** Returns every AssignedStory in the collection. */
	everyItem(): AssignedStory;
	/**
	 * Generates a string which, if executed, will return the 
	 * AssignedStory.
	 */
	toSource(): string;
	/**
	 * Returns the AssignedStory with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: AssignedStory;
}

/**
 * A print event
 * @class
 * @extends Event
 */
export declare class PrintEvent extends Event {
	/**
	 * Dispatched before a PrintEvent is printed. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_PRINT: string;
	/**
	 * Dispatched after a PrintEvent is printed. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_PRINT: string;
	/** The name of the event. */
	readonly eventType: string;
	/** The target of the event. */
	readonly target: Object;
	/** The current propagation target of the event. */
	readonly currentTarget: Object;
	/** The current propagation phase of the event. */
	readonly eventPhase: EventPhases;
	/**
	 * If true, the event supports the bubbling phase of 
	 * propagation.
	 */
	readonly bubbles: boolean;
	/**
	 * If true, the default behavior of the event on its target can 
	 * be canceled.
	 */
	readonly cancelable: boolean;
	/** The time the event was initialized. */
	readonly timeStamp: Date;
	/**
	 * If true, propagation of the event beyond the current target 
	 * has been stopped.
	 */
	readonly propagationStopped: boolean;
	/**
	 * If true, the default behavior of the event on its target has 
	 * been canceled.
	 */
	readonly defaultPrevented: boolean;
	/** The unique ID of the PrintEvent. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PrintEvent (a Document). */
	readonly parent: Document;
	/** The index of the PrintEvent within its containing object. */
	readonly index: number;
	/** UI options for print document */
	documentPrintUiOption: DocumentPrintUiOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Stops propagation of the event beyond the current target. */
	stopPropagation(): void;
	/** Cancels the default behavior of the event on its target. */
	preventDefault(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * PrintEvent.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PrintEvent;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
}

/**
 * Represents the place gun.
 * @class
 * @extends Preference
 */
export declare class PlaceGun extends Preference {
	/**
	 * Whether the place gun is currently loaded with content for 
	 * placing.
	 */
	readonly loaded: boolean;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PlaceGun (a Document). */
	readonly parent: Document;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of groups. */
	readonly groups: Groups;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** Imported InDesign pages. */
	readonly importedPages: ImportedPages;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of IDML snippets. */
	readonly snippets: Snippets;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Delete the contents of the place gun. */
	abortPlaceGun(): void;
	/**
	 * Rotate the contents of the place gun.
	 * @param {RotationDirection} direction - Which direction to 
	 * rotate the contents (Optional)
	 */
	rotate(direction?: RotationDirection): void;
	/**
	 * Load the place gun with one or more files.
	 * @param {any} fileName - One or more files to place. Can 
	 * accept: File or Array of Files.
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	loadPlaceGun(fileName: any, showingOptions?: boolean, withProperties?: Object): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * PlaceGun.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PlaceGun;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * An event listener.
 * @class
 */
export declare class EventListener {
	/** The name of the event. */
	readonly eventType: string;
	/**
	 * The handler to invoke when the event occurs. Can return: 
	 * File or JavaScript Function.
	 */
	readonly handler: any;
	/** The unique ID of the EventListener. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the EventListener (a Object, UIDBasedObject, 
	 * CellStyleGroup, CellStyle, TableStyleGroup, Article, 
	 * ConditionSet, HiddenText, Condition, MotionPreset, 
	 * AssignedStory, Assignment, ObjectStyleGroup, ObjectStyle, 
	 * NumberingList, Snippet, Dialog, ColorGroup, Swatch, Color, 
	 * Tint, Gradient, MixedInkGroup, MixedInk, Behavior, 
	 * SubmitFormBehavior, PrintFormBehavior, ClearFormBehavior, 
	 * GotoPageBehavior, GotoAnchorBehavior, SoundBehavior, 
	 * ViewZoomBehavior, GotoStateBehavior, 
	 * GotoPreviousStateBehavior, GotoNextStateBehavior, 
	 * OpenFileBehavior, AnimationBehavior, ShowHideFieldsBehavior, 
	 * MovieBehavior, GotoURLBehavior, GotoPreviousViewBehavior, 
	 * GotoNextViewBehavior, GotoPreviousPageBehavior, 
	 * GotoNextPageBehavior, GotoLastPageBehavior, 
	 * GotoFirstPageBehavior, PreflightProfileRule, 
	 * PreflightRuleInstance, PreflightProfile, 
	 * CrossReferenceFormat, HyperlinkURLDestination, 
	 * HyperlinkExternalPageDestination, HyperlinkPageDestination, 
	 * HyperlinkTextDestination, ParagraphDestination, 
	 * HyperlinkTextSource, CrossReferenceSource, 
	 * HyperlinkPageItemSource, Bookmark, Hyperlink, IndexSection, 
	 * PageReference, CrossReference, Index, TOCStyle, 
	 * FlattenerPreset, BookContent, MenuAction, ScriptMenuAction, 
	 * NamedGrid, CompositeFontEntry, CompositeFont, 
	 * CharacterStyleGroup, ParagraphStyleGroup, 
	 * TextVariableInstance, Footnote, XMLRuleProcessor, XMLTag, 
	 * Note, TableStyle, TextPath, Asset, Link, Section, 
	 * MojikumiTable, KinsokuTable, Guide, LanguageWithVendors, 
	 * Language, PageItem, HtmlItem, FormField, SignatureField, 
	 * TextBox, RadioButton, ListBox, ComboBox, CheckBox, 
	 * MultiStateObject, Button, MediaItem, Sound, Movie, EPSText, 
	 * SplineItem, Polygon, GraphicLine, Rectangle, Oval, Graphic, 
	 * ImportedPage, PICT, WMF, PDF, EPS, Image, Group, TextFrame, 
	 * MasterSpread, TrapPreset, Ink, DocumentPreset, Page, Spread, 
	 * Layer, CharacterStyle, ParagraphStyle, Story, XmlStory, 
	 * IDBasedObject, ArticleChild, ArticleMember, DialogRow, 
	 * DialogColumn, Widget, BorderPanel, MeasurementEditbox, 
	 * MeasurementCombobox, RealCombobox, AngleEditbox, 
	 * PercentEditbox, RealEditbox, PercentCombobox, AngleCombobox, 
	 * EnablingGroup, IntegerCombobox, IntegerEditbox, 
	 * RadiobuttonControl, RadiobuttonGroup, CheckboxControl, 
	 * Dropdown, StaticText, TextEditbox, ColorGroupSwatch, 
	 * BackgroundTask, State, RuleDataObject, XMLItem, DTD, 
	 * XMLInstruction, XMLComment, XMLElement, Table, Cell, 
	 * IdleTask, StrokeStyle, StripedStrokeStyle, 
	 * DottedStrokeStyle, DashedStrokeStyle, GraphicLayer, 
	 * NonIDBasedObject, TableStyleMapping, CharStyleMapping, 
	 * CellStyleMapping, ParaStyleMapping, TimingTarget, 
	 * TimingGroup, TimingList, OpacityGradientStop, 
	 * ObjectStyleExportTagMap, DataMergeQrcodePlaceholder, 
	 * DataMergeField, DataMergeImagePlaceholder, 
	 * DataMergeTextPlaceholder, Panel, LibraryPanel, PagesPanel, 
	 * Window, StoryWindow, LayoutWindow, NavigationPoint, 
	 * PreflightProcess, PreflightRule, BuildingBlock, 
	 * DisplaySetting, IndexingSortOption, Topic, TOCStyleEntry, 
	 * MenuElement, MenuSeparator, MenuItem, Submenu, Menu, 
	 * StyleExportTagMap, TextVariable, XMLRuleMatchData, 
	 * ValidationError, XMLExportMap, XMLImportMap, XMLAttribute, 
	 * PrinterPreset, Row, Column, Change, RootObject, Document, 
	 * Application, Book, Library, Preference, ContentPlacerObject, 
	 * LinkedPageItemOption, LinkedStoryOption, 
	 * PublishExportPreference, HTMLFXLExportPreference, 
	 * EPubExportPreviewAppPreference, 
	 * EPubFixedLayoutExportPreference, HTMLExportPreference, 
	 * EPubExportPreference, ConditionalTextPreference, 
	 * TimingSetting, AnimationSetting, XFLExportPreference, 
	 * SWFExportPreference, AlignDistributePreference, 
	 * TypeContextualUiPreference, GrabberPreference, 
	 * ObjectStyleContentEffectsCategorySettings, 
	 * ObjectStyleFillEffectsCategorySettings, 
	 * ObjectStyleStrokeEffectsCategorySettings, 
	 * ObjectStyleObjectEffectsCategorySettings, 
	 * ChapterNumberPreference, NumberingRestartPolicy, Bullet, 
	 * DataMerge, DataMergeOption, DataMergePreference, 
	 * JPEGExportPreference, TrackChangesPreference, 
	 * NotePreference, TransformPreference, ClipboardPreference, 
	 * GeneralPreference, WatermarkPreference, ButtonPreference, 
	 * PNGExportPreference, PreflightBookOption, PreflightOption, 
	 * XMLViewPreference, GpuPerformancePreference, 
	 * DisplayPerformancePreference, IndexOptions, LinkMetadata, 
	 * MetadataPreference, ExcelImportPreference, 
	 * TaggedTextImportPreference, TaggedTextExportPreference, 
	 * WordRTFImportPreference, TextExportPreference, 
	 * TextImportPreference, FindChangeContentTransparencySetting, 
	 * FindChangeFillTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeTransparencySetting, GradientFeatherSetting, 
	 * FindChangeGradientFeatherSetting, DirectionalFeatherSetting, 
	 * FindChangeDirectionalFeatherSetting, 
	 * ContentTransparencySetting, SatinSetting, 
	 * FindChangeSatinSetting, BevelAndEmbossSetting, 
	 * FindChangeBevelAndEmbossSetting, InnerGlowSetting, 
	 * FindChangeInnerGlowSetting, OuterGlowSetting, 
	 * FindChangeOuterGlowSetting, InnerShadowSetting, 
	 * FindChangeInnerShadowSetting, FeatherSetting, 
	 * FindChangeFeatherSetting, DropShadowSetting, 
	 * FindChangeDropShadowSetting, BlendingSetting, 
	 * FindChangeBlendingSetting, FillTransparencySetting, 
	 * StrokeTransparencySetting, TransparencySetting, 
	 * TransparencyPreference, FlattenerPreference, 
	 * GalleyPreference, GridPrintingPreference, CjkGridPreference, 
	 * StoryGridDataInformation, LayoutGridDataInformation, 
	 * GridDataInformation, CaptionMetadataVariablePreference, 
	 * CustomTextVariablePreference, MatchParagraphStylePreference, 
	 * MatchCharacterStylePreference, FileNameVariablePreference, 
	 * DateVariablePreference, ChapterNumberVariablePreference, 
	 * PageNumberVariablePreference, FootnoteOption, 
	 * BaselineFrameGridOption, AnchoredObjectSetting, 
	 * AnchoredObjectDefault, ExportForWebPreference, 
	 * XMLPreference, XMLExportPreference, XMLImportPreference, 
	 * InCopyExportOption, LinkingPreference, 
	 * ChangeTransliteratePreference, ChangeObjectPreference, 
	 * ChangeGlyphPreference, ChangeGrepPreference, 
	 * ChangeTextPreference, FindTransliteratePreference, 
	 * FindObjectPreference, FindGlyphPreference, 
	 * FindGrepPreference, FindTextPreference, 
	 * FindChangeTransliterateOption, FindChangeObjectOption, 
	 * FindChangeGlyphOption, FindChangeGrepOption, 
	 * FindChangeTextOption, ColorSetting, ScriptArg, 
	 * ScriptPreference, PlaceGun, LayoutAdjustmentPreference, 
	 * StrokeFillProxySetting, ImportedPageAttribute, 
	 * EPSImportPreference, SmartGuidePreference, 
	 * AutoCorrectPreference, SpellPreference, PolygonPreference, 
	 * DictionaryPreference, FontLockingPreference, 
	 * MojikumiUiPreference, ContourOption, TextWrapPreference, 
	 * TextEditingPreference, FrameFittingOption, 
	 * ObjectExportOption, PageItemDefault, 
	 * TextFrameFootnoteOptionsObject, TaggedPDFPreference, 
	 * InteractivePDFExportPreference, PDFAttribute, 
	 * PDFPlacePreference, PDFExportPreference, IMEPreference, 
	 * GraphicLayerOption, ClippingPathSettings, ImageIOPreference, 
	 * ImagePreference, ToolBox, EPSExportPreference, 
	 * PrintBookletPrintPreference, PrintBookletOption, 
	 * PrintPreference, ViewPreference, PasteboardPreference, 
	 * MarginPreference, GuidePreference, GridPreference, 
	 * DocumentPreference, TextDefault, TextPreference, 
	 * TextFramePreference, StoryPreference, PathPoint, Path, 
	 * GradientStop, AutoCorrectTable, UserDictionary, 
	 * HyphenationException, Font, TransformationMatrix, 
	 * PDFExportPreset, NestedStyle, TabStop, Text, InsertionPoint, 
	 * TextStyleRange, Paragraph, TextColumn, Line, Word, 
	 * Character, NestedGrepStyle or NestedLineStyle).
	 */
	readonly parent: any;
	/**
	 * The index of the EventListener within its containing object.
	 */
	readonly index: number;
	/**
	 * The name of the EventListener; this is an alias to the 
	 * EventListener's label property.
	 */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/** Deletes the EventListener. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * EventListener.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): EventListener;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
}

/**
 * A collection of event listeners.
 * @class
 */
export declare class EventListeners {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new EventListener (Optional)
	 */
	add(eventType: string, handler: any, captures?: boolean, withProperties?: Object): EventListener;
	/** Displays the number of elements in the EventListener. */
	count(): number;
	/**
	 * Returns the EventListener with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): EventListener;
	/**
	 * Returns the EventListener with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): EventListener;
	/**
	 * Returns the EventListener with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): EventListener;
	/**
	 * Returns the EventListeners within the specified range.
	 * @param {any} _from - The EventListener, index, or name at 
	 * the beginning of the range. Can accept: EventListener, Long 
	 * Integer or String.
	 * @param {any} to - The EventListener, index, or name at the 
	 * end of the range. Can accept: EventListener, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): EventListener;
	/** Returns the first EventListener in the collection. */
	firstItem(): EventListener;
	/** Returns the last EventListener in the collection. */
	lastItem(): EventListener;
	/** Returns the middle EventListener in the collection. */
	middleItem(): EventListener;
	/**
	 * Returns the EventListener with the index previous to the 
	 * specified index.
	 * @param {EventListener} obj - The index of the EventListener 
	 * that follows the desired EventListener.
	 */
	previousItem(obj: EventListener): EventListener;
	/**
	 * Returns the EventListener whose index follows the specified 
	 * EventListener in the collection.
	 * @param {EventListener} obj - The EventListener whose index 
	 * comes before the desired EventListener.
	 */
	nextItem(obj: EventListener): EventListener;
	/** Returns any EventListener in the collection. */
	anyItem(): EventListener;
	/** Returns every EventListener in the collection. */
	everyItem(): EventListener;
	/**
	 * Generates a string which, if executed, will return the 
	 * EventListener.
	 */
	toSource(): string;
	/**
	 * Returns the EventListener with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: EventListener;
}

/**
 * An event.
 * @class
 */
export declare class Event {
	/**
	 * Dispatched before a Event is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Event is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/**
	 * Dispatched after one or more links in the Event have been 
	 * added, deleted, or modified. This event bubbles. This event 
	 * is not cancelable.
	 */
	readonly AFTER_LINKS_CHANGED: string;
	/**
	 * Dispatched after a Event is created. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_NEW: string;
	/**
	 * Dispatched before a Event is deleted. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_DELETE: string;
	/**
	 * Dispatched after a Event is deleted. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_DELETE: string;
	/**
	 * Dispatched before a Event is updated. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_UPDATE: string;
	/**
	 * Dispatched after a Event is updated. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_UPDATE: string;
	/**
	 * Dispatched before a Event is embedded. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_EMBED: string;
	/**
	 * Dispatched after a Event is embedded. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_EMBED: string;
	/**
	 * Dispatched before a Event is unembedded. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_UNEMBED: string;
	/**
	 * Dispatched after a Event is unembedded. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_UNEMBED: string;
	/**
	 * Dispatched before a Event is relocated from one object to 
	 * another. This event bubbles. This event is cancelable.
	 */
	readonly BEFORE_MOVE: string;
	/**
	 * Dispatched after a Event is relocated from one object to 
	 * another. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_MOVE: string;
	/**
	 * Dispatched when the Event is invoked. This event does not 
	 * bubble. This event is not cancelable.
	 */
	readonly ON_INVOKE: string;
	/**
	 * Dispatched before the Event is invoked. This event does not 
	 * bubble. This event is cancelable.
	 */
	readonly BEFORE_INVOKE: string;
	/**
	 * Dispatched after the Event is invoked. This event does not 
	 * bubble. This event is not cancelable.
	 */
	readonly AFTER_INVOKE: string;
	/**
	 * Dispatched before the Event is displayed. This event does 
	 * not bubble. This event is not cancelable.
	 */
	readonly BEFORE_DISPLAY: string;
	/**
	 * Dispatched before the Event is quit. Allows the quit to be 
	 * canceled. This event bubbles. This event is cancelable.
	 */
	readonly BEFORE_QUIT: string;
	/**
	 * Dispatched when the Event is quitting. Since the quit has 
	 * been committed, it can not be canceled. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_QUIT: string;
	/**
	 * Dispatched after the active context changes. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_CONTEXT_CHANGED: string;
	/**
	 * Dispatched after the active selection changes. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_SELECTION_CHANGED: string;
	/**
	 * Dispatched after an attribute on the active selection 
	 * changes. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_SELECTION_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched before the Event becomes inactive. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly BEFORE_DEACTIVATE: string;
	/**
	 * Dispatched after the Event becomes active. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_ACTIVATE: string;
	/**
	 * Dispatched after a Event is opened. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_OPEN: string;
	/**
	 * Dispatched before a Event is closed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_CLOSE: string;
	/**
	 * Dispatched when a Event is closing. Since the close has been 
	 * committed, it can no longer be canceled. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_CLOSE: string;
	/** The name of the event. */
	readonly eventType: string;
	/** The target of the event. */
	readonly target: Object;
	/** The current propagation target of the event. */
	readonly currentTarget: Object;
	/** The current propagation phase of the event. */
	readonly eventPhase: EventPhases;
	/**
	 * If true, the event supports the bubbling phase of 
	 * propagation.
	 */
	readonly bubbles: boolean;
	/**
	 * If true, the default behavior of the event on its target can 
	 * be canceled.
	 */
	readonly cancelable: boolean;
	/** The time the event was initialized. */
	readonly timeStamp: Date;
	/**
	 * If true, propagation of the event beyond the current target 
	 * has been stopped.
	 */
	readonly propagationStopped: boolean;
	/**
	 * If true, the default behavior of the event on its target has 
	 * been canceled.
	 */
	readonly defaultPrevented: boolean;
	/** The unique ID of the Event. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Event (a Object, UIDBasedObject, 
	 * CellStyleGroup, CellStyle, TableStyleGroup, Article, 
	 * ConditionSet, HiddenText, Condition, MotionPreset, 
	 * AssignedStory, Assignment, ObjectStyleGroup, ObjectStyle, 
	 * NumberingList, Snippet, Dialog, ColorGroup, Swatch, Color, 
	 * Tint, Gradient, MixedInkGroup, MixedInk, Behavior, 
	 * SubmitFormBehavior, PrintFormBehavior, ClearFormBehavior, 
	 * GotoPageBehavior, GotoAnchorBehavior, SoundBehavior, 
	 * ViewZoomBehavior, GotoStateBehavior, 
	 * GotoPreviousStateBehavior, GotoNextStateBehavior, 
	 * OpenFileBehavior, AnimationBehavior, ShowHideFieldsBehavior, 
	 * MovieBehavior, GotoURLBehavior, GotoPreviousViewBehavior, 
	 * GotoNextViewBehavior, GotoPreviousPageBehavior, 
	 * GotoNextPageBehavior, GotoLastPageBehavior, 
	 * GotoFirstPageBehavior, PreflightProfileRule, 
	 * PreflightRuleInstance, PreflightProfile, 
	 * CrossReferenceFormat, HyperlinkURLDestination, 
	 * HyperlinkExternalPageDestination, HyperlinkPageDestination, 
	 * HyperlinkTextDestination, ParagraphDestination, 
	 * HyperlinkTextSource, CrossReferenceSource, 
	 * HyperlinkPageItemSource, Bookmark, Hyperlink, IndexSection, 
	 * PageReference, CrossReference, Index, TOCStyle, 
	 * FlattenerPreset, BookContent, MenuAction, ScriptMenuAction, 
	 * NamedGrid, CompositeFontEntry, CompositeFont, 
	 * CharacterStyleGroup, ParagraphStyleGroup, 
	 * TextVariableInstance, Footnote, XMLRuleProcessor, XMLTag, 
	 * Note, TableStyle, TextPath, Asset, Link, Section, 
	 * MojikumiTable, KinsokuTable, Guide, LanguageWithVendors, 
	 * Language, PageItem, HtmlItem, FormField, SignatureField, 
	 * TextBox, RadioButton, ListBox, ComboBox, CheckBox, 
	 * MultiStateObject, Button, MediaItem, Sound, Movie, EPSText, 
	 * SplineItem, Polygon, GraphicLine, Rectangle, Oval, Graphic, 
	 * ImportedPage, PICT, WMF, PDF, EPS, Image, Group, TextFrame, 
	 * MasterSpread, TrapPreset, Ink, DocumentPreset, Page, Spread, 
	 * Layer, CharacterStyle, ParagraphStyle, Story, XmlStory, 
	 * IDBasedObject, ArticleChild, ArticleMember, DialogRow, 
	 * DialogColumn, Widget, BorderPanel, MeasurementEditbox, 
	 * MeasurementCombobox, RealCombobox, AngleEditbox, 
	 * PercentEditbox, RealEditbox, PercentCombobox, AngleCombobox, 
	 * EnablingGroup, IntegerCombobox, IntegerEditbox, 
	 * RadiobuttonControl, RadiobuttonGroup, CheckboxControl, 
	 * Dropdown, StaticText, TextEditbox, ColorGroupSwatch, 
	 * BackgroundTask, State, RuleDataObject, XMLItem, DTD, 
	 * XMLInstruction, XMLComment, XMLElement, Table, Cell, 
	 * IdleTask, StrokeStyle, StripedStrokeStyle, 
	 * DottedStrokeStyle, DashedStrokeStyle, GraphicLayer, 
	 * NonIDBasedObject, TableStyleMapping, CharStyleMapping, 
	 * CellStyleMapping, ParaStyleMapping, TimingTarget, 
	 * TimingGroup, TimingList, OpacityGradientStop, 
	 * ObjectStyleExportTagMap, DataMergeQrcodePlaceholder, 
	 * DataMergeField, DataMergeImagePlaceholder, 
	 * DataMergeTextPlaceholder, Panel, LibraryPanel, PagesPanel, 
	 * Window, StoryWindow, LayoutWindow, NavigationPoint, 
	 * PreflightProcess, PreflightRule, BuildingBlock, 
	 * DisplaySetting, IndexingSortOption, Topic, TOCStyleEntry, 
	 * MenuElement, MenuSeparator, MenuItem, Submenu, Menu, 
	 * StyleExportTagMap, TextVariable, XMLRuleMatchData, 
	 * ValidationError, XMLExportMap, XMLImportMap, XMLAttribute, 
	 * PrinterPreset, Row, Column, Change, RootObject, Document, 
	 * Application, Book, Library, Preference, ContentPlacerObject, 
	 * LinkedPageItemOption, LinkedStoryOption, 
	 * PublishExportPreference, HTMLFXLExportPreference, 
	 * EPubExportPreviewAppPreference, 
	 * EPubFixedLayoutExportPreference, HTMLExportPreference, 
	 * EPubExportPreference, ConditionalTextPreference, 
	 * TimingSetting, AnimationSetting, XFLExportPreference, 
	 * SWFExportPreference, AlignDistributePreference, 
	 * TypeContextualUiPreference, GrabberPreference, 
	 * ObjectStyleContentEffectsCategorySettings, 
	 * ObjectStyleFillEffectsCategorySettings, 
	 * ObjectStyleStrokeEffectsCategorySettings, 
	 * ObjectStyleObjectEffectsCategorySettings, 
	 * ChapterNumberPreference, NumberingRestartPolicy, Bullet, 
	 * DataMerge, DataMergeOption, DataMergePreference, 
	 * JPEGExportPreference, TrackChangesPreference, 
	 * NotePreference, TransformPreference, ClipboardPreference, 
	 * GeneralPreference, WatermarkPreference, ButtonPreference, 
	 * PNGExportPreference, PreflightBookOption, PreflightOption, 
	 * XMLViewPreference, GpuPerformancePreference, 
	 * DisplayPerformancePreference, IndexOptions, LinkMetadata, 
	 * MetadataPreference, ExcelImportPreference, 
	 * TaggedTextImportPreference, TaggedTextExportPreference, 
	 * WordRTFImportPreference, TextExportPreference, 
	 * TextImportPreference, FindChangeContentTransparencySetting, 
	 * FindChangeFillTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeTransparencySetting, GradientFeatherSetting, 
	 * FindChangeGradientFeatherSetting, DirectionalFeatherSetting, 
	 * FindChangeDirectionalFeatherSetting, 
	 * ContentTransparencySetting, SatinSetting, 
	 * FindChangeSatinSetting, BevelAndEmbossSetting, 
	 * FindChangeBevelAndEmbossSetting, InnerGlowSetting, 
	 * FindChangeInnerGlowSetting, OuterGlowSetting, 
	 * FindChangeOuterGlowSetting, InnerShadowSetting, 
	 * FindChangeInnerShadowSetting, FeatherSetting, 
	 * FindChangeFeatherSetting, DropShadowSetting, 
	 * FindChangeDropShadowSetting, BlendingSetting, 
	 * FindChangeBlendingSetting, FillTransparencySetting, 
	 * StrokeTransparencySetting, TransparencySetting, 
	 * TransparencyPreference, FlattenerPreference, 
	 * GalleyPreference, GridPrintingPreference, CjkGridPreference, 
	 * StoryGridDataInformation, LayoutGridDataInformation, 
	 * GridDataInformation, CaptionMetadataVariablePreference, 
	 * CustomTextVariablePreference, MatchParagraphStylePreference, 
	 * MatchCharacterStylePreference, FileNameVariablePreference, 
	 * DateVariablePreference, ChapterNumberVariablePreference, 
	 * PageNumberVariablePreference, FootnoteOption, 
	 * BaselineFrameGridOption, AnchoredObjectSetting, 
	 * AnchoredObjectDefault, ExportForWebPreference, 
	 * XMLPreference, XMLExportPreference, XMLImportPreference, 
	 * InCopyExportOption, LinkingPreference, 
	 * ChangeTransliteratePreference, ChangeObjectPreference, 
	 * ChangeGlyphPreference, ChangeGrepPreference, 
	 * ChangeTextPreference, FindTransliteratePreference, 
	 * FindObjectPreference, FindGlyphPreference, 
	 * FindGrepPreference, FindTextPreference, 
	 * FindChangeTransliterateOption, FindChangeObjectOption, 
	 * FindChangeGlyphOption, FindChangeGrepOption, 
	 * FindChangeTextOption, ColorSetting, ScriptArg, 
	 * ScriptPreference, PlaceGun, LayoutAdjustmentPreference, 
	 * StrokeFillProxySetting, ImportedPageAttribute, 
	 * EPSImportPreference, SmartGuidePreference, 
	 * AutoCorrectPreference, SpellPreference, PolygonPreference, 
	 * DictionaryPreference, FontLockingPreference, 
	 * MojikumiUiPreference, ContourOption, TextWrapPreference, 
	 * TextEditingPreference, FrameFittingOption, 
	 * ObjectExportOption, PageItemDefault, 
	 * TextFrameFootnoteOptionsObject, TaggedPDFPreference, 
	 * InteractivePDFExportPreference, PDFAttribute, 
	 * PDFPlacePreference, PDFExportPreference, IMEPreference, 
	 * GraphicLayerOption, ClippingPathSettings, ImageIOPreference, 
	 * ImagePreference, ToolBox, EPSExportPreference, 
	 * PrintBookletPrintPreference, PrintBookletOption, 
	 * PrintPreference, ViewPreference, PasteboardPreference, 
	 * MarginPreference, GuidePreference, GridPreference, 
	 * DocumentPreference, TextDefault, TextPreference, 
	 * TextFramePreference, StoryPreference, PathPoint, Path, 
	 * GradientStop, AutoCorrectTable, UserDictionary, 
	 * HyphenationException, Font, TransformationMatrix, 
	 * PDFExportPreset, NestedStyle, TabStop, Text, InsertionPoint, 
	 * TextStyleRange, Paragraph, TextColumn, Line, Word, 
	 * Character, NestedGrepStyle or NestedLineStyle).
	 */
	readonly parent: any;
	/** The index of the Event within its containing object. */
	readonly index: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Stops propagation of the event beyond the current target. */
	stopPropagation(): void;
	/** Cancels the default behavior of the event on its target. */
	preventDefault(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * Event.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Event;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
}

/**
 * A collection of events.
 * @class
 */
export declare class Events {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Event. */
	count(): number;
	/**
	 * Returns the Event with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Event;
	/**
	 * Returns the Event with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Event;
	/**
	 * Returns the Events within the specified range.
	 * @param {any} _from - The Event, index, or name at the 
	 * beginning of the range. Can accept: Event, Long Integer or 
	 * String.
	 * @param {any} to - The Event, index, or name at the end of 
	 * the range. Can accept: Event, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Event;
	/** Returns the first Event in the collection. */
	firstItem(): Event;
	/** Returns the last Event in the collection. */
	lastItem(): Event;
	/** Returns the middle Event in the collection. */
	middleItem(): Event;
	/**
	 * Returns the Event with the index previous to the specified 
	 * index.
	 * @param {Event} obj - The index of the Event that follows the 
	 * desired Event.
	 */
	previousItem(obj: Event): Event;
	/**
	 * Returns the Event whose index follows the specified Event in 
	 * the collection.
	 * @param {Event} obj - The Event whose index comes before the 
	 * desired Event.
	 */
	nextItem(obj: Event): Event;
	/** Returns any Event in the collection. */
	anyItem(): Event;
	/** Returns every Event in the collection. */
	everyItem(): Event;
	/**
	 * Generates a string which, if executed, will return the 
	 * Event.
	 */
	toSource(): string;
	/**
	 * Returns the Event with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Event;
}

/**
 * An idle event.
 * @class
 * @extends Event
 */
export declare class IdleEvent extends Event {
	/**
	 * Dispatched at idle time for this IdleEvent. This event does 
	 * not bubble. This event is not cancelable.
	 */
	readonly ON_IDLE: string;
	/**
	 * Amount of time allocated to this task at the time the event 
	 * was dispatched.
	 */
	readonly timeAllocated: number;
	/** The name of the event. */
	readonly eventType: string;
	/** The target of the event. */
	readonly target: Object;
	/** The current propagation target of the event. */
	readonly currentTarget: Object;
	/** The current propagation phase of the event. */
	readonly eventPhase: EventPhases;
	/**
	 * If true, the event supports the bubbling phase of 
	 * propagation.
	 */
	readonly bubbles: boolean;
	/**
	 * If true, the default behavior of the event on its target can 
	 * be canceled.
	 */
	readonly cancelable: boolean;
	/** The time the event was initialized. */
	readonly timeStamp: Date;
	/**
	 * If true, propagation of the event beyond the current target 
	 * has been stopped.
	 */
	readonly propagationStopped: boolean;
	/**
	 * If true, the default behavior of the event on its target has 
	 * been canceled.
	 */
	readonly defaultPrevented: boolean;
	/** The unique ID of the IdleEvent. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the IdleEvent (a IdleTask). */
	readonly parent: IdleTask;
	/** The index of the IdleEvent within its containing object. */
	readonly index: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Stops propagation of the event beyond the current target. */
	stopPropagation(): void;
	/** Cancels the default behavior of the event on its target. */
	preventDefault(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * IdleEvent.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): IdleEvent;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
}

/**
 * A mutation event is dispatched for attribute changes.
 * @class
 * @extends Event
 */
export declare class MutationEvent extends Event {
	/**
	 * Dispatched when the value of a property changes on this 
	 * MutationEvent. This event bubbles. This event is not 
	 * cancelable.
	 */
	readonly AFTER_ATTRIBUTE_CHANGED: string;
	/** The name of the property that changed. */
	readonly attributeName: string;
	/** The current value of the property that changed. */
	readonly attributeValue: any;
	/** The name of the event. */
	readonly eventType: string;
	/** The target of the event. */
	readonly target: Object;
	/** The current propagation target of the event. */
	readonly currentTarget: Object;
	/** The current propagation phase of the event. */
	readonly eventPhase: EventPhases;
	/**
	 * If true, the event supports the bubbling phase of 
	 * propagation.
	 */
	readonly bubbles: boolean;
	/**
	 * If true, the default behavior of the event on its target can 
	 * be canceled.
	 */
	readonly cancelable: boolean;
	/** The time the event was initialized. */
	readonly timeStamp: Date;
	/**
	 * If true, propagation of the event beyond the current target 
	 * has been stopped.
	 */
	readonly propagationStopped: boolean;
	/**
	 * If true, the default behavior of the event on its target has 
	 * been canceled.
	 */
	readonly defaultPrevented: boolean;
	/** The unique ID of the MutationEvent. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MutationEvent (a Object, UIDBasedObject, 
	 * CellStyleGroup, CellStyle, TableStyleGroup, Article, 
	 * ConditionSet, HiddenText, Condition, MotionPreset, 
	 * AssignedStory, Assignment, ObjectStyleGroup, ObjectStyle, 
	 * NumberingList, Snippet, Dialog, ColorGroup, Swatch, Color, 
	 * Tint, Gradient, MixedInkGroup, MixedInk, Behavior, 
	 * SubmitFormBehavior, PrintFormBehavior, ClearFormBehavior, 
	 * GotoPageBehavior, GotoAnchorBehavior, SoundBehavior, 
	 * ViewZoomBehavior, GotoStateBehavior, 
	 * GotoPreviousStateBehavior, GotoNextStateBehavior, 
	 * OpenFileBehavior, AnimationBehavior, ShowHideFieldsBehavior, 
	 * MovieBehavior, GotoURLBehavior, GotoPreviousViewBehavior, 
	 * GotoNextViewBehavior, GotoPreviousPageBehavior, 
	 * GotoNextPageBehavior, GotoLastPageBehavior, 
	 * GotoFirstPageBehavior, PreflightProfileRule, 
	 * PreflightRuleInstance, PreflightProfile, 
	 * CrossReferenceFormat, HyperlinkURLDestination, 
	 * HyperlinkExternalPageDestination, HyperlinkPageDestination, 
	 * HyperlinkTextDestination, ParagraphDestination, 
	 * HyperlinkTextSource, CrossReferenceSource, 
	 * HyperlinkPageItemSource, Bookmark, Hyperlink, IndexSection, 
	 * PageReference, CrossReference, Index, TOCStyle, 
	 * FlattenerPreset, BookContent, MenuAction, ScriptMenuAction, 
	 * NamedGrid, CompositeFontEntry, CompositeFont, 
	 * CharacterStyleGroup, ParagraphStyleGroup, 
	 * TextVariableInstance, Footnote, XMLRuleProcessor, XMLTag, 
	 * Note, TableStyle, TextPath, Asset, Link, Section, 
	 * MojikumiTable, KinsokuTable, Guide, LanguageWithVendors, 
	 * Language, PageItem, HtmlItem, FormField, SignatureField, 
	 * TextBox, RadioButton, ListBox, ComboBox, CheckBox, 
	 * MultiStateObject, Button, MediaItem, Sound, Movie, EPSText, 
	 * SplineItem, Polygon, GraphicLine, Rectangle, Oval, Graphic, 
	 * ImportedPage, PICT, WMF, PDF, EPS, Image, Group, TextFrame, 
	 * MasterSpread, TrapPreset, Ink, DocumentPreset, Page, Spread, 
	 * Layer, CharacterStyle, ParagraphStyle, Story, XmlStory, 
	 * IDBasedObject, ArticleChild, ArticleMember, DialogRow, 
	 * DialogColumn, Widget, BorderPanel, MeasurementEditbox, 
	 * MeasurementCombobox, RealCombobox, AngleEditbox, 
	 * PercentEditbox, RealEditbox, PercentCombobox, AngleCombobox, 
	 * EnablingGroup, IntegerCombobox, IntegerEditbox, 
	 * RadiobuttonControl, RadiobuttonGroup, CheckboxControl, 
	 * Dropdown, StaticText, TextEditbox, ColorGroupSwatch, 
	 * BackgroundTask, State, RuleDataObject, XMLItem, DTD, 
	 * XMLInstruction, XMLComment, XMLElement, Table, Cell, 
	 * IdleTask, Event, ImportExportEvent, DocumentEvent, 
	 * MutationEvent, IdleEvent, PrintEvent, EventListener, 
	 * StrokeStyle, StripedStrokeStyle, DottedStrokeStyle, 
	 * DashedStrokeStyle, GraphicLayer, NonIDBasedObject, 
	 * TableStyleMapping, CharStyleMapping, CellStyleMapping, 
	 * ParaStyleMapping, TimingTarget, TimingGroup, TimingList, 
	 * OpacityGradientStop, ObjectStyleExportTagMap, 
	 * DataMergeQrcodePlaceholder, DataMergeField, 
	 * DataMergeImagePlaceholder, DataMergeTextPlaceholder, Panel, 
	 * LibraryPanel, PagesPanel, Window, StoryWindow, LayoutWindow, 
	 * NavigationPoint, PreflightProcess, PreflightRule, 
	 * BuildingBlock, DisplaySetting, IndexingSortOption, Topic, 
	 * TOCStyleEntry, MenuElement, MenuSeparator, MenuItem, 
	 * Submenu, Menu, StyleExportTagMap, TextVariable, 
	 * XMLRuleMatchData, ValidationError, XMLExportMap, 
	 * XMLImportMap, XMLAttribute, PrinterPreset, Row, Column, 
	 * Change, RootObject, Document, Application, Book, Library, 
	 * Preference, ContentPlacerObject, LinkedPageItemOption, 
	 * LinkedStoryOption, PublishExportPreference, 
	 * HTMLFXLExportPreference, EPubExportPreviewAppPreference, 
	 * EPubFixedLayoutExportPreference, HTMLExportPreference, 
	 * EPubExportPreference, ConditionalTextPreference, 
	 * TimingSetting, AnimationSetting, XFLExportPreference, 
	 * SWFExportPreference, AlignDistributePreference, 
	 * TypeContextualUiPreference, GrabberPreference, 
	 * ObjectStyleContentEffectsCategorySettings, 
	 * ObjectStyleFillEffectsCategorySettings, 
	 * ObjectStyleStrokeEffectsCategorySettings, 
	 * ObjectStyleObjectEffectsCategorySettings, 
	 * ChapterNumberPreference, NumberingRestartPolicy, Bullet, 
	 * DataMerge, DataMergeOption, DataMergePreference, 
	 * JPEGExportPreference, TrackChangesPreference, 
	 * NotePreference, TransformPreference, ClipboardPreference, 
	 * GeneralPreference, WatermarkPreference, ButtonPreference, 
	 * PNGExportPreference, PreflightBookOption, PreflightOption, 
	 * XMLViewPreference, GpuPerformancePreference, 
	 * DisplayPerformancePreference, IndexOptions, LinkMetadata, 
	 * MetadataPreference, ExcelImportPreference, 
	 * TaggedTextImportPreference, TaggedTextExportPreference, 
	 * WordRTFImportPreference, TextExportPreference, 
	 * TextImportPreference, FindChangeContentTransparencySetting, 
	 * FindChangeFillTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeTransparencySetting, GradientFeatherSetting, 
	 * FindChangeGradientFeatherSetting, DirectionalFeatherSetting, 
	 * FindChangeDirectionalFeatherSetting, 
	 * ContentTransparencySetting, SatinSetting, 
	 * FindChangeSatinSetting, BevelAndEmbossSetting, 
	 * FindChangeBevelAndEmbossSetting, InnerGlowSetting, 
	 * FindChangeInnerGlowSetting, OuterGlowSetting, 
	 * FindChangeOuterGlowSetting, InnerShadowSetting, 
	 * FindChangeInnerShadowSetting, FeatherSetting, 
	 * FindChangeFeatherSetting, DropShadowSetting, 
	 * FindChangeDropShadowSetting, BlendingSetting, 
	 * FindChangeBlendingSetting, FillTransparencySetting, 
	 * StrokeTransparencySetting, TransparencySetting, 
	 * TransparencyPreference, FlattenerPreference, 
	 * GalleyPreference, GridPrintingPreference, CjkGridPreference, 
	 * StoryGridDataInformation, LayoutGridDataInformation, 
	 * GridDataInformation, CaptionMetadataVariablePreference, 
	 * CustomTextVariablePreference, MatchParagraphStylePreference, 
	 * MatchCharacterStylePreference, FileNameVariablePreference, 
	 * DateVariablePreference, ChapterNumberVariablePreference, 
	 * PageNumberVariablePreference, FootnoteOption, 
	 * BaselineFrameGridOption, AnchoredObjectSetting, 
	 * AnchoredObjectDefault, ExportForWebPreference, 
	 * XMLPreference, XMLExportPreference, XMLImportPreference, 
	 * InCopyExportOption, LinkingPreference, 
	 * ChangeTransliteratePreference, ChangeObjectPreference, 
	 * ChangeGlyphPreference, ChangeGrepPreference, 
	 * ChangeTextPreference, FindTransliteratePreference, 
	 * FindObjectPreference, FindGlyphPreference, 
	 * FindGrepPreference, FindTextPreference, 
	 * FindChangeTransliterateOption, FindChangeObjectOption, 
	 * FindChangeGlyphOption, FindChangeGrepOption, 
	 * FindChangeTextOption, ColorSetting, ScriptArg, 
	 * ScriptPreference, PlaceGun, LayoutAdjustmentPreference, 
	 * StrokeFillProxySetting, ImportedPageAttribute, 
	 * EPSImportPreference, SmartGuidePreference, 
	 * AutoCorrectPreference, SpellPreference, PolygonPreference, 
	 * DictionaryPreference, FontLockingPreference, 
	 * MojikumiUiPreference, ContourOption, TextWrapPreference, 
	 * TextEditingPreference, FrameFittingOption, 
	 * ObjectExportOption, PageItemDefault, 
	 * TextFrameFootnoteOptionsObject, TaggedPDFPreference, 
	 * InteractivePDFExportPreference, PDFAttribute, 
	 * PDFPlacePreference, PDFExportPreference, IMEPreference, 
	 * GraphicLayerOption, ClippingPathSettings, ImageIOPreference, 
	 * ImagePreference, ToolBox, EPSExportPreference, 
	 * PrintBookletPrintPreference, PrintBookletOption, 
	 * PrintPreference, ViewPreference, PasteboardPreference, 
	 * MarginPreference, GuidePreference, GridPreference, 
	 * DocumentPreference, TextDefault, TextPreference, 
	 * TextFramePreference, StoryPreference, PathPoint, Path, 
	 * GradientStop, AutoCorrectTable, UserDictionary, 
	 * HyphenationException, Font, TransformationMatrix, 
	 * PDFExportPreset, NestedStyle, TabStop, Text, InsertionPoint, 
	 * TextStyleRange, Paragraph, TextColumn, Line, Word, 
	 * Character, NestedGrepStyle or NestedLineStyle).
	 */
	readonly parent: any;
	/**
	 * The index of the MutationEvent within its containing object.
	 */
	readonly index: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Stops propagation of the event beyond the current target. */
	stopPropagation(): void;
	/** Cancels the default behavior of the event on its target. */
	preventDefault(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * MutationEvent.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MutationEvent;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
}

/**
 * An attachable idle task.
 * @class
 */
export declare class IdleTask {
	/**
	 * Dispatched at idle time for this IdleTask. This event does 
	 * not bubble. This event is not cancelable.
	 */
	readonly ON_IDLE: string;
	/** The unique ID of the IdleTask. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the IdleTask (a Application). */
	readonly parent: Application;
	/** The index of the IdleTask within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the IdleTask. */
	name: string;
	/**
	 * Amount of time to sleep (in milliseconds) before calling 
	 * this task again. Setting this to zero will cause task to be 
	 * deleted.
	 */
	sleep: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the IdleTask. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * IdleTask.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): IdleTask;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * All attachable idle tasks.
 * @class
 */
export declare class IdleTasks {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new IdleTask.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new IdleTask (Optional)
	 */
	add(withProperties: Object): IdleTask;
	/** Displays the number of elements in the IdleTask. */
	count(): number;
	/**
	 * Returns the IdleTask with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): IdleTask;
	/**
	 * Returns the IdleTask with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): IdleTask;
	/**
	 * Returns the IdleTask with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): IdleTask;
	/**
	 * Returns the IdleTasks within the specified range.
	 * @param {any} _from - The IdleTask, index, or name at the 
	 * beginning of the range. Can accept: IdleTask, Long Integer 
	 * or String.
	 * @param {any} to - The IdleTask, index, or name at the end of 
	 * the range. Can accept: IdleTask, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): IdleTask;
	/** Returns the first IdleTask in the collection. */
	firstItem(): IdleTask;
	/** Returns the last IdleTask in the collection. */
	lastItem(): IdleTask;
	/** Returns the middle IdleTask in the collection. */
	middleItem(): IdleTask;
	/**
	 * Returns the IdleTask with the index previous to the 
	 * specified index.
	 * @param {IdleTask} obj - The index of the IdleTask that 
	 * follows the desired IdleTask.
	 */
	previousItem(obj: IdleTask): IdleTask;
	/**
	 * Returns the IdleTask whose index follows the specified 
	 * IdleTask in the collection.
	 * @param {IdleTask} obj - The IdleTask whose index comes 
	 * before the desired IdleTask.
	 */
	nextItem(obj: IdleTask): IdleTask;
	/** Returns any IdleTask in the collection. */
	anyItem(): IdleTask;
	/** Returns every IdleTask in the collection. */
	everyItem(): IdleTask;
	/**
	 * Generates a string which, if executed, will return the 
	 * IdleTask.
	 */
	toSource(): string;
	/**
	 * Returns the IdleTask with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: IdleTask;
}

/**
 * Arguments to pass to a script.
 * @class
 * @extends Preference
 */
export declare class ScriptArg extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ScriptArg (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Gets the value of a script argument.
	 * @param {string} name - The name of the script argument.
	 */
	get(name: string): string;
	/**
	 * Gets the value of a script argument.
	 * @param {string} name - The name of the script argument.
	 */
	getValue(name: string): string;
	/**
	 * Sets the value of a script argument.
	 * @param {string} name - The name of the script argument.
	 * @param {string} value - The value.
	 */
	set(name: string, value: string): void;
	/**
	 * Sets the value of a script argument.
	 * @param {string} name - The name of the script argument.
	 * @param {string} value - The value.
	 */
	setValue(name: string, value: string): void;
	/**
	 * Verifies whether the script argument is defined.
	 * @param {string} name - The name of the script argument.
	 */
	isDefined(name: string): boolean;
	/** Clears all script arguments. */
	clear(): void;
	/** Saves the script arguments. */
	save(): void;
	/** Restores all script arguments. */
	restore(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * ScriptArg.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ScriptArg;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The application.
 * @class
 */
export declare class Application {
	/**
	 * Dispatched before a Document is created. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_NEW: string;
	/**
	 * Dispatched before a Document is opened. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_OPEN: string;
	/**
	 * Dispatched after a Document is closed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_CLOSE: string;
	/**
	 * Dispatched after the active context changes. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_CONTEXT_CHANGED: string;
	/**
	 * Dispatched after the active selection changes. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_SELECTION_CHANGED: string;
	/**
	 * Dispatched after an attribute on the active selection 
	 * changes. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_SELECTION_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched before the Application becomes inactive. This 
	 * event bubbles. This event is not cancelable.
	 */
	readonly BEFORE_DEACTIVATE: string;
	/**
	 * Dispatched after the Application becomes active. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_ACTIVATE: string;
	/**
	 * Dispatched before the Application is quit. Allows the quit 
	 * to be canceled. This event bubbles. This event is 
	 * cancelable.
	 */
	readonly BEFORE_QUIT: string;
	/**
	 * Dispatched when the Application is quitting. Since the quit 
	 * has been committed, it can not be canceled. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_QUIT: string;
	/** The XML preference settings. */
	readonly xmlPreferences: XMLPreference;
	/** XML import preference settings. */
	readonly xmlImportPreferences: XMLImportPreference;
	/** XML export preference settings. */
	readonly xmlExportPreferences: XMLExportPreference;
	/** The default export for web preferences. */
	readonly exportForWebPreferences: ExportForWebPreference;
	/** Transparency preference settings. */
	readonly transparencyPreferences: TransparencyPreference;
	/** Text frame preference settings. */
	readonly textFramePreferences: TextFramePreference;
	/** Text preference settings. */
	readonly textPreferences: TextPreference;
	/** Text default settings. */
	readonly textDefaults: TextDefault;
	/** User dictionary preference settings. */
	readonly dictionaryPreferences: DictionaryPreference;
	/** Story preference settings. */
	readonly storyPreferences: StoryPreference;
	/** Anchored object default settings. */
	readonly anchoredObjectDefaults: AnchoredObjectDefault;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/** Baseline frame grid option settings. */
	readonly baselineFrameGridOptions: BaselineFrameGridOption;
	/** Footnote option settings. */
	readonly footnoteOptions: FootnoteOption;
	/** Lists all paragraph styles (regardless of their group). */
	readonly allParagraphStyles: ParagraphStyle;
	/** Lists all character styles (regardless of their group). */
	readonly allCharacterStyles: CharacterStyle;
	/** Text frame footnote options settings. */
	readonly textFrameFootnoteOptions: TextFrameFootnoteOptionsObject;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Preferences for showing contextual ui for alternates. */
	readonly typeContextualUiPrefs: TypeContextualUiPreference;
	/** All Table styles */
	readonly allTableStyles: TableStyle;
	/** All Cell styles */
	readonly allCellStyles: CellStyle;
	/** Document preference settings. */
	readonly documentPreferences: DocumentPreference;
	/** Grid preference settings. */
	readonly gridPreferences: GridPreference;
	/** Guide preference settings. */
	readonly guidePreferences: GuidePreference;
	/** Margin preference settings. */
	readonly marginPreferences: MarginPreference;
	/** Pasteboard preference settings. */
	readonly pasteboardPreferences: PasteboardPreference;
	/** View preference settings. */
	readonly viewPreferences: ViewPreference;
	/** Smart Guide preference properties. */
	readonly smartGuidePreferences: SmartGuidePreference;
	/** Spell-check preferences. */
	readonly spellPreferences: SpellPreference;
	/** Auto-correct preferences. */
	readonly autoCorrectPreferences: AutoCorrectPreference;
	/** Linked story options */
	readonly linkedStoryOptions: LinkedStoryOption;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Script preferences. */
	readonly scriptPreferences: ScriptPreference;
	/** Arguments to pass to a script. */
	readonly scriptArgs: ScriptArg;
	/** EPS export preferences. */
	readonly epsExportPreferences: EPSExportPreference;
	/** PNG export preferences. */
	readonly pngExportPreferences: PNGExportPreference;
	/** A collection of PDF export preferences. */
	readonly pdfExportPreferences: PDFExportPreference;
	/** Interactive PDF export preferences. */
	readonly interactivePDFExportPreferences: InteractivePDFExportPreference;
	/**
	 * The PDF place preference properties that define how PDF 
	 * files are placed in the current document.
	 */
	readonly pdfPlacePreferences: PDFPlacePreference;
	/** Tagged PDF preferences. */
	readonly taggedPDFPreferences: TaggedPDFPreference;
	/** Lists the extensions of file types that can be placed. */
	readonly placeableFileExtensions: string;
	/** Lists the types of files that can be placed. */
	readonly placeableFileTypes: string;
	/**
	 * The links preference properties that define preferences for 
	 * links.
	 */
	readonly linkingPreferences: LinkingPreference;
	/**
	 * Grabber preference properties that define display 
	 * performance quality during scrolling.
	 */
	readonly grabberPreferences: GrabberPreference;
	/**
	 * The index options properties that define how an index is 
	 * formatted.
	 */
	readonly indexGenerationOptions: IndexOptions;
	/** Track changes preference settings. */
	readonly trackChangesPreferences: TrackChangesPreference;
	/** Export options for InCopy INCX document format. */
	readonly incopyExportOptions: InCopyExportOption;
	/** IME preference settings. */
	readonly imePreferences: IMEPreference;
	/**
	 * The image I/O preference properties that define preferences 
	 * for importing images.
	 */
	readonly imageIOPreferences: ImageIOPreference;
	/** Image preferences. */
	readonly imagePreferences: ImagePreference;
	/** Stroke/fill proxy settings. */
	readonly strokeFillProxySettings: StrokeFillProxySetting;
	/**
	 * Polygon preference properties to use to define default 
	 * settings for creating a polygon.
	 */
	readonly polygonPreferences: PolygonPreference;
	/** All object styles contained by the Application. */
	readonly allObjectStyles: ObjectStyle;
	/** The default page item formatting for the Application. */
	readonly pageItemDefaults: PageItemDefault;
	/** Preferences for alignment and distribution. */
	readonly alignDistributePreferences: AlignDistributePreference;
	/**
	 * The frame fitting option to apply to placed or pasted 
	 * content. Can be applied to a frame, object style, or 
	 * document or to the application.
	 */
	readonly frameFittingOptions: FrameFittingOption;
	/** Button preference settings. */
	readonly buttonPreferences: ButtonPreference;
	/** EPS import preferences. */
	readonly epsImportPreferences: EPSImportPreference;
	/** Placed InDesign page attributes. */
	readonly importedPageAttributes: ImportedPageAttribute;
	/** SWF export preferences. */
	readonly swfExportPreferences: SWFExportPreference;
	/** XFL export preferences. */
	readonly xflExportPreferences: XFLExportPreference;
	/** The swatches that are not being used. */
	readonly unusedSwatches: Swatch;
	/** Watermark preferences */
	readonly watermarkPreferences: WatermarkPreference;
	/**
	 * The Content Placer. Used to get a reference to the content 
	 * placer object.
	 */
	readonly contentPlacer: ContentPlacerObject;
	/** Conditional text preferences. */
	readonly conditionalTextPreferences: ConditionalTextPreference;
	/**
	 * Color setting properties that define color management 
	 * defaults.
	 */
	readonly colorSettings: ColorSetting;
	/** Default properties specific to layout grids. */
	readonly layoutGridData: LayoutGridDataInformation;
	/** Default properties specific to frame grids. */
	readonly storyGridData: StoryGridDataInformation;
	/** CJK grid preference settings. */
	readonly cjkGridPreferences: CjkGridPreference;
	/** Grid printing preference and export settings. */
	readonly gridPrintingPreferences: GridPrintingPreference;
	/** Font locking preference settings. */
	readonly fontLockingPreferences: FontLockingPreference;
	/** Mojikumi user interface preference settings. */
	readonly mojikumiUIPreferences: MojikumiUiPreference;
	/** The name of the Application. */
	readonly name: string;
	/**
	 * The full path to the Application, including the name of the 
	 * Application.
	 */
	readonly fullName: File;
	/** The full path to the file. */
	readonly filePath: File;
	/** The application version. */
	readonly version: string;
	/** The locale of the application. */
	readonly locale: Locale;
	/** The current script running from the Scripts panel. */
	readonly activeScript: File;
	/** The current user's adobe id */
	readonly userAdobeId: string;
	/** The current user's GUID */
	readonly userGuid: string;
	/** If true, the Application is visible. */
	readonly visible: boolean;
	/** General preference settings. */
	readonly generalPreferences: GeneralPreference;
	/**
	 * Clipboard preference properties that define the way that the 
	 * application interacts with the system clipboard.
	 */
	readonly clipboardPreferences: ClipboardPreference;
	/**
	 * Transform preference properties that define default 
	 * behaviors when transforming objects. Note: Transforming 
	 * includes rotation, scaling, flipping, and shearing.
	 */
	readonly transformPreferences: TransformPreference;
	/** If true, a modal dialog or alert is active. */
	readonly modalState: boolean;
	/** The feature set. */
	readonly featureSet: FeatureSetOptions;
	/** The name of the action on the top of the undo stack. */
	readonly undoName: string;
	/** The name of the action on the top of the redo stack. */
	readonly redoName: string;
	/** The names of the items in the undo stack. */
	readonly undoHistory: string;
	/** The names of the items in the redo stack. */
	readonly redoHistory: string;
	/** The undo mode for the current script execution. */
	readonly activeScriptUndoMode: UndoModes;
	/** The user's serial number. */
	readonly serialNumber: string;
	/** XML view preference settings. */
	readonly xmlViewPreferences: XMLViewPreference;
	/** The available performance metrics. */
	readonly performanceMetrics: number;
	/** The current tool box states */
	readonly toolBoxTools: ToolBox;
	/** Display performance settings. */
	readonly displayPerformancePreferences: DisplayPerformancePreference;
	/** GPU performance preferences. */
	readonly gpuPerformancePreferences: GpuPerformancePreference;
	/** Galley preference settings. */
	readonly galleyPreferences: GalleyPreference;
	/** Text editing preference settings. */
	readonly textEditingPreferences: TextEditingPreference;
	/** Preflight option settings. */
	readonly preflightOptions: PreflightOption;
	/** Preflight book option settings. */
	readonly preflightBookOptions: PreflightBookOption;
	/**
	 * The list of all object types (strings) a preflight rule can 
	 * operate on.
	 */
	readonly allPreflightObjectTypes: string;
	/**
	 * The list of all categories that have been declared by rules.
	 */
	readonly allPreflightRuleCategories: string;
	/** The list of all known (declared) rule IDs. */
	readonly allPreflightRuleIDs: string;
	/**
	 * The data merge option properties that define the data merge.
	 */
	readonly dataMergeOptions: DataMergeOption;
	/** Layout sdjustment preference settings. */
	readonly layoutAdjustmentPreferences: LayoutAdjustmentPreference;
	/** Note preference settings. */
	readonly notePreferences: NotePreference;
	/** JPEG export preferences. */
	readonly jpegExportPreferences: JPEGExportPreference;
	/** Text import preferences. */
	readonly textImportPreferences: TextImportPreference;
	/** Text export preferences. */
	readonly textExportPreferences: TextExportPreference;
	/** Tagged text export preferences. */
	readonly taggedTextExportPreferences: TaggedTextExportPreference;
	/** Tagged text import preferences. */
	readonly taggedTextImportPreferences: TaggedTextImportPreference;
	/** Word and RTF import preferences. */
	readonly wordRTFImportPreferences: WordRTFImportPreference;
	/** Excel import preferences. */
	readonly excelImportPreferences: ExcelImportPreference;
	/** EPub export preview app preference settings. */
	readonly epubViewingAppsPreferences: EPubExportPreviewAppPreference;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Application (a Application). */
	readonly parent: Application;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of XML export maps. */
	readonly xmlExportMaps: XMLExportMaps;
	/** A collection of XML import maps. */
	readonly xmlImportMaps: XMLImportMaps;
	/** A collection of XML rule processors. */
	readonly xmlRuleProcessors: XMLRuleProcessors;
	/** A collection of XML tags. */
	readonly xmlTags: XMLTags;
	/** A collection of transparency flattener presets. */
	readonly flattenerPresets: FlattenerPresets;
	/** A collection of user dictionaries. */
	readonly userDictionaries: UserDictionaries;
	/** A collection of paragraph style groups. */
	readonly paragraphStyleGroups: ParagraphStyleGroups;
	/** A collection of character style groups. */
	readonly characterStyleGroups: CharacterStyleGroups;
	/** A collection of character styles. */
	readonly characterStyles: CharacterStyles;
	/** A collection of paragraph styles. */
	readonly paragraphStyles: ParagraphStyles;
	/** A collection of text variables. */
	readonly textVariables: TextVariables;
	/** A collection of table styles. */
	readonly tableStyles: TableStyles;
	/** A collection of table style groups. */
	readonly tableStyleGroups: TableStyleGroups;
	/** A collection of cell styles. */
	readonly cellStyles: CellStyles;
	/** A collection of cell style groups. */
	readonly cellStyleGroups: CellStyleGroups;
	/** A collection of stroke styles. */
	readonly strokeStyles: StrokeStyles;
	/** A collection of dashed stroke styles. */
	readonly dashedStrokeStyles: DashedStrokeStyles;
	/** A collection of dotted stroke styles. */
	readonly dottedStrokeStyles: DottedStrokeStyles;
	/** A collection of striped stroke styles. */
	readonly stripedStrokeStyles: StripedStrokeStyles;
	/** A collection of document presets. */
	readonly documentPresets: DocumentPresets;
	/** A collection of auto-correct tables. */
	readonly autoCorrectTables: AutoCorrectTables;
	/** A collection of para style mappings. */
	readonly paraStyleMappings: ParaStyleMappings;
	/** A collection of char style mappings. */
	readonly charStyleMappings: CharStyleMappings;
	/** A collection of table style mappings. */
	readonly tableStyleMappings: TableStyleMappings;
	/** A collection of cell style mappings. */
	readonly cellStyleMappings: CellStyleMappings;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** All attachable idle tasks. */
	readonly idleTasks: IdleTasks;
	/** A collection of inks. */
	readonly inks: Inks;
	/** A collection of trap presets. */
	readonly trapPresets: TrapPresets;
	/** A collection of PDF export presets. */
	readonly pdfExportPresets: PDFExportPresets;
	/** A collection of languages with vendors. */
	readonly languagesWithVendors: LanguagesWithVendors;
	/** A collection of indexing sort options. */
	readonly indexingSortOptions: IndexingSortOptions;
	/** A collection of object style groups. */
	readonly objectStyleGroups: ObjectStyleGroups;
	/** A collection of object styles. */
	readonly objectStyles: ObjectStyles;
	/** A collection of transformation matrices. */
	readonly transformationMatrices: TransformationMatrices;
	/** A collection of fonts. */
	readonly fonts: Fonts;
	/** A collection of Motion presets. */
	readonly motionPresets: MotionPresets;
	/** A collection of documents. */
	readonly documents: Documents;
	/** A collection of swatches. */
	readonly swatches: Swatches;
	/** A collection of colors. */
	readonly colors: Colors;
	/** A collection of tints. */
	readonly tints: Tints;
	/** A collection of gradients. */
	readonly gradients: Gradients;
	/** A collection of mixed inks. */
	readonly mixedInks: MixedInks;
	/** A collection of mixed ink groups. */
	readonly mixedInkGroups: MixedInkGroups;
	/** A collection of color groups. */
	readonly colorGroups: ColorGroups;
	/** A collection of dialogs. */
	readonly dialogs: Dialogs;
	/** A collection of conditions for conditional text. */
	readonly conditions: Conditions;
	/** A collection of condition sets for conditional text. */
	readonly conditionSets: ConditionSets;
	/** A collection of composite fonts. */
	readonly compositeFonts: CompositeFonts;
	/** A collection of named grids. */
	readonly namedGrids: NamedGrids;
	/** A collection of kinsoku tables. */
	readonly kinsokuTables: KinsokuTables;
	/** A collection of mojikumi tables. */
	readonly mojikumiTables: MojikumiTables;
	/** A collection of books. */
	readonly books: Books;
	/** A collection of numbered lists. */
	readonly numberingLists: NumberingLists;
	/** A collection of windows. */
	readonly windows: Windows;
	/** A collection of layout windows. */
	readonly layoutWindows: LayoutWindows;
	/** A collection of story windows. */
	readonly storyWindows: StoryWindows;
	/** A collection of panels. */
	readonly panels: Panels;
	/** A collection of background task objects. */
	readonly backgroundTasks: BackgroundTasks;
	/** A collection of menu actions. */
	readonly menuActions: MenuActions;
	/** A collection of script menu actions. */
	readonly scriptMenuActions: ScriptMenuActions;
	/** A collection of menus. */
	readonly menus: Menus;
	/** Display setting properties. */
	readonly displaySettings: DisplaySettings;
	/** A collection of preflight profiles. */
	readonly preflightProfiles: PreflightProfiles;
	/** A collection of preflight rules. */
	readonly preflightRules: PreflightRules;
	/** A collection of preflight processes. */
	readonly preflightProcesses: PreflightProcesses;
	/** A collection of object libraries. */
	readonly libraries: Libraries;
	/** A collection of printer presets. */
	readonly printerPresets: PrinterPresets;
	/**
	 * Find/change text options. Can also accept: NothingEnum 
	 * enumerator.
	 */
	findChangeTextOptions: FindChangeTextOption;
	/**
	 * Find/change grep options. Can also accept: NothingEnum 
	 * enumerator.
	 */
	findChangeGrepOptions: FindChangeGrepOption;
	/**
	 * Find/change glyph options. Can also accept: NothingEnum 
	 * enumerator.
	 */
	findChangeGlyphOptions: FindChangeGlyphOption;
	/**
	 * Find/change object options. Can also accept: NothingEnum 
	 * enumerator.
	 */
	findChangeObjectOptions: FindChangeObjectOption;
	/**
	 * Find text preferences. Can also accept: NothingEnum 
	 * enumerator.
	 */
	findTextPreferences: FindTextPreference;
	/**
	 * Change text preferences. Can also accept: NothingEnum 
	 * enumerator.
	 */
	changeTextPreferences: ChangeTextPreference;
	/**
	 * Find grep preferences. Can also accept: NothingEnum 
	 * enumerator.
	 */
	findGrepPreferences: FindGrepPreference;
	/**
	 * Change grep preferences. Can also accept: NothingEnum 
	 * enumerator.
	 */
	changeGrepPreferences: ChangeGrepPreference;
	/**
	 * Find glyph preferences. Can also accept: NothingEnum 
	 * enumerator.
	 */
	findGlyphPreferences: FindGlyphPreference;
	/**
	 * Change glyph preferences. Can also accept: NothingEnum 
	 * enumerator.
	 */
	changeGlyphPreferences: ChangeGlyphPreference;
	/**
	 * Find object preferences. Can also accept: NothingEnum 
	 * enumerator.
	 */
	findObjectPreferences: FindObjectPreference;
	/**
	 * Change object preferences. Can also accept: NothingEnum 
	 * enumerator.
	 */
	changeObjectPreferences: ChangeObjectPreference;
	/**
	 * Find/change transliterate options. Can also accept: 
	 * NothingEnum enumerator.
	 */
	findChangeTransliterateOptions: FindChangeTransliterateOption;
	/**
	 * Find transliterate preferences. Can also accept: NothingEnum 
	 * enumerator.
	 */
	findTransliteratePreferences: FindTransliteratePreference;
	/**
	 * Change transliterate preferences. Can also accept: 
	 * NothingEnum enumerator.
	 */
	changeTransliteratePreferences: ChangeTransliteratePreference;
	/**
	 * The color assigned to the tracked changes and notes created 
	 * by the user, specified either as an array of three doubles, 
	 * each in the range 0 to 255 and representing R, G, and B 
	 * values, or as an InCopy UI color. Can return: Array of 3 
	 * Reals (0 - 255) or InCopyUIColors enumerator.
	 */
	userColor: any;
	/** The user associated with the tracked changes and notes. */
	userName: string;
	/** Clear overrides first before applying object style */
	clearOverridesWhenApplyingStyle: boolean;
	/** The active book. */
	activeBook: Book;
	/**
	 * The selected object(s). Can also accept: Object or 
	 * NothingEnum enumerator.
	 */
	selection: Object;
	/**
	 * The front-most window. Can return: Window, LayoutWindow or 
	 * StoryWindow.
	 */
	activeWindow: any;
	/**
	 * Delay before mouse operations trigger live screen drawing of 
	 * page items.
	 */
	liveScreenDrawing: LiveDrawingOptions;
	/**
	 * The key object of the selection. Can also accept: 
	 * NothingEnum enumerator.
	 */
	selectionKeyObject: PageItem;
	/** The front-most document. */
	activeDocument: Document;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes unused XML markup tags. */
	deleteUnusedTags(): void;
	/**
	 * Loads a set of XML markup tags from the specified file.
	 * @param {File} _from - The path to the file that contains the 
	 * tags.
	 */
	loadXMLTags(_from: File): void;
	/**
	 * Saves a set of tags to an external file.
	 * @param {File} to - The full path to the file in which to 
	 * save the tags.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	saveXMLTags(to: File, versionComments: string, forceSave?: boolean): void;
	/**
	 * Mount a Version Cue project.
	 * @param {string} serverURL - The URL of the Version Cue 
	 * server containing the project
	 * @param {string} projectName - The name of the Version Cue 
	 * project to mount
	 */
	mountProject(serverURL: string, projectName: string): void;
	/**
	 * Imports the specified styles.
	 * @param {ImportFormat} format - The types of styles to 
	 * import.
	 * @param {File} _from - The file containing the styles you 
	 * want to import.
	 * @param {GlobalClashResolutionStrategy} globalStrategy - The 
	 * resolution strategy to employ for imported styles that have 
	 * the same names as existing styles. (Optional)
	 */
	importStyles(format: ImportFormat, _from: File, globalStrategy?: GlobalClashResolutionStrategy): void;
	/**
	 * Exports stroke styles or presets.
	 * @param {File} to - The file to save to
	 * @param {StrokeStyle} strokeStyleList - The list of stroke 
	 * styles to save
	 * @param {string} versionComments - The comment for this 
	 * version (Optional)
	 * @param {boolean} forceSave - Forcibly save a version 
	 * (Optional)
	 */
	exportStrokeStyles(to: File, strokeStyleList: StrokeStyle, versionComments: string, forceSave?: boolean): void;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Saves the specified find/change query.
	 * @param {string} queryName - The query to save.
	 * @param {SearchModes} searchMode - The search mode.
	 */
	saveFindChangeQuery(queryName: string, searchMode: SearchModes): void;
	/**
	 * Loads the specified find/change query.
	 * @param {string} queryName - The query to load.
	 * @param {SearchModes} searchMode - The search mode.
	 */
	loadFindChangeQuery(queryName: string, searchMode: SearchModes): void;
	/**
	 * Deletes the specified find/change query.
	 * @param {string} queryName - The query to delete.
	 * @param {SearchModes} searchMode - The search mode.
	 */
	deleteFindChangeQuery(queryName: string, searchMode: SearchModes): void;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Prints the specified file(s).
	 * @param {any} _from - One or more file paths. Can accept: 
	 * File or Array of Files.
	 * @param {boolean} printDialog - Whether to invoke the print 
	 * dialog (Optional)
	 * @param {any} using - Printer preset to use. Can accept: 
	 * PrinterPresetTypes enumerator or PrinterPreset. (Optional)
	 */
	print(_from: any, printDialog: boolean, using: any): void;
	/**
	 * Export the presets to a file.
	 * @param {ExportPresetFormat} format - The preset format.
	 * @param {File} to - The file to export to.
	 * @param {string} versionComments - The comments for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - Forcibly save a version. 
	 * (Optional)
	 */
	exportPresets(format: ExportPresetFormat, to: File, versionComments: string, forceSave?: boolean): void;
	/**
	 * Imports presets from the specified file.
	 * @param {ExportPresetFormat} format - The type of preset to 
	 * import.
	 * @param {File} _from - The file to import presets from.
	 */
	importFile(format: ExportPresetFormat, _from: File): void;
	/**
	 * Place one or more files following the behavior of the place 
	 * menu item. This may load the place gun or replace the 
	 * selected object, depending on current preferences.
	 * @param {any} fileName - One or more files to place. Can 
	 * accept: File or Array of Files.
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: any, showingOptions?: boolean, withProperties?: Object): void;
	/**
	 * Removes the frame fittings options and resets it to the 
	 * initial state.
	 */
	clearFrameFittingOptions(): void;
	/** Forces a check for new fonts in the various Fonts folders. */
	updateFonts(): void;
	/**
	 * Load motion preset from the specified file.
	 * @param {File} _from - The Flash motion preset file.
	 */
	loadMotionPreset(_from: File): MotionPreset;
	/**
	 * Cuts the selection in the active document window and stores 
	 * it in the clipboard.
	 */
	cut(): void;
	/**
	 * Copies the selection in the active document window to the 
	 * clipboard.
	 */
	copy(): void;
	/**
	 * Pastes data from the clipboard into the active document 
	 * window.
	 */
	paste(): void;
	/**
	 * Pastes data from the clipboard into the selected object in 
	 * the active document window.
	 */
	pasteInto(): void;
	/**
	 * Pastes data from the clipboard into the active document 
	 * window at the same position that the data held in its 
	 * original document.
	 */
	pasteInPlace(): void;
	/**
	 * Transforms color values
	 * @param {number} colorValue - source color value
	 * @param {ColorSpace} sourceColorSpace - source color space
	 * @param {ColorSpace} destinationColorSpace - destination 
	 * color space
	 */
	colorTransform(colorValue: number, sourceColorSpace: ColorSpace, destinationColorSpace: ColorSpace): number;
	/**
	 * Pastes data (minus formatting) from the clipboard into the 
	 * active document window.
	 */
	pasteWithoutFormatting(): void;
	/**
	 * Load swatches from the specified file.
	 * @param {File} _from - The swatch file or InDesign document.
	 */
	loadSwatches(_from: File): void;
	/**
	 * Saves the specified swatch(es) to a swatchbook file.
	 * @param {File} to - The swatchbook file to save to.
	 * @param {Swatch} swatchList - The swatch(es) to save.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	saveSwatches(to: File, swatchList: Swatch, versionComments: string, forceSave?: boolean): void;
	/**
	 * Imports a spot color swatch from an Adobe color book.
	 * @param {string} name - The spot color to load.
	 */
	importAdobeSwatchbookSpotColor(name: string): Color;
	/**
	 * Imports a process color swatch from a preloaded Adobe color 
	 * book.
	 * @param {string} name - The process color to load.
	 */
	importAdobeSwatchbookProcessColor(name: string): Color;
	/**
	 * Load conditions from the specified file.
	 * @param {File} _from - The path to the file that contains the 
	 * conditions.
	 * @param {boolean} loadConditionSets - If true, load the 
	 * condition sets as well. (Optional)
	 */
	loadConditions(_from: File, loadConditionSets: boolean): void;
	/**
	 * Selects the specified object(s).
	 * @param {any} selectableItems - The objects to select. Can 
	 * accept: Object, Array of Objects, NothingEnum enumerator or 
	 * SelectAll enumerator.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Application in relation to previously selected 
	 * objects. (Optional)
	 */
	select(selectableItems: any, existingSelection?: SelectionOptions): void;
	/**
	 * Applies the specified shortcut set file. No string will 
	 * apply the default shortcut set.
	 * @param {string} name - The shortcut set. (Optional)
	 */
	applyShortcutSet(name: string): void;
	/**
	 * Applies the specified workspace.
	 * @param {string} name - The workspace. (Optional)
	 */
	applyWorkspace(name: string): void;
	/**
	 * Applies the specified menu customization set. An empty 
	 * string will reset all menus and colorization (Show Full 
	 * Menus). No string will apply the default menu set.
	 * @param {string} name - The menu customization set. 
	 * (Optional)
	 */
	applyMenuCustomization(name: string): void;
	/** Toggles the visibility of the entire panel system. */
	togglePanelSystemVisibility(): void;
	/**
	 * Opens the specified document, book, or library.
	 * @param {any} _from - The file path(s) to the document, book, 
	 * or library. Can accept: File or Array of Files.
	 * @param {boolean} showingWindow - If true, opens the document 
	 * in a window. If false, the document is opened but is not 
	 * displayed in a window. (Optional)
	 * @param {OpenOptions} openOption - How to open the document. 
	 * (Optional)
	 */
	open(_from: any, showingWindow?: boolean, openOption?: OpenOptions): any;
	/**
	 * Quits the application.
	 * @param {SaveOptions} saving - The option to use for saving 
	 * changes to open documents before quitting. (Optional)
	 */
	quit(saving?: SaveOptions): void;
	/**
	 * Executes the script in the specified language as a single 
	 * transaction.
	 * @param {any} script - The script to execute. Can accept: 
	 * File, String or JavaScript Function.
	 * @param {ScriptLanguage} language - The language of the 
	 * script to execute. If not specified, uses the language used 
	 * to call this method. (Optional)
	 * @param {any} withArguments - An array of arguments passed to 
	 * the script. (Optional)
	 * @param {UndoModes} undoMode - How to undo this script. 
	 * (Optional)
	 * @param {string} undoName - The name of the undo step for 
	 * entire script undo mode. (Optional)
	 */
	doScript(script: any, language?: ScriptLanguage, withArguments?: any, undoMode?: UndoModes, undoName?: string): any;
	/** Makes the application the front-most or active window. */
	activate(): void;
	/** Cascades all document windows. */
	cascadeWindows(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Returns the locale-independent string(s) from the internal 
	 * string localization database that correspond to the 
	 * specified string (in the current locale).
	 * @param {string} _for - The string to search for.
	 */
	findKeyStrings(_for: string): string;
	/**
	 * Translates a key string into localized form based on current 
	 * application locale.
	 * @param {string} _for - The key string to translate
	 */
	translateKeyString(_for: string): string;
	/** Undoes the last action. */
	undo(): void;
	/** Redoes the last action. */
	redo(): void;
	/** Tile all document windows */
	tileWindows(): void;
	/**
	 * Generate schema for IDML.
	 * @param {File} to - The folder path of the schema.
	 * @param {boolean} packageFormat - If true, generate schema 
	 * for package format (multiple files). Default value is false. 
	 * (Optional)
	 */
	generateIDMLSchema(to: File, packageFormat: boolean): void;
	/** Cancels all the background tasks. */
	cancelAllTasks(): void;
	/** Waits for all the background tasks to finish. */
	waitForAllTasks(): TaskState;
	/**
	 * Sets the application's preferences.
	 * @param {any} applicationPreferences - The IDML defaults file 
	 * or enumeration. Can accept: File or LanguageAndRegion 
	 * enumerator.
	 */
	setApplicationPreferences(applicationPreferences: any): void;
	/**
	 * Gets the current value of the specified performance metric.
	 * @param {any} _for - The status to get from InDesign. Can 
	 * accept: Long Integer or PerformanceMetricOptions enumerator.
	 */
	performanceMetric(_for: any): any;
	/**
	 * Dumps memory allocations from the specified mark.
	 * @param {number} _from - The mark from which to dump memory.
	 */
	dumpFromMemoryMark(_from: number): void;
	/**
	 * Dumps memory allocations from all marks in the specified 
	 * range.
	 * @param {number} _from - The first mark in the range.
	 * @param {number} to - The last mark in the range.
	 */
	dumpBetweenMemoryMarks(_from: number, to: number): void;
	/** Gets the memory statistics from the server. */
	memoryStatistics(): any;
	/**
	 * Gets the short name of the specified performance metric.
	 * @param {any} _for - The status to get from InDesign. Can 
	 * accept: Long Integer or PerformanceMetricOptions enumerator.
	 */
	performanceMetricShortName(_for: any): string;
	/**
	 * Gets the long name of the specified performance metric.
	 * @param {any} _for - The status to get from InDesign. Can 
	 * accept: Long Integer or PerformanceMetricOptions enumerator.
	 */
	performanceMetricLongName(_for: any): string;
	/**
	 * Invokes InDesign's Color Picker.
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 */
	invokeColorPicker(space: ColorSpace, colorValue: number): string;
	/**
	 * Opens the cloud library asset for editing.
	 * @param {File} _from - The path of the asset file.
	 * @param {string} assetTypeForEdit - type of the asset
	 */
	openCloudAssetForEdit(_from: File, assetTypeForEdit: string): boolean;
	/**
	 * Sets the export options for generation of a cloud asset.
	 * @param {number} maxwidth - The maximum width of the 
	 * thumbnail generated in pixels.
	 * @param {number} maxheight - The maximum height of the 
	 * thumbnail generated in pixels.
	 */
	setCloudLibraryOptions(maxwidth: number, maxheight: number): void;
	/**
	 * Exports selection as assets required for cloud library.
	 * @param {File} to - The path to the export file.
	 */
	exportSelectionForCloudLibrary(to: File): boolean;
	/** Whether user has opted-in to share usage data. */
	isUserSharingAppUsageData(): boolean;
	/**
	 * Set cloud libraries info.
	 * @param {string} librariesCollectionInfo - JSON encoded 
	 * information about cloud libraries collection
	 */
	setCloudLibraryCollection(librariesCollectionInfo: string): void;
	/**
	 * Creates a temporary copy of the file
	 * @param {File} _from - The file to be copied
	 */
	createTemporaryCopy(_from: File): string;
	/**
	 * Remove the file from most recently used files
	 * @param {File} to - The file to be removed
	 */
	removeFileFromRecentFiles(to: File): boolean;
	/** Whether the app is in touch mode or not. */
	isAppInTouchMode(): boolean;
	/**
	 * Get a JSON string for the CCX Welcome dialog.
	 * @param {string} jsondata - mode description (Optional)
	 */
	getCCXUserJSONData(jsondata: string): string;
	/**
	 * Get the resolution strategy for style conflict, false if the 
	 * user cancels
	 * @param {StyleType} charOrParaStyle - Style type to look at. 
	 * (Optional)
	 */
	getStyleConflictResolutionStrategy(charOrParaStyle: StyleType): any;
	/**
	 * Open the panel associated with the action.
	 * @param {number} id - The ID.
	 */
	openPanel(id: number): void;
	/**
	 * Unpackage a UCF file into a folder structure.
	 * @param {File} ucfFile - The UCF file to be unpackaged.
	 * @param {File} destinationFolder - The folder where you would 
	 * like the UCF file unpackaged to. Will be created if it does 
	 * not exist.
	 */
	unpackageUCF(ucfFile: File, destinationFolder: File): void;
	/**
	 * Package a folder into a UCF file.
	 * @param {File} sourceFolder - The folder to be packaged into 
	 * an IDML file. Does not validate structure of the folder 
	 * pursuant to the IDML spec. Caller is responsible for making 
	 * sure the files in the folder are correctly organized.
	 * @param {File} ucfFile - The destination UCF file. Will be 
	 * overwritten if it already exists.
	 * @param {string} mimeMediaType - The MIME media type, default 
	 * value identifies package as IDML. (Optional)
	 */
	packageUCF(sourceFolder: File, ucfFile: File, mimeMediaType?: string): void;
	/**
	 * Load preflight profile from the specified file.
	 * @param {File} _from - The InDesign preflight profile file or 
	 * InDesign document.
	 */
	loadPreflightProfile(_from: File): PreflightProfile;
	/**
	 * Export the specified documents to an article folio.
	 * Note: This method behaves identically to 
	 * @method(exportMiniFolio), but differs in its return value. 
	 * @method(exportMiniFolio) returns an array of warning strings 
	 * whereas this method returns an XML structure.
	 * @param {File} destination - The location to write the file.
	 * @param {Document} portraitDocument - The InDesign document 
	 * for the stack's portrait orientation.
	 * @param {Document} landscapeDocument - The InDesign document 
	 * for the stack's landscape orientation.
	 * @param {any} folioMetadata - Optional meta data for the mini 
	 * folio. Can accept: Ordered array containing key:String, 
	 * value:String. (Optional)
	 * @param {any} miniFolioParams - Options for exporting a mini 
	 * folio. Can accept: Ordered array containing 
	 * dataField:String, dataValue:Any Type. (Optional)
	 */
	exportArticleFolio(destination: File, portraitDocument: Document, landscapeDocument: Document, folioMetadata: any, miniFolioParams: any): string;
	/**
	 * Export the specified document to a DPS article.
	 * Note: This method behaves similarly to 
	 * @method(exportMiniFolio), but differs in its parameters.
	 * @param {File} destination - The location to write the file.
	 * @param {Document} document - The source InDesign document.
	 * @param {any} dpsArticleParams - Options for exporting a DPS 
	 * article. Can accept: Ordered array containing 
	 * dataField:String, dataValue:Any Type.
	 */
	exportDpsArticle(destination: File, document: Document, dpsArticleParams: any): string;
	/**
	 * Get the current digital publishing article version number 
	 * for the given parameter.
	 * @param {DigpubArticleVersion} digpubArticleVersion - Version 
	 * string(s) to retrieve.
	 */
	getDigpubArticleVersion(digpubArticleVersion: DigpubArticleVersion): string;
	/**
	 * Get the list of article viewer versions the digital 
	 * publishing plugin supports.
	 */
	getSupportedArticleViewerVersions(): string;
	/**
	 * Get the current digital publishing version number for the 
	 * given parameter.
	 * @param {DigpubVersion} digpubVersion - Version string(s) to 
	 * retrieve.
	 */
	getDigpubVersion(digpubVersion: DigpubVersion): string;
	/**
	 * Get the list of viewer versions the digital publishing 
	 * plugin supports.
	 */
	getSupportedViewerVersions(): string;
	/**
	 * Export the specified documents to a mini-folio.
	 * @param {File} destination - The location to write the file.
	 * @param {Document} portraitDocument - The InDesign document 
	 * for the stack's portrait orientation.
	 * @param {Document} landscapeDocument - The InDesign document 
	 * for the stack's landscape orientation.
	 * @param {any} folioMetadata - Optional meta data for the mini 
	 * folio. Can accept: Ordered array containing key:String, 
	 * value:String. (Optional)
	 * @param {any} miniFolioParams - Options for exporting a mini 
	 * folio. Can accept: Ordered array containing 
	 * dataField:String, dataValue:Any Type. (Optional)
	 */
	exportMiniFolio(destination: File, portraitDocument: Document, landscapeDocument: Document, folioMetadata: any, miniFolioParams: any): string;
	/**
	 * Export the selected documents to a compressed folio file 
	 * that contains compressed mini folios.
	 * @param {File} destination - The location to write the 
	 * package.
	 * @param {any} miniFolioList - The mini folio(es) to add to 
	 * the folio. Can accept: File or Array of Files.
	 * @param {any} folioMetadata - Meta data for the folio. Can 
	 * accept: Ordered array containing key:String, value:String.
	 * @param {any} exportFolioParams - Additional options for 
	 * export folios. Can accept: Ordered array containing 
	 * dataField:String, dataValue:Any Type. (Optional)
	 */
	exportFolioToPackage(destination: File, miniFolioList: any, folioMetadata: any, exportFolioParams: any): void;
	/**
	 * Export the selected documents to a directory.
	 * @param {File} destination - The directory to write the 
	 * folio.
	 * @param {any} miniFolioList - The mini folio(es) to add to 
	 * the folio. Can accept: File or Array of Files.
	 * @param {any} folioMetadata - Meta data for the folio. Can 
	 * accept: Ordered array containing key:String, value:String.
	 * @param {any} exportFolioParams - Additional options for 
	 * export folios. Can accept: Ordered array containing 
	 * dataField:String, dataValue:Any Type. (Optional)
	 */
	exportFolioToDirectory(destination: File, miniFolioList: any, folioMetadata: any, exportFolioParams: any): void;
	/**
	 * Export the selected documents to a compressed folio file 
	 * that contains non-compressed mini folios.
	 * @param {File} destination - The location to write the 
	 * package.
	 * @param {any} miniFolioList - The mini folio(es) to add to 
	 * the folio. Can accept: File or Array of Files.
	 * @param {any} folioMetadata - Meta data for the folio. Can 
	 * accept: Ordered array containing key:String, value:String.
	 * @param {any} exportFolioParams - Additional options for 
	 * export folios. Can accept: Ordered array containing 
	 * dataField:String, dataValue:Any Type. (Optional)
	 */
	exportFolioToDirectoryPackage(destination: File, miniFolioList: any, folioMetadata: any, exportFolioParams: any): void;
	/**
	 * Get all overlays.
	 * @param {Document} portraitDocumentForCheckingOverlays - The 
	 * portrait document for checking overlays.
	 * @param {Document} landscapeDocumentForCheckingOverlays - The 
	 * landscape document for checking overlays.
	 * @param {any} miniFolioParams - Options for exporting a mini 
	 * folio. Can accept: Ordered array containing 
	 * dataField:String, dataValue:Any Type. (Optional)
	 */
	getAllOverlays(portraitDocumentForCheckingOverlays: Document, landscapeDocumentForCheckingOverlays: Document, miniFolioParams: any): any;
	/**
	 * Create a mini-folio out of asset and overlay descriptions.
	 * Schema for the mini folio description:
	 * || Key || Type || Required? || Description ||
	 * | contentstackid | string | yes | The explicit ID to be used 
	 * for this stack |
	 * | tocImage | file | no | The TOC image for the mini-folio |
	 * | narrowdimension | int | no | Targetted export size, 
	 * measured along narrow dimension |
	 * | widedimension | int | no | Targetted export size, measured 
	 * along wide dimension |
	 * | smoothscrolling | @enum(SmoothScrollingOptions) | no | The 
	 * smooth scrolling behavior for this stack (default is 
	 * noSmoothScroll) |
	 * | locationforgeneratedassets | file | no | If included, this 
	 * is an existing directory where the generated assets should 
	 * be created. |
	 * | overlays | array | no | see the SDK Overlay Builder APIs |
	 * | assets | array | yes | The assets for the mini - folio, 
	 * described below. |
	 * | assetDependencies | array | no | Files that are needed by 
	 * the asset, that will be included in the package but not the 
	 * manifest. |
	 * | metadata | array | no | The metadata for the mini-folio 
	 * described below. |
	 * | showprogressbar | boolean | no | Either true or false to 
	 * indicate whether we should show a progress bar (default is 
	 * false) |
	 * | targetviewerversion | string | no | If provided (in the 
	 * form "major.minor.revision") a folio compatible with the 
	 * viewer version is produced. If omitted, the latest folio 
	 * format is produced. | CS5 |
	 * The following are fields in the array for "assets":
	 * || Key || Type || Required? || Description ||
	 * | file | file | yes | The asset file |
	 * | type | string | yes | The asset file type, either "web" 
	 * for HTML or "image" for a raster |
	 * | width | int | yes | The asset width |
	 * | height | int | yes | The asset height |
	 * | orientation | string | yes | The asset orientation, either 
	 * "portrait" or "landscape" |
	 * | thumbnail | file | no | A thumbnail of the asset to be 
	 * used in browse mode |
	 * | scrubber | file | no | A thumbnail of the asset to be used 
	 * in scrubber mode |
	 * The following are fields in the array for 
	 * "assetDependencies":
	 * || Key || Type || Required? || Description ||
	 * | file | file | no | The dependent file |
	 * | relativePath | string | no | The relative path to the 
	 * file, for use in the package |
	 * The following are fields in the array for "metadata":
	 * || Key || Type || Required? || Description ||
	 * | any string | string or boolean | no | any key/value where 
	 * the key is a string, and the value is either a string or a 
	 * boolean, such as those described in "export folio meta data" 
	 * |
	 * @param {any} miniFolioDescription - A dictionary describing 
	 * the custom mini folio to create. Can accept: Ordered array 
	 * containing key:String, value:Boolean, Long Integer, Long 
	 * Long Integer, String, File or Array of Any Types.
	 * @param {File} destination - The location to write the file.
	 */
	createCustomMiniFolio(miniFolioDescription: any, destination: File): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * Application.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Application;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * background task
 * @class
 */
export declare class BackgroundTask {
	/** The name of the BackgroundTask. */
	readonly name: string;
	/** The document name on which this task operates. */
	readonly documentName: string;
	/** Progress information for this task. */
	readonly percentDone: number;
	/** The current status of this task object. */
	readonly status: TaskState;
	/**
	 * The alerts encountered while running this task object. Can 
	 * return: Array of Array of 2 TaskAlertType enumerators or 
	 * Strings.
	 */
	readonly alerts: any;
	/** The unique ID of the BackgroundTask. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the BackgroundTask (a Application). */
	readonly parent: Application;
	/**
	 * The index of the BackgroundTask within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Cancels the specified background task. */
	cancelTask(): void;
	/** Waits for the task to finish. */
	waitForTask(): TaskState;
	/**
	 * Queries for a particular property in the task metadata.
	 * @param {string} name - The task property being queried
	 */
	queryProperty(name: string): any;
	/**
	 * Generates a string which, if executed, will return the 
	 * BackgroundTask.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): BackgroundTask;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of background task objects.
 * @class
 */
export declare class BackgroundTasks {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the BackgroundTask. */
	count(): number;
	/**
	 * Returns the BackgroundTask with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): BackgroundTask;
	/**
	 * Returns the BackgroundTask with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): BackgroundTask;
	/**
	 * Returns the BackgroundTask with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): BackgroundTask;
	/**
	 * Returns the BackgroundTasks within the specified range.
	 * @param {any} _from - The BackgroundTask, index, or name at 
	 * the beginning of the range. Can accept: BackgroundTask, Long 
	 * Integer or String.
	 * @param {any} to - The BackgroundTask, index, or name at the 
	 * end of the range. Can accept: BackgroundTask, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): BackgroundTask;
	/** Returns the first BackgroundTask in the collection. */
	firstItem(): BackgroundTask;
	/** Returns the last BackgroundTask in the collection. */
	lastItem(): BackgroundTask;
	/** Returns the middle BackgroundTask in the collection. */
	middleItem(): BackgroundTask;
	/**
	 * Returns the BackgroundTask with the index previous to the 
	 * specified index.
	 * @param {BackgroundTask} obj - The index of the 
	 * BackgroundTask that follows the desired BackgroundTask.
	 */
	previousItem(obj: BackgroundTask): BackgroundTask;
	/**
	 * Returns the BackgroundTask whose index follows the specified 
	 * BackgroundTask in the collection.
	 * @param {BackgroundTask} obj - The BackgroundTask whose index 
	 * comes before the desired BackgroundTask.
	 */
	nextItem(obj: BackgroundTask): BackgroundTask;
	/** Returns any BackgroundTask in the collection. */
	anyItem(): BackgroundTask;
	/** Returns every BackgroundTask in the collection. */
	everyItem(): BackgroundTask;
	/**
	 * Generates a string which, if executed, will return the 
	 * BackgroundTask.
	 */
	toSource(): string;
	/**
	 * Returns the BackgroundTask with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: BackgroundTask;
}

/**
 * A document.
 * @class
 */
export declare class Document {
	/**
	 * Dispatched before a Document is printed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PRINT: string;
	/**
	 * Dispatched after a Document is printed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PRINT: string;
	/**
	 * Dispatched after one or more links in the Document have been 
	 * added, deleted, or modified. This event bubbles. This event 
	 * is not cancelable.
	 */
	readonly AFTER_LINKS_CHANGED: string;
	/**
	 * Dispatched after a Document is created. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_NEW: string;
	/**
	 * Dispatched after a Document is opened. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_OPEN: string;
	/**
	 * Dispatched before a Document is saved. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_SAVE: string;
	/**
	 * Dispatched after a Document is saved. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_SAVE: string;
	/**
	 * Dispatched before a Document is saved under a new name. This 
	 * event bubbles. This event is cancelable.
	 */
	readonly BEFORE_SAVE_AS: string;
	/**
	 * Dispatched after a Document is saved under a new name. This 
	 * event bubbles. This event is not cancelable.
	 */
	readonly AFTER_SAVE_AS: string;
	/**
	 * Dispatched before a copy of a Document is saved. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_SAVE_A_COPY: string;
	/**
	 * Dispatched after a copy of a Document is saved. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_SAVE_A_COPY: string;
	/**
	 * Dispatched before a Document is reverted. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_REVERT: string;
	/**
	 * Dispatched after a Document is reverted. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_REVERT: string;
	/**
	 * Dispatched before a Document is closed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly BEFORE_CLOSE: string;
	/**
	 * Dispatched before a Document is exported. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_EXPORT: string;
	/**
	 * Dispatched after a Document is exported. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_EXPORT: string;
	/**
	 * Dispatched after a Document export is canceled or fails. 
	 * This event bubbles. This event is not cancelable.
	 */
	readonly FAILED_EXPORT: string;
	/**
	 * Dispatched before importing a file into a Document. This 
	 * event bubbles. This event is cancelable.
	 */
	readonly BEFORE_IMPORT: string;
	/**
	 * Dispatched after importing a file into a Document. This 
	 * event bubbles. This event is not cancelable.
	 */
	readonly AFTER_IMPORT: string;
	/**
	 * Dispatched before the Document becomes inactive. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly BEFORE_DEACTIVATE: string;
	/**
	 * Dispatched after the Document becomes active. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_ACTIVATE: string;
	/** The XML preference settings. */
	readonly xmlPreferences: XMLPreference;
	/** XML import preference settings. */
	readonly xmlImportPreferences: XMLImportPreference;
	/** XML export preference settings. */
	readonly xmlExportPreferences: XMLExportPreference;
	/** The XML element associated with the Document. */
	readonly associatedXMLElement: XMLItem;
	/** The default export for web preferences. */
	readonly exportForWebPreferences: ExportForWebPreference;
	/** The Version Cue version state of the file. */
	readonly versionState: VersionState;
	/** The Version Cue editing state of the file. */
	readonly editingState: EditingState;
	/** Transparency preference settings. */
	readonly transparencyPreferences: TransparencyPreference;
	/** Text frame preference settings. */
	readonly textFramePreferences: TextFramePreference;
	/** Text preference settings. */
	readonly textPreferences: TextPreference;
	/** Text default settings. */
	readonly textDefaults: TextDefault;
	/** User dictionary preference settings. */
	readonly dictionaryPreferences: DictionaryPreference;
	/** Story preference settings. */
	readonly storyPreferences: StoryPreference;
	/** Anchored object default settings. */
	readonly anchoredObjectDefaults: AnchoredObjectDefault;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/** Baseline frame grid option settings. */
	readonly baselineFrameGridOptions: BaselineFrameGridOption;
	/** Footnote option settings. */
	readonly footnoteOptions: FootnoteOption;
	/** Lists all paragraph styles (regardless of their group). */
	readonly allParagraphStyles: ParagraphStyle;
	/** Lists all character styles (regardless of their group). */
	readonly allCharacterStyles: CharacterStyle;
	/** Text frame footnote options settings. */
	readonly textFrameFootnoteOptions: TextFrameFootnoteOptionsObject;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** All Table styles */
	readonly allTableStyles: TableStyle;
	/** All Cell styles */
	readonly allCellStyles: CellStyle;
	/** Document preference settings. */
	readonly documentPreferences: DocumentPreference;
	/** Grid preference settings. */
	readonly gridPreferences: GridPreference;
	/** Guide preference settings. */
	readonly guidePreferences: GuidePreference;
	/** Margin preference settings. */
	readonly marginPreferences: MarginPreference;
	/** Pasteboard preference settings. */
	readonly pasteboardPreferences: PasteboardPreference;
	/** View preference settings. */
	readonly viewPreferences: ViewPreference;
	/** Linked story options */
	readonly linkedStoryOptions: LinkedStoryOption;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Print preference settings. */
	readonly printPreferences: PrintPreference;
	/** Booklet printing options. */
	readonly printBookletOptions: PrintBookletOption;
	/** Print booklet preferences. */
	readonly printBookletPrintPreferences: PrintBookletPrintPreference;
	/** Tagged PDF preferences. */
	readonly taggedPDFPreferences: TaggedPDFPreference;
	/** The place gun. */
	readonly placeGuns: PlaceGun;
	/** Metadata preference settings. */
	readonly metadataPreferences: MetadataPreference;
	/**
	 * The index options properties that define how an index is 
	 * formatted.
	 */
	readonly indexGenerationOptions: IndexOptions;
	/** Lists all page items contained by the Document. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Document. */
	readonly allGraphics: Graphic;
	/** All object styles contained by the Document. */
	readonly allObjectStyles: ObjectStyle;
	/** The default page item formatting for the Document. */
	readonly pageItemDefaults: PageItemDefault;
	/**
	 * The frame fitting option to apply to placed or pasted 
	 * content. Can be applied to a frame, object style, or 
	 * document or to the application.
	 */
	readonly frameFittingOptions: FrameFittingOption;
	/** Button preference settings. */
	readonly buttonPreferences: ButtonPreference;
	/**
	 * The full path to the Document, including the name of the 
	 * Document.
	 */
	readonly fullName: File;
	/** The name of the Document. */
	readonly name: string;
	/** If true, the Document is visible. */
	readonly visible: boolean;
	/** The full path to the file. */
	readonly filePath: File;
	/**
	 * If true, the Document has been modified since it was last 
	 * saved.
	 */
	readonly modified: boolean;
	/** If true, the Document has been saved since it was created. */
	readonly saved: boolean;
	/** The swatches that are not being used. */
	readonly unusedSwatches: Swatch;
	/** Watermark preferences */
	readonly watermarkPreferences: WatermarkPreference;
	/** If true, the Document was converted. */
	readonly converted: boolean;
	/** If true, the Document was recovered. */
	readonly recovered: boolean;
	/** If true, the Document is read-only. */
	readonly readOnly: boolean;
	/** The unique ID of the Document. */
	readonly id: number;
	/** Conditional text preferences. */
	readonly conditionalTextPreferences: ConditionalTextPreference;
	/** A list of valid CMYK profiles. */
	readonly cmykProfileList: string;
	/** A list of valid RGB profiles. */
	readonly rgbProfileList: string;
	/** Default properties specific to layout grids. */
	readonly layoutGridData: LayoutGridDataInformation;
	/** Default properties specific to frame grids. */
	readonly storyGridData: StoryGridDataInformation;
	/** CJK grid preference settings. */
	readonly cjkGridPreferences: CjkGridPreference;
	/** Mojikumi user interface preference settings. */
	readonly mojikumiUIPreferences: MojikumiUiPreference;
	/** Chapter numbering preferences. */
	readonly chapterNumberPreferences: ChapterNumberPreference;
	/** The name of the action on the top of the undo stack. */
	readonly undoName: string;
	/** The name of the action on the top of the redo stack. */
	readonly redoName: string;
	/** The names of the items in the undo stack. */
	readonly undoHistory: string;
	/** The names of the items in the redo stack. */
	readonly redoHistory: string;
	/** XML view preference settings. */
	readonly xmlViewPreferences: XMLViewPreference;
	/** Galley preference settings. */
	readonly galleyPreferences: GalleyPreference;
	/** Preflight option settings. */
	readonly preflightOptions: PreflightOption;
	/** The active preflight process for this document. */
	readonly activeProcess: PreflightProcess;
	/**
	 * Data merge properties that define data merge fields and 
	 * preferences.
	 */
	readonly dataMergeProperties: DataMerge;
	/**
	 * The data merge option properties that define the data merge.
	 */
	readonly dataMergeOptions: DataMergeOption;
	/** Layout sdjustment preference settings. */
	readonly layoutAdjustmentPreferences: LayoutAdjustmentPreference;
	/** EPub fixed layout export preference settings. */
	readonly epubFixedLayoutExportPreferences: EPubFixedLayoutExportPreference;
	/** HTML FXL export preference settings. */
	readonly htmlFXLExportPreferences: HTMLFXLExportPreference;
	/** Publish export preference settings. */
	readonly publishExportPreferences: PublishExportPreference;
	/** EPub export preference settings. */
	readonly epubExportPreferences: EPubExportPreference;
	/** HTML export preference settings. */
	readonly htmlExportPreferences: HTMLExportPreference;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Document (a Application). */
	readonly parent: Application;
	/** The index of the Document within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of XML elements. */
	readonly xmlElements: XMLElements;
	/** A collection of XML items. */
	readonly xmlItems: XMLItems;
	/** A collection of XML comments. */
	readonly xmlComments: XMLComments;
	/** A collection of XML instructions. */
	readonly xmlInstructions: XMLInstructions;
	/** A collection of DTDs. */
	readonly dtds: DTDs;
	/** A collection of XML export maps. */
	readonly xmlExportMaps: XMLExportMaps;
	/** A collection of XML import maps. */
	readonly xmlImportMaps: XMLImportMaps;
	/** A collection of xml stories. */
	readonly xmlStories: XmlStories;
	/** A collection of stories. */
	readonly stories: Stories;
	/** A collection of XML tags. */
	readonly xmlTags: XMLTags;
	/** A collection of XML validation errors. */
	readonly validationErrors: ValidationErrors;
	/** A collection of TOC styles. */
	readonly tocStyles: TOCStyles;
	/** A collection of hyphenation exceptions lists. */
	readonly hyphenationExceptions: HyphenationExceptions;
	/** A collection of paragraph style groups. */
	readonly paragraphStyleGroups: ParagraphStyleGroups;
	/** A collection of character style groups. */
	readonly characterStyleGroups: CharacterStyleGroups;
	/** A collection of character styles. */
	readonly characterStyles: CharacterStyles;
	/** A collection of paragraph styles. */
	readonly paragraphStyles: ParagraphStyles;
	/** A collection of text variables. */
	readonly textVariables: TextVariables;
	/** A collection of table styles. */
	readonly tableStyles: TableStyles;
	/** A collection of table style groups. */
	readonly tableStyleGroups: TableStyleGroups;
	/** A collection of cell styles. */
	readonly cellStyles: CellStyles;
	/** A collection of cell style groups. */
	readonly cellStyleGroups: CellStyleGroups;
	/** A collection of stroke styles. */
	readonly strokeStyles: StrokeStyles;
	/** A collection of dashed stroke styles. */
	readonly dashedStrokeStyles: DashedStrokeStyles;
	/** A collection of dotted stroke styles. */
	readonly dottedStrokeStyles: DottedStrokeStyles;
	/** A collection of striped stroke styles. */
	readonly stripedStrokeStyles: StripedStrokeStyles;
	/** A collection of pages. */
	readonly pages: Pages;
	/** A collection of spreads. */
	readonly spreads: Spreads;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of para style mappings. */
	readonly paraStyleMappings: ParaStyleMappings;
	/** A collection of char style mappings. */
	readonly charStyleMappings: CharStyleMappings;
	/** A collection of table style mappings. */
	readonly tableStyleMappings: TableStyleMappings;
	/** A collection of cell style mappings. */
	readonly cellStyleMappings: CellStyleMappings;
	/** A collection of sections. */
	readonly sections: Sections;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of inks. */
	readonly inks: Inks;
	/** A collection of trap presets. */
	readonly trapPresets: TrapPresets;
	/** A collection of master spreads. */
	readonly masterSpreads: MasterSpreads;
	/** A collection of links. */
	readonly links: Links;
	/** A collection of languages. */
	readonly languages: Languages;
	/** A collection of layers. */
	readonly layers: Layers;
	/** A collection of indexes. */
	readonly indexes: Indexes;
	/** A collection of indexing sort options. */
	readonly indexingSortOptions: IndexingSortOptions;
	/** A collection of hyperlinks. */
	readonly hyperlinks: Hyperlinks;
	/** A collection of bookmarks. */
	readonly bookmarks: Bookmarks;
	/** A collection of hyperlink page item sources. */
	readonly hyperlinkPageItemSources: HyperlinkPageItemSources;
	/** A collection of hyperlink text sources. */
	readonly hyperlinkTextSources: HyperlinkTextSources;
	/** A collection of hyperlink text destinations. */
	readonly hyperlinkTextDestinations: HyperlinkTextDestinations;
	/** A collection of hyperlink page destinations. */
	readonly hyperlinkPageDestinations: HyperlinkPageDestinations;
	/** A collection of cross reference formats. */
	readonly crossReferenceFormats: CrossReferenceFormats;
	/** A collection of cross reference text sources. */
	readonly crossReferenceSources: CrossReferenceSources;
	/** A collection of paragraph destinations. */
	readonly paragraphDestinations: ParagraphDestinations;
	/** A collection of hyperlink external page destinations. */
	readonly hyperlinkExternalPageDestinations: HyperlinkExternalPageDestinations;
	/** A collection of hyperlink URL destinations. */
	readonly hyperlinkURLDestinations: HyperlinkURLDestinations;
	/** A collection of guides. */
	readonly guides: Guides;
	/** A collection of object style groups. */
	readonly objectStyleGroups: ObjectStyleGroups;
	/** A collection of object styles. */
	readonly objectStyles: ObjectStyles;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of fonts. */
	readonly fonts: Fonts;
	/** A collection of Motion presets. */
	readonly motionPresets: MotionPresets;
	/** A collection of swatches. */
	readonly swatches: Swatches;
	/** A collection of colors. */
	readonly colors: Colors;
	/** A collection of tints. */
	readonly tints: Tints;
	/** A collection of gradients. */
	readonly gradients: Gradients;
	/** A collection of mixed inks. */
	readonly mixedInks: MixedInks;
	/** A collection of mixed ink groups. */
	readonly mixedInkGroups: MixedInkGroups;
	/** A collection of color groups. */
	readonly colorGroups: ColorGroups;
	/** A collection of conditions for conditional text. */
	readonly conditions: Conditions;
	/** A collection of condition sets for conditional text. */
	readonly conditionSets: ConditionSets;
	/** A collection of composite fonts. */
	readonly compositeFonts: CompositeFonts;
	/** A collection of named grids. */
	readonly namedGrids: NamedGrids;
	/** A collection of kinsoku tables. */
	readonly kinsokuTables: KinsokuTables;
	/** A collection of mojikumi tables. */
	readonly mojikumiTables: MojikumiTables;
	/** A collection of numbered lists. */
	readonly numberingLists: NumberingLists;
	/** A collection of assignments. */
	readonly assignments: Assignments;
	/** A collection of articles. */
	readonly articles: Articles;
	/** A collection of windows. */
	readonly windows: Windows;
	/** A collection of layout windows. */
	readonly layoutWindows: LayoutWindows;
	/** A collection of story windows. */
	readonly storyWindows: StoryWindows;
	/** A collection of preflight profiles. */
	readonly preflightProfiles: PreflightProfiles;
	/** A collection of data merge text placeholders. */
	readonly dataMergeTextPlaceholders: DataMergeTextPlaceholders;
	/** A collection of data merge image placeholders. */
	readonly dataMergeImagePlaceholders: DataMergeImagePlaceholders;
	/** A collection of data merge QR code placeholders. */
	readonly dataMergeQrcodePlaceholders: DataMergeQrcodePlaceholders;
	/** current untitled document count */
	untitledDocumentCount: number;
	/**
	 * The ruler origin, specified as page coordinates in the 
	 * format [x, y].
	 */
	zeroPoint: number|string;
	/** A property that can be set to any string. */
	label: string;
	/** The active layer. Can also accept: String. */
	activeLayer: Layer;
	/** The current CMYK profile. */
	cmykProfile: string;
	/** The current RGB profile. */
	rgbProfile: string;
	/**
	 * The rendering intent for all vector art (areas of solid 
	 * color) in native objects.
	 */
	solidColorIntent: RenderingIntent;
	/**
	 * The rendering intent for colors that result from 
	 * transparency interactions on the page after blending.
	 */
	afterBlendingIntent: RenderingIntent;
	/** The rendering intent for bitmap images. */
	defaultImageIntent: RenderingIntent;
	/**
	 * The policy for handling colors in an RGB color model, 
	 * including reading and embedding color profiles, handling 
	 * mismatches between embedded color profiles and the working 
	 * space, and moving colors from one document to another.
	 */
	rgbPolicy: ColorSettingsPolicy;
	/**
	 * The policy for handling colors in a CMYK color model, 
	 * including reading and embedding color profiles, mismatches 
	 * between embedded color profiles and the working space, and 
	 * moving colors from one document to another.
	 */
	cmykPolicy: ColorSettingsPolicy;
	/**
	 * If true, uses LAB alternates for spot colors when available.
	 */
	accurateLABSpots: boolean;
	/**
	 * The selected object(s). Can also accept: Object or 
	 * NothingEnum enumerator.
	 */
	selection: Object;
	/**
	 * The key object of the selection. Can also accept: 
	 * NothingEnum enumerator.
	 */
	selectionKeyObject: PageItem;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Auto tag the document based on the style to tag mappings */
	mapStylesToXMLTags(): void;
	/** Auto style the document based on the tag to style mappings */
	mapXMLTagsToStyles(): void;
	/**
	 * Imports a DTD to use for validation.
	 * @param {File} _from - The path to the DTD file.
	 */
	importDtd(_from: File): void;
	/**
	 * Imports the specified XML file into an InDesign document.
	 * @param {File} _from - The XML file.
	 */
	importXML(_from: File): void;
	/** Deletes unused XML markup tags. */
	deleteUnusedTags(): void;
	/**
	 * Loads a set of XML markup tags from the specified file.
	 * @param {File} _from - The path to the file that contains the 
	 * tags.
	 */
	loadXMLTags(_from: File): void;
	/**
	 * Saves a set of tags to an external file.
	 * @param {File} to - The full path to the file in which to 
	 * save the tags.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	saveXMLTags(to: File, versionComments: string, forceSave?: boolean): void;
	/** Change comoser to optyca */
	changeComposer(): void;
	/**
	 * Reverts to the version of the document in Version Cue.
	 * @param {boolean} forceRevert - Forcibly reverts to the 
	 * project version. (Optional)
	 */
	revertToProject(forceRevert?: boolean): void;
	/**
	 * Synchronizes the file with the Version Cue project.
	 * @param {SyncConflictResolution} syncConflictResolution - The 
	 * conflict resolution method to use during synchronization. 
	 * (Optional)
	 * @param {string} versionComments - The comments that describe 
	 * the version. (Optional)
	 */
	synchronizeWithVersionCue(syncConflictResolution?: SyncConflictResolution, versionComments?: string): VersionCueSyncStatus;
	/**
	 * Check in to Version Cue.
	 * @param {string} versionComments - The comment for this 
	 * version (Optional)
	 * @param {boolean} forceSave - Forcibly save a version 
	 * (Optional)
	 */
	checkIn(versionComments: string, forceSave?: boolean): void;
	/**
	 * Creates a table of contents.
	 * @param {TOCStyle} using - The TOC style to use to define the 
	 * content, title, and format of the table of contents.
	 * @param {boolean} replacing - If true, replaces the existing 
	 * TOC. (Optional)
	 * @param {Book} fromBook - The book whose documents to include 
	 * in the TOC. (Optional)
	 * @param {number|string} placePoint - The point at which to 
	 * place the TOC story, specified as page coordinates in the 
	 * format [x, y]. (Optional)
	 * @param {boolean} includeOverset - If true, includes overset 
	 * text TOC entries in the TOC. (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place the TOC. (Optional)
	 */
	createTOC(using: TOCStyle, replacing?: boolean, fromBook?: Book, placePoint?: number|string, includeOverset?: boolean, destinationLayer?: Layer): Story;
	/**
	 * Imports the specified styles.
	 * @param {ImportFormat} format - The types of styles to 
	 * import.
	 * @param {File} _from - The file containing the styles you 
	 * want to import.
	 * @param {GlobalClashResolutionStrategy} globalStrategy - The 
	 * resolution strategy to employ for imported styles that have 
	 * the same names as existing styles. (Optional)
	 */
	importStyles(format: ImportFormat, _from: File, globalStrategy?: GlobalClashResolutionStrategy): void;
	/** Recomposes the text in the Document. */
	recompose(): void;
	/**
	 * Exports stroke styles or presets.
	 * @param {File} to - The file to save to
	 * @param {StrokeStyle} strokeStyleList - The list of stroke 
	 * styles to save
	 * @param {string} versionComments - The comment for this 
	 * version (Optional)
	 * @param {boolean} forceSave - Forcibly save a version 
	 * (Optional)
	 */
	exportStrokeStyles(to: File, strokeStyleList: StrokeStyle, versionComments: string, forceSave?: boolean): void;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Deprecated: Use ContentPlacerObject load method. Original 
	 * Description: Place following the behavior of the place and 
	 * link story menu item. This will load the place gun.
	 * @param {Story} parentStory - The story to place and link 
	 * from.
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	placeAndLink(parentStory: Story, showingOptions?: boolean): void;
	/**
	 * Prints the Document(s).
	 * @param {boolean} printDialog - Whether to invoke the print 
	 * dialog (Optional)
	 * @param {any} using - Printer preset to use. Can accept: 
	 * PrinterPresetTypes enumerator or PrinterPreset. (Optional)
	 */
	print(printDialog: boolean, using: any): void;
	/**
	 * Print the Booklet using current document and Booklet and 
	 * Print settings in the document
	 * @param {boolean} printBookletDialog - Whether to invoke the 
	 * print booklet dialog (Optional)
	 * @param {any} using - Printer preset to use. Can accept: 
	 * PrinterPresetTypes enumerator or PrinterPreset. (Optional)
	 */
	printBooklet(printBookletDialog?: boolean, using?: any): void;
	/**
	 * place a cloud asset on the document
	 * @param {string} jsondata - JSON data containing metadata 
	 * about the cloud asset
	 */
	placeCloudAsset(jsondata: string): void;
	/**
	 * Place one or more files following the behavior of the place 
	 * menu item. This may load the place gun or replace the 
	 * selected object, depending on current preferences.
	 * @param {any} fileName - One or more files to place. Can 
	 * accept: File or Array of Files.
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: any, showingOptions?: boolean, withProperties?: Object): void;
	/**
	 * Load masterpages from an InDesign file.
	 * @param {File} _from - The InDesign file to load the masters 
	 * from.
	 * @param {GlobalClashResolutionStrategyForMasterPage} 
	 * globalStrategyForMasterPage - the global clash resolution 
	 * strategy for load master page (Optional)
	 */
	loadMasters(_from: File, globalStrategyForMasterPage?: GlobalClashResolutionStrategyForMasterPage): void;
	/**
	 * Creates an alternate layout for a given list of spreads.
	 * @param {Spread} spreadItems - The spreads to create an 
	 * alternate layout for.
	 * @param {string} name - The name of the alternate layout. 
	 * Note: This is used for the named layout for the new section 
	 * for the duplicated spreads.
	 * @param {number|string} width - The width of the pages 
	 * created.
	 * @param {number|string} height - The height of the pages 
	 * created.
	 * @param {boolean} createTextStyles - Whether to create new 
	 * text styles.
	 * @param {boolean} linkTextStories - Whether to create linked 
	 * text for duplicated text stories.
	 * @param {LayoutRuleOptions} layoutRule - What layout rule to 
	 * set on the pages.
	 */
	createAlternateLayout(spreadItems: Spread, name: string, width: number|string, height: number|string, createTextStyles: boolean, linkTextStories: boolean, layoutRule: LayoutRuleOptions): void;
	/**
	 * Deletes an alternate layout.
	 * @param {string} name - The name of the alternate layout to 
	 * delete.
	 */
	deleteAlternateLayout(name: string): void;
	/**
	 * Imports the cross reference formats from specified file.
	 * @param {File} _from - The file whose formats to import.
	 */
	importFormats(_from: File): void;
	/**
	 * Updates cross references' text source content in the 
	 * document.
	 */
	updateCrossReferences(): void;
	/**
	 * Align page items.
	 * @param {PageItem} alignDistributeItems - The page items to 
	 * align or distribute.
	 * @param {AlignOptions} alignOption - The type of alignment to 
	 * apply.
	 * @param {AlignDistributeBounds} alignDistributeBounds - The 
	 * bounds within which to align or distribute the page items. 
	 * (Optional)
	 * @param {PageItem} reference - The reference or key object to 
	 * align to distribute relative to. Required when 'align 
	 * distribute bounds' specifies 'key object'. (Optional)
	 */
	align(alignDistributeItems: PageItem, alignOption: AlignOptions, alignDistributeBounds: AlignDistributeBounds, reference: PageItem): void;
	/**
	 * Distribute page items.
	 * @param {PageItem} alignDistributeItems - The page items to 
	 * align or distribute
	 * @param {DistributeOptions} distributeOption - The type of 
	 * distribution to apply.
	 * @param {AlignDistributeBounds} alignDistributeBounds - The 
	 * bounds within which to align or distribute the page items. 
	 * (Optional)
	 * @param {boolean} useDistributeMeasurement - If true, 
	 * distribute space between page items. When this property is 
	 * true, the bounds setting is ignored. (Optional)
	 * @param {number|string} absoluteDistributeMeasurement - The 
	 * distance to use when distributing page items. Required when 
	 * 'align distribute bounds' specifies 'key object'. (Optional)
	 * @param {PageItem} reference - The reference or key object to 
	 * align to distribute relative to. Required when 'align 
	 * distribute bounds' specifies 'key object'. (Optional)
	 */
	distribute(alignDistributeItems: PageItem, distributeOption: DistributeOptions, alignDistributeBounds: AlignDistributeBounds, useDistributeMeasurement: boolean, absoluteDistributeMeasurement: number|string, reference: PageItem): void;
	/**
	 * Removes the frame fittings options and resets it to the 
	 * initial state.
	 */
	clearFrameFittingOptions(): void;
	/** Resets all the multi-state objects to their first state. */
	resetAllMultiStateObjects(): void;
	/** Resets all the buttons to their Normal state. */
	resetAllButtons(): void;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Document. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Document. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Document. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Document. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Document. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Close the Document
	 * @param {SaveOptions} saving - Whether to save changes before 
	 * closing the Document (Optional)
	 * @param {File} savingIn - The file in which to save the 
	 * Document (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version (Optional)
	 * @param {boolean} forceSave - Forcibly save a version 
	 * (Optional)
	 */
	close(saving?: SaveOptions, savingIn?: File, versionComments?: string, forceSave?: boolean): void;
	/**
	 * Save the document
	 * @param {File} to - Where to save the document. If the 
	 * document is already saved, a copy is saved at this path, the 
	 * original file is closed the new copy is opened (Optional)
	 * @param {boolean} stationery - Whether to save the file as 
	 * stationery (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version (Optional)
	 * @param {boolean} forceSave - Forcibly save a version 
	 * (Optional)
	 */
	save(to: File, stationery?: boolean, versionComments?: string, forceSave?: boolean): Document;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Transforms color values
	 * @param {number} colorValue - source color value
	 * @param {ColorSpace} sourceColorSpace - source color space
	 * @param {ColorSpace} destinationColorSpace - destination 
	 * color space
	 */
	colorTransform(colorValue: number, sourceColorSpace: ColorSpace, destinationColorSpace: ColorSpace): number;
	/**
	 * Load swatches from the specified file.
	 * @param {File} _from - The swatch file or InDesign document.
	 */
	loadSwatches(_from: File): void;
	/**
	 * Saves the specified swatch(es) to a swatchbook file.
	 * @param {File} to - The swatchbook file to save to.
	 * @param {Swatch} swatchList - The swatch(es) to save.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	saveSwatches(to: File, swatchList: Swatch, versionComments: string, forceSave?: boolean): void;
	/**
	 * Imports a spot color swatch from an Adobe color book.
	 * @param {string} name - The spot color to load.
	 */
	importAdobeSwatchbookSpotColor(name: string): Color;
	/**
	 * Imports a process color swatch from a preloaded Adobe color 
	 * book.
	 * @param {string} name - The process color to load.
	 */
	importAdobeSwatchbookProcessColor(name: string): Color;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Reverts the document to its state at the last save 
	 * operation.
	 */
	revert(): boolean;
	/**
	 * Saves a copy of the document.
	 * @param {File} to - The file path for the copy. Note: Leaves 
	 * the original document open and does not open the copy. 
	 * (Optional)
	 * @param {boolean} stationery - If true, saves the file as 
	 * stationery (Mac OS) or as a template (Windows). Note: The 
	 * file extension for stationery and templates is different 
	 * than the extension for regular files. (Optional)
	 */
	saveACopy(to: File, stationery?: boolean): void;
	/**
	 * Load conditions from the specified file.
	 * @param {File} _from - The path to the file that contains the 
	 * conditions.
	 * @param {boolean} loadConditionSets - If true, load the 
	 * condition sets as well. (Optional)
	 */
	loadConditions(_from: File, loadConditionSets: boolean): void;
	/**
	 * Selects the specified object(s).
	 * @param {any} selectableItems - The objects to select. Can 
	 * accept: Object, Array of Objects, NothingEnum enumerator or 
	 * SelectAll enumerator.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Document in relation to previously selected 
	 * objects. (Optional)
	 */
	select(selectableItems: any, existingSelection?: SelectionOptions): void;
	/** Undoes the last action. */
	undo(): void;
	/** Redoes the last action. */
	redo(): void;
	/**
	 * Create a missing font object.
	 * @param {string} fontFamily - The name of the font family
	 * @param {string} fontStyleName - The name of the font style.
	 * @param {string} postscriptName - The PostScript name of the 
	 * font.
	 */
	createMissingFontObject(fontFamily: string, fontStyleName: string, postscriptName: string): Font;
	/**
	 * Get the resolution strategy for style conflict, false if the 
	 * user cancels
	 * @param {StyleType} charOrParaStyle - Style type to look at. 
	 * (Optional)
	 */
	getStyleConflictResolutionStrategy(charOrParaStyle: StyleType): any;
	/**
	 * Exports as assets required for cloud library.
	 * @param {string} jsondata - JSON encoded information about 
	 * the export.
	 */
	exportForCloudLibrary(jsondata: string): boolean;
	/**
	 * Packages the document.
	 * @param {File} to - The folder, alias, or path in which to 
	 * place the packaged files.
	 * @param {boolean} copyingFonts - If true, copies fonts used 
	 * in the document to the package folder.
	 * @param {boolean} copyingLinkedGraphics - If true, copies 
	 * linked graphics files to the package folder.
	 * @param {boolean} copyingProfiles - If true, copies color 
	 * profiles to the package folder.
	 * @param {boolean} updatingGraphics - If true, updates 
	 * graphics links to the package folder.
	 * @param {boolean} includingHiddenLayers - If true, copies 
	 * fonts and links from hidden layers to the package.
	 * @param {boolean} ignorePreflightErrors - If true, ignores 
	 * preflight errors and proceeds with the packaging. If false, 
	 * cancels the packaging when errors exist.
	 * @param {boolean} creatingReport - If true, creates a package 
	 * report that includes printing instructions, print settings, 
	 * lists of fonts, links and required inks, and other 
	 * information.
	 * @param {boolean} includeIdml - If true, generates and 
	 * includes IDML in the package folder. (Optional)
	 * @param {boolean} includePdf - If true, generates and 
	 * includes PDF in the package folder. (Optional)
	 * @param {string} pdfStyle - If specified and PDF is to be 
	 * included, use this style for PDF export if it is valid, 
	 * otherwise use the last used PDF preset. (Optional)
	 * @param {string} versionComments - The comments for the 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	packageForPrint(to: File, copyingFonts: boolean, copyingLinkedGraphics: boolean, copyingProfiles: boolean, updatingGraphics: boolean, includingHiddenLayers: boolean, ignorePreflightErrors: boolean, creatingReport: boolean, includeIdml: boolean, includePdf: boolean, pdfStyle: string, versionComments: string, forceSave?: boolean): boolean;
	/**
	 * Embed this profile to the document.
	 * @param {any} using - The preflight profile to embed. Can 
	 * accept: String or PreflightProfile.
	 */
	embed(using: any): PreflightProfile;
	/**
	 * This will return an array of structs containing information 
	 * about the alternate layouts.
	 * @param {boolean} resolveMaster - Resolves layout policy if 
	 * setting is "use master" - default is true. (Optional)
	 */
	getAlternateLayoutsForFolio(resolveMaster: boolean): any;
	/**
	 * Generates a string which, if executed, will return the 
	 * Document.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Document;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of documents.
 * @class
 */
export declare class Documents {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new document.
	 * @param {boolean} showingWindow - If true, displays the 
	 * document. (Optional)
	 * @param {DocumentPreset} documentPreset - The document preset 
	 * to use. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Document (Optional)
	 */
	add(showingWindow?: boolean, documentPreset?: DocumentPreset, withProperties?: Object): Document;
	/** Displays the number of elements in the Document. */
	count(): number;
	/**
	 * Returns the Document with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Document;
	/**
	 * Returns the Document with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Document;
	/**
	 * Returns the Document with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Document;
	/**
	 * Returns the Documents within the specified range.
	 * @param {any} _from - The Document, index, or name at the 
	 * beginning of the range. Can accept: Document, Long Integer 
	 * or String.
	 * @param {any} to - The Document, index, or name at the end of 
	 * the range. Can accept: Document, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Document;
	/** Returns the first Document in the collection. */
	firstItem(): Document;
	/** Returns the last Document in the collection. */
	lastItem(): Document;
	/** Returns the middle Document in the collection. */
	middleItem(): Document;
	/**
	 * Returns the Document with the index previous to the 
	 * specified index.
	 * @param {Document} obj - The index of the Document that 
	 * follows the desired Document.
	 */
	previousItem(obj: Document): Document;
	/**
	 * Returns the Document whose index follows the specified 
	 * Document in the collection.
	 * @param {Document} obj - The Document whose index comes 
	 * before the desired Document.
	 */
	nextItem(obj: Document): Document;
	/** Returns any Document in the collection. */
	anyItem(): Document;
	/** Returns every Document in the collection. */
	everyItem(): Document;
	/**
	 * Generates a string which, if executed, will return the 
	 * Document.
	 */
	toSource(): string;
	/**
	 * Returns the Document with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Document;
}

/**
 * A window.
 * @class
 */
export declare class Window {
	/**
	 * Dispatched after the active selection changes. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_SELECTION_CHANGED: string;
	/**
	 * Dispatched after an attribute on the active selection 
	 * changes. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_SELECTION_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched before the Window becomes inactive. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly BEFORE_DEACTIVATE: string;
	/**
	 * Dispatched after the Window becomes active. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_ACTIVATE: string;
	/**
	 * Dispatched when the value of a property changes on this 
	 * Window. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched after a Window is opened. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_OPEN: string;
	/**
	 * Dispatched before a Window is closed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_CLOSE: string;
	/**
	 * Dispatched when a Window is closing. Since the close has 
	 * been committed, it can no longer be canceled. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_CLOSE: string;
	/** The name of the Window. */
	readonly name: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Window (a Document). */
	readonly parent: Document;
	/** The index of the Window within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The selected object(s). Can also accept: Object or 
	 * NothingEnum enumerator.
	 */
	selection: Object;
	/**
	 * The bounds of the window (specified in pixels) in the form 
	 * [top, left, bottom, right].
	 */
	bounds: number;
	/**
	 * The key object of the selection. Can also accept: 
	 * NothingEnum enumerator.
	 */
	selectionKeyObject: PageItem;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Selects the specified object(s).
	 * @param {any} selectableItems - The objects to select. Can 
	 * accept: Object, Array of Objects, NothingEnum enumerator or 
	 * SelectAll enumerator.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Window in relation to previously selected 
	 * objects. (Optional)
	 */
	select(selectableItems: any, existingSelection?: SelectionOptions): void;
	/** Closes the Window. */
	close(): void;
	/** Maximizes the window. */
	maximize(): void;
	/** Minimizes the window. */
	minimize(): void;
	/** Restores the window. */
	restore(): void;
	/** Brings the object to the front. */
	bringToFront(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * Window.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Window;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of windows.
 * @class
 */
export declare class Windows {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Window. */
	count(): number;
	/**
	 * Creates a new Window.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Window (Optional)
	 */
	add(withProperties: Object): Window;
	/**
	 * Returns the Window with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Window;
	/**
	 * Returns the Window with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Window;
	/**
	 * Returns the Windows within the specified range.
	 * @param {any} _from - The Window, index, or name at the 
	 * beginning of the range. Can accept: Window, Long Integer or 
	 * String.
	 * @param {any} to - The Window, index, or name at the end of 
	 * the range. Can accept: Window, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Window;
	/** Returns the first Window in the collection. */
	firstItem(): Window;
	/** Returns the last Window in the collection. */
	lastItem(): Window;
	/** Returns the middle Window in the collection. */
	middleItem(): Window;
	/**
	 * Returns the Window with the index previous to the specified 
	 * index.
	 * @param {Window} obj - The index of the Window that follows 
	 * the desired Window.
	 */
	previousItem(obj: Window): Window;
	/**
	 * Returns the Window whose index follows the specified Window 
	 * in the collection.
	 * @param {Window} obj - The Window whose index comes before 
	 * the desired Window.
	 */
	nextItem(obj: Window): Window;
	/** Returns any Window in the collection. */
	anyItem(): Window;
	/** Returns every Window in the collection. */
	everyItem(): Window;
	/**
	 * Generates a string which, if executed, will return the 
	 * Window.
	 */
	toSource(): string;
	/**
	 * Returns the Window with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Window;
}

/**
 * A layout window.
 * @class
 * @extends Window
 */
export declare class LayoutWindow extends Window {
	/**
	 * Dispatched after the active selection changes. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_SELECTION_CHANGED: string;
	/**
	 * Dispatched after an attribute on the active selection 
	 * changes. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_SELECTION_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched before the LayoutWindow becomes inactive. This 
	 * event bubbles. This event is not cancelable.
	 */
	readonly BEFORE_DEACTIVATE: string;
	/**
	 * Dispatched after the LayoutWindow becomes active. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_ACTIVATE: string;
	/**
	 * Dispatched when the value of a property changes on this 
	 * LayoutWindow. This event bubbles. This event is not 
	 * cancelable.
	 */
	readonly AFTER_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched after a LayoutWindow is opened. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_OPEN: string;
	/**
	 * Dispatched before a LayoutWindow is closed. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_CLOSE: string;
	/**
	 * Dispatched when a LayoutWindow is closing. Since the close 
	 * has been committed, it can no longer be canceled. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_CLOSE: string;
	/** The name of the LayoutWindow. */
	readonly name: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the LayoutWindow (a Document). */
	readonly parent: Document;
	/** The index of the LayoutWindow within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The display performance preferences override for the view. */
	viewDisplaySetting: ViewDisplaySettings;
	/**
	 * The default anchor point around which to transform objects. 
	 * Can return: AnchorPoint enumerator or Array of 2 Units.
	 */
	transformReferencePoint: any;
	/** The active layer. Can also accept: String. */
	activeLayer: Layer;
	/**
	 * The size (as a percentage) to which to enlarge or reduce the 
	 * view of the document. (Range: 5 to 4000)
	 */
	zoomPercentage: number;
	/** The front-most spread. Can return: Spread or MasterSpread. */
	activeSpread: any;
	/** The front-most page. */
	activePage: Page;
	/** The screen mode for layout view. */
	screenMode: ScreenModeOptions;
	/** If true, display a simulation of overprinting. */
	overprintPreview: boolean;
	/** The profile used for proofing colors. */
	proofingProfile: string;
	/** The method of proofing colors. */
	proofingType: ProofingType;
	/**
	 * If true, simulates the dark gray produced by many printers 
	 * in place of solid black, according to the proofing profile. 
	 * Note: Valid only when proofing type is custom.
	 */
	simulateInkBlack: boolean;
	/**
	 * If true, simulates the dingy white of real paper, according 
	 * to the proofing profile. Note: Valid only when proofing type 
	 * is custom.
	 */
	simulatePaperWhite: boolean;
	/**
	 * If true, leaves color values unchanged for CMYK objects 
	 * without embedded profiles and native objects such as line 
	 * art or type. Note: Converts images whose profiles differ 
	 * from the profile of the simulated device. Valid only when 
	 * proofing type is custom.
	 */
	preserveColorNumbers: boolean;
	/**
	 * The selected object(s). Can also accept: Object or 
	 * NothingEnum enumerator.
	 */
	selection: Object;
	/**
	 * The bounds of the window (specified in pixels) in the form 
	 * [top, left, bottom, right].
	 */
	bounds: number;
	/**
	 * The key object of the selection. Can also accept: 
	 * NothingEnum enumerator.
	 */
	selectionKeyObject: PageItem;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Magnifies or reduces the window to the specified display 
	 * size.
	 * @param {ZoomOptions} given - The display size.
	 */
	zoom(given: ZoomOptions): void;
	/**
	 * Selects the specified object(s).
	 * @param {any} selectableItems - The objects to select. Can 
	 * accept: Object, Array of Objects, NothingEnum enumerator or 
	 * SelectAll enumerator.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the LayoutWindow in relation to previously 
	 * selected objects. (Optional)
	 */
	select(selectableItems: any, existingSelection?: SelectionOptions): void;
	/** Closes the LayoutWindow. */
	close(): void;
	/** Maximizes the window. */
	maximize(): void;
	/** Minimizes the window. */
	minimize(): void;
	/** Restores the window. */
	restore(): void;
	/** Brings the object to the front. */
	bringToFront(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * LayoutWindow.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): LayoutWindow;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of layout windows.
 * @class
 */
export declare class LayoutWindows {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the LayoutWindow. */
	count(): number;
	/**
	 * Returns the LayoutWindow with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): LayoutWindow;
	/**
	 * Returns the LayoutWindow with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): LayoutWindow;
	/**
	 * Returns the LayoutWindows within the specified range.
	 * @param {any} _from - The LayoutWindow, index, or name at the 
	 * beginning of the range. Can accept: LayoutWindow, Long 
	 * Integer or String.
	 * @param {any} to - The LayoutWindow, index, or name at the 
	 * end of the range. Can accept: LayoutWindow, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): LayoutWindow;
	/** Returns the first LayoutWindow in the collection. */
	firstItem(): LayoutWindow;
	/** Returns the last LayoutWindow in the collection. */
	lastItem(): LayoutWindow;
	/** Returns the middle LayoutWindow in the collection. */
	middleItem(): LayoutWindow;
	/**
	 * Returns the LayoutWindow with the index previous to the 
	 * specified index.
	 * @param {LayoutWindow} obj - The index of the LayoutWindow 
	 * that follows the desired LayoutWindow.
	 */
	previousItem(obj: LayoutWindow): LayoutWindow;
	/**
	 * Returns the LayoutWindow whose index follows the specified 
	 * LayoutWindow in the collection.
	 * @param {LayoutWindow} obj - The LayoutWindow whose index 
	 * comes before the desired LayoutWindow.
	 */
	nextItem(obj: LayoutWindow): LayoutWindow;
	/** Returns any LayoutWindow in the collection. */
	anyItem(): LayoutWindow;
	/** Returns every LayoutWindow in the collection. */
	everyItem(): LayoutWindow;
	/**
	 * Generates a string which, if executed, will return the 
	 * LayoutWindow.
	 */
	toSource(): string;
	/**
	 * Returns the LayoutWindow with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: LayoutWindow;
}

/**
 * A story window.
 * @class
 * @extends Window
 */
export declare class StoryWindow extends Window {
	/**
	 * Dispatched after the active selection changes. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_SELECTION_CHANGED: string;
	/**
	 * Dispatched after an attribute on the active selection 
	 * changes. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_SELECTION_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched before the StoryWindow becomes inactive. This 
	 * event bubbles. This event is not cancelable.
	 */
	readonly BEFORE_DEACTIVATE: string;
	/**
	 * Dispatched after the StoryWindow becomes active. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_ACTIVATE: string;
	/**
	 * Dispatched when the value of a property changes on this 
	 * StoryWindow. This event bubbles. This event is not 
	 * cancelable.
	 */
	readonly AFTER_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched after a StoryWindow is opened. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_OPEN: string;
	/**
	 * Dispatched before a StoryWindow is closed. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_CLOSE: string;
	/**
	 * Dispatched when a StoryWindow is closing. Since the close 
	 * has been committed, it can no longer be canceled. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_CLOSE: string;
	/** The name of the StoryWindow. */
	readonly name: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the StoryWindow (a Document). */
	readonly parent: Document;
	/** The index of the StoryWindow within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The selected object(s). Can also accept: Object or 
	 * NothingEnum enumerator.
	 */
	selection: Object;
	/**
	 * The bounds of the window (specified in pixels) in the form 
	 * [top, left, bottom, right].
	 */
	bounds: number;
	/**
	 * The key object of the selection. Can also accept: 
	 * NothingEnum enumerator.
	 */
	selectionKeyObject: PageItem;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Selects the specified object(s).
	 * @param {any} selectableItems - The objects to select. Can 
	 * accept: Object, Array of Objects, NothingEnum enumerator or 
	 * SelectAll enumerator.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the StoryWindow in relation to previously selected 
	 * objects. (Optional)
	 */
	select(selectableItems: any, existingSelection?: SelectionOptions): void;
	/** Closes the StoryWindow. */
	close(): void;
	/** Maximizes the window. */
	maximize(): void;
	/** Minimizes the window. */
	minimize(): void;
	/** Restores the window. */
	restore(): void;
	/** Brings the object to the front. */
	bringToFront(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * StoryWindow.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): StoryWindow;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of story windows.
 * @class
 */
export declare class StoryWindows {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the StoryWindow. */
	count(): number;
	/**
	 * Returns the StoryWindow with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): StoryWindow;
	/**
	 * Returns the StoryWindow with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): StoryWindow;
	/**
	 * Returns the StoryWindows within the specified range.
	 * @param {any} _from - The StoryWindow, index, or name at the 
	 * beginning of the range. Can accept: StoryWindow, Long 
	 * Integer or String.
	 * @param {any} to - The StoryWindow, index, or name at the end 
	 * of the range. Can accept: StoryWindow, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): StoryWindow;
	/** Returns the first StoryWindow in the collection. */
	firstItem(): StoryWindow;
	/** Returns the last StoryWindow in the collection. */
	lastItem(): StoryWindow;
	/** Returns the middle StoryWindow in the collection. */
	middleItem(): StoryWindow;
	/**
	 * Returns the StoryWindow with the index previous to the 
	 * specified index.
	 * @param {StoryWindow} obj - The index of the StoryWindow that 
	 * follows the desired StoryWindow.
	 */
	previousItem(obj: StoryWindow): StoryWindow;
	/**
	 * Returns the StoryWindow whose index follows the specified 
	 * StoryWindow in the collection.
	 * @param {StoryWindow} obj - The StoryWindow whose index comes 
	 * before the desired StoryWindow.
	 */
	nextItem(obj: StoryWindow): StoryWindow;
	/** Returns any StoryWindow in the collection. */
	anyItem(): StoryWindow;
	/** Returns every StoryWindow in the collection. */
	everyItem(): StoryWindow;
	/**
	 * Generates a string which, if executed, will return the 
	 * StoryWindow.
	 */
	toSource(): string;
	/**
	 * Returns the StoryWindow with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: StoryWindow;
}

/**
 * A document event.
 * @class
 * @extends Event
 */
export declare class DocumentEvent extends Event {
	/**
	 * Dispatched before a Document is created. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_NEW: string;
	/**
	 * Dispatched after a Document is created. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_NEW: string;
	/**
	 * Dispatched before a Document is opened. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_OPEN: string;
	/**
	 * Dispatched after a Document is opened. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_OPEN: string;
	/**
	 * Dispatched before a Document is saved. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_SAVE: string;
	/**
	 * Dispatched after a Document is saved. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_SAVE: string;
	/**
	 * Dispatched before a Document is saved under a new name. This 
	 * event bubbles. This event is cancelable.
	 */
	readonly BEFORE_SAVE_AS: string;
	/**
	 * Dispatched after a Document is saved under a new name. This 
	 * event bubbles. This event is not cancelable.
	 */
	readonly AFTER_SAVE_AS: string;
	/**
	 * Dispatched before a copy of a Document is saved. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_SAVE_A_COPY: string;
	/**
	 * Dispatched after a copy of a Document is saved. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_SAVE_A_COPY: string;
	/**
	 * Dispatched before a Document is reverted. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_REVERT: string;
	/**
	 * Dispatched after a Document is reverted. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_REVERT: string;
	/**
	 * Dispatched before a Document is closed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly BEFORE_CLOSE: string;
	/**
	 * Dispatched after a Document is closed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_CLOSE: string;
	/**
	 * The full path to the DocumentEvent, including the name of 
	 * the DocumentEvent.
	 */
	readonly fullName: File;
	/** The name of the event. */
	readonly eventType: string;
	/** The target of the event. */
	readonly target: Object;
	/** The current propagation target of the event. */
	readonly currentTarget: Object;
	/** The current propagation phase of the event. */
	readonly eventPhase: EventPhases;
	/**
	 * If true, the event supports the bubbling phase of 
	 * propagation.
	 */
	readonly bubbles: boolean;
	/**
	 * If true, the default behavior of the event on its target can 
	 * be canceled.
	 */
	readonly cancelable: boolean;
	/** The time the event was initialized. */
	readonly timeStamp: Date;
	/**
	 * If true, propagation of the event beyond the current target 
	 * has been stopped.
	 */
	readonly propagationStopped: boolean;
	/**
	 * If true, the default behavior of the event on its target has 
	 * been canceled.
	 */
	readonly defaultPrevented: boolean;
	/** The unique ID of the DocumentEvent. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the DocumentEvent (a Application or Document).
	 */
	readonly parent: any;
	/**
	 * The index of the DocumentEvent within its containing object.
	 */
	readonly index: number;
	/**
	 * Controls the display of dialogs and alerts during script 
	 * processing.
	 */
	userInteractionLevel: UserInteractionLevels;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Stops propagation of the event beyond the current target. */
	stopPropagation(): void;
	/** Cancels the default behavior of the event on its target. */
	preventDefault(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * DocumentEvent.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DocumentEvent;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
}

/**
 * An import or export event.
 * @class
 * @extends Event
 */
export declare class ImportExportEvent extends Event {
	/**
	 * Dispatched before a ImportExportEvent is exported. This 
	 * event bubbles. This event is cancelable.
	 */
	readonly BEFORE_EXPORT: string;
	/**
	 * Dispatched after a ImportExportEvent is exported. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_EXPORT: string;
	/**
	 * Dispatched before importing a file into a ImportExportEvent. 
	 * This event bubbles. This event is cancelable.
	 */
	readonly BEFORE_IMPORT: string;
	/**
	 * Dispatched after importing a file into a ImportExportEvent. 
	 * This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_IMPORT: string;
	/**
	 * Dispatched after a ImportExportEvent export is canceled or 
	 * fails. This event bubbles. This event is not cancelable.
	 */
	readonly FAILED_EXPORT: string;
	/**
	 * The full path to the ImportExportEvent, including the name 
	 * of the ImportExportEvent.
	 */
	readonly fullName: File;
	/** The import/export file format. */
	readonly format: string;
	/** The name of the event. */
	readonly eventType: string;
	/** The target of the event. */
	readonly target: Object;
	/** The current propagation target of the event. */
	readonly currentTarget: Object;
	/** The current propagation phase of the event. */
	readonly eventPhase: EventPhases;
	/**
	 * If true, the event supports the bubbling phase of 
	 * propagation.
	 */
	readonly bubbles: boolean;
	/**
	 * If true, the default behavior of the event on its target can 
	 * be canceled.
	 */
	readonly cancelable: boolean;
	/** The time the event was initialized. */
	readonly timeStamp: Date;
	/**
	 * If true, propagation of the event beyond the current target 
	 * has been stopped.
	 */
	readonly propagationStopped: boolean;
	/**
	 * If true, the default behavior of the event on its target has 
	 * been canceled.
	 */
	readonly defaultPrevented: boolean;
	/** The unique ID of the ImportExportEvent. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ImportExportEvent (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/**
	 * The index of the ImportExportEvent within its containing 
	 * object.
	 */
	readonly index: number;
	/**
	 * Controls the display of dialogs and alerts during script 
	 * processing.
	 */
	userInteractionLevel: UserInteractionLevels;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Stops propagation of the event beyond the current target. */
	stopPropagation(): void;
	/** Cancels the default behavior of the event on its target. */
	preventDefault(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * ImportExportEvent.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ImportExportEvent;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
}

/**
 * Represents the content placer object.
 * @class
 * @extends Preference
 */
export declare class ContentPlacerObject extends Preference {
	/**
	 * Whether the Content Placer is currently loaded with content 
	 * for placing.
	 */
	readonly loaded: boolean;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ContentPlacerObject (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Load the Content Placer with one or more objects.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	load(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * ContentPlacerObject.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ContentPlacerObject;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A book.
 * @class
 */
export declare class Book {
	/** Print preference settings. */
	readonly printPreferences: PrintPreference;
	/** The name of the Book. */
	readonly name: string;
	/** The full path to the Book, including the name of the Book. */
	readonly fullName: File;
	/** The full path to the file. */
	readonly filePath: File;
	/**
	 * If true, the Book has been modified since it was last saved.
	 */
	readonly modified: boolean;
	/** If true, the Book has been saved since it was created. */
	readonly saved: boolean;
	/** Preflight book option settings. */
	readonly preflightBookOptions: PreflightBookOption;
	/** EPub fixed layout export preference settings. */
	readonly epubFixedLayoutExportPreferences: EPubFixedLayoutExportPreference;
	/** EPub export preference settings. */
	readonly epubExportPreferences: EPubExportPreference;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Book (a Application). */
	readonly parent: Application;
	/** The index of the Book within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of book content objects. */
	readonly bookContents: BookContents;
	/**
	 * Current style source document. Can return: Document or 
	 * BookContent.
	 */
	styleSourceDocument: any;
	/**
	 * Page numbering options for book content objects within the 
	 * book.
	 */
	repaginationOption: RepaginateOption;
	/**
	 * If true, inserts a blank page as necessary to fill in page 
	 * number gaps caused by the odd or even specification set in 
	 * the repagination option.
	 */
	insertBlankPage: boolean;
	/**
	 * If true, automatically updates page numbers when pages in 
	 * book content files are added, deleted, or rearranged.
	 */
	automaticPagination: boolean;
	/**
	 * If true, automatically converts the book content object 
	 * during repagination and synchronization.
	 */
	automaticDocumentConversion: boolean;
	/**
	 * If true, merges identically named layers when exporting to 
	 * PDF.
	 */
	mergeIdenticalLayers: boolean;
	/** A property that can be set to any string. */
	label: string;
	/** If true, synchronize table of content styles. */
	synchronizeTableOfContentStyle: boolean;
	/** If true, synchronize text variables. */
	synchronizeTextVariable: boolean;
	/** If true, synchronize table styles. */
	synchronizeTableStyle: boolean;
	/** If true, synchronize paragraph styles. */
	synchronizeParagraphStyle: boolean;
	/** If true, synchronize character styles. */
	synchronizeCharacterStyle: boolean;
	/** If true, synchronize trap styles. */
	synchronizeTrapStyle: boolean;
	/** If true, synchronize master pages. */
	synchronizeMasterPage: boolean;
	/** If true, synchronize object styles. */
	synchronizeObjectStyle: boolean;
	/** If true, synchronize swatches. */
	synchronizeSwatch: boolean;
	/** If true, synchronize cell styles. */
	synchronizeCellStyle: boolean;
	/** If true, synchronize bullets and numbering. */
	synchronizeBulletNumberingList: boolean;
	/** If true, synchronize conditional text. */
	synchronizeConditionalText: boolean;
	/**
	 * How to match styles with same name while synchronizing a 
	 * book.
	 */
	smartMatchStyleGroups: SmartMatchOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Prints the Book(s).
	 * @param {boolean} printDialog - Whether to invoke the print 
	 * dialog (Optional)
	 * @param {any} using - Printer preset to use. Can accept: 
	 * PrinterPresetTypes enumerator or PrinterPreset. (Optional)
	 */
	print(printDialog: boolean, using: any): void;
	/**
	 * Close the Book
	 * @param {SaveOptions} saving - Whether to save changes before 
	 * closing the Book (Optional)
	 * @param {File} savingIn - The file in which to save the Book 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version (Optional)
	 * @param {boolean} forceSave - Forcibly save a version 
	 * (Optional)
	 */
	close(saving?: SaveOptions, savingIn?: File, versionComments?: string, forceSave?: boolean): void;
	/**
	 * Saves the book.
	 * @param {File} to - The file path. Note: Required only if the 
	 * book has not been previously saved. If the book has 
	 * previously been saved, specifying a path saves a copy and 
	 * closes the original book. (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	save(to: File, versionComments: string, forceSave?: boolean): void;
	/**
	 * Exports the book to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The file to which to export the book. 
	 * (Optional)
	 * @param {boolean} showingOptions - Used to specify if the PDF 
	 * Export Options Dialog needs to be shown or not (Optional)
	 * @param {PDFExportPreset} using - Used to specify the presets 
	 * for the export which can be the object of the preset type, 
	 * enumeration for existing presets or user defined presets, or 
	 * a string naming the preset to be used, but in case Showing 
	 * Options is true, the preset specified in the Export Dialog 
	 * will over ride this parameter (Optional)
	 * @param {BookContent} whichDocuments - Used to specify a list 
	 * of book content references, from the current book, where the 
	 * list may contain duplicate entries and if the list is not 
	 * specified then the entire book contents shall be exported 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, whichDocuments?: BookContent, versionComments?: string, forceSave?: boolean): void;
	/** Synchronizes the entire book to the style source document. */
	synchronize(): void;
	/** Repaginates the book. */
	repaginate(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Updates chapter numbers and paragraph numbers throughout the 
	 * book.
	 */
	updateChapterAndParagraphNumbers(): void;
	/**
	 * Update all numbers (e.g. Page numbers, chapter numbers and 
	 * paragraph numbers) throughout the book.
	 */
	updateAllNumbers(): void;
	/** Updates the cross references in the entire book. */
	updateAllCrossReferences(): void;
	/**
	 * Packages the document.
	 * @param {File} to - The folder, alias, or path in which to 
	 * place the packaged files.
	 * @param {boolean} copyingFonts - If true, copies fonts used 
	 * in the document to the package folder.
	 * @param {boolean} copyingLinkedGraphics - If true, copies 
	 * linked graphics files to the package folder.
	 * @param {boolean} copyingProfiles - If true, copies color 
	 * profiles to the package folder.
	 * @param {boolean} updatingGraphics - If true, updates 
	 * graphics links to the package folder.
	 * @param {boolean} includingHiddenLayers - If true, copies 
	 * fonts and links from hidden layers to the package.
	 * @param {boolean} ignorePreflightErrors - If true, ignores 
	 * preflight errors and proceeds with the packaging. If false, 
	 * cancels the packaging when errors exist.
	 * @param {boolean} creatingReport - If true, creates a package 
	 * report that includes printing instructions, print settings, 
	 * lists of fonts, links and required inks, and other 
	 * information.
	 * @param {boolean} includeIdml - If true, generates and 
	 * includes IDML in the package folder. (Optional)
	 * @param {boolean} includePdf - If true, generates and 
	 * includes PDF in the package folder. (Optional)
	 * @param {string} pdfStyle - If specified and PDF is to be 
	 * included, use this style for PDF export if it is valid, 
	 * otherwise use the last used PDF preset. (Optional)
	 * @param {string} versionComments - The comments for the 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	packageForPrint(to: File, copyingFonts: boolean, copyingLinkedGraphics: boolean, copyingProfiles: boolean, updatingGraphics: boolean, includingHiddenLayers: boolean, ignorePreflightErrors: boolean, creatingReport: boolean, includeIdml: boolean, includePdf: boolean, pdfStyle: string, versionComments: string, forceSave?: boolean): boolean;
	/**
	 * Preflight a book and optionally save the resulting report.
	 * @param {File} to - The preflight report to save to. 
	 * (Optional)
	 * @param {boolean} autoOpen - If true, automatically open the 
	 * report after creation. (Optional)
	 */
	preflight(to: File, autoOpen?: boolean): void;
	/**
	 * Generates a string which, if executed, will return the Book.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Book;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of books.
 * @class
 */
export declare class Books {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new book.
	 * @param {File} fullName - The full path name of the new book 
	 * file, including the book file extension '.indb'.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Book (Optional)
	 */
	add(fullName: File, withProperties: Object): Book;
	/** Displays the number of elements in the Book. */
	count(): number;
	/**
	 * Returns the Book with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Book;
	/**
	 * Returns the Book with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Book;
	/**
	 * Returns the Books within the specified range.
	 * @param {any} _from - The Book, index, or name at the 
	 * beginning of the range. Can accept: Book, Long Integer or 
	 * String.
	 * @param {any} to - The Book, index, or name at the end of the 
	 * range. Can accept: Book, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Book;
	/** Returns the first Book in the collection. */
	firstItem(): Book;
	/** Returns the last Book in the collection. */
	lastItem(): Book;
	/** Returns the middle Book in the collection. */
	middleItem(): Book;
	/**
	 * Returns the Book with the index previous to the specified 
	 * index.
	 * @param {Book} obj - The index of the Book that follows the 
	 * desired Book.
	 */
	previousItem(obj: Book): Book;
	/**
	 * Returns the Book whose index follows the specified Book in 
	 * the collection.
	 * @param {Book} obj - The Book whose index comes before the 
	 * desired Book.
	 */
	nextItem(obj: Book): Book;
	/** Returns any Book in the collection. */
	anyItem(): Book;
	/** Returns every Book in the collection. */
	everyItem(): Book;
	/**
	 * Generates a string which, if executed, will return the Book.
	 */
	toSource(): string;
	/**
	 * Returns the Book with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Book;
}

/**
 * A document added to a book.
 * @class
 */
export declare class BookContent {
	/**
	 * The full path to the BookContent, including the name of the 
	 * BookContent.
	 */
	readonly fullName: File;
	/** The status of the book content object file. */
	readonly status: BookContentStatus;
	/** The size of the BookContent file. */
	readonly size: number;
	/** The date and time the BookContent was created. */
	readonly date: Date;
	/** The page range of the book content object within the book. */
	readonly documentPageRange: string;
	/** The full path to the file. */
	readonly filePath: File;
	/** The name of the BookContent. */
	readonly name: string;
	/** The unique ID of the BookContent. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the BookContent (a Book). */
	readonly parent: Book;
	/** The index of the BookContent within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Moves the book content object.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the book. (Optional)
	 * @param {BookContent} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * (Optional)
	 */
	move(to?: LocationOptions, reference?: BookContent): BookContent;
	/** Deletes the BookContent. */
	remove(): void;
	/**
	 * Replaces a book content object with a new file. Note: If the 
	 * new file replaces the current style source document, the new 
	 * file becomes the style source document.
	 * @param {File} using - The full path name of the new book 
	 * content object.
	 */
	replace(using: File): BookContent;
	/**
	 * Matches the formatting of the book content object to the 
	 * style source document.
	 */
	synchronize(): void;
	/**
	 * Preflight a book content object and optionally save the 
	 * resulting report.
	 * @param {File} to - The preflight report to save to. 
	 * (Optional)
	 * @param {boolean} autoOpen - If true, automatically open the 
	 * report after creation. (Optional)
	 */
	preflight(to: File, autoOpen?: boolean): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * BookContent.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): BookContent;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of book content objects.
 * @class
 */
export declare class BookContents {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new book content object.
	 * @param {File} fullName - The full path name of the new book 
	 * content object.
	 * @param {number} at - The location of the book content object 
	 * within the book. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new BookContent (Optional)
	 */
	add(fullName: File, at?: number, withProperties?: Object): BookContent;
	/** Displays the number of elements in the BookContent. */
	count(): number;
	/**
	 * Returns the BookContent with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): BookContent;
	/**
	 * Returns the BookContent with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): BookContent;
	/**
	 * Returns the BookContent with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): BookContent;
	/**
	 * Returns the BookContents within the specified range.
	 * @param {any} _from - The BookContent, index, or name at the 
	 * beginning of the range. Can accept: BookContent, Long 
	 * Integer or String.
	 * @param {any} to - The BookContent, index, or name at the end 
	 * of the range. Can accept: BookContent, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): BookContent;
	/** Returns the first BookContent in the collection. */
	firstItem(): BookContent;
	/** Returns the last BookContent in the collection. */
	lastItem(): BookContent;
	/** Returns the middle BookContent in the collection. */
	middleItem(): BookContent;
	/**
	 * Returns the BookContent with the index previous to the 
	 * specified index.
	 * @param {BookContent} obj - The index of the BookContent that 
	 * follows the desired BookContent.
	 */
	previousItem(obj: BookContent): BookContent;
	/**
	 * Returns the BookContent whose index follows the specified 
	 * BookContent in the collection.
	 * @param {BookContent} obj - The BookContent whose index comes 
	 * before the desired BookContent.
	 */
	nextItem(obj: BookContent): BookContent;
	/** Returns any BookContent in the collection. */
	anyItem(): BookContent;
	/** Returns every BookContent in the collection. */
	everyItem(): BookContent;
	/**
	 * Generates a string which, if executed, will return the 
	 * BookContent.
	 */
	toSource(): string;
	/**
	 * Returns the BookContent with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: BookContent;
}

/**
 * An ink.
 * @class
 */
export declare class Ink {
	/** If true, the ink is a process ink. */
	readonly isProcessInk: boolean;
	/** The name of the Ink. */
	readonly name: string;
	/** The solidity value of the ink. (Range: 0.0 to 1.0) */
	readonly solidity: number;
	/** The unique ID of the Ink. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Ink (a Application or Document). */
	readonly parent: any;
	/** The index of the Ink within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The ink object to map this ink to. */
	aliasInkName: string;
	/** The angle of the ink. (Range: 0 to 360) */
	angle: number;
	/** Converts spot inks to process inks. */
	convertToProcess: boolean;
	/** The frequency of the ink. (Range: 1 to 500) */
	frequency: number;
	/** The neutral density of the ink. (Range: 0.001 to 10.0) */
	neutralDensity: number;
	/**
	 * If true, prints the ink. Only valid when printing 
	 * separations.
	 */
	printInk: boolean;
	/** The place of the ink in the trapping sequence. */
	trapOrder: number;
	/** The trapping type of the ink. */
	inkType: InkTypes;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/** Generates a string which, if executed, will return the Ink. */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Ink;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of inks.
 * @class
 */
export declare class Inks {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Ink. */
	count(): number;
	/**
	 * Returns the Ink with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Ink;
	/**
	 * Returns the Ink with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Ink;
	/**
	 * Returns the Ink with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Ink;
	/**
	 * Returns the Inks within the specified range.
	 * @param {any} _from - The Ink, index, or name at the 
	 * beginning of the range. Can accept: Ink, Long Integer or 
	 * String.
	 * @param {any} to - The Ink, index, or name at the end of the 
	 * range. Can accept: Ink, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Ink;
	/** Returns the first Ink in the collection. */
	firstItem(): Ink;
	/** Returns the last Ink in the collection. */
	lastItem(): Ink;
	/** Returns the middle Ink in the collection. */
	middleItem(): Ink;
	/**
	 * Returns the Ink with the index previous to the specified 
	 * index.
	 * @param {Ink} obj - The index of the Ink that follows the 
	 * desired Ink.
	 */
	previousItem(obj: Ink): Ink;
	/**
	 * Returns the Ink whose index follows the specified Ink in the 
	 * collection.
	 * @param {Ink} obj - The Ink whose index comes before the 
	 * desired Ink.
	 */
	nextItem(obj: Ink): Ink;
	/** Returns any Ink in the collection. */
	anyItem(): Ink;
	/** Returns every Ink in the collection. */
	everyItem(): Ink;
	/** Generates a string which, if executed, will return the Ink. */
	toSource(): string;
	/**
	 * Returns the Ink with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Ink;
}

/**
 * A trap preset.
 * @class
 */
export declare class TrapPreset {
	/** The unique ID of the TrapPreset. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TrapPreset (a Application or Document). */
	readonly parent: any;
	/** The index of the TrapPreset within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the TrapPreset. */
	name: string;
	/**
	 * The default width for trapping all colors except those 
	 * involving solid black. (Range depends on unit. For points: 
	 * 0.0 to 8.0; picas: 0p0 to 0p8; inches: 0 to 0.1111; mm: 0 to 
	 * 2.822; cm: 0 to .2822; ciceros: 0c0 to 0c7.507)
	 */
	defaultTrapWidth: number|string;
	/**
	 * The black width. (Range depends on unit. For points: 0.0 to 
	 * 8.0; picas: 0p0 to 0p8; inches: 0 to 0.1111; mm: 0 to 2.822; 
	 * cm: 0 to .2822; ciceros: 0c0 to 0c7.507)
	 */
	blackWidth: number|string;
	/** The join type of the trap preset. */
	trapJoin: EndJoin;
	/** The shape to use at the intersection of three-way traps. */
	trapEnd: TrapEndTypes;
	/** If true, ensures that vector objects overlap bitmap images. */
	objectsToImages: boolean;
	/**
	 * If true, turns on trapping along the boundary of overlapping 
	 * or abutting bitmap images.
	 */
	imagesToImages: boolean;
	/**
	 * If true, turns on trapping among colors within individual 
	 * bitmap images.
	 */
	internalImages: boolean;
	/**
	 * If true, ensures that one-bit images trap to abutting 
	 * objects.
	 */
	oneBitImages: boolean;
	/**
	 * The trap placement between vector objects and bitmap images.
	 */
	imagePlacement: TrapImagePlacementTypes;
	/**
	 * The amount (as a percentage) that components of abutting 
	 * colors must vary before a trap is created. (Range: 1 to 100)
	 */
	stepThreshold: number;
	/**
	 * The minimum amount (as a percentage) of black ink required 
	 * before the black width setting is applied. (Range: 0 to 100)
	 */
	blackColorThreshold: number;
	/**
	 * The neutral density value at or above which an ink is 
	 * considered black. (Range: .001 to 10)
	 */
	blackDensity: number;
	/**
	 * The difference (as a percentage) between the neutral 
	 * densities of abutting colors at which the trap is moved from 
	 * the darker side of a color edge toward the centerline. 
	 * (Range: 0 to 100)
	 */
	slidingTrapThreshold: number;
	/**
	 * The degree (as a percentage) to which components from 
	 * abutting colors are used to reduce the trap color. (Range: 0 
	 * to 100) Note: 0% makes a trap whose neutral density is equal 
	 * to the neutral density of the darker color.
	 */
	colorReduction: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the TrapPreset. */
	duplicate(): TrapPreset;
	/**
	 * Deletes the trap preset.
	 * @param {TrapPreset} replacingWith - The trap preset to apply 
	 * in place of the deleted preset.
	 */
	remove(replacingWith: TrapPreset): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * TrapPreset.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TrapPreset;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of trap presets.
 * @class
 */
export declare class TrapPresets {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new TrapPreset.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TrapPreset (Optional)
	 */
	add(withProperties: Object): TrapPreset;
	/** Displays the number of elements in the TrapPreset. */
	count(): number;
	/**
	 * Returns the TrapPreset with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TrapPreset;
	/**
	 * Returns the TrapPreset with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TrapPreset;
	/**
	 * Returns the TrapPreset with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): TrapPreset;
	/**
	 * Returns the TrapPresets within the specified range.
	 * @param {any} _from - The TrapPreset, index, or name at the 
	 * beginning of the range. Can accept: TrapPreset, Long Integer 
	 * or String.
	 * @param {any} to - The TrapPreset, index, or name at the end 
	 * of the range. Can accept: TrapPreset, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): TrapPreset;
	/** Returns the first TrapPreset in the collection. */
	firstItem(): TrapPreset;
	/** Returns the last TrapPreset in the collection. */
	lastItem(): TrapPreset;
	/** Returns the middle TrapPreset in the collection. */
	middleItem(): TrapPreset;
	/**
	 * Returns the TrapPreset with the index previous to the 
	 * specified index.
	 * @param {TrapPreset} obj - The index of the TrapPreset that 
	 * follows the desired TrapPreset.
	 */
	previousItem(obj: TrapPreset): TrapPreset;
	/**
	 * Returns the TrapPreset whose index follows the specified 
	 * TrapPreset in the collection.
	 * @param {TrapPreset} obj - The TrapPreset whose index comes 
	 * before the desired TrapPreset.
	 */
	nextItem(obj: TrapPreset): TrapPreset;
	/** Returns any TrapPreset in the collection. */
	anyItem(): TrapPreset;
	/** Returns every TrapPreset in the collection. */
	everyItem(): TrapPreset;
	/**
	 * Generates a string which, if executed, will return the 
	 * TrapPreset.
	 */
	toSource(): string;
	/**
	 * Returns the TrapPreset with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TrapPreset;
}

/**
 * A mixed ink swatch.
 * @class
 * @extends Swatch
 */
export declare class MixedInk extends Swatch {
	/** The component inks. */
	readonly inkList: Ink;
	/** The mixed ink group that a mixed ink swatch is based on. */
	readonly baseColor: MixedInkGroup;
	/** The color group that a swatch belongs to */
	readonly parentColorGroup: ColorGroup;
	/** The unique ID of the MixedInk. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the MixedInk (a Application or Document). */
	readonly parent: any;
	/** The index of the MixedInk within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The color model. */
	model: ColorModel;
	/** The color space. */
	space: ColorSpace;
	/**
	 * The array of tint percentages for inks in the ink list. 
	 * Note: Specify a value for each ink.
	 */
	inkPercentages: number;
	/** The name of the MixedInk. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the swatch.
	 * @param {Swatch} replacingWith - The swatch to apply in place 
	 * of the deleted swatch. (Optional)
	 */
	remove(replacingWith: Swatch): void;
	/** Duplicates the MixedInk. */
	duplicate(): MixedInk;
	/**
	 * Merges the specified swatches with the swatch.
	 * @param {any} _with - The swatches to merge. Can accept: 
	 * Array of Swatches, Swatch or String.
	 */
	merge(_with: any): Swatch;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * MixedInk.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MixedInk;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of mixed inks.
 * @class
 */
export declare class MixedInks {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the MixedInk. */
	count(): number;
	/**
	 * Creates a new mixed ink swatch.
	 * @param {any} inkList - The inks to mix. Note: Must contain 
	 * at least two process inks and one spot ink. Can accept: 
	 * Array of Inks or MixedInkGroup.
	 * @param {number} inkPercentages - The percent to use of each 
	 * ink in the ink list. (Range: 0 to 100 for each ink)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MixedInk (Optional)
	 */
	add(inkList: any, inkPercentages: number, withProperties: Object): MixedInk;
	/**
	 * Returns the MixedInk with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MixedInk;
	/**
	 * Returns the MixedInk with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): MixedInk;
	/**
	 * Returns the MixedInk with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MixedInk;
	/**
	 * Returns the MixedInks within the specified range.
	 * @param {any} _from - The MixedInk, index, or name at the 
	 * beginning of the range. Can accept: MixedInk, Long Integer 
	 * or String.
	 * @param {any} to - The MixedInk, index, or name at the end of 
	 * the range. Can accept: MixedInk, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): MixedInk;
	/** Returns the first MixedInk in the collection. */
	firstItem(): MixedInk;
	/** Returns the last MixedInk in the collection. */
	lastItem(): MixedInk;
	/** Returns the middle MixedInk in the collection. */
	middleItem(): MixedInk;
	/**
	 * Returns the MixedInk with the index previous to the 
	 * specified index.
	 * @param {MixedInk} obj - The index of the MixedInk that 
	 * follows the desired MixedInk.
	 */
	previousItem(obj: MixedInk): MixedInk;
	/**
	 * Returns the MixedInk whose index follows the specified 
	 * MixedInk in the collection.
	 * @param {MixedInk} obj - The MixedInk whose index comes 
	 * before the desired MixedInk.
	 */
	nextItem(obj: MixedInk): MixedInk;
	/** Returns any MixedInk in the collection. */
	anyItem(): MixedInk;
	/** Returns every MixedInk in the collection. */
	everyItem(): MixedInk;
	/**
	 * Generates a string which, if executed, will return the 
	 * MixedInk.
	 */
	toSource(): string;
	/**
	 * Returns the MixedInk with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MixedInk;
}

/**
 * A mixed ink group.
 * @class
 * @extends Swatch
 */
export declare class MixedInkGroup extends Swatch {
	/** The component inks. */
	readonly inkList: Ink;
	/** The color group that a swatch belongs to */
	readonly parentColorGroup: ColorGroup;
	/** The unique ID of the MixedInkGroup. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MixedInkGroup (a Application or Document).
	 */
	readonly parent: any;
	/**
	 * The index of the MixedInkGroup within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The color model. */
	model: ColorModel;
	/** The name of the MixedInkGroup. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the swatch.
	 * @param {Swatch} replacingWith - The swatch to apply in place 
	 * of the deleted swatch. (Optional)
	 */
	remove(replacingWith: Swatch): void;
	/** Duplicates the MixedInkGroup. */
	duplicate(): MixedInkGroup;
	/**
	 * Merges the specified swatches with the swatch.
	 * @param {any} _with - The swatches to merge. Can accept: 
	 * Array of Swatches, Swatch or String.
	 */
	merge(_with: any): Swatch;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * MixedInkGroup.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MixedInkGroup;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of mixed ink groups.
 * @class
 */
export declare class MixedInkGroups {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the MixedInkGroup. */
	count(): number;
	/**
	 * Creates a new mixed ink group.
	 * @param {Ink} inkList - The inks to include in the mix.
	 * @param {number} inkPercentages - The percent of each ink in 
	 * the ink list. (Range: 0 to 100 for each ink) (Optional)
	 * @param {number} repeatValues - The number of repetitions for 
	 * each ink in the ink list. (Range: 0 to 100 for each ink) 
	 * (Optional)
	 * @param {number} incrementValues - The increment percent per 
	 * repetition for each ink. (Range: 0 to 100) Note: The 
	 * cumulative ink percentage per ink cannot exceed 100.) 
	 * (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MixedInkGroup (Optional)
	 */
	add(inkList: Ink, inkPercentages: number, repeatValues: number, incrementValues: number, withProperties: Object): MixedInkGroup;
	/**
	 * Returns the MixedInkGroup with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MixedInkGroup;
	/**
	 * Returns the MixedInkGroup with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): MixedInkGroup;
	/**
	 * Returns the MixedInkGroup with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MixedInkGroup;
	/**
	 * Returns the MixedInkGroups within the specified range.
	 * @param {any} _from - The MixedInkGroup, index, or name at 
	 * the beginning of the range. Can accept: MixedInkGroup, Long 
	 * Integer or String.
	 * @param {any} to - The MixedInkGroup, index, or name at the 
	 * end of the range. Can accept: MixedInkGroup, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): MixedInkGroup;
	/** Returns the first MixedInkGroup in the collection. */
	firstItem(): MixedInkGroup;
	/** Returns the last MixedInkGroup in the collection. */
	lastItem(): MixedInkGroup;
	/** Returns the middle MixedInkGroup in the collection. */
	middleItem(): MixedInkGroup;
	/**
	 * Returns the MixedInkGroup with the index previous to the 
	 * specified index.
	 * @param {MixedInkGroup} obj - The index of the MixedInkGroup 
	 * that follows the desired MixedInkGroup.
	 */
	previousItem(obj: MixedInkGroup): MixedInkGroup;
	/**
	 * Returns the MixedInkGroup whose index follows the specified 
	 * MixedInkGroup in the collection.
	 * @param {MixedInkGroup} obj - The MixedInkGroup whose index 
	 * comes before the desired MixedInkGroup.
	 */
	nextItem(obj: MixedInkGroup): MixedInkGroup;
	/** Returns any MixedInkGroup in the collection. */
	anyItem(): MixedInkGroup;
	/** Returns every MixedInkGroup in the collection. */
	everyItem(): MixedInkGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * MixedInkGroup.
	 */
	toSource(): string;
	/**
	 * Returns the MixedInkGroup with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MixedInkGroup;
}

/**
 * A gradient.
 * @class
 * @extends Swatch
 */
export declare class Gradient extends Swatch {
	/** The color group that a swatch belongs to */
	readonly parentColorGroup: ColorGroup;
	/** The unique ID of the Gradient. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Gradient (a Application or Document). */
	readonly parent: any;
	/** The index of the Gradient within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of gradient stops. */
	readonly gradientStops: GradientStops;
	/** The gradient type. */
	type: GradientType;
	/** The name of the Gradient. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the swatch.
	 * @param {Swatch} replacingWith - The swatch to apply in place 
	 * of the deleted swatch. (Optional)
	 */
	remove(replacingWith: Swatch): void;
	/** Duplicates the Gradient. */
	duplicate(): Gradient;
	/**
	 * Merges the specified swatches with the swatch.
	 * @param {any} _with - The swatches to merge. Can accept: 
	 * Array of Swatches, Swatch or String.
	 */
	merge(_with: any): Swatch;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Gradient.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Gradient;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of gradients.
 * @class
 */
export declare class Gradients {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Gradient.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Gradient (Optional)
	 */
	add(withProperties: Object): Gradient;
	/** Displays the number of elements in the Gradient. */
	count(): number;
	/**
	 * Returns the Gradient with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Gradient;
	/**
	 * Returns the Gradient with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Gradient;
	/**
	 * Returns the Gradient with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Gradient;
	/**
	 * Returns the Gradients within the specified range.
	 * @param {any} _from - The Gradient, index, or name at the 
	 * beginning of the range. Can accept: Gradient, Long Integer 
	 * or String.
	 * @param {any} to - The Gradient, index, or name at the end of 
	 * the range. Can accept: Gradient, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Gradient;
	/** Returns the first Gradient in the collection. */
	firstItem(): Gradient;
	/** Returns the last Gradient in the collection. */
	lastItem(): Gradient;
	/** Returns the middle Gradient in the collection. */
	middleItem(): Gradient;
	/**
	 * Returns the Gradient with the index previous to the 
	 * specified index.
	 * @param {Gradient} obj - The index of the Gradient that 
	 * follows the desired Gradient.
	 */
	previousItem(obj: Gradient): Gradient;
	/**
	 * Returns the Gradient whose index follows the specified 
	 * Gradient in the collection.
	 * @param {Gradient} obj - The Gradient whose index comes 
	 * before the desired Gradient.
	 */
	nextItem(obj: Gradient): Gradient;
	/** Returns any Gradient in the collection. */
	anyItem(): Gradient;
	/** Returns every Gradient in the collection. */
	everyItem(): Gradient;
	/**
	 * Generates a string which, if executed, will return the 
	 * Gradient.
	 */
	toSource(): string;
	/**
	 * Returns the Gradient with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Gradient;
}

/**
 * A gradient stop in a gradient.
 * @class
 */
export declare class GradientStop {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the GradientStop (a Gradient). */
	readonly parent: Gradient;
	/** The index of the GradientStop within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gradient stop. Can return: MixedInk or Color.
	 */
	stopColor: any;
	/**
	 * The starting location (as a percentage of the gradient 
	 * length) of the gradient stop on the gradient. (Range: 0 to 
	 * 100).
	 */
	location: number;
	/**
	 * The mid-point (as a percentage of the gradient length) of 
	 * the gradient stop. (Range: 13 to 87)
	 */
	midpoint: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GradientStop. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * GradientStop.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GradientStop;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of gradient stops.
 * @class
 */
export declare class GradientStops {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new GradientStop.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GradientStop (Optional)
	 */
	add(withProperties: Object): GradientStop;
	/** Displays the number of elements in the GradientStop. */
	count(): number;
	/**
	 * Returns the GradientStop with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GradientStop;
	/**
	 * Returns the GradientStops within the specified range.
	 * @param {any} _from - The GradientStop, index, or name at the 
	 * beginning of the range. Can accept: GradientStop, Long 
	 * Integer or String.
	 * @param {any} to - The GradientStop, index, or name at the 
	 * end of the range. Can accept: GradientStop, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): GradientStop;
	/** Returns the first GradientStop in the collection. */
	firstItem(): GradientStop;
	/** Returns the last GradientStop in the collection. */
	lastItem(): GradientStop;
	/** Returns the middle GradientStop in the collection. */
	middleItem(): GradientStop;
	/**
	 * Returns the GradientStop with the index previous to the 
	 * specified index.
	 * @param {GradientStop} obj - The index of the GradientStop 
	 * that follows the desired GradientStop.
	 */
	previousItem(obj: GradientStop): GradientStop;
	/**
	 * Returns the GradientStop whose index follows the specified 
	 * GradientStop in the collection.
	 * @param {GradientStop} obj - The GradientStop whose index 
	 * comes before the desired GradientStop.
	 */
	nextItem(obj: GradientStop): GradientStop;
	/** Returns any GradientStop in the collection. */
	anyItem(): GradientStop;
	/** Returns every GradientStop in the collection. */
	everyItem(): GradientStop;
	/**
	 * Generates a string which, if executed, will return the 
	 * GradientStop.
	 */
	toSource(): string;
	/**
	 * Returns the GradientStop with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GradientStop;
}

/**
 * A swatch (color, gradient, tint, or mixed ink).
 * @class
 */
export declare class Swatch {
	/** The color group that a swatch belongs to */
	readonly parentColorGroup: ColorGroup;
	/** The unique ID of the Swatch. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Swatch (a Application or Document). */
	readonly parent: any;
	/** The index of the Swatch within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the Swatch. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the swatch.
	 * @param {Swatch} replacingWith - The swatch to apply in place 
	 * of the deleted swatch. (Optional)
	 */
	remove(replacingWith: Swatch): void;
	/** Duplicates the Swatch. */
	duplicate(): Swatch;
	/**
	 * Merges the specified swatches with the swatch.
	 * @param {any} _with - The swatches to merge. Can accept: 
	 * Array of Swatches, Swatch or String.
	 */
	merge(_with: any): Swatch;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Swatch.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Swatch;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of swatches.
 * @class
 */
export declare class Swatches {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Swatch. */
	count(): number;
	/**
	 * Returns the Swatch with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Swatch;
	/**
	 * Returns the Swatch with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Swatch;
	/**
	 * Returns the Swatch with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Swatch;
	/**
	 * Returns the Swatches within the specified range.
	 * @param {any} _from - The Swatch, index, or name at the 
	 * beginning of the range. Can accept: Swatch, Long Integer or 
	 * String.
	 * @param {any} to - The Swatch, index, or name at the end of 
	 * the range. Can accept: Swatch, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Swatch;
	/** Returns the first Swatch in the collection. */
	firstItem(): Swatch;
	/** Returns the last Swatch in the collection. */
	lastItem(): Swatch;
	/** Returns the middle Swatch in the collection. */
	middleItem(): Swatch;
	/**
	 * Returns the Swatch with the index previous to the specified 
	 * index.
	 * @param {Swatch} obj - The index of the Swatch that follows 
	 * the desired Swatch.
	 */
	previousItem(obj: Swatch): Swatch;
	/**
	 * Returns the Swatch whose index follows the specified Swatch 
	 * in the collection.
	 * @param {Swatch} obj - The Swatch whose index comes before 
	 * the desired Swatch.
	 */
	nextItem(obj: Swatch): Swatch;
	/** Returns any Swatch in the collection. */
	anyItem(): Swatch;
	/** Returns every Swatch in the collection. */
	everyItem(): Swatch;
	/**
	 * Generates a string which, if executed, will return the 
	 * Swatch.
	 */
	toSource(): string;
	/**
	 * Returns the Swatch with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Swatch;
}

/**
 * A color swatch.
 * @class
 * @extends Swatch
 */
export declare class Color extends Swatch {
	/** The color group that a swatch belongs to */
	readonly parentColorGroup: ColorGroup;
	/** The unique ID of the Color. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Color (a Application or Document). */
	readonly parent: any;
	/** The index of the Color within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The color model. */
	model: ColorModel;
	/** The color space. */
	space: ColorSpace;
	/**
	 * The ink values that create the color, specified as a 
	 * percentage for each ink. Note: The number of values required 
	 * and the range depends on the color space. For RGB, specify 
	 * three values, with each value in the range 0 to 255; for 
	 * CMYK, specify four values representing C, M, Y, and K, with 
	 * each value in the range 0 to 100; for LAB, specify three 
	 * values representing L (Range: 0 to 100), A (Range: -128 to 
	 * 127), and B (Range: -128 to 127); for mixed ink, specify 
	 * values for each ink in the ink list, with each value in the 
	 * range 0 to 100.
	 */
	colorValue: number;
	/** The name of the Color. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the swatch.
	 * @param {Swatch} replacingWith - The swatch to apply in place 
	 * of the deleted swatch. (Optional)
	 */
	remove(replacingWith: Swatch): void;
	/** Duplicates the Color. */
	duplicate(): Color;
	/**
	 * Merges the specified swatches with the swatch.
	 * @param {any} _with - The swatches to merge. Can accept: 
	 * Array of Swatches, Swatch or String.
	 */
	merge(_with: any): Swatch;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Color.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Color;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of colors.
 * @class
 */
export declare class Colors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Color. */
	count(): number;
	/**
	 * Creates a new Color.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Color (Optional)
	 */
	add(withProperties: Object): Color;
	/**
	 * Returns the Color with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Color;
	/**
	 * Returns the Color with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Color;
	/**
	 * Returns the Color with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Color;
	/**
	 * Returns the Colors within the specified range.
	 * @param {any} _from - The Color, index, or name at the 
	 * beginning of the range. Can accept: Color, Long Integer or 
	 * String.
	 * @param {any} to - The Color, index, or name at the end of 
	 * the range. Can accept: Color, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Color;
	/** Returns the first Color in the collection. */
	firstItem(): Color;
	/** Returns the last Color in the collection. */
	lastItem(): Color;
	/** Returns the middle Color in the collection. */
	middleItem(): Color;
	/**
	 * Returns the Color with the index previous to the specified 
	 * index.
	 * @param {Color} obj - The index of the Color that follows the 
	 * desired Color.
	 */
	previousItem(obj: Color): Color;
	/**
	 * Returns the Color whose index follows the specified Color in 
	 * the collection.
	 * @param {Color} obj - The Color whose index comes before the 
	 * desired Color.
	 */
	nextItem(obj: Color): Color;
	/** Returns any Color in the collection. */
	anyItem(): Color;
	/** Returns every Color in the collection. */
	everyItem(): Color;
	/**
	 * Generates a string which, if executed, will return the 
	 * Color.
	 */
	toSource(): string;
	/**
	 * Returns the Color with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Color;
}

/**
 * A tint swatch.
 * @class
 * @extends Color
 */
export declare class Tint extends Color {
	/** The color that the tint is based on. */
	readonly baseColor: Color;
	/** The name of the Tint. */
	readonly name: string;
	/** The color model. */
	readonly model: ColorModel;
	/** The color space. */
	readonly space: ColorSpace;
	/**
	 * The ink values that create the color, specified as a 
	 * percentage for each ink. Note: The number of values required 
	 * and the range depends on the color space. For RGB, specify 
	 * three values, with each value in the range 0 to 255; for 
	 * CMYK, specify four values representing C, M, Y, and K, with 
	 * each value in the range 0 to 100; for LAB, specify three 
	 * values representing L (Range: 0 to 100), A (Range: -128 to 
	 * 127), and B (Range: -128 to 127); for mixed ink, specify 
	 * values for each ink in the ink list, with each value in the 
	 * range 0 to 100.
	 */
	readonly colorValue: number;
	/** The color group that a swatch belongs to */
	readonly parentColorGroup: ColorGroup;
	/** The unique ID of the Tint. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Tint (a Application or Document). */
	readonly parent: any;
	/** The index of the Tint within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The percent of the base color. (Range: 0 to 100) */
	tintValue: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the swatch.
	 * @param {Swatch} replacingWith - The swatch to apply in place 
	 * of the deleted swatch. (Optional)
	 */
	remove(replacingWith: Swatch): void;
	/** Duplicates the Tint. */
	duplicate(): Tint;
	/**
	 * Merges the specified swatches with the swatch.
	 * @param {any} _with - The swatches to merge. Can accept: 
	 * Array of Swatches, Swatch or String.
	 */
	merge(_with: any): Swatch;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the Tint.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Tint;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of tints.
 * @class
 */
export declare class Tints {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Tint. */
	count(): number;
	/**
	 * Creates a new tint swatch.
	 * @param {Color} baseColor - The color that the tint is based 
	 * upon.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Tint (Optional)
	 */
	add(baseColor: Color, withProperties: Object): Tint;
	/**
	 * Returns the Tint with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Tint;
	/**
	 * Returns the Tint with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Tint;
	/**
	 * Returns the Tint with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Tint;
	/**
	 * Returns the Tints within the specified range.
	 * @param {any} _from - The Tint, index, or name at the 
	 * beginning of the range. Can accept: Tint, Long Integer or 
	 * String.
	 * @param {any} to - The Tint, index, or name at the end of the 
	 * range. Can accept: Tint, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Tint;
	/** Returns the first Tint in the collection. */
	firstItem(): Tint;
	/** Returns the last Tint in the collection. */
	lastItem(): Tint;
	/** Returns the middle Tint in the collection. */
	middleItem(): Tint;
	/**
	 * Returns the Tint with the index previous to the specified 
	 * index.
	 * @param {Tint} obj - The index of the Tint that follows the 
	 * desired Tint.
	 */
	previousItem(obj: Tint): Tint;
	/**
	 * Returns the Tint whose index follows the specified Tint in 
	 * the collection.
	 * @param {Tint} obj - The Tint whose index comes before the 
	 * desired Tint.
	 */
	nextItem(obj: Tint): Tint;
	/** Returns any Tint in the collection. */
	anyItem(): Tint;
	/** Returns every Tint in the collection. */
	everyItem(): Tint;
	/**
	 * Generates a string which, if executed, will return the Tint.
	 */
	toSource(): string;
	/**
	 * Returns the Tint with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Tint;
}

/**
 * A color group
 * @class
 */
export declare class ColorGroup {
	/** The unique ID of the ColorGroup. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ColorGroup (a Application or Document). */
	readonly parent: any;
	/** The index of the ColorGroup within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of color group swatches. */
	readonly colorGroupSwatches: ColorGroupSwatches;
	/** The name of the ColorGroup. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the ColorGroup. */
	remove(): void;
	/** Ungroups a color group */
	ungroup(): void;
	/** Duplicates the ColorGroup. */
	duplicate(): ColorGroup;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ColorGroup.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ColorGroup;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of color groups.
 * @class
 */
export declare class ColorGroups {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new ColorGroup
	 * @param {string} name - The color group name (Optional)
	 * @param {Swatch} swatchList - The swatches to add in color 
	 * group. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ColorGroup (Optional)
	 */
	add(name: string, swatchList: Swatch, withProperties: Object): ColorGroup;
	/** Displays the number of elements in the ColorGroup. */
	count(): number;
	/**
	 * Returns the ColorGroup with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ColorGroup;
	/**
	 * Returns the ColorGroup with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ColorGroup;
	/**
	 * Returns the ColorGroup with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ColorGroup;
	/**
	 * Returns the ColorGroups within the specified range.
	 * @param {any} _from - The ColorGroup, index, or name at the 
	 * beginning of the range. Can accept: ColorGroup, Long Integer 
	 * or String.
	 * @param {any} to - The ColorGroup, index, or name at the end 
	 * of the range. Can accept: ColorGroup, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): ColorGroup;
	/** Returns the first ColorGroup in the collection. */
	firstItem(): ColorGroup;
	/** Returns the last ColorGroup in the collection. */
	lastItem(): ColorGroup;
	/** Returns the middle ColorGroup in the collection. */
	middleItem(): ColorGroup;
	/**
	 * Returns the ColorGroup with the index previous to the 
	 * specified index.
	 * @param {ColorGroup} obj - The index of the ColorGroup that 
	 * follows the desired ColorGroup.
	 */
	previousItem(obj: ColorGroup): ColorGroup;
	/**
	 * Returns the ColorGroup whose index follows the specified 
	 * ColorGroup in the collection.
	 * @param {ColorGroup} obj - The ColorGroup whose index comes 
	 * before the desired ColorGroup.
	 */
	nextItem(obj: ColorGroup): ColorGroup;
	/** Returns any ColorGroup in the collection. */
	anyItem(): ColorGroup;
	/** Returns every ColorGroup in the collection. */
	everyItem(): ColorGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * ColorGroup.
	 */
	toSource(): string;
	/**
	 * Returns the ColorGroup with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ColorGroup;
}

/**
 * A color group swatch.
 * @class
 */
export declare class ColorGroupSwatch {
	/** The underlying swatch item */
	readonly swatchItemRef: Swatch;
	/** The unique ID of the ColorGroupSwatch. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ColorGroupSwatch (a ColorGroup). */
	readonly parent: ColorGroup;
	/**
	 * The index of the ColorGroupSwatch within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ColorGroupSwatch.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ColorGroupSwatch;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of color group swatches.
 * @class
 */
export declare class ColorGroupSwatches {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a color group swatch.
	 * @param {Swatch} swatchItemRef - swatch to be added to color 
	 * group
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ColorGroupSwatch (Optional)
	 */
	add(swatchItemRef: Swatch, withProperties: Object): ColorGroupSwatch;
	/** Displays the number of elements in the ColorGroupSwatch. */
	count(): number;
	/**
	 * Returns the ColorGroupSwatch with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ColorGroupSwatch;
	/**
	 * Returns the ColorGroupSwatch with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ColorGroupSwatch;
	/**
	 * Returns the ColorGroupSwatches within the specified range.
	 * @param {any} _from - The ColorGroupSwatch, index, or name at 
	 * the beginning of the range. Can accept: ColorGroupSwatch, 
	 * Long Integer or String.
	 * @param {any} to - The ColorGroupSwatch, index, or name at 
	 * the end of the range. Can accept: ColorGroupSwatch, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): ColorGroupSwatch;
	/** Returns the first ColorGroupSwatch in the collection. */
	firstItem(): ColorGroupSwatch;
	/** Returns the last ColorGroupSwatch in the collection. */
	lastItem(): ColorGroupSwatch;
	/** Returns the middle ColorGroupSwatch in the collection. */
	middleItem(): ColorGroupSwatch;
	/**
	 * Returns the ColorGroupSwatch with the index previous to the 
	 * specified index.
	 * @param {ColorGroupSwatch} obj - The index of the 
	 * ColorGroupSwatch that follows the desired ColorGroupSwatch.
	 */
	previousItem(obj: ColorGroupSwatch): ColorGroupSwatch;
	/**
	 * Returns the ColorGroupSwatch whose index follows the 
	 * specified ColorGroupSwatch in the collection.
	 * @param {ColorGroupSwatch} obj - The ColorGroupSwatch whose 
	 * index comes before the desired ColorGroupSwatch.
	 */
	nextItem(obj: ColorGroupSwatch): ColorGroupSwatch;
	/** Returns any ColorGroupSwatch in the collection. */
	anyItem(): ColorGroupSwatch;
	/** Returns every ColorGroupSwatch in the collection. */
	everyItem(): ColorGroupSwatch;
	/**
	 * Generates a string which, if executed, will return the 
	 * ColorGroupSwatch.
	 */
	toSource(): string;
	/**
	 * Returns the ColorGroupSwatch with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ColorGroupSwatch;
}

/**
 * An opacity gradient stop.
 * @class
 */
export declare class OpacityGradientStop {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the OpacityGradientStop (a 
	 * GradientFeatherSetting or FindChangeGradientFeatherSetting).
	 */
	readonly parent: any;
	/**
	 * The index of the OpacityGradientStop within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The opacity of the opacity gradient stop (as a percentage). 
	 * (Range: 0 to 100)
	 */
	opacity: number;
	/**
	 * The location of the opacity gradient stop, as a percentage 
	 * of the OpacityGradientStop size. (Range: 0 to 100)
	 */
	location: number;
	/**
	 * The mid-point of the opacity gradient stop, as a percentage 
	 * of the OpacityGradientStop size. (Range: 13 to 87)
	 */
	midpoint: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the OpacityGradientStop. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * OpacityGradientStop.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): OpacityGradientStop;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of opacity gradient stops.
 * @class
 */
export declare class OpacityGradientStops {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new OpacityGradientStop.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new OpacityGradientStop (Optional)
	 */
	add(withProperties: Object): OpacityGradientStop;
	/** Displays the number of elements in the OpacityGradientStop. */
	count(): number;
	/**
	 * Returns the OpacityGradientStop with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): OpacityGradientStop;
	/**
	 * Returns the OpacityGradientStops within the specified range.
	 * @param {any} _from - The OpacityGradientStop, index, or name 
	 * at the beginning of the range. Can accept: 
	 * OpacityGradientStop, Long Integer or String.
	 * @param {any} to - The OpacityGradientStop, index, or name at 
	 * the end of the range. Can accept: OpacityGradientStop, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): OpacityGradientStop;
	/** Returns the first OpacityGradientStop in the collection. */
	firstItem(): OpacityGradientStop;
	/** Returns the last OpacityGradientStop in the collection. */
	lastItem(): OpacityGradientStop;
	/** Returns the middle OpacityGradientStop in the collection. */
	middleItem(): OpacityGradientStop;
	/**
	 * Returns the OpacityGradientStop with the index previous to 
	 * the specified index.
	 * @param {OpacityGradientStop} obj - The index of the 
	 * OpacityGradientStop that follows the desired 
	 * OpacityGradientStop.
	 */
	previousItem(obj: OpacityGradientStop): OpacityGradientStop;
	/**
	 * Returns the OpacityGradientStop whose index follows the 
	 * specified OpacityGradientStop in the collection.
	 * @param {OpacityGradientStop} obj - The OpacityGradientStop 
	 * whose index comes before the desired OpacityGradientStop.
	 */
	nextItem(obj: OpacityGradientStop): OpacityGradientStop;
	/** Returns any OpacityGradientStop in the collection. */
	anyItem(): OpacityGradientStop;
	/** Returns every OpacityGradientStop in the collection. */
	everyItem(): OpacityGradientStop;
	/**
	 * Generates a string which, if executed, will return the 
	 * OpacityGradientStop.
	 */
	toSource(): string;
	/**
	 * Returns the OpacityGradientStop with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: OpacityGradientStop;
}

/**
 * An object that can contain a data merge text field.
 * @class
 */
export declare class DataMergeTextPlaceholder {
	/**
	 * The data merge field to insert in the placeholder. For 
	 * information, see data merge text placeholder and data merge 
	 * image placeholder.
	 */
	readonly field: DataMergeField;
	/**
	 * The insertion point before the table in the story containing 
	 * the table.
	 */
	readonly storyOffset: InsertionPoint;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DataMergeTextPlaceholder (a Document). */
	readonly parent: Document;
	/**
	 * The index of the DataMergeTextPlaceholder within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMergeTextPlaceholder.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DataMergeTextPlaceholder;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of data merge text placeholders.
 * @class
 */
export declare class DataMergeTextPlaceholders {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a data merge text placeholder.
	 * @param {Story} parentStory - The story in which to insert 
	 * the placeholder.
	 * @param {any} storyOffset - The position within the story at 
	 * which to insert the placeholder, specified as an offset 
	 * number or an insertion point. Can accept: InsertionPoint or 
	 * Long Integer.
	 * @param {DataMergeField} field - The field to insert.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new DataMergeTextPlaceholder (Optional)
	 */
	add(parentStory: Story, storyOffset: any, field: DataMergeField, withProperties: Object): DataMergeTextPlaceholder;
	/**
	 * Displays the number of elements in the 
	 * DataMergeTextPlaceholder.
	 */
	count(): number;
	/**
	 * Returns the DataMergeTextPlaceholder with the specified 
	 * index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DataMergeTextPlaceholder;
	/**
	 * Returns the DataMergeTextPlaceholders within the specified 
	 * range.
	 * @param {any} _from - The DataMergeTextPlaceholder, index, or 
	 * name at the beginning of the range. Can accept: 
	 * DataMergeTextPlaceholder, Long Integer or String.
	 * @param {any} to - The DataMergeTextPlaceholder, index, or 
	 * name at the end of the range. Can accept: 
	 * DataMergeTextPlaceholder, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): DataMergeTextPlaceholder;
	/**
	 * Returns the first DataMergeTextPlaceholder in the 
	 * collection.
	 */
	firstItem(): DataMergeTextPlaceholder;
	/**
	 * Returns the last DataMergeTextPlaceholder in the collection.
	 */
	lastItem(): DataMergeTextPlaceholder;
	/**
	 * Returns the middle DataMergeTextPlaceholder in the 
	 * collection.
	 */
	middleItem(): DataMergeTextPlaceholder;
	/**
	 * Returns the DataMergeTextPlaceholder with the index previous 
	 * to the specified index.
	 * @param {DataMergeTextPlaceholder} obj - The index of the 
	 * DataMergeTextPlaceholder that follows the desired 
	 * DataMergeTextPlaceholder.
	 */
	previousItem(obj: DataMergeTextPlaceholder): DataMergeTextPlaceholder;
	/**
	 * Returns the DataMergeTextPlaceholder whose index follows the 
	 * specified DataMergeTextPlaceholder in the collection.
	 * @param {DataMergeTextPlaceholder} obj - The 
	 * DataMergeTextPlaceholder whose index comes before the 
	 * desired DataMergeTextPlaceholder.
	 */
	nextItem(obj: DataMergeTextPlaceholder): DataMergeTextPlaceholder;
	/** Returns any DataMergeTextPlaceholder in the collection. */
	anyItem(): DataMergeTextPlaceholder;
	/** Returns every DataMergeTextPlaceholder in the collection. */
	everyItem(): DataMergeTextPlaceholder;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMergeTextPlaceholder.
	 */
	toSource(): string;
	/**
	 * Returns the DataMergeTextPlaceholder with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: DataMergeTextPlaceholder;
}

/**
 * An object that can contain a date merge image field.
 * @class
 */
export declare class DataMergeImagePlaceholder {
	/**
	 * The data merge field to insert in the placeholder. For 
	 * information, see data merge text placeholder and data merge 
	 * image placeholder.
	 */
	readonly field: DataMergeField;
	/** The page item on which to place the placeholder. */
	readonly placeholderPageItem: PageItem;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DataMergeImagePlaceholder (a Document). */
	readonly parent: Document;
	/**
	 * The index of the DataMergeImagePlaceholder within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMergeImagePlaceholder.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DataMergeImagePlaceholder;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of data merge image placeholders.
 * @class
 */
export declare class DataMergeImagePlaceholders {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a data merge image placeholder.
	 * @param {PageItem} placeholder - The page item on which to 
	 * place the placeholder.
	 * @param {DataMergeField} field - The data merge field to 
	 * insert.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new DataMergeImagePlaceholder (Optional)
	 */
	add(placeholder: PageItem, field: DataMergeField, withProperties: Object): DataMergeImagePlaceholder;
	/**
	 * Displays the number of elements in the 
	 * DataMergeImagePlaceholder.
	 */
	count(): number;
	/**
	 * Returns the DataMergeImagePlaceholder with the specified 
	 * index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DataMergeImagePlaceholder;
	/**
	 * Returns the DataMergeImagePlaceholders within the specified 
	 * range.
	 * @param {any} _from - The DataMergeImagePlaceholder, index, 
	 * or name at the beginning of the range. Can accept: 
	 * DataMergeImagePlaceholder, Long Integer or String.
	 * @param {any} to - The DataMergeImagePlaceholder, index, or 
	 * name at the end of the range. Can accept: 
	 * DataMergeImagePlaceholder, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): DataMergeImagePlaceholder;
	/**
	 * Returns the first DataMergeImagePlaceholder in the 
	 * collection.
	 */
	firstItem(): DataMergeImagePlaceholder;
	/**
	 * Returns the last DataMergeImagePlaceholder in the 
	 * collection.
	 */
	lastItem(): DataMergeImagePlaceholder;
	/**
	 * Returns the middle DataMergeImagePlaceholder in the 
	 * collection.
	 */
	middleItem(): DataMergeImagePlaceholder;
	/**
	 * Returns the DataMergeImagePlaceholder with the index 
	 * previous to the specified index.
	 * @param {DataMergeImagePlaceholder} obj - The index of the 
	 * DataMergeImagePlaceholder that follows the desired 
	 * DataMergeImagePlaceholder.
	 */
	previousItem(obj: DataMergeImagePlaceholder): DataMergeImagePlaceholder;
	/**
	 * Returns the DataMergeImagePlaceholder whose index follows 
	 * the specified DataMergeImagePlaceholder in the collection.
	 * @param {DataMergeImagePlaceholder} obj - The 
	 * DataMergeImagePlaceholder whose index comes before the 
	 * desired DataMergeImagePlaceholder.
	 */
	nextItem(obj: DataMergeImagePlaceholder): DataMergeImagePlaceholder;
	/** Returns any DataMergeImagePlaceholder in the collection. */
	anyItem(): DataMergeImagePlaceholder;
	/** Returns every DataMergeImagePlaceholder in the collection. */
	everyItem(): DataMergeImagePlaceholder;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMergeImagePlaceholder.
	 */
	toSource(): string;
	/**
	 * Returns the DataMergeImagePlaceholder with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: DataMergeImagePlaceholder;
}

/**
 * A data merge field.
 * @class
 */
export declare class DataMergeField {
	/** The name of the field. */
	readonly fieldName: string;
	/** The source field type. */
	readonly fieldType: SourceFieldType;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DataMergeField (a DataMerge). */
	readonly parent: DataMerge;
	/**
	 * The index of the DataMergeField within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMergeField.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DataMergeField;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of data merge fields.
 * @class
 */
export declare class DataMergeFields {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the DataMergeField. */
	count(): number;
	/**
	 * Returns the DataMergeField with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DataMergeField;
	/**
	 * Returns the DataMergeFields within the specified range.
	 * @param {any} _from - The DataMergeField, index, or name at 
	 * the beginning of the range. Can accept: DataMergeField, Long 
	 * Integer or String.
	 * @param {any} to - The DataMergeField, index, or name at the 
	 * end of the range. Can accept: DataMergeField, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): DataMergeField;
	/** Returns the first DataMergeField in the collection. */
	firstItem(): DataMergeField;
	/** Returns the last DataMergeField in the collection. */
	lastItem(): DataMergeField;
	/** Returns the middle DataMergeField in the collection. */
	middleItem(): DataMergeField;
	/**
	 * Returns the DataMergeField with the index previous to the 
	 * specified index.
	 * @param {DataMergeField} obj - The index of the 
	 * DataMergeField that follows the desired DataMergeField.
	 */
	previousItem(obj: DataMergeField): DataMergeField;
	/**
	 * Returns the DataMergeField whose index follows the specified 
	 * DataMergeField in the collection.
	 * @param {DataMergeField} obj - The DataMergeField whose index 
	 * comes before the desired DataMergeField.
	 */
	nextItem(obj: DataMergeField): DataMergeField;
	/** Returns any DataMergeField in the collection. */
	anyItem(): DataMergeField;
	/** Returns every DataMergeField in the collection. */
	everyItem(): DataMergeField;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMergeField.
	 */
	toSource(): string;
	/**
	 * Returns the DataMergeField with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: DataMergeField;
}

/**
 * An object that can contain a date merge QR code field.
 * @class
 */
export declare class DataMergeQrcodePlaceholder {
	/**
	 * The data merge field to insert in the placeholder. For 
	 * information, see data merge text placeholder and data merge 
	 * image placeholder.
	 */
	readonly field: DataMergeField;
	/** The page item on which to place the placeholder. */
	readonly placeholderPageItem: PageItem;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DataMergeQrcodePlaceholder (a Document). */
	readonly parent: Document;
	/**
	 * The index of the DataMergeQrcodePlaceholder within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMergeQrcodePlaceholder.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DataMergeQrcodePlaceholder;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of data merge QR code placeholders.
 * @class
 */
export declare class DataMergeQrcodePlaceholders {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a data merge QR code placeholder.
	 * @param {PageItem} placeholder - The page item on which to 
	 * place the placeholder.
	 * @param {DataMergeField} field - The data merge field to 
	 * insert.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new DataMergeQrcodePlaceholder (Optional)
	 */
	add(placeholder: PageItem, field: DataMergeField, withProperties: Object): DataMergeQrcodePlaceholder;
	/**
	 * Displays the number of elements in the 
	 * DataMergeQrcodePlaceholder.
	 */
	count(): number;
	/**
	 * Returns the DataMergeQrcodePlaceholder with the specified 
	 * index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DataMergeQrcodePlaceholder;
	/**
	 * Returns the DataMergeQrcodePlaceholders within the specified 
	 * range.
	 * @param {any} _from - The DataMergeQrcodePlaceholder, index, 
	 * or name at the beginning of the range. Can accept: 
	 * DataMergeQrcodePlaceholder, Long Integer or String.
	 * @param {any} to - The DataMergeQrcodePlaceholder, index, or 
	 * name at the end of the range. Can accept: 
	 * DataMergeQrcodePlaceholder, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): DataMergeQrcodePlaceholder;
	/**
	 * Returns the first DataMergeQrcodePlaceholder in the 
	 * collection.
	 */
	firstItem(): DataMergeQrcodePlaceholder;
	/**
	 * Returns the last DataMergeQrcodePlaceholder in the 
	 * collection.
	 */
	lastItem(): DataMergeQrcodePlaceholder;
	/**
	 * Returns the middle DataMergeQrcodePlaceholder in the 
	 * collection.
	 */
	middleItem(): DataMergeQrcodePlaceholder;
	/**
	 * Returns the DataMergeQrcodePlaceholder with the index 
	 * previous to the specified index.
	 * @param {DataMergeQrcodePlaceholder} obj - The index of the 
	 * DataMergeQrcodePlaceholder that follows the desired 
	 * DataMergeQrcodePlaceholder.
	 */
	previousItem(obj: DataMergeQrcodePlaceholder): DataMergeQrcodePlaceholder;
	/**
	 * Returns the DataMergeQrcodePlaceholder whose index follows 
	 * the specified DataMergeQrcodePlaceholder in the collection.
	 * @param {DataMergeQrcodePlaceholder} obj - The 
	 * DataMergeQrcodePlaceholder whose index comes before the 
	 * desired DataMergeQrcodePlaceholder.
	 */
	nextItem(obj: DataMergeQrcodePlaceholder): DataMergeQrcodePlaceholder;
	/** Returns any DataMergeQrcodePlaceholder in the collection. */
	anyItem(): DataMergeQrcodePlaceholder;
	/** Returns every DataMergeQrcodePlaceholder in the collection. */
	everyItem(): DataMergeQrcodePlaceholder;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMergeQrcodePlaceholder.
	 */
	toSource(): string;
	/**
	 * Returns the DataMergeQrcodePlaceholder with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: DataMergeQrcodePlaceholder;
}

/**
 * Story type options.
 * @enum
 */
export declare enum StoryTypes {
	/** The story is a regular text story. */
	REGULAR_STORY = 1919382388,
	/** The story is a table of contents. */
	TOC_STORY = 1953461108,
	/** The story is an index. */
	INDEXING_STORY = 1768190836
}

/**
 * Story direction options.
 * @enum
 */
export declare enum StoryDirectionOptions {
	/** Left to right direction. */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,
	/** Right to left direction. */
	RIGHT_TO_LEFT_DIRECTION = 1379028068,
	/** Unknown direction. */
	UNKNOWN_DIRECTION = 1433299812
}

/**
 * Style import options.
 * @enum
 */
export declare enum ImportFormat {
	/** Imports character styles. */
	CHARACTER_STYLES_FORMAT = 1131565940,
	/** Imports paragraph styles. */
	PARAGRAPH_STYLES_FORMAT = 1885885300,
	/** Imports character and paragraph styles. */
	TEXT_STYLES_FORMAT = 1668305780,
	/** Imports table of contents styles. */
	TOC_STYLES_FORMAT = 1415795572,
	/** Imports object styles. */
	OBJECT_STYLES_FORMAT = 1332368244,
	/** Imports stroke styles. */
	STROKE_STYLES_FORMAT = 1817408620,
	/** Imports table styles. */
	TABLE_STYLES_FORMAT = 1700033396,
	/** Imports cell styles. */
	CELL_STYLES_FORMAT = 1698919284,
	/** Imports table and cell styles. */
	TABLE_AND_CELL_STYLES_FORMAT = 1700021107
}

/**
 * Delimiter options for marking the end of the application of 
 * the nested style.
 * @enum
 */
export declare enum NestedStyleDelimiters {
	/**
	 * Uses the first sentence or sentences in the paragraph as the 
	 * nested style delimiter. The first sentence is considered all 
	 * text preceding the first period, question mark, or 
	 * exclamation mark in the paragraph.
	 */
	SENTENCE = 1380541555,
	/**
	 * Uses the first word or words in the paragraph as the nested 
	 * style delimiter. The first word is considered all characters 
	 * preceding the first space or white space character in the 
	 * paragraph.
	 */
	ANY_WORD = 1380541559,
	/**
	 * Uses the first character or characters other than zero-width 
	 * markers as the nested style delimiter. Zero-width markers 
	 * include anchors, index markers, XML tags, and so on.
	 */
	ANY_CHARACTER = 1380541539,
	/**
	 * Uses the first alpha character or characters as the nested 
	 * style delimiter. Note: To specify the number of letters, see 
	 * repetition.
	 */
	LETTERS = 1380541548,
	/**
	 * Uses the first numeric character or characters as the nested 
	 * style delimiter. Note: To specify the number of digits, see 
	 * repetition.
	 */
	DIGITS = 1380541540,
	/**
	 * Uses the first tab character as the nested style delimiter. 
	 * Note: Does not use the first tab stop. If no actual tab 
	 * character has been inserted in the paragraph, the nested 
	 * style is applied through the end of the paragraph.
	 */
	TABS = 1380541556,
	/**
	 * Uses the first inline graphic as the nested style delimiter.
	 */
	INLINE_GRAPHIC = 1380541545,
	/** Uses the dropcap as the nested style delimiter. */
	DROPCAP = 1380541507,
	/**
	 * Uses the first forced line break as the nested style 
	 * delimiter.
	 */
	FORCED_LINE_BREAK = 1397124194,
	/**
	 * Uses the inserted end nested style here character as the 
	 * nested style delimiter.
	 */
	END_NESTED_STYLE = 1396855379,
	/**
	 * Uses the first indent-to-here tab character as the nested 
	 * style delimiter. Note: Does not use the first indent-to-here 
	 * tab stop. If no actual indent-to-here tab character has been 
	 * inserted in the paragraph, the nested style is applied 
	 * through the end of the paragraph.
	 */
	INDENT_HERE_TAB = 1397319796,
	/** Uses the first em space as the nested style delimiter. */
	EM_SPACE = 1397058899,
	/** Uses the first en space as the nested style delimiter. */
	EN_SPACE = 1397059155,
	/**
	 * Uses the first nonbreaking space as the nested style 
	 * delimiter.
	 */
	NONBREAKING_SPACE = 1397645907,
	/**
	 * Uses the first automatic page number as the nested style 
	 * delimiter.
	 */
	AUTO_PAGE_NUMBER = 1396797550,
	/**
	 * Uses the first section name marker as the nested style 
	 * delimiter.
	 */
	SECTION_MARKER = 1400073805,
	/** Repeat */
	REPEAT = 1380545132
}

/**
 * Options for specifying an object on which to base the width 
 * of the paragraph rule above.
 * @enum
 */
export declare enum RuleWidth {
	/**
	 * Makes the paragraph rule above the width of the first line 
	 * of text in the paragraph.
	 */
	TEXT_WIDTH = 1886681207,
	/** Makes the rule the width of the column. */
	COLUMN_WIDTH = 1265399652
}

/**
 * Text alignment options.
 * @enum
 */
export declare enum Justification {
	/** Left aligns the text. */
	LEFT_ALIGN = 1818584692,
	/** Center aligns the text. */
	CENTER_ALIGN = 1667591796,
	/** Right aligns the text. */
	RIGHT_ALIGN = 1919379572,
	/**
	 * Justifies the text and left aligns the last line in the 
	 * paragraph.
	 */
	LEFT_JUSTIFIED = 1818915700,
	/**
	 * Justifies the text and right aligns the last line in the 
	 * paragraph.
	 */
	RIGHT_JUSTIFIED = 1919578996,
	/**
	 * Justifies text text and center aligns the last line in the 
	 * paragraph.
	 */
	CENTER_JUSTIFIED = 1667920756,
	/**
	 * Justifies the text, including the last line in the 
	 * paragraph.
	 */
	FULLY_JUSTIFIED = 1718971500,
	/** Aligns text to the binding spine of the page or spread. */
	TO_BINDING_SIDE = 1630691955,
	/**
	 * Aligns text to the side opposite the binding spine of the 
	 * page.
	 */
	AWAY_FROM_BINDING_SIDE = 1633772147
}

/**
 * Alignment options for lines that contain a single word.
 * @enum
 */
export declare enum SingleWordJustification {
	/** Left aligns the word. */
	LEFT_ALIGN = 1818584692,
	/** Center aligns the word. */
	CENTER_ALIGN = 1667591796,
	/** Right aligns the word. */
	RIGHT_ALIGN = 1919379572,
	/** Fully justifies the word. */
	FULLY_JUSTIFIED = 1718971500
}

/**
 * Column and page break options.
 * @enum
 */
export declare enum StartParagraph {
	/** Starts in the next available space. */
	ANYWHERE = 1851945579,
	/** Starts at the top of the next column. */
	NEXT_COLUMN = 1667396203,
	/** Starts at the top of the next text frame in the thread. */
	NEXT_FRAME = 1313235563,
	/** Starts at the top of the next page. */
	NEXT_PAGE = 1885500011,
	/** Starts at the top of the next odd-numbered page. */
	NEXT_ODD_PAGE = 1332765291,
	/** Starts at the top of the next even-numbered page. */
	NEXT_EVEN_PAGE = 1164993131
}

/**
 * Orientation options.
 * @enum
 */
export declare enum HorizontalOrVertical {
	/** Horizontal orientation. */
	HORIZONTAL = 1752134266,
	/** Vertical orientation. */
	VERTICAL = 1986359924
}

/**
 * Tab stop alignment options.
 * @enum
 */
export declare enum TabStopAlignment {
	/** Left. */
	LEFT_ALIGN = 1818584692,
	/** Center. */
	CENTER_ALIGN = 1667591796,
	/** Right. */
	RIGHT_ALIGN = 1919379572,
	/** Aligns the specified character with the tab stop. */
	CHARACTER_ALIGN = 1952604515
}

/**
 * Starting point options for the first baseline of text.
 * @enum
 */
export declare enum FirstBaseline {
	/**
	 * The tallest character in the font falls below the top inset 
	 * of the object.
	 */
	ASCENT_OFFSET = 1296135023,
	/**
	 * The tops of upper case letters touch the top inset of the 
	 * object.
	 */
	CAP_HEIGHT = 1296255087,
	/**
	 * The text leading value defines the distance between the 
	 * baseline of the text and the top inset of the object.
	 */
	LEADING_OFFSET = 1296852079,
	/**
	 * The text em box height is the distance between the baseline 
	 * of the text and the top inset of the object.
	 */
	EMBOX_HEIGHT = 1296386159,
	/**
	 * The tops of lower case letters touch the top inset of the 
	 * object.
	 */
	X_HEIGHT = 1299728495,
	/**
	 * Uses the value specified for minimum first baseline offset 
	 * as the distance between the baseline of the text and the top 
	 * inset of the object.
	 */
	FIXED_HEIGHT = 1313228911
}

/**
 * Vertical alignment options for text.
 * @enum
 */
export declare enum VerticalJustification {
	/** Text is aligned at the top of the object. */
	TOP_ALIGN = 1953460256,
	/** Text is center aligned vertically in the object. */
	CENTER_ALIGN = 1667591796,
	/** Text is aligned at the bottom of the object. */
	BOTTOM_ALIGN = 1651471469,
	/**
	 * Lines of text are evenly distributed vertically between the 
	 * top and bottom of the object.
	 */
	JUSTIFY_ALIGN = 1785951334
}

/**
 * Leading type options.
 * @enum
 */
export declare enum Leading {
	/** Apply auto leading. */
	AUTO = 1635019116
}

/**
 * Figure style options for OpenType fonts.
 * @enum
 */
export declare enum OTFFigureStyle {
	/** Use monspaced lining figures. */
	TABULAR_LINING = 1330931316,
	/** Use proportional width oldstyle figures. */
	PROPORTIONAL_OLDSTYLE = 1330933619,
	/** Use proportional width lining figures. */
	PROPORTIONAL_LINING = 1330932848,
	/** Use monospaced oldstyle figures. */
	TABULAR_OLDSTYLE = 1330933620,
	/** Use the default figure style for the font. */
	DEFAULT_VALUE = 1147563124
}

/**
 * Capitalization options.
 * @enum
 */
export declare enum Capitalization {
	/** Do not change the capitalization of the text. */
	NORMAL = 1852797549,
	/** Use small caps for lowercase letters. */
	SMALL_CAPS = 1936548720,
	/** Use all uppercase letters. */
	ALL_CAPS = 1634493296,
	/** Use OpenType small caps. */
	CAP_TO_SMALL_CAP = 1664250723
}

/**
 * Text position options.
 * @enum
 */
export declare enum Position {
	/** Normal position */
	NORMAL = 1852797549,
	/** Superscripts the text. */
	SUPERSCRIPT = 1936749411,
	/** Subscripts the text. */
	SUBSCRIPT = 1935831907,
	/**
	 * For OpenType fonts, uses--if available--raised glyphs that 
	 * are sized correctly relative to the surrounding characters.
	 */
	OT_SUPERSCRIPT = 1884247155,
	/**
	 * For OpenType fonts, uses--if available--lowered glyphs that 
	 * are sized correctly relative to the surrounding characters.
	 */
	OT_SUBSCRIPT = 1884247138,
	/**
	 * For OpenType fonts, shrinks the text but keeps the top of 
	 * the characters aligned with the top of the main text. Note: 
	 * Valid only for numeric characters.
	 */
	OT_NUMERATOR = 1884247150,
	/**
	 * For OpenType fonts, shrinks the text but keeps text on the 
	 * main text baseline. Note: Valid only for numeric characters.
	 */
	OT_DENOMINATOR = 1884247140
}

/**
 * Text frame content type options.
 * @enum
 */
export declare enum TextFrameContents {
	/** Fills the text frame with placeholder text. */
	PLACEHOLDER_TEXT = 1346925688,
	/** Fills the text frame with arabic placeholder text. */
	PLACEHOLDER_TEXT_ARABIC = 1346925665,
	/** Fills the text frame with hebrew placeholder text. */
	PLACEHOLDER_TEXT_HEBREW = 1346925672,
	/** Fills the text frame with cyrillic placeholder text. */
	PLACEHOLDER_TEXT_CYRILLIC = 1346925667,
	/** Fills the text frame with greek placeholder text. */
	PLACEHOLDER_TEXT_GREEK = 1346925671
}

/**
 * Special character options.
 * @enum
 */
export declare enum SpecialCharacters {
	/** Inserts an automatic page number. */
	AUTO_PAGE_NUMBER = 1396797550,
	/** Inserts the next page number. */
	NEXT_PAGE_NUMBER = 1397649518,
	/** Inserts the previous page number. */
	PREVIOUS_PAGE_NUMBER = 1397780590,
	/** Inserts a section marker. */
	SECTION_MARKER = 1400073805,
	/** Inserts a bullet character. */
	BULLET_CHARACTER = 1396862068,
	/** Inserts a copyright symbol. */
	COPYRIGHT_SYMBOL = 1396929140,
	/** Inserts a degree symbol. */
	DEGREE_SYMBOL = 1396991858,
	/** Inserts an ellipsis character. */
	ELLIPSIS_CHARACTER = 1397518451,
	/** Inserts a forced line break. */
	FORCED_LINE_BREAK = 1397124194,
	/** Inserts a paragraph symbol. */
	PARAGRAPH_SYMBOL = 1397776754,
	/** Inserts a registered trademark. */
	REGISTERED_TRADEMARK = 1397904493,
	/** Inserts a section symbol. */
	SECTION_SYMBOL = 1400073811,
	/** Inserts a trademark symbol. */
	TRADEMARK_SYMBOL = 1398041963,
	/** Inserts a right indent tab. */
	RIGHT_INDENT_TAB = 1397909876,
	/** Inserts an indent to here character. */
	INDENT_HERE_TAB = 1397319796,
	/** Inserts an em dash. */
	EM_DASH = 1397058884,
	/** Inserts an en dash. */
	EN_DASH = 1397059140,
	/** Inserts a discretionary hyphen. */
	DISCRETIONARY_HYPHEN = 1396983920,
	/** Inserts a nonbreaking hyphen. */
	NONBREAKING_HYPHEN = 1397645928,
	/** Inserts an end nested style here character. */
	END_NESTED_STYLE = 1396855379,
	/** Inserts a double left quote. */
	DOUBLE_LEFT_QUOTE = 1396984945,
	/** Inserts a double right quote. */
	DOUBLE_RIGHT_QUOTE = 1396986481,
	/** Inserts a single left quote. */
	SINGLE_LEFT_QUOTE = 1397967985,
	/** Inserts a single right quote. */
	SINGLE_RIGHT_QUOTE = 1397969521,
	/** Inserts an em space. */
	EM_SPACE = 1397058899,
	/** Inserts an en space. */
	EN_SPACE = 1397059155,
	/** Inserts a flush space. */
	FLUSH_SPACE = 1397124179,
	/** Inserts a hair space. */
	HAIR_SPACE = 1397256787,
	/** Inserts a nonbreaking space. */
	NONBREAKING_SPACE = 1397645907,
	/** Inserts a thin space. */
	THIN_SPACE = 1398042195,
	/** Inserts a figure space. */
	FIGURE_SPACE = 1397122899,
	/** Inserts a punctuation space. */
	PUNCTUATION_SPACE = 1397780051,
	/** Inserts a column break. */
	COLUMN_BREAK = 1396927554,
	/** Inserts a frame break. */
	FRAME_BREAK = 1397125698,
	/** Inserts a page break. */
	PAGE_BREAK = 1397778242,
	/** Inserts a break to the next odd page. */
	ODD_PAGE_BREAK = 1397715010,
	/** Inserts a break to the next even page. */
	EVEN_PAGE_BREAK = 1397059650,
	/** Inserts a footnote symbol. */
	FOOTNOTE_SYMBOL = 1399221837,
	/** Inserts a left to right embedding mark. */
	LEFT_TO_RIGHT_EMBEDDING = 1399616101,
	/** Inserts a right to left embedding mark. */
	RIGHT_TO_LEFT_EMBEDDING = 1400007781,
	/** Inserts a pop directional formatting mark. */
	POP_DIRECTIONAL_FORMATTING = 1399874662,
	/** Inserts a left to right override mark. */
	LEFT_TO_RIGHT_OVERRIDE = 1399616111,
	/** Inserts a right to left override mark. */
	RIGHT_TO_LEFT_OVERRIDE = 1400007791,
	/** Inserts a dotted circle. */
	DOTTED_CIRCLE = 1399092323,
	/** Inserts a zero width joiner. */
	ZERO_WIDTH_JOINER = 1400534890,
	/** Inserts the specified text variable. */
	TEXT_VARIABLE = 1397781622,
	/** Inserts a single straight quote. */
	SINGLE_STRAIGHT_QUOTE = 1397969777,
	/** Inserts a double straight quote. */
	DOUBLE_STRAIGHT_QUOTE = 1396986737,
	/** Inserts a discretionary line break. */
	DISCRETIONARY_LINE_BREAK = 1397777484,
	/** Inserts a zero-width non-joiner. */
	ZERO_WIDTH_NONJOINER = 1397780074,
	/** Inserts a third-width space. */
	THIRD_SPACE = 1398040659,
	/** Inserts a quarter-width space. */
	QUARTER_SPACE = 1397847379,
	/** Inserts a sixth-width space. */
	SIXTH_SPACE = 1397975379,
	/** Inserts a fixed-width nonbreaking space. */
	FIXED_WIDTH_NONBREAKING_SPACE = 1399746146,
	/** Inserts a hebrew maqaf. */
	HEBREW_MAQAF = 1397252717,
	/** Inserts a hebrew geresh. */
	HEBREW_GERESH = 1397253989,
	/** Inserts a hebrew gershayim. */
	HEBREW_GERSHAYIM = 1397254003,
	/** Inserts an arabic kashida. */
	ARABIC_KASHIDA = 1396798059,
	/** Inserts an arabic comma. */
	ARABIC_COMMA = 1396798051,
	/** Inserts an arabic semicolon. */
	ARABIC_SEMICOLON = 1396798307,
	/** Inserts an arabic question mark. */
	ARABIC_QUESTION_MARK = 1396797805,
	/** Inserts a left to right mark. */
	LEFT_TO_RIGHT_MARK = 1399616109,
	/** Inserts a right to left mark. */
	RIGHT_TO_LEFT_MARK = 1400007789,
	/** Inserts a hebrew sof pasuk. */
	HEBREW_SOF_PASUK = 1397252723
}

/**
 * Text case options.
 * @enum
 */
export declare enum ChangecaseMode {
	/** Makes all letters uppercase. */
	UPPERCASE = 1667462499,
	/** Makes all letters lowercase. */
	LOWERCASE = 1667460195,
	/** Makes the first letter of each word uppercase. */
	TITLECASE = 1667462243,
	/** Makes the first letter of each sentence uppercase. */
	SENTENCECASE = 1667461987
}

/**
 * The location of the binding spine in a spread.
 * @enum
 */
export declare enum BindingOptions {
	/**
	 * Moves the page to the right side of the spread's binding 
	 * spine.
	 */
	RIGHT_ALIGN = 1919379572,
	/**
	 * Moves the page to the left side of the spread's binding 
	 * spine.
	 */
	LEFT_ALIGN = 1818584692,
	/** Uses the default binding side. */
	DEFAULT_VALUE = 1147563124
}

/**
 * Page orientation options.
 * @enum
 */
export declare enum PageOrientation {
	/** Landscape. */
	LANDSCAPE = 2003395685,
	/** Portrait. */
	PORTRAIT = 1751738216
}

/**
 * Zero point placement options.
 * @enum
 */
export declare enum RulerOrigin {
	/**
	 * The zero point is at the top-left corner of the spread and 
	 * the ruler increments continuously across all pages of the 
	 * spread.
	 */
	SPREAD_ORIGIN = 1380143983,
	/**
	 * The top-left corner of each page is a new zero point on the 
	 * horizontal ruler.
	 */
	PAGE_ORIGIN = 1380143215,
	/**
	 * The zero point is at the top-left corner of the left-most 
	 * page and at the top of the binding spine. The horizontal 
	 * ruler measures from the leftmost page to the binding edge, 
	 * and from the binding spine through the right edge of the 
	 * right-most page. Also locks the zero point and prevents 
	 * manual overrides.
	 */
	SPINE_ORIGIN = 1380143984
}

/**
 * The unit of measurement.
 * @enum
 */
export declare enum MeasurementUnits {
	/** Points. */
	POINTS = 2054188905,
	/** Picas. */
	PICAS = 2054187363,
	/** Inches. */
	INCHES = 2053729891,
	/** Decimal inches. */
	INCHES_DECIMAL = 2053729892,
	/** Millimeters. */
	MILLIMETERS = 2053991795,
	/** Centimeters. */
	CENTIMETERS = 2053336435,
	/** Ciceros. */
	CICEROS = 2053335395,
	/**
	 * Uses points as the unit of measurement and specifies the 
	 * number of points between major tick marks on the specified 
	 * ruler. For information, see horizontal custom points and 
	 * vertical custom points.
	 */
	CUSTOM = 1131639917,
	/** Agates */
	AGATES = 2051106676,
	/** U */
	U = 2051691808,
	/** Bai */
	BAI = 2051170665,
	/** Mils */
	MILS = 2051893612,
	/** Pixels. */
	PIXELS = 2054187384,
	/** Q. */
	Q = 2054255973,
	/** Ha. */
	HA = 1516790048,
	/** American points. */
	AMERICAN_POINTS = 1514238068
}

/**
 * The page binding placement.
 * @enum
 */
export declare enum PageBindingOptions {
	/** Uses default page binding. */
	DEFAULT_VALUE = 1147563124,
	/** Pages are bound on the right. */
	RIGHT_TO_LEFT = 1920232546,
	/** Pages are bound on the left. */
	LEFT_TO_RIGHT = 1819570786
}

/**
 * The zero point for the baseline grid offset.
 * @enum
 */
export declare enum BaselineGridRelativeOption {
	/**
	 * The baseline grid offset zero point is at the top of the 
	 * page.
	 */
	TOP_OF_PAGE_OF_BASELINE_GRID_RELATIVE_OPTION = 1162766196,
	/**
	 * The baseline grid offset zero point is at the top page 
	 * margin.
	 */
	TOP_OF_MARGIN_OF_BASELINE_GRID_RELATIVE_OPTION = 1162766189
}

/**
 * Binding spine placement options.
 * @enum
 */
export declare enum PageSideOptions {
	/**
	 * The page is on the right side of the binding spine in the 
	 * spread.
	 */
	RIGHT_HAND = 1919382632,
	/**
	 * The page is on the left side of the binding spine in the 
	 * spread.
	 */
	LEFT_HAND = 1818653800,
	/** The page is a single-sided page. */
	SINGLE_SIDED = 1970496888
}

/**
 * Scaling options.
 * @enum
 */
export declare enum WhenScalingOptions {
	/** Apply scaling to the item's content */
	APPLY_TO_CONTENT = 1934192243,
	/** Adjust the scaling percentage of the item's transform */
	ADJUST_SCALING_PERCENTAGE = 1934587252
}

/**
 * Options for page color label.
 * @enum
 */
export declare enum PageColorOptions {
	/** No color. */
	NOTHING = 1851876449,
	/** Uses the color label of the page's master page. */
	USE_MASTER_COLOR = 1346594413
}

/**
 * Options for document intent.
 * @enum
 */
export declare enum DocumentIntentOptions {
	/** Intended purpose of document is for print output. */
	PRINT_INTENT = 1768846448,
	/** Intended purpose of document is for web output. */
	WEB_INTENT = 1768846455,
	/** Intended purpose of document is for publishing to mobiles. */
	MOBILE_INTENT = 1768846445
}

/**
 * Options for setting the layout rule on a page.
 * @enum
 */
export declare enum LayoutRuleOptions {
	/** No layout rule on the page as it resizes. */
	OFF = 1330005536,
	/** Scale objects on the page as it resizes. */
	SCALE = 1280332643,
	/** Recenter objects on the page as it resizes. */
	RECENTER = 1280332387,
	/**
	 * Use guide slicing to resize objects on the page as it 
	 * resizes.
	 */
	GUIDE_BASED = 1280329538,
	/** Reposition and resize objects on the page as it resizes. */
	OBJECT_BASED = 1280331586,
	/** Use layout rule from the page's applied master page. */
	USE_MASTER = 1280333133,
	/**
	 * Use existing layout rule setting on the page. Used for 
	 * creating alternate layouts.
	 */
	PRESERVE_EXISTING = 1280331890
}

/**
 * Modes that control which nearby snapshots, by size and 
 * shape, are blended into the new layout.
 * @enum
 */
export declare enum SnapshotBlendingModes {
	/** Turns off the influence of layout snapshots completely. */
	IGNORE_LAYOUT_SNAPSHOTS = 1399736679,
	/**
	 * Use the layout snapshot nearest in size and shape to the new 
	 * layout.
	 */
	USE_NEAREST_SNAPSHOT = 1399737957,
	/**
	 * Use only layout snapshots within the same class as the new 
	 * layout.
	 */
	LIMITED_SNAPSHOT_BLENDING = 1399737449,
	/**
	 * Use up to three nearest snapshots even if a snapshot is in a 
	 * different class that the new layout.
	 */
	FULL_SNAPSHOT_BLENDING = 1399735925
}

/**
 * Color space options for representing color in the exported 
 * EPS.
 * @enum
 */
export declare enum EPSColorSpace {
	/**
	 * Represents all color values using the RGB color space. Best 
	 * suited for documents that will be viewed on-screen.
	 */
	RGB = 1666336578,
	/**
	 * Creates a separable file by representing all color values 
	 * using the gamut of CYMK process color inks.
	 */
	CMYK = 1129142603,
	/**
	 * Converts all color values to high-quality black-and-white 
	 * images. Gray levels of the converted objects represent the 
	 * luminosity of the original objects.
	 */
	GRAY = 1766290041,
	/** Leaves each image in its original color space. */
	UNCHANGED_COLOR_SPACE = 1970161251,
	/** Uses PostScript color management (includes profiles). */
	POSTSCRIPT_COLOR_MANAGEMENT = 1164208483
}

/**
 * Preview image file format options.
 * @enum
 */
export declare enum PreviewTypes {
	/** Does not save a preview image. */
	NONE = 1852796517,
	/** Saves the preview in TIFF format. */
	TIFF_PREVIEW = 1164997734,
	/**
	 * Saves the preview in PICT format. Note: Valid only for Mac 
	 * OS.
	 */
	PICT_PREVIEW = 1164996724
}

/**
 * Options for embedding fonts in the exported EPS.
 * @enum
 */
export declare enum FontEmbedding {
	/** Embeds only references to fonts. */
	NONE = 1852796517,
	/** Embeds all fonts once per page. */
	COMPLETE = 2003332197,
	/**
	 * Embeds only the characters (glyphs) used in the document. 
	 * Glyphs are downloaded once per page.
	 */
	SUBSET = 1768842098
}

/**
 * Page scaling options.
 * @enum
 */
export declare enum ScaleModes {
	/** Scales the page width and height. */
	SCALE_WIDTH_HEIGHT = 1935898745,
	/**
	 * Scales the page to fit the paper. Note: Valid only when tile 
	 * is false.
	 */
	SCALE_TO_FIT = 1935897702
}

/**
 * Print layer options
 * @enum
 */
export declare enum PrintLayerOptions {
	/** Prints all layers. */
	ALL_LAYERS = 1634495564,
	/** Prints all visible layers. */
	VISIBLE_LAYERS = 1986622284,
	/** Prints only layers that are both visible and printable. */
	VISIBLE_PRINTABLE_LAYERS = 1987080780
}

/**
 * The enumeration of tool box tools.
 * @enum
 */
export declare enum UITools {
	/** No selection */
	NONE = 1852796517,
	/** The selection tool */
	SELECTION_TOOL = 1936018548,
	/** The direct selection tool */
	DIRECT_SELECTION_TOOL = 1685277812,
	/** The gap tool */
	GAP_TOOL = 1734430836,
	/** The pen tool */
	PEN_TOOL = 1885687412,
	/** The add anchor point tool */
	ADD_ANCHOR_POINT = 1633767540,
	/** The delete anchor point tool */
	DELETE_ANCHOR_POINT = 1684099188,
	/** The convert direction point tool */
	CONVERT_DIRECTION_POINT = 1667518580,
	/** The line tool */
	LINE_TOOL = 1819169900,
	/** The type tool */
	TYPE_TOOL = 1954107508,
	/** The type on a path tool */
	TYPE_ON_PATH_TOOL = 1953452148,
	/** The pencil tool */
	PENCIL_TOOL = 1886274412,
	/** The smooth tool */
	SMOOTH_TOOL = 1936544872,
	/** The erase tool */
	ERASE_TOOL = 1701991269,
	/** The polygon frame tool */
	POLYGON_FRAME_TOOL = 1885754476,
	/** The rectangle frame tool */
	RECTANGLE_FRAME_TOOL = 1919308908,
	/** The ellipse frame tool */
	ELLIPSE_FRAME_TOOL = 1701205100,
	/** The polygon tool */
	POLYGON_TOOL = 1886147692,
	/** The rectangle tool */
	RECTANGLE_TOOL = 1919243372,
	/** The ellipse tool */
	ELLIPSE_TOOL = 1701598316,
	/** The rotate tool */
	ROTATE_TOOL = 1919898732,
	/** The scale tool */
	SCALE_TOOL = 1935889516,
	/** The shear tool */
	SHEAR_TOOL = 1936217196,
	/** The scissors tool */
	SCISSORS_TOOL = 1935891060,
	/** The free transform tool */
	FREE_TRANSFORM_TOOL = 1718899820,
	/** The gradient swatch tool */
	GRADIENT_SWATCH_TOOL = 1735611500,
	/** The gradient feather tool */
	GRADIENT_FEATHER_TOOL = 1734759532,
	/** The note tool */
	NOTE_TOOL = 1852789868,
	/** The eye dropper tool */
	EYE_DROPPER_TOOL = 1701074028,
	/** The measure tool */
	MEASURE_TOOL = 1835357292,
	/** The hand tool */
	HAND_TOOL = 1751209068,
	/** The zoom tool */
	ZOOM_TOOL = 2053985388,
	/** The table creation tool */
	TABLE_TOOL = 1952601196,
	/**
	 * The place cursor tool which gets set after an import via the 
	 * Place command
	 */
	PLACE_CURSOR_TOOL = 1885557868,
	/** The motion path tool */
	MOTION_PATH_TOOL = 1836078188,
	/** The page tool */
	PAGE_TOOL = 1936741484
}

/**
 * Resolution options when loaded master pages have the same 
 * name as existing masterpages.
 * @enum
 */
export declare enum GlobalClashResolutionStrategyForMasterPage {
	/** Overwrites the existing master page. */
	LOAD_ALL_WITH_OVERWRITE = 1279350607,
	/** Renames the new master page. */
	LOAD_ALL_WITH_RENAME = 1279350610
}

/**
 * The type of clipping path to create.
 * @enum
 */
export declare enum ClippingPathType {
	/** No clipping path applied. */
	NONE = 1852796517,
	/**
	 * The clipping path is based on pixel value threshold and 
	 * tolerance.
	 */
	DETECT_EDGES = 1685349735,
	/**
	 * The clipping path is based on an alpha channel defined for 
	 * the graphic in a graphics application.
	 */
	ALPHA_CHANNEL = 1634756707,
	/** The clipping path is defined for the graphic in Photoshop. */
	PHOTOSHOP_PATH = 1886613620,
	/** (Read-only) The clipping path has been manually edited. */
	USER_MODIFIED_PATH = 1970106484
}

/**
 * Link updating options.
 * @enum
 */
export declare enum UpdateLinkOptions {
	/** Unspecified update option. */
	UNKNOWN = 1433299822,
	/** Changes the visiblity settings to match the modified file. */
	APPLICATION_SETTINGS = 1819243873,
	/**
	 * Ignores the modified settings and maintains those specified 
	 * in the current document.
	 */
	KEEP_OVERRIDES = 1819241327
}

/**
 * Icon size options.
 * @enum
 */
export declare enum IconSizes {
	/** Extra small icon. */
	EXTRA_SMALL_ICON = 1885696877,
	/** Small icon. */
	SMALL_ICON = 1886612844,
	/** Medium icon. */
	MEDIUM_ICON = 1886217572,
	/** Large icon. */
	LARGE_ICON = 1884058215,
	/** Extra large icon. */
	EXTRA_LARGE_ICON = 1885695079,
	/** Jumbo icon. */
	JUMBO_ICON = 1886943340
}

/**
 * Palette layout resizing options.
 * @enum
 */
export declare enum PanelLayoutResize {
	/** Resize panel areas proportionally. */
	PROPORTIONAL_RESIZE = 1886417010,
	/**
	 * Do not resize document pages panel area when resizing panel.
	 */
	PAGES_FIXED = 1886414456,
	/** Do not resize master pages panel area when resizing panel. */
	MASTERS_FIXED = 1886416230
}

/**
 * options for viewing pages in Pages Panel
 * @enum
 */
export declare enum PageViewOptions {
	/** Pages arranged in horizontal rows. */
	HORIZONTALLY = 1752396907,
	/** Pages arranged in a vertical column. */
	VERTICALLY = 1987211127,
	/** Pages arranged in vertical columns by alternate layout. */
	BY_ALTERNATE_LAYOUT = 1987277931
}

/**
 * Options for specifying how to represent color information in 
 * the exported PDF.
 * @enum
 */
export declare enum PDFColorSpace {
	/**
	 * Represents all color values using the RGB color space. Best 
	 * suited for documents that will be viewed onscreen.
	 */
	RGB = 1666336578,
	/** Represents all color values using CYMK color space. */
	CMYK = 1129142603,
	/** Leaves each image in its original color space. */
	UNCHANGED_COLOR_SPACE = 1970161251,
	/** Repurposes RGB colors. */
	REPURPOSE_RGB = 1917994818,
	/** Repurposes CMYK colors. */
	REPURPOSE_CMYK = 1917013337,
	/**
	 * Converts all color values to high-quality black-and-white 
	 * images. Gray levels of the converted objects represent the 
	 * luminosity of the original objects.
	 */
	GRAY = 1766290041
}

/**
 * The exported PDF document's Acrobat compatibility.
 * @enum
 */
export declare enum AcrobatCompatibility {
	/** Makes the file compatible with Acrobat 4.0 and later. */
	ACROBAT_4 = 1097020464,
	/** Makes the file compatible with Acrobat 5.0 and later. */
	ACROBAT_5 = 1097020720,
	/** Makes the file compatible with Acrobat 6.0 and later. */
	ACROBAT_6 = 1097020976,
	/** Makes the file compatible with Acrobat 7.0 or higher. */
	ACROBAT_7 = 1097021232,
	/** Acrobat 8.0 compatibility. */
	ACROBAT_8 = 1097021488
}

/**
 * The ICC profiles to include in the PDF document.
 * @enum
 */
export declare enum ICCProfiles {
	/** Does not include ICC profiles. */
	INCLUDE_NONE = 1229144942,
	/** Includes all ICC profiles. */
	INCLUDE_ALL = 1229144929,
	/** Includes tagged source profiles. */
	INCLUDE_TAGGED = 1229144948,
	/** Includes RGB and tagged source CMYK profiles. */
	INCLUDE_RGB_AND_TAGGED = 1229144946
}

/**
 * The type of compression for bitmap images.
 * @enum
 */
export declare enum BitmapCompression {
	/** Uses no compression. */
	NONE = 1852796517,
	/**
	 * Uses JPEG compression and automatically determines the best 
	 * quality type. Valid only when acrobat compatibility is 
	 * acrobat 6 or higher.
	 */
	AUTO_COMPRESSION = 1631808880,
	/** Uses JPEG compression. */
	JPEG = 1785751398,
	/** Uses ZIP compression. */
	ZIP = 2053730371,
	/**
	 * Uses JPEG 2000 compression. Valid only when acrobat 
	 * compatibility is acrobat 6 or higher.
	 */
	JPEG_2000 = 1785751346,
	/** The Automatic JPEG 2000 compression method. */
	AUTOMATIC_JPEG_2000 = 1634365490
}

/**
 * The amount and type of compression to use for bitmap images.
 * @enum
 */
export declare enum CompressionQuality {
	/**
	 * Uses minimum compression. Not valid when bitmap compression 
	 * is ZIP.
	 */
	MINIMUM = 1701727598,
	/**
	 * Uses low compression. Not valid when bitmap compression is 
	 * ZIP.
	 */
	LOW = 1701727351,
	/**
	 * Uses medium compression. Not valid when bitmap compression 
	 * is ZIP.
	 */
	MEDIUM = 1701727588,
	/**
	 * Uses high compression. Not valid when bitmap compression is 
	 * ZIP.
	 */
	HIGH = 1701726313,
	/**
	 * Uses maximum compression. Not valid when bitmap compression 
	 * is ZIP.
	 */
	MAXIMUM = 1701727608,
	/**
	 * Uses 4-bit compression. Valid only when bitmap compression 
	 * is ZIP.
	 */
	FOUR_BIT = 1701721186,
	/**
	 * Uses 8-bit compression. Valid only when bitmap compression 
	 * is ZIP.
	 */
	EIGHT_BIT = 1701722210
}

/**
 * The amount and type of compression to apply to monochrome 
 * bitmap images.
 * @enum
 */
export declare enum MonoBitmapCompression {
	/** Uses no compression. */
	NONE = 1852796517,
	/** Uses CCITT Group 3 compression. */
	CCIT3 = 1128879155,
	/** Uses CCITT Group 4 compression. */
	CCIT4 = 1128879156,
	/** Uses ZIP compression. */
	ZIP = 2053730371,
	/** Uses Run Length compression. */
	RUN_LENGTH = 1919839299
}

/**
 * PDF mark weight
 * @enum
 */
export declare enum PDFMarkWeight {
	/** Printer mark line weight of 0.125 points. */
	P125PT = 825374064,
	/** Printer mark line weight of 0.25 points. */
	P25PT = 842346608,
	/** Printer mark line weight of 0.50 points. */
	P50PT = 892350576
}

/**
 * The resampling method.
 * @enum
 */
export declare enum Sampling {
	/** Uses no resampling. */
	NONE = 1852796517,
	/**
	 * Averages the pixels in a sample area and replaces the entire 
	 * area with the average pixel color.
	 */
	DOWNSAMPLE = 1684951917,
	/**
	 * Chooses a pixel in the center of the sample area and 
	 * replaces the entire area with that pixel color.
	 */
	SUBSAMPLE = 1935823725,
	/** Uses a weighted average to determine pixel color. */
	BICUBIC_DOWNSAMPLE = 1650742125
}

/**
 * The type of preset to import or export.
 * @enum
 */
export declare enum ExportPresetFormat {
	/** PDF export presets. */
	PDF_EXPORT_PRESETS_FORMAT = 1716745324,
	/** Printer presets. */
	PRINTER_PRESETS_FORMAT = 1918071916,
	/** Flattener presets. */
	FLATTENER_PRESETS_FORMAT = 1951626348,
	/** Document presets. */
	DOCUMENT_PRESETS_FORMAT = 1683190892
}

/**
 * The amount of the PDF document to place.
 * @enum
 */
export declare enum PDFCrop {
	/**
	 * Places only the area defined by the PDF author as placeable 
	 * artwork.
	 */
	CROP_ART = 1131573313,
	/** Places only the area displayed by Acrobat. */
	CROP_PDF = 1131573328,
	/**
	 * Places only the area that represents the final trim size of 
	 * the document.
	 */
	CROP_TRIM = 1131573332,
	/** Places only the area that represents clipped content. */
	CROP_BLEED = 1131573314,
	/**
	 * Places the area that represents the physical paper size of 
	 * the original PDF document.
	 */
	CROP_MEDIA = 1131573325,
	/** Places the page's bounding box using visible layers only. */
	CROP_CONTENT_VISIBLE_LAYERS = 1131566703,
	/** Places the page's bounding box using all layers. */
	CROP_CONTENT_ALL_LAYERS = 1131561324
}

/**
 * The objects to compress in the PDF document.
 * @enum
 */
export declare enum PDFCompressionType {
	/** Uses no compression. */
	COMPRESS_NONE = 1131368047,
	/** Compresses only objects related to PDF structure. */
	COMPRESS_STRUCTURE = 1131369332,
	/** Compress all objects. */
	COMPRESS_OBJECTS = 1131368290
}

/**
 * The color profile.
 * @enum
 */
export declare enum PDFProfileSelector {
	/** Uses no profile. */
	USE_NO_PROFILE = 1851868240,
	/** Uses the monitor's color profile. */
	USE_MONITOR_PROFILE = 1836008528,
	/** Uses the document's CMYK profile. */
	USE_DOCUMENT = 1967419235,
	/** Uses the working CMYK profile. */
	WORKING = 1466921579
}

/**
 * Options for specifying the PDF/X compliance standard.
 * @enum
 */
export declare enum PDFXStandards {
	/** Does not check for compliance with a PDF/X standard. */
	NONE = 1852796517,
	/** Checks for compliance with the PDF/X-1a:2001 standard. */
	PDFX1A2001_STANDARD = 1396912481,
	/** Checks for compliance with the PDF/X-3:2002 standard. */
	PDFX32002_STANDARD = 1396922419,
	/** Checks for compliance with the PDF/X-1a:2003 standard. */
	PDFX1A2003_STANDARD = 1395745075,
	/** Checks for compliance with the PDF/X-3:2003 standard. */
	PDFX32003_STANDARD = 1398289203,
	/** PDFX42010 standard is used. */
	PDFX42010_STANDARD = 1398289496
}

/**
 * Export layer options.
 * @enum
 */
export declare enum ExportLayerOptions {
	/** Export all layers */
	EXPORT_ALL_LAYERS = 1702388076,
	/** Export visible layers */
	EXPORT_VISIBLE_LAYERS = 1702393452,
	/** Export visible and printable layers */
	EXPORT_VISIBLE_PRINTABLE_LAYERS = 1702260844
}

/**
 * PDF export magnification options.
 * @enum
 */
export declare enum PdfMagnificationOptions {
	/** Uses default magnification. */
	DEFAULT_VALUE = 1147563124,
	/** Uses the actual size. */
	ACTUAL_SIZE = 2053206906,
	/** Uses the fit page magnification option. */
	FIT_PAGE = 2053534832,
	/** Uses the fit width magnification option. */
	FIT_WIDTH = 1212437335,
	/** Uses the fit height magnification option. */
	FIT_HEIGHT = 1212437352,
	/** Uses the fit visible magnification option. */
	FIT_VISIBLE = 1212437334,
	/** Uses 25 percent magnification option. */
	TWENTY_FIVE_PERCENT = 2053534822,
	/** Uses 50 percent magnification option. */
	FIFTY_PERCENT = 2053531248,
	/** Uses 75 percent magnification option. */
	SEVENTY_FIVE_PERCENT = 2053534566,
	/** Uses 100 percent magnification option. */
	ONE_HUNDRED_PERCENT = 2053533544
}

/**
 * PDF export page layout options.
 * @enum
 */
export declare enum PageLayoutOptions {
	/** Uses default page layout. */
	DEFAULT_VALUE = 1147563124,
	/** Single page layout. */
	SINGLE_PAGE = 1987736432,
	/** Single page continuous layout. */
	SINGLE_PAGE_CONTINUOUS = 1884508259,
	/** Two up facing page layout. */
	TWO_UP_FACING = 1884575046,
	/** Two up facing continuous page layout. */
	TWO_UP_FACING_CONTINUOUS = 1884571235,
	/** Two up cover page page layout. */
	TWO_UP_COVER_PAGE = 1884570448,
	/** Two up cover page continuous page layout. */
	TWO_UP_COVER_PAGE_CONTINUOUS = 1884570467
}

/**
 * PDF export raster resolution options.
 * @enum
 */
export declare enum RasterResolutionOptions {
	/** 72 pixels per inch. */
	SEVENTY_TWO_PPI = 1937010800,
	/** 96 pixels per inch. */
	NINETY_SIX_PPI = 1853059184,
	/** 144 pixels per inch. */
	ONE_HUNDRED_FORTY_FOUR_PPI = 1868984432
}

/**
 * PDF raster compression options.
 * @enum
 */
export declare enum PDFRasterCompressionOptions {
	/** Uses JPEG compression. */
	JPEG_COMPRESSION = 1936878179,
	/** Uses the best quality type. */
	LOSSLESS_COMPRESSION = 1936878691,
	/**
	 * Uses JPEG compression and automatically determines the best 
	 * quality type.
	 */
	AUTOMATIC_COMPRESSION = 1936875875
}

/**
 * PDF JPEG Quality options.
 * @enum
 */
export declare enum PDFJPEGQualityOptions {
	/** Uses minimum JPEG compression. */
	MINIMUM = 1701727598,
	/** Uses low JPEG compression. */
	LOW = 1701727351,
	/** Uses medium JPEG compression. */
	MEDIUM = 1701727588,
	/** Uses high JPEG compression. */
	HIGH = 1701726313,
	/** Uses maximum JPEG compression. */
	MAXIMUM = 1701727608
}

/**
 * Options for how to draw interactive elements.
 * @enum
 */
export declare enum InteractiveElementsOptions {
	/** Do not include interactive elements. */
	DO_NOT_INCLUDE = 1145981283,
	/** Draw interactive elements appearance only. */
	APPEARANCE_ONLY = 1097887823
}

/**
 * Options for how to draw interactive elements.
 * @enum
 */
export declare enum InteractivePDFInteractiveElementsOptions {
	/** Include all interactive elements. */
	INCLUDE_ALL_MEDIA = 1231241580,
	/** Draw interactive elements appearance only. */
	APPEARANCE_ONLY = 1097887823
}

/**
 * Page transition to use as an override when exporting.
 * @enum
 */
export declare enum PageTransitionOverrideOptions {
	/** Use the page transition from the document. */
	FROM_DOCUMENT = 1718764655,
	/** No page transition applied. */
	NONE = 1852796517,
	/** The Blinds page transition. */
	BLINDS_TRANSITION = 1886667372,
	/** The Blinds page transition. */
	BOX_TRANSITION = 1886667384,
	/** The Comb page transition. */
	COMB_TRANSITION = 1886667618,
	/** The Cover page transition. */
	COVER_TRANSITION = 1886667638,
	/** The Dissolve page transition. */
	DISSOLVE_TRANSITION = 1886667891,
	/** The Fade page transition. */
	FADE_TRANSITION = 1886668388,
	/** The Page Turn page transition (SWF only). */
	PAGE_TURN_TRANSITION = 1886670932,
	/** The Push page transition. */
	PUSH_TRANSITION = 1886670963,
	/** The Split page transition. */
	SPLIT_TRANSITION = 1886671728,
	/** The Uncover page transition. */
	UNCOVER_TRANSITION = 1886672227,
	/** The Wipe page transition. */
	WIPE_TRANSITION = 1886672752,
	/** The Zoom In page transition. */
	ZOOM_IN_TRANSITION = 1886673481,
	/** The Zoom Out page transition. */
	ZOOM_OUT_TRANSITION = 1886673487
}

/**
 * Tagged PDF structure order options
 * @enum
 */
export declare enum TaggedPDFStructureOrderOptions {
	/**
	 * Use XML structure and layout heuristic fallback for the 
	 * tagged PDF structure.
	 */
	USE_XML_STRUCTURE = 1350062959,
	/** Use Articles order for the tagged PDF structure. */
	USE_ARTICLES = 1348554610
}

/**
 * PDF export display title options.
 * @enum
 */
export declare enum PdfDisplayTitleOptions {
	/** Uses file name. */
	DISPLAY_FILE_NAME = 1148413550,
	/** Uses document title. */
	DISPLAY_DOCUMENT_TITLE = 1148413044
}

/**
 * Options for specifying basis of the top origin of the 
 * paragraph shading.
 * @enum
 */
export declare enum ParagraphShadingTopOriginEnum {
	/**
	 * Makes the paragraph shading top origin based on ascent of 
	 * the text in the paragraph.
	 */
	ASCENT_TOP_ORIGIN = 1886606433,
	/**
	 * Makes the paragraph shading top origin based on baseline of 
	 * the text in the paragraph.
	 */
	BASELINE_TOP_ORIGIN = 1886606434,
	/**
	 * Makes the paragraph shading top origin based on leading of 
	 * the text in the paragraph.
	 */
	LEADING_TOP_ORIGIN = 1885492332
}

/**
 * Options for specifying basis of the bottom origin of the 
 * paragraph shading.
 * @enum
 */
export declare enum ParagraphShadingBottomOriginEnum {
	/**
	 * Makes the paragraph shading bottom origin based on descent 
	 * of the text in the paragraph.
	 */
	DESCENT_BOTTOM_ORIGIN = 1886601828,
	/**
	 * Makes the paragraph shading bottom origin based on baseline 
	 * of the text in the paragraph.
	 */
	BASELINE_BOTTOM_ORIGIN = 1886601826
}

/**
 * Options for indicating the type of shape to which to covert 
 * an object.
 * @enum
 */
export declare enum ConvertShapeOptions {
	/** Converts the object to a rectangle. */
	CONVERT_TO_RECTANGLE = 1129534021,
	/** Converts the object to a rectangle with rounded corners. */
	CONVERT_TO_ROUNDED_RECTANGLE = 1129534034,
	/** Converts the object to a rectangle with beveled corners. */
	CONVERT_TO_BEVELED_RECTANGLE = 1129529938,
	/**
	 * Converts the object to a rectangle with inverse rounded 
	 * corners.
	 */
	CONVERT_TO_INVERSE_ROUNDED_RECTANGLE = 1129531730,
	/** Converts the object to an ellipse. */
	CONVERT_TO_OVAL = 1129533270,
	/** Converts the object to a triangle. */
	CONVERT_TO_TRIANGLE = 1129534546,
	/** Converts the object to a polygon. */
	CONVERT_TO_POLYGON = 1129533519,
	/**
	 * Converts the object to a line that connects the upper left 
	 * and lower right corners of the object's bounding box.
	 */
	CONVERT_TO_LINE = 1129532489,
	/**
	 * Converts the object to straight line. If the object is a 
	 * square, circle, or its bounding box is wider than it is 
	 * tall, the line is horizontal and connects the center points 
	 * on the vertical sides of the bounding box. If the object's 
	 * bounding box is taller than it is wide, the line connects 
	 * the center points of the horizontal sides of the bounding 
	 * box.
	 */
	CONVERT_TO_STRAIGHT_LINE = 1129534284,
	/** Converts the object to an open path. */
	CONVERT_TO_OPEN_PATH = 1129533296,
	/** Converts the object to a closed path. */
	CONVERT_TO_CLOSED_PATH = 1129530224
}

/**
 * Coordinate space options.
 * @enum
 */
export declare enum CoordinateSpaces {
	/** Pasteboard coordinates */
	PASTEBOARD_COORDINATES = 2021224546,
	/** Parent coordinates */
	PARENT_COORDINATES = 2021224545,
	/** Inner coordinates */
	INNER_COORDINATES = 2021222766,
	/** Page coordinates. */
	PAGE_COORDINATES = 2021224551,
	/** Spread coordinates. */
	SPREAD_COORDINATES = 2021225328
}

/**
 * Matrix content.
 * @enum
 */
export declare enum MatrixContent {
	/** Scale values */
	SCALE_VALUES = 1735552887,
	/** Shear value */
	SHEAR_VALUE = 1936486004,
	/** Rotation value */
	ROTATION_VALUE = 1936746862,
	/** Translation values */
	TRANSLATION_VALUES = 1936484720
}

/**
 * Bounding box limits.
 * @enum
 */
export declare enum BoundingBoxLimits {
	/** Outer stroke bounds */
	OUTER_STROKE_BOUNDS = 1768844081,
	/** Geometric path bounds */
	GEOMETRIC_PATH_BOUNDS = 1768844080
}

/**
 * Resize constraints.
 * @enum
 */
export declare enum ResizeConstraints {
	/** Keep current value */
	KEEP_CURRENT_VALUE = 1264939094,
	/** Keep current proportions */
	KEEP_CURRENT_PROPORTIONS = 1264939088,
	/** Tall proportions */
	TALL_PROPORTIONS = 1415670864,
	/** Wide proportions */
	WIDE_PROPORTIONS = 1466524752,
	/** Inverse proportions */
	INVERSE_PROPORTIONS = 1231976016
}

/**
 * Resize methods.
 * @enum
 */
export declare enum ResizeMethods {
	/** Add additional width and height to current values */
	ADDING_CURRENT_DIMENSIONS_TO = 1215264592,
	/** Multiply current width and height by the given factors */
	MULTIPLYING_CURRENT_DIMENSIONS_BY = 1215264589,
	/** Change width and height overriding current values */
	REPLACING_CURRENT_DIMENSIONS_WITH = 1215264581,
	/** Change width to height ratio keeping the current area */
	RESHAPING_AREA_TO_RATIO = 1215264577,
	/** Change width to height ratio keeping the current perimeter */
	RESHAPING_BORDER_TO_RATIO = 1215264595
}

/**
 * Options for fitting content in an empty frame.
 * @enum
 */
export declare enum EmptyFrameFittingOptions {
	/** Does not use a fitting option. */
	NONE = 1852796517,
	/**
	 * Resizes content to fit the frame. Note: Content that has 
	 * different proportions than the frame appears stretched or 
	 * squeezed.
	 */
	CONTENT_TO_FRAME = 1668575078,
	/**
	 * Resizes content to fit the frame while preserving content 
	 * proportions. If the content and frame have different 
	 * proportions, some empty space appears in the frame.
	 */
	PROPORTIONALLY = 1668247152,
	/**
	 * Resizes content to fill the frame while perserving the 
	 * content's proportions. If the content and frame have 
	 * different proportions, some of the content is obscured by 
	 * the frame.
	 */
	FILL_PROPORTIONALLY = 1718185072
}

/**
 * Corner options.
 * @enum
 */
export declare enum CornerOptions {
	/** No corner option. */
	NONE = 1852796517,
	/** Rounded corner option. */
	ROUNDED_CORNER = 1667592804,
	/** Inverted rounded corner option. */
	INVERSE_ROUNDED_CORNER = 1667591798,
	/** Inset corner option. */
	INSET_CORNER = 1667591795,
	/** Beveled corner option. */
	BEVEL_CORNER = 1667588726,
	/** Fancy corner option. */
	FANCY_CORNER = 1667589742
}

/**
 * Dimension constraints for the object-based layout rule
 * @enum
 */
export declare enum DimensionsConstraints {
	/** The dimension remains fixed relative to the parent. */
	FIXED_DIMENSION = 1145267817,
	/** The dimension can vary relative to the parent. */
	FLEXIBLE_DIMENSION = 1145267820
}

/**
 * The content type of an object.
 * @enum
 */
export declare enum ContentType {
	/** No content type assigned. */
	UNASSIGNED = 1970168179,
	/** The frame is a graphics frame. */
	GRAPHIC_TYPE = 1735553140,
	/** The frame is a text frame. */
	TEXT_TYPE = 1952412773
}

/**
 * End cap types.
 * @enum
 */
export declare enum EndCap {
	/** A squared end that stops at the path's endpoint. */
	BUTT_END_CAP = 1650680176,
	/**
	 * A semicircular end that extends beyond the endpoint by half 
	 * the stroke-width.
	 */
	ROUND_END_CAP = 1919115632,
	/**
	 * A squared end that extends beyond the endpoint by half the 
	 * stroke-width.
	 */
	PROJECTING_END_CAP = 1886020464
}

/**
 * End join types.
 * @enum
 */
export declare enum EndJoin {
	/** Miter end join. */
	MITER_END_JOIN = 1835691886,
	/** Rounded end join. */
	ROUND_END_JOIN = 1919577966,
	/** Beveled end join. */
	BEVEL_END_JOIN = 1651142510
}

/**
 * The automatic adjustment to make to the pattern of a dashed 
 * or dotted stroke to cover corner points in a path.
 * @enum
 */
export declare enum StrokeCornerAdjustment {
	/** No adjustment. */
	NONE = 1852796517,
	/**
	 * Changes the length of dashes so that dashes always occur at 
	 * path ends and corners; maintains set gap length. Note: Can 
	 * cause dashes to be different lengths on shapes whose sides 
	 * are of different lengths, such as rectangles.
	 */
	DASHES = 1162113896,
	/**
	 * Changes the length of gaps so that dashes or dots always 
	 * occur at ends and corners; maintains dash length or dot 
	 * diameter. Note: Can cause gaps to be different lengths on 
	 * shapes whose sides are of different lengths, such as 
	 * rectangles.
	 */
	GAPS = 1164406899,
	/**
	 * Adjusts both dashes and gaps to cover corners and end 
	 * points. Note: Causes dash and gap sizes to be consistent on 
	 * all sides of the shape.
	 */
	DASHES_AND_GAPS = 1148405616
}

/**
 * The shape of one or both ends of an open path.
 * @enum
 */
export declare enum ArrowHead {
	/** None. */
	NONE = 1852796517,
	/**
	 * An arrow head formed by two slanting lines whose 
	 * intersection forms a 45-degree angle and whose stroke weight 
	 * is the same as the path's stroke.
	 */
	SIMPLE_ARROW_HEAD = 1936289136,
	/**
	 * An arrow head formed by two slanting lines whose 
	 * intersection forms a 90-degree angle and whose stroke weight 
	 * is the same as the path's stroke.
	 */
	SIMPLE_WIDE_ARROW_HEAD = 1937203560,
	/**
	 * A solid triangle arrow head whose point describes a 
	 * 45-degree angle.
	 */
	TRIANGLE_ARROW_HEAD = 1953655150,
	/**
	 * A solid triangle arrow head whose point describes a 
	 * 90-degree angle.
	 */
	TRIANGLE_WIDE_ARROW_HEAD = 1953980776,
	/**
	 * A solid arrow head whose pierced end bows sharply toward the 
	 * point and whose point describes a 45-degree angle.
	 */
	BARBED_ARROW_HEAD = 1650553442,
	/**
	 * A solid arrow head whose pierced end concaves toward the 
	 * point and whose point describes a 45-degree angle.
	 */
	CURVED_ARROW_HEAD = 1668702568,
	/**
	 * A hollow circle whose outline is the same weight as the 
	 * stroke. The circle's diameter is 5 times the stroke width.
	 */
	CIRCLE_ARROW_HEAD = 1668440424,
	/** A solid circle whose diameter is 5 times the stroke width. */
	CIRCLE_SOLID_ARROW_HEAD = 1668505960,
	/**
	 * A hollow square set perpendicular to the path, whose outline 
	 * is the same weight as the stroke. The length of one side of 
	 * the square is 5 times the stroke width.
	 */
	SQUARE_ARROW_HEAD = 1936810344,
	/**
	 * A solid square set perpendicular to the end of the path. The 
	 * length of one side of the square is 5 times the stroke 
	 * width.
	 */
	SQUARE_SOLID_ARROW_HEAD = 1936941416,
	/**
	 * A vertical bar bisected by the stroke, which meets the 
	 * stroke at a right angle and is the same weight as the 
	 * stroke. The bar's length is 4.5 times the stroke width.
	 */
	BAR_ARROW_HEAD = 1651663208
}

/**
 * Display performance options.
 * @enum
 */
export declare enum DisplaySettingOptions {
	/**
	 * Slower performance; displays high-resolution graphics and 
	 * high-quality transparencies and turns on anti-aliasing.
	 */
	HIGH_QUALITY = 1346922866,
	/**
	 * Moderate performance speed; displays proxy graphics and 
	 * low-quality transparencies and turns on anti-aliasing.
	 */
	TYPICAL = 1349810544,
	/**
	 * Best performance; grays out graphics and turns off 
	 * transparency and anti-aliasing.
	 */
	OPTIMIZED = 1349480564,
	/**
	 * Uses the container object's default display performance 
	 * preferences setting. For information, see default display 
	 * settings.
	 */
	DEFAULT_VALUE = 1147563124
}

/**
 * Options for fitting content to a frame.
 * @enum
 */
export declare enum FitOptions {
	/**
	 * Resizes content to fit the frame. Note: Content that is a 
	 * different size than the frame appears stretched or squeezed.
	 */
	CONTENT_TO_FRAME = 1668575078,
	/**
	 * Centers content in the frame; preserves the frame size as 
	 * well as content size and proportions. Note: If the content 
	 * is larger than the frame, content around the edges is 
	 * obscured.
	 */
	CENTER_CONTENT = 1667591779,
	/**
	 * Resizes content to fit the frame while preserving content 
	 * proportions. If the content and frame have different 
	 * proportions, some empty space appears in the frame.
	 */
	PROPORTIONALLY = 1668247152,
	/** Resizes the frame so it fits the content. */
	FRAME_TO_CONTENT = 1718906723,
	/**
	 * Resizes content to fill the frame while perserving the 
	 * proportions of the content. If the content and frame have 
	 * different proportions, some of the content is obscured by 
	 * the bounding box of the frame.
	 */
	FILL_PROPORTIONALLY = 1718185072,
	/**
	 * Applies the current frame fitting options to the frame and 
	 * content.
	 */
	APPLY_FRAME_FITTING_OPTIONS = 1634100847
}

/**
 * Options for positioning the stroke relative to its path.
 * @enum
 */
export declare enum StrokeAlignment {
	/** The stroke straddles the path. */
	CENTER_ALIGNMENT = 1936998723,
	/** The stroke is inside the path. */
	INSIDE_ALIGNMENT = 1936998729,
	/** The stroke is outside the path, like a picture frame. */
	OUTSIDE_ALIGNMENT = 1936998735
}

/**
 * Guide type options for ruler guides.
 * @enum
 */
export declare enum GuideTypeOptions {
	/** Ruler guide (default). */
	RULER = 1735618160,
	/** Liquid guide. */
	LIQUID = 1735617635
}

/**
 * The path on which to base the contour text wrap.
 * @enum
 */
export declare enum ContourOptionsTypes {
	/** Sets the text wrap shape to the object's bounding box. */
	BOUNDING_BOX = 1701732962,
	/**
	 * Sets the text wrap shape to the specified Photoshop path. To 
	 * specify the Photoshop path, see contour path name.
	 */
	PHOTOSHOP_PATH = 1886613620,
	/** Sets the text wrap shape to the edges of the image. */
	DETECT_EDGES = 1685349735,
	/**
	 * Sets the text wrap shape to the edges of the specified alpha 
	 * channel. To specify the alpha channel, see contour path 
	 * name.
	 */
	ALPHA_CHANNEL = 1634756707,
	/**
	 * Sets the text wrap shape to the wrapped object's graphics 
	 * frame.
	 */
	GRAPHIC_FRAME = 1701734246,
	/**
	 * Sets the text wrap shape to the clipping path (if any) 
	 * defined in Photoshop. Note: A path cannot be specified using 
	 * this enumeration. To set the text wrap shape to a specific 
	 * path, use the photoshop path contour options type 
	 * enumeration value.
	 */
	SAME_AS_CLIPPING = 1935762288
}

/**
 * Text wrap side options.
 * @enum
 */
export declare enum TextWrapSideOptions {
	/** Both sides text wrap. */
	BOTH_SIDES = 1953981043,
	/** Left side text wrap. */
	LEFT_SIDE = 1953983603,
	/** Right side text wrap. */
	RIGHT_SIDE = 1953985139,
	/** Binding side text wrap. */
	SIDE_TOWARDS_SPINE = 1953985651,
	/** Away from binding side text wrap. */
	SIDE_AWAY_FROM_SPINE = 1953980787,
	/** Largest side text wrap. */
	LARGEST_AREA = 1953975411
}

/**
 * Options for wrapping text around an object.
 * @enum
 */
export declare enum TextWrapModes {
	/** No text wrap. */
	NONE = 1852796517,
	/**
	 * Forces text to jump above or below the object, so that no 
	 * text appears on the object's right or left.
	 */
	JUMP_OBJECT_TEXT_WRAP = 1650552420,
	/** Forces text to jump to the next available column. */
	NEXT_COLUMN_TEXT_WRAP = 1853384306,
	/** Wraps text around the object's bounding box. */
	BOUNDING_BOX_TEXT_WRAP = 1651729523,
	/**
	 * Wraps text around the object following the specified contour 
	 * options.
	 */
	CONTOUR = 1835233134
}

/**
 * Font status options.
 * @enum
 */
export declare enum FontStatus {
	/** The font is installed. */
	INSTALLED = 1718831470,
	/** The font is not available. */
	NOT_AVAILABLE = 1718832705,
	/** The font has been fauxed. */
	FAUXED = 1718830689,
	/** The font is a substitute. */
	SUBSTITUTED = 1718834037,
	/** The font's status is unknown. */
	UNKNOWN = 1433299822
}

/**
 * Font type options.
 * @enum
 */
export declare enum FontTypes {
	/** Type 1. */
	TYPE_1 = 1718899761,
	/** TrueType. */
	TRUETYPE = 1718899796,
	/** CID. */
	CID = 1718895433,
	/** ATC. */
	ATC = 1718894932,
	/** Bitmap. */
	BITMAP = 1718895209,
	/** OCF. */
	OCF = 1718898499,
	/** OpenType CFF. */
	OPENTYPE_CFF = 1718898502,
	/** OpenType CID. */
	OPENTYPE_CID = 1718898505,
	/** OpenType TT. */
	OPENTYPE_TT = 1718898516,
	/** The font type is unknown. */
	UNKNOWN = 1433299822
}

/**
 * Supported OpenType feature options.
 * @enum
 */
export declare enum OpenTypeFeature {
	/** Low. */
	LOW = 1701727351,
	/** Allows the use of optional discretionary ligatures. */
	DISCRETIONARY_LIGATURES_FEATURE = 1330930764,
	/**
	 * Reformats numbers separated by a slash, such as 1/2, as 
	 * fractions. Note: In some fonts, the fractions feature 
	 * reformats only standard fractions. For information on 
	 * reformatting non-standard fractions such as 4/13, see 
	 * denominator feature and numerator feature.
	 */
	FRACTIONS_FEATURE = 1330931282,
	/** Superscripts the alpha characters in ordinal numbers. */
	ORDINAL_FEATURE = 1330933586,
	/**
	 * Provides regular and contextual swashes, which may include 
	 * alternate caps and end-of-word alternatives.
	 */
	SWASH_FEATURE = 1330934615,
	/** Activates alternative characters used for uppercase titles. */
	TITLING_FEATURE = 1330934857,
	/** Activates contextual ligatures and connecting alternates. */
	CONTEXTUAL_ALTERNATES_FEATURE = 1330930497,
	/**
	 * Provides authentic small caps rather than scaled-down 
	 * versions of the font's regular caps.
	 */
	ALL_SMALL_CAPS_FEATURE = 1664250691,
	/**
	 * Sizes raised glyphs correctly relative to the surrounding 
	 * characters.
	 */
	SUPERSCRIPT_FEATURE = 1884247123,
	/**
	 * Sizes lowered glyphs correctly relative to the surrounding 
	 * characters.
	 */
	SUBSCRIPT_FEATURE = 1884247106,
	/**
	 * In a series of two numbers separated by a slash that form a 
	 * non-standard fraction, such as 4/13, reformats the first 
	 * number as a numerator.
	 */
	NUMERATOR_FEATURE = 1884247118,
	/**
	 * In a series of two numbers separated by a slash that form a 
	 * non-standard fraction, such as 4/13, reformats the second 
	 * number as a denominator.
	 */
	DENOMINATOR_FEATURE = 1884247108,
	/** Gives full-height figures fixed, equal width. */
	TABULAR_LINING_FEATURE = 1330931284,
	/** Gives varying-height figures varying widths. */
	PROPORTIONAL_OLDSTYLE_FEATURE = 1330933587,
	/** Gives full-height figures varying widths. */
	PROPORTIONAL_LINING_FEATURE = 1330932816,
	/** Gives varying-height figures fixed, equal widths. */
	TABULAR_OLDSTYLE_FEATURE = 1330933588,
	/**
	 * Applies the default figure style of the current font to 
	 * figure glyphs.
	 */
	DEFAULT_FIGURE_STYLE_FEATURE = 1330931268,
	/** Overlap swash */
	OVERLAP_SWASH = 1330933590,
	/** Stylistic alternate */
	STYLISTIC_ALTERNATE = 1330934612,
	/** Justification alternate */
	JUSTIFICATION_ALTERNATE = 1330932309,
	/** Stretched alternate */
	STRETCHED_ALTERNATE = 1330934610
}

/**
 * Options for aligning small characters to the largest 
 * character in the line.
 * @enum
 */
export declare enum CharacterAlignment {
	/** Aligns small characters in a line to the large character. */
	ALIGN_BASELINE = 1247896172,
	/**
	 * Aligns small characters in horizontal text to the top of the 
	 * em box of large characters. In vertical text, aligns 
	 * characters to the right of the em box.
	 */
	ALIGN_EM_TOP = 1247900784,
	/**
	 * Aligns small characters to the center of the em box of large 
	 * characters.
	 */
	ALIGN_EM_CENTER = 1247896436,
	/**
	 * Aligns small characters in horizontal text to the bottom of 
	 * the em box of large characters. In vertical text, aligns 
	 * characters to the left of the em box.
	 */
	ALIGN_EM_BOTTOM = 1247896173,
	/**
	 * Aligns small characters in horizontal text to the top of the 
	 * ICF of large characters. In vertical text, aligns characters 
	 * to the right of the ICF.
	 */
	ALIGN_ICF_TOP = 1248425072,
	/**
	 * Aligns small characters in horizontal text to the bottom of 
	 * the ICF of large characters. In vertical text, aligns 
	 * characters to the left of the ICF.
	 */
	ALIGN_ICF_BOTTOM = 1248420461
}

/**
 * Glyph variant substitution options for standard glyphs.
 * @enum
 */
export declare enum AlternateGlyphForms {
	/** Does not use an alternate form. */
	NONE = 1852796517,
	/** Uses the traditional variant. */
	TRADITIONAL_FORM = 1247897460,
	/** Uses the expert variant. */
	EXPERT_FORM = 1247897445,
	/** Uses the JIS78 variant. */
	JIS78_FORM = 1247897399,
	/** Uses the JIS83 variant. */
	JIS83_FORM = 1247897400,
	/** Uses the monospaced half-width variant. */
	MONOSPACED_HALF_WIDTH_FORM = 1247897453,
	/** Uses the third-width variant. */
	THIRD_WIDTH_FORM = 1247897448,
	/** Uses the quarter-width variant. */
	QUARTER_WIDTH_FORM = 1247897457,
	/** Uses the NLC variant. */
	NLC_FORM = 1247897454,
	/**
	 * Substitutes proportional glyphs for half-width and 
	 * full-width glyphs.
	 */
	PROPORTIONAL_WIDTH_FORM = 1247897456,
	/** Uses the full-width variant. */
	FULL_WIDTH_FORM = 1247897446,
	/** Uses the JIS04 variant. */
	JIS04_FORM = 1247897396,
	/** Uses the JIS90 variant. */
	JIS90_FORM = 1247897401
}

/**
 * Overprint options for kenten marks.
 * @enum
 */
export declare enum AdornmentOverprint {
	/** Uses auto overprint. */
	AUTO = 1635019116,
	/** Turns on overprint. */
	OVERPRINT_ON = 1701736302,
	/** Turns off overprint. */
	OVERPRINT_OFF = 1701736294
}

/**
 * Style options for kenten characters.
 * @enum
 */
export declare enum KentenCharacter {
	/** Does not use kenten. */
	NONE = 1852796517,
	/** Uses the kenten sesame dot. */
	KENTEN_SESAME_DOT = 1248551795,
	/** Uses the kenten white sesame dot. */
	KENTEN_WHITE_SESAME_DOT = 1248551799,
	/** Uses the kenten black circle. */
	KENTEN_BLACK_CIRCLE = 1248551523,
	/** Uses the kenten white circle. */
	KENTEN_WHITE_CIRCLE = 1248556899,
	/** Uses the kenten black triangle. */
	KENTEN_BLACK_TRIANGLE = 1248551540,
	/** Uses the kenten white triangle. */
	KENTEN_WHITE_TRIANGLE = 1248556916,
	/** Uses the kenten bullseye. */
	KENTEN_BULLSEYE = 1248551525,
	/** Uses the kenten fisheye. */
	KENTEN_FISHEYE = 1248552549,
	/** Uses the kenten small black circle. */
	KENTEN_SMALL_BLACK_CIRCLE = 1248555875,
	/** Uses the kenten small white circle. */
	KENTEN_SMALL_WHITE_CIRCLE = 1248555895,
	/** Uses a custom kenten style. */
	CUSTOM = 1131639917
}

/**
 * Options for specifying the kenten or ruby position relative 
 * to the parent character.
 * @enum
 */
export declare enum RubyKentenPosition {
	/**
	 * Places kenten or ruby to the right and above the parent 
	 * character.
	 */
	ABOVE_RIGHT = 1248551282,
	/**
	 * Places kenten or ruby to the left and below the parent 
	 * character.
	 */
	BELOW_LEFT = 1248551532
}

/**
 * Kenten character set options.
 * @enum
 */
export declare enum KentenCharacterSet {
	/** Character input. */
	CHARACTER_INPUT = 1248028777,
	/** Shift JIS. */
	SHIFT_JIS = 1249077875,
	/** JIS. */
	JIS = 1246382419,
	/** Kuten. */
	KUTEN = 1248556404,
	/** Unicode. */
	UNICODE = 1249209961
}

/**
 * Ruby type options.
 * @enum
 */
export declare enum RubyTypes {
	/** Provides ruby for a group of characters. */
	GROUP_RUBY = 1249011570,
	/** Provides ruby for each individual character in the group. */
	PER_CHARACTER_RUBY = 1249013859
}

/**
 * Ruby alignment options.
 * @enum
 */
export declare enum RubyAlignments {
	/**
	 * Aligns ruby with the left-most character in the parent text.
	 */
	RUBY_LEFT = 1249012838,
	/** Centers ruby relative to the parent text. */
	RUBY_CENTER = 1249010548,
	/**
	 * Aligns ruby with the right-most character in the parent 
	 * text.
	 */
	RUBY_RIGHT = 1249014388,
	/** Justifies ruby across the parent text. */
	RUBY_FULL_JUSTIFY = 1249011306,
	/** Ruby JIS. */
	RUBY_JIS = 1249012339,
	/** Ruby equal aki. */
	RUBY_EQUAL_AKI = 1249011041,
	/** Ruby 1 aki. */
	RUBY_1_AKI = 1248997729
}

/**
 * Options for ruby spacing relative to the parent text.
 * @enum
 */
export declare enum RubyParentSpacing {
	/** Does not base ruby spacing on parent text. */
	RUBY_PARENT_NO_ADJUSTMENT = 1249013345,
	/** Ruby parent both sides. */
	RUBY_PARENT_BOTH_SIDES = 1249010291,
	/** Ruby parent 121 aki. */
	RUBY_PARENT_121_AKI = 1248997682,
	/** Applies the parent text aki to the ruby characters. */
	RUBY_PARENT_EQUAL_AKI = 1249014113,
	/** Justifies ruby characters to both edges of the parent text. */
	RUBY_PARENT_FULL_JUSTIFY = 1249014634
}

/**
 * Ruby overhang options.
 * @enum
 */
export declare enum RubyOverhang {
	/** Does not allow ruby overhang. */
	NONE = 1852796517,
	/** Ruby overhang is one ruby. */
	RUBY_OVERHANG_ONE_RUBY = 1249013553,
	/** Ruby overhang is one-half ruby. */
	RUBY_OVERHANG_HALF_RUBY = 1249013554,
	/** Ruby overhang is the size of one character. */
	RUBY_OVERHANG_ONE_CHAR = 1249013603,
	/** Ruby is overhang one-half the size of one chararacter. */
	RUBY_OVERHANG_HALF_CHAR = 1249011811,
	/** There is no ruby overhang size limit. */
	RUBY_OVERHANG_NO_LIMIT = 1249013621
}

/**
 * Warichu text alignment options.
 * @enum
 */
export declare enum WarichuAlignment {
	/** Automatically aligns warichu characters. */
	AUTO = 1635019116,
	/** Aligns warichu on the left side of the text frame. */
	LEFT_ALIGN = 1818584692,
	/** Aligns warichu in the center of the text frame. */
	CENTER_ALIGN = 1667591796,
	/** Warichu on the rigt side of the text frame. */
	RIGHT_ALIGN = 1919379572,
	/**
	 * Justifies warichu lines and makes all lines of equal length.
	 */
	FULLY_JUSTIFIED = 1718971500,
	/** Justifies warichu lines and left aligns the last line. */
	LEFT_JUSTIFIED = 1818915700,
	/** Justifies warichu lines and center aligns the last line. */
	CENTER_JUSTIFIED = 1667920756,
	/** Justifies warichu lines and right aligns the last line. */
	RIGHT_JUSTIFIED = 1919578996
}

/**
 * Kinsoku processing options.
 * @enum
 */
export declare enum KinsokuType {
	/**
	 * Attempts to move characters to the previous line; if the 
	 * push-in is not possible, pushes characters to the next line.
	 */
	KINSOKU_PUSH_IN_FIRST = 1248553318,
	/**
	 * Attempts to move characters to the next line; if the 
	 * push-out is not possible, pushes characters to the previous 
	 * line.
	 */
	KINSOKU_PUSH_OUT_FIRST = 1248554854,
	/**
	 * Always moves characters to the next line. Does not attempt a 
	 * push-in.
	 */
	KINSOKU_PUSH_OUT_ONLY = 1248554863,
	/** The kinsoku prioritize adjustment amount. */
	KINSOKU_PRIORITIZE_ADJUSTMENT_AMOUNT = 1248553313
}

/**
 * Hanging punctuation options when a kinsoku set is in effect.
 * @enum
 */
export declare enum KinsokuHangTypes {
	/** Disables hanging punctuation. */
	NONE = 1852796517,
	/**
	 * Enables hanging punctuation and allows punctuation marks to 
	 * be placed on or outside the text frame but allows burasagari 
	 * characters to hang as little as possible. Note: Differs for 
	 * justified and nonjustified text. For information on 
	 * justification, see line alignment.
	 */
	KINSOKU_HANG_REGULAR = 1248553074,
	/**
	 * Enables hanging punctuation but forces hanging punctuation 
	 * outside the text frame and does not allow the punctuation to 
	 * be placed on the text frame.
	 */
	KINSOKU_HANG_FORCE = 1248553062
}

/**
 * Leading model options.
 * @enum
 */
export declare enum LeadingModel {
	/** Measures the space between type baselines. */
	LEADING_MODEL_ROMAN = 1248619858,
	/** Measures the space between lines from the aki below. */
	LEADING_MODEL_AKI_BELOW = 1248616802,
	/** Measures the space between lines from the aki above. */
	LEADING_MODEL_AKI_ABOVE = 1248616801,
	/** Measures the space between the character center points. */
	LEADING_MODEL_CENTER = 1248619875,
	/** Center down leading model. */
	LEADING_MODEL_CENTER_DOWN = 1248617316
}

/**
 * Predefined kinsoku set options.
 * @enum
 */
export declare enum KinsokuSet {
	/** Does not use a kinsoku set. */
	NOTHING = 1851876449,
	/**
	 * Uses the hard or maximum kinsoku set, which includes all 
	 * Japanese characters that should not begin or end a line.
	 */
	HARD_KINSOKU = 1248357235,
	/**
	 * Uses the soft or weak kinsoku set, which omits from the hard 
	 * kinsoku set long vowel symbols and small hiragana and 
	 * katakana characters.
	 */
	SOFT_KINSOKU = 1249078131,
	/** Uses the Korean kinsoku set. */
	KOREAN_KINSOKU = 1263692659,
	/** Uses the simplified Chinese kinsoku set. */
	SIMPLIFIED_CHINESE_KINSOKU = 1396927347,
	/** Uses the traditional Chinese kinsoku set. */
	TRADITIONAL_CHINESE_KINSOKU = 1413704563
}

/**
 * Mojikumi table options.
 * @enum
 */
export declare enum MojikumiTableDefaults {
	/** Turns off mojikumi. */
	NOTHING = 1851876449,
	/** Uses half-width spacing for all characters. */
	LINE_END_ALL_ONE_HALF_EM_ENUM = 1246572593,
	/**
	 * Indents lines one space and uses line end uke one half 
	 * space.
	 */
	ONE_EM_INDENT_LINE_END_UKE_ONE_HALF_EM_ENUM = 1246572594,
	/**
	 * Indents lines one full or half space and uses line end uke 
	 * one half space.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_UKE_ONE_HALF_EM_ENUM = 1246572595,
	/**
	 * Uses full-witdh spacing for all characters except the last 
	 * character in the line, which uses either full- or half-width 
	 * spacing.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_ALL_ONE_EM_ENUM = 1246572596,
	/**
	 * Indents lines one full space and uses full-width spacing for 
	 * all characters.
	 */
	ONE_EM_INDENT_LINE_END_ALL_ONE_EM_ENUM = 1246572597,
	/**
	 * Indents lines one full space and uses no float for all 
	 * characters.
	 */
	ONE_EM_INDENT_LINE_END_ALL_NO_FLOAT_ENUM = 1246572598,
	/**
	 * Indents lines one full space and uses line end uke no float.
	 */
	ONE_EM_INDENT_LINE_END_UKE_NO_FLOAT_ENUM = 1246572599,
	/**
	 * Indents lines one half space or one full space and uses line 
	 * end uke no float.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_UKE_NO_FLOAT_ENUM = 1246572600,
	/**
	 * Indents lines one full space and uses half-width spacing for 
	 * all characters.
	 */
	ONE_EM_INDENT_LINE_END_ALL_ONE_HALF_EM_ENUM = 1246572601,
	/** Uses full-width spacing for all characters. */
	LINE_END_ALL_ONE_EM_ENUM = 1246572848,
	/** Uses line end uke no float. */
	LINE_END_UKE_NO_FLOAT_ENUM = 1246572849,
	/**
	 * Indents lines one or one-half space and uses full-width 
	 * spacing for punctuation and for the last character in the 
	 * line.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_PERIOD_ONE_EM_ENUM = 1246572850,
	/**
	 * Indents lines one full space and uses full-width spacing for 
	 * punctuation and for the last character in the line.
	 */
	ONE_EM_INDENT_LINE_END_PERIOD_ONE_EM_ENUM = 1246572851,
	/** Uses full-width spacing for punctuation. */
	LINE_END_PERIOD_ONE_EM_ENUM = 1246572852,
	/**
	 * Uses mojikumi tsume and aki optimized for Traditional 
	 * Chinese centered punctuation glyphs.
	 */
	TRAD_CHINESE_DEFAULT = 1246572853,
	/**
	 * Uses mojikumi tsume and aki optimized for Simplified Chinese 
	 * punctuation glyphs.
	 */
	SIMP_CHINESE_DEFAULT = 1246572854
}

/**
 * Alignment options for frame grids or baseline grids.
 * @enum
 */
export declare enum GridAlignment {
	/** Lines are not aligned to the grid. */
	NONE = 1852796517,
	/** Aligns the text baseline to the grid. */
	ALIGN_BASELINE = 1247896172,
	/** Aligns the top of the em box to the grid. */
	ALIGN_EM_TOP = 1247900784,
	/** Aligns the center of the em box to the grid. */
	ALIGN_EM_CENTER = 1247896436,
	/** Aligns the bottom of the em box to the grid. */
	ALIGN_EM_BOTTOM = 1247896173,
	/** Aligns the top of the ICF box to the grid. */
	ALIGN_ICF_TOP = 1248425072,
	/** Aligns the bottom of the ICF box to the grid. */
	ALIGN_ICF_BOTTOM = 1248420461
}

/**
 * Options for aligning kenten characters relative to the 
 * parent characters.
 * @enum
 */
export declare enum KentenAlignment {
	/** Aligns kenten with the left of parent characters. */
	ALIGN_KENTEN_LEFT = 1248554604,
	/** Aligns kenten with the center of parent charactrers. */
	ALIGN_KENTEN_CENTER = 1248554595
}

/**
 * Hyphenation exceptions list options for composing text.
 * @enum
 */
export declare enum ComposeUsing {
	/** Uses the list stored in the external user dictionary. */
	USE_USER_DICTIONARY = 1433629284,
	/** Uses the list stored in the document. */
	USE_DOCUMENT = 1967419235,
	/**
	 * Uses the lists stored in both the document and the user 
	 * dictionary.
	 */
	BOTH = 1651471464
}

/**
 * Page number style options.
 * @enum
 */
export declare enum PageNumberStyle {
	/** Uses uppercase Roman numerals. */
	UPPER_ROMAN = 1297247605,
	/** Uses lowercase Roman numerals. */
	LOWER_ROMAN = 1297247596,
	/** Uses uppercase letters. */
	UPPER_LETTERS = 1296855669,
	/** Uses lowercase letters. */
	LOWER_LETTERS = 1296855660,
	/** Uses Arabic numerals. */
	ARABIC = 1298231906,
	/** Uses Kanji. */
	KANJI = 1296788073,
	/** Uses Arabic Alif Ba Tah */
	ARABIC_ALIF_BA_TAH = 1296130420,
	/** Uses Arabic Abjad */
	ARABIC_ABJAD = 1296130410,
	/** Uses Hebrew Biblical */
	HEBREW_BIBLICAL = 1296589410,
	/** Uses Hebrew Non Standard */
	HEBREW_NON_STANDARD = 1296589422,
	/**
	 * Uses Arabic numerals and formats all page numbers as two 
	 * digits.
	 */
	SINGLE_LEADING_ZEROS = 1297312890,
	/**
	 * Uses Arabic numerals and formats all page numbers as three 
	 * digits.
	 */
	DOUBLE_LEADING_ZEROS = 1296329850,
	/**
	 * Uses Arabic numerals and formats all page numbers as four 
	 * digits.
	 */
	TRIPLE_LEADING_ZEROS = 1297378426
}

/**
 * Gradient type options.
 * @enum
 */
export declare enum GradientType {
	/** A linear gradient. */
	LINEAR = 1635282023,
	/** A radial gradient. */
	RADIAL = 1918985319
}

/**
 * Options for joining two path points.
 * @enum
 */
export declare enum JoinOptions {
	/** Connect two end points (default). */
	CONNECT = 1668178804,
	/**
	 * Combine two end points and replace with an single averaged 
	 * point.
	 */
	COMBINE = 1668113006
}

/**
 * Path type options.
 * @enum
 */
export declare enum PathType {
	/** The path is an open path. */
	OPEN_PATH = 1869639280,
	/** The path is a closed path. */
	CLOSED_PATH = 1668051812
}

/**
 * The path point type.
 * @enum
 */
export declare enum PointType {
	/**
	 * The point is a smooth point, it has two direction lines 
	 * which are parallel.
	 */
	SMOOTH = 1936553064,
	/**
	 * The point is a corner point, it has either one direction 
	 * line, or two independent direction lines.
	 */
	CORNER = 1668443762,
	/** The point is a plain point, it has no direction lines. */
	PLAIN = 1886151022,
	/**
	 * A special type of smooth point with two direction lines of 
	 * equal length.
	 */
	SYMMETRICAL = 1937337709
}

/**
 * Options for creating preview images.
 * @enum
 */
export declare enum CreateProxy {
	/** Creates preview images as needed. */
	AS_NEEDED = 1699311204,
	/** Always creates preview images. */
	ALWAYS = 1699307895
}

/**
 * The cropping option of an imported InDesign page.
 * @enum
 */
export declare enum ImportedPageCropOptions {
	/** Places the page's bounding box. */
	CROP_CONTENT = 1131573315,
	/** Places the page's bleed area. */
	CROP_BLEED = 1131573314,
	/** Places the page's slug area. */
	CROP_SLUG = 1131565932
}

/**
 * Options for the active stroke/fill proxy.
 * @enum
 */
export declare enum StrokeFillProxyOptions {
	/** Stroke proxy is active. */
	STROKE = 1400140395,
	/** Fill proxy is active. */
	FILL = 1181314156
}

/**
 * Options for the target of the active stroke/fill proxy.
 * @enum
 */
export declare enum StrokeFillTargetOptions {
	/** Formatting affects the container. */
	FORMATTING_AFFECTS_CONTAINER = 1181696323,
	/** Formatting affects the text. */
	FORMATTING_AFFECTS_TEXT = 1181696340
}

/**
 * Options for rotating the contents of the place gun
 * @enum
 */
export declare enum RotationDirection {
	/** Rotate the list forward (i.e., move the front item to end) */
	FORWARD = 1181708919,
	/**
	 * Rotate the list backward (i.e., move backmost item to front)
	 */
	BACKWARD = 1113680759
}

/**
 * Options for specifying location relative to the reference 
 * object or within the containing object.
 * @enum
 */
export declare enum LocationOptions {
	/** Places the object before the reference object. */
	BEFORE = 1650812527,
	/** Places the object after the reference object. */
	AFTER = 1634104421,
	/** Places the object at the end of the containing object. */
	AT_END = 1701733408,
	/**
	 * Places the object at the beginning of the containing object.
	 */
	AT_BEGINNING = 1650945639,
	/** No location specified. */
	UNKNOWN = 1433299822
}

/**
 * Standard UI colors.
 * @enum
 */
export declare enum UIColors {
	/** Light blue. */
	LIGHT_BLUE = 1766613612,
	/** Red. */
	RED = 1767007588,
	/** Green. */
	GREEN = 1766290030,
	/** Blue. */
	BLUE = 1765960821,
	/** Yellow. */
	YELLOW = 1767468151,
	/** Magenta. */
	MAGENTA = 1766680430,
	/** Cyan. */
	CYAN = 1766029678,
	/** Gray. */
	GRAY = 1766290041,
	/** Black. */
	BLACK = 1765960811,
	/** Orange. */
	ORANGE = 1766814318,
	/** Dark green. */
	DARK_GREEN = 1766090610,
	/** Teal. */
	TEAL = 1767138668,
	/** Tan. */
	TAN = 1767137646,
	/** Brown. */
	BROWN = 1765962350,
	/** Violet. */
	VIOLET = 1767271540,
	/** Gold. */
	GOLD = 1766288484,
	/** Dark blue. */
	DARK_BLUE = 1766089324,
	/** Pink. */
	PINK = 1766878827,
	/** Lavender. */
	LAVENDER = 1766618734,
	/** Brick red. */
	BRICK_RED = 1765962340,
	/** Olive green. */
	OLIVE_GREEN = 1766812790,
	/** Peach. */
	PEACH = 1766876008,
	/** Burgundy. */
	BURGUNDY = 1765962343,
	/** Grass green. */
	GRASS_GREEN = 1766287218,
	/** Ochre. */
	OCHRE = 1766810482,
	/** Purple. */
	PURPLE = 1766879856,
	/** Light gray. */
	LIGHT_GRAY = 1766614898,
	/** Charcoal. */
	CHARCOAL = 1766025324,
	/** Grid blue. */
	GRID_BLUE = 1766285932,
	/** Grid orange. */
	GRID_ORANGE = 1766289266,
	/** Fiesta. */
	FIESTA = 1766222181,
	/** Light olive. */
	LIGHT_OLIVE = 1766616940,
	/** Lipstick. */
	LIPSTICK = 1766615408,
	/** Cute teal. */
	CUTE_TEAL = 1766028396,
	/** Sulphur. */
	SULPHUR = 1767077228,
	/** Grid green. */
	GRID_GREEN = 1766286439,
	/** White. */
	WHITE = 1767336052
}

/**
 * Nothing.
 * @enum
 */
export declare enum NothingEnum {
	/** Nothing */
	NOTHING = 1851876449
}

/**
 * The default value.
 * @enum
 */
export declare enum AutoEnum {
	/**
	 * Uses the default value defined automatically for the object 
	 * based on a parent or other type of object.
	 */
	AUTO_VALUE = 1635087471
}

/**
 * Phase options for event propagation.
 * @enum
 */
export declare enum EventPhases {
	/** Not yet propagating. */
	NOT_DISPATCHING = 1701727812,
	/** The at-target phase of propagation. */
	AT_TARGET = 1701724500,
	/** The bubbling phase of propagation. */
	BUBBLING_PHASE = 1701724789,
	/** The propagation is complete. */
	DONE = 1701725252
}

/**
 * Export format options.
 * @enum
 */
export declare enum ExportFormat {
	/** Exports to a tagged text file with a TXT extension. */
	TAGGED_TEXT = 1416066168,
	/** Exports to PDF format. */
	PDF_TYPE = 1952403524,
	/** Exports to EPS format. */
	EPS_TYPE = 1952400720,
	/** Exports to rich text format (RTF). */
	RTF = 1381254688,
	/** Exports to text (TXT) format. */
	TEXT_TYPE = 1952412773,
	/** Exports the document's tagged content to XML. */
	XML = 1481460768,
	/** Exports to JPEG format. */
	JPG = 1246775072,
	/** Exports to Interactive PDF format. */
	INTERACTIVE_PDF = 1952409936,
	/** Exports to packaged XFL format. */
	PACKAGED_XFL = 1702389356,
	/** Exports to SWF format. */
	SWF = 1702066022,
	/** Exports to fixed layout EPub format. */
	FIXED_LAYOUT_EPUB = 1701865080,
	/** Exports to XHTML FXL format. */
	HTMLFXL = 1213490808,
	/** Exports to InDesign snippet (IDMS) format. */
	INDESIGN_SNIPPET = 1936617588,
	/** Exports to InDesign markup (IDML) format. */
	INDESIGN_MARKUP = 1768189292,
	/** Exports to InCopy markup (ICML) format. */
	INCOPY_MARKUP = 1768123756,
	/** Exports to PNG format. */
	PNG_FORMAT = 1699761735,
	/** Exports to XHTML format. */
	HTML = 1213484364,
	/** Exports to EPub format. */
	EPUB = 1701868898
}

/**
 * The color profile policy for placed vector files (PDF or 
 * EPS).
 * @enum
 */
export declare enum PlacedVectorProfilePolicy {
	/** Ignores all profiles and output intent. */
	IGNORE_ALL = 1148217697,
	/** Ignores output intent; honors calibrated spaces. */
	IGNORE_OUTPUT_INTENT = 1148217711,
	/** Honors all profiles and output intent. */
	HONOR_ALL_PROFILES = 1148217441
}

/**
 * The policy for handling mismatched CMYK configurations.
 * @enum
 */
export declare enum ColorSettingsPolicy {
	/**
	 * Turns off color management for documents whose profiles do 
	 * not match the working space. For imported colors, numeric 
	 * values override color appearance.
	 */
	COLOR_POLICY_OFF = 1129344870,
	/**
	 * Preserves embedded color profiles in newly opened documents.
	 */
	PRESERVE_EMBEDDED_PROFILES = 1129345136,
	/**
	 * Converts newly opened documents to the current working 
	 * space. For imported colors, color appearance overrides 
	 * numeric values.
	 */
	CONVERT_TO_WORKING_SPACE = 1129346931,
	/**
	 * Preserves raw color numbers and ignores embedded color 
	 * profiles.
	 */
	COMBINATION_OF_PRESERVE_AND_SAFE_CMYK = 1129345124
}

/**
 * The default rendering intent.
 * @enum
 */
export declare enum DefaultRenderingIntent {
	/**
	 * Aims to preserve the visual relationship between colors so 
	 * they are perceived as natural to the human eye, even though 
	 * the color values themselves may change.
	 */
	PERCEPTUAL = 1380544611,
	/**
	 * Tries to produce vivid colors in an image at the expense of 
	 * color accuracy.
	 */
	SATURATION = 1380545377,
	/**
	 * Compares the extreme highlight of the source color space to 
	 * that of the destination color space and shifts all colors 
	 * accordingly. Out-of-gamut colors are shifted to the closest 
	 * reproducible color in the destination color space. Note: 
	 * Preserves more of the original colors in an image than 
	 * perceptual rendering intent does.
	 */
	RELATIVE_COLORIMETRIC = 1380545123,
	/**
	 * Aims to maintain color accuracy at the expense of color 
	 * relationshps and is suitable for proofing to simulate the 
	 * output of a particular device. Note: Leaves colors that fall 
	 * inside the destination gamut unchanged and clips 
	 * out-of-gamut colors.
	 */
	ABSOLUTE_COLORIMETRIC = 1380540771
}

/**
 * Options for proofing colors.
 * @enum
 */
export declare enum ProofingType {
	/** Turns off soft proof display. */
	PROOF_OFF = 1347710822,
	/**
	 * Creates a soft proof of colors using the document's CMYK 
	 * profile.
	 */
	DOCUMENT_CMYK = 1347708003,
	/**
	 * Creates a soft proof of colors using the current CMYK 
	 * working space.
	 */
	WORKING_CMYK = 1347712867,
	/**
	 * Allows creation of a custom proofing setup for a specific 
	 * output condition.
	 */
	CUSTOM = 1131639917
}

/**
 * Change conditions modes.
 * @enum
 */
export declare enum ChangeConditionsModes {
	/** Change replaces applied conditions. */
	REPLACE_WITH = 1919250519,
	/** Change adds to applied conditions. */
	ADD_TO = 1633969202
}

/**
 * Search mode options.
 * @enum
 */
export declare enum SearchModes {
	/** Text search. */
	TEXT_SEARCH = 1182038131,
	/** Grep search. */
	GREP_SEARCH = 1181184627,
	/** Glyph search. */
	GLYPH_SEARCH = 1181183091,
	/** Object search. */
	OBJECT_SEARCH = 1181704819
}

/**
 * Object type options.
 * @enum
 */
export declare enum ObjectTypes {
	/** All frame types. */
	ALL_FRAMES_TYPE = 1178682995,
	/** Text frame. */
	TEXT_FRAMES_TYPE = 1179928178,
	/** Graphics frame. */
	GRAPHIC_FRAMES_TYPE = 1179076211,
	/** Unassigned frame. */
	UNASSIGNED_FRAMES_TYPE = 1179993715
}

/**
 * Find/change transliterate character type options.
 * @enum
 */
export declare enum FindChangeTransliterateCharacterTypes {
	/** Half-width katakana. */
	HALF_WIDTH_KATAKANA = 1179154251,
	/** Half-width Roman symbols. */
	HALF_WIDTH_ROMAN_SYMBOLS = 1179154258,
	/** Full-width hiragana. */
	FULL_WIDTH_HIRAGANA = 1179023176,
	/** Full-width katakana. */
	FULL_WIDTH_KATAKANA = 1179023179,
	/** Full-width Roman symbols. */
	FULL_WIDTH_ROMAN_SYMBOLS = 1179023186,
	/** Western Arabic digits (0, 1, 2, 3, ...). */
	WESTERN_ARABIC_DIGITS = 1463903337,
	/** Arabic Indic(hindi) digits. */
	ARABIC_INDIC_DIGITS = 1095328873,
	/** Farsi digits. */
	FARSI_DIGITS = 1684629089
}

/**
 * Library panel views
 * @enum
 */
export declare enum LibraryPanelViews {
	/** List view */
	LIST_VIEW = 1699501673,
	/** Thumbnail view */
	THUMBNAIL_VIEW = 1700030550,
	/** Large thumbnail view */
	LARGE_THUMBNAIL_VIEW = 1699501142
}

/**
 * Sort order options
 * @enum
 */
export declare enum SortAssets {
	/** Sort by name */
	BY_NAME = 1699955278,
	/** Sort oldest first */
	BY_OLDEST = 1699955279,
	/** Sort newest first */
	BY_NEWEST = 1699955310,
	/** Sort by type */
	BY_TYPE = 1699955284
}

/**
 * Link status options.
 * @enum
 */
export declare enum LinkStatus {
	/** The link is a normal link. */
	NORMAL = 1852797549,
	/** A more recent version of the file exists on the disk. */
	LINK_OUT_OF_DATE = 1819242340,
	/** The linked file has been moved, renamed, or deleted. */
	LINK_MISSING = 1819109747,
	/** The file is embedded in the document. */
	LINK_EMBEDDED = 1282237028,
	/** The url link is inaccessible. */
	LINK_INACCESSIBLE = 1818848865
}

/**
 * Asset type options.
 * @enum
 */
export declare enum AssetType {
	/** The asset is cataloged as an image asset. */
	IMAGE_TYPE = 1952409965,
	/** The asset is cataloged as an EPS asset. */
	EPS_TYPE = 1952400720,
	/** The asset is cataloged as a PDF asset. */
	PDF_TYPE = 1952403524,
	/** The asset is cataloged as a geometric page item asset. */
	GEOMETRY_TYPE = 1952409445,
	/** The asset is cataloged as a page asset. */
	PAGE_TYPE = 1952411745,
	/** The asset is cataloged as a text asset. */
	TEXT_TYPE = 1952412773,
	/** Structure asset */
	STRUCTURE_TYPE = 1952412532,
	/** InDesign file asset */
	INDESIGN_FILE_TYPE = 1952409956
}

/**
 * Change type options.
 * @enum
 */
export declare enum ChangeTypes {
	/** Added text. */
	INSERTED_TEXT = 1799974515,
	/** Deleted text. */
	DELETED_TEXT = 1799644524,
	/** Moved text. */
	MOVED_TEXT = 1800236918
}

/**
 * Options for the alignment and appearance of type on a path.
 * @enum
 */
export declare enum TextPathEffects {
	/**
	 * The center of each character's baseline is parallel to the 
	 * path's tangent. This is the default effect.
	 */
	RAINBOW_PATH_EFFECT = 1601201778,
	/**
	 * The text characters' vertical edges are perfectly vertical 
	 * regardless of the path shape.
	 */
	SKEW_PATH_EFFECT = 1601201779,
	/**
	 * The text characters' horizontal edges are perfectly 
	 * horizontal regardless of the path shape.
	 */
	RIBBON_PATH_EFFECT = 1601201715,
	/**
	 * The left edge of each character's baseline is on the path 
	 * and no characters are rotated.
	 */
	STAIR_STEP_PATH_EFFECT = 1601205107,
	/**
	 * The center of each character's baseline is on the path while 
	 * each vertical edge is in line with the path's center point.
	 */
	GRAVITY_PATH_EFFECT = 1601201767
}

/**
 * The text alignment relative to the path.
 * @enum
 */
export declare enum TextTypeAlignments {
	/** Aligns the ascender to the path (not the path's stroke). */
	ASCENDER_TEXT_ALIGNMENT = 1952538995,
	/** Aligns descender to the path (not the path's stroke). */
	DESCENDER_TEXT_ALIGNMENT = 1952539763,
	/**
	 * Aligns the midpoint between the ascender and the descender 
	 * to the path (not the path's stroke).
	 */
	CENTER_TEXT_ALIGNMENT = 1952539508,
	/**
	 * The text baseline is aligned to the path (not the path's 
	 * stroke).
	 */
	BASELINE_TEXT_ALIGNMENT = 1952539244,
	/**
	 * The top-edge or right-edge baseline of the em box is aligned 
	 * to the path.
	 */
	ABOVE_RIGHT_EM_BOX_TEXT_ALIGNMENT = 1952543333,
	/**
	 * The bottom-edge or left-edge baseline of the em box is 
	 * aligned to the path.
	 */
	BELOW_LEFT_EM_BOX_TEXT_ALIGNMENT = 1952607333,
	/**
	 * The ideographic character face box top-edge or right-edge 
	 * baseline is aligned to the path.
	 */
	ABOVE_RIGHT_ICF_BOX_TEXT_ALIGNMENT = 1952543337,
	/**
	 * The ideographic character face box bottom-edge or left-edge 
	 * baseline is aligned to the path.
	 */
	BELOW_LEFT_ICF_BOX_TEXT_ALIGNMENT = 1952607337
}

/**
 * Options for aligning text to the path's stroke.
 * @enum
 */
export declare enum PathTypeAlignments {
	/** The text is aligned to the top of the path stroke. */
	TOP_PATH_ALIGNMENT = 1885434975,
	/** The text is aligned to the bottom of the path stroke. */
	BOTTOM_PATH_ALIGNMENT = 1885430367,
	/** The text is aligned to the center of the path stroke. */
	CENTER_PATH_ALIGNMENT = 1885430623
}

/**
 * Options for flipping or unflipping text relative to the 
 * path.
 * @enum
 */
export declare enum FlipValues {
	/** No flip effect applied. */
	NOT_FLIPPED = 1852206192,
	/** Flips the text across the path. */
	FLIPPED = 2036755568,
	/** Undefined flip effect. */
	UNDEFINED_FLIP_VALUE = 1969646704
}

/**
 * Location options for XML elements.
 * @enum
 */
export declare enum XMLElementLocation {
	/**
	 * Locates the element at the beginning of the containing 
	 * object.
	 */
	ELEMENT_START = 1482844014,
	/** Locates the element at the end of the containing object. */
	ELEMENT_END = 1483042404
}

/**
 * Options for specifying position relative to the reference 
 * XML element or withing the XML element.
 * @enum
 */
export declare enum XMLElementPosition {
	/** Specifies the position before the XML element. */
	BEFORE_ELEMENT = 1482843494,
	/** Specifies the position after the XML element. */
	AFTER_ELEMENT = 1482778228,
	/** Specifies the position at the beginning of the XML element. */
	ELEMENT_START = 1482844014,
	/** Specifies the position at the end of the XML element. */
	ELEMENT_END = 1483042404
}

/**
 * Options for incorporating imported XML content.
 * @enum
 */
export declare enum XMLImportStyles {
	/** Appends the imported content. */
	APPEND_IMPORT = 1481466217,
	/** Merges the imported content. */
	MERGE_IMPORT = 1481469289
}

/**
 * File encoding options for exported XML content.
 * @enum
 */
export declare enum XMLFileEncoding {
	/** UTF-8 encoding. */
	UTF8 = 1937134904,
	/** UTF-16 encoding. */
	UTF16 = 1937125686,
	/** Shift-JIS encoding. */
	SHIFT_JIS = 1249077875
}

/**
 * File format options for converted images.
 * @enum
 */
export declare enum ImageConversion {
	/** Uses the best format based on the image. */
	AUTOMATIC = 1768059764,
	/** Uses JPEG format for all images. */
	JPEG = 1785751398,
	/** Uses GIF format for all images. */
	GIF = 1734960742,
	/** Uses PNG format for all images. */
	PNG = 1397059687
}

/**
 * Color palette options for GIF conversion.
 * @enum
 */
export declare enum GIFOptionsPalette {
	/** Uses the adaptive (no dither) palette. */
	ADAPTIVE_PALETTE = 1886151024,
	/** Uses the Macintosh palette. */
	MACINTOSH_PALETTE = 1886154096,
	/** Uses the Web palette. */
	WEB_PALETTE = 1886156656,
	/** Uses the Windows palette. */
	WINDOWS_PALETTE = 1886156644
}

/**
 * Quality options for converted JPEG images.
 * @enum
 */
export declare enum JPEGOptionsQuality {
	/** Low quality. */
	LOW = 1701727351,
	/** Medium quality. */
	MEDIUM = 1701727588,
	/** High quality. */
	HIGH = 1701726313,
	/** Maximum quality. */
	MAXIMUM = 1701727608
}

/**
 * Formatting options for converted JPEG images.
 * @enum
 */
export declare enum JPEGOptionsFormat {
	/** Uses baseline encoding to download the image in one pass. */
	BASELINE_ENCODING = 1785751394,
	/**
	 * Uses progressive encoding to download the image in a series 
	 * of passes, with the first pass at low resolution and each 
	 * successive pass adding resolution to the image.
	 */
	PROGRESSIVE_ENCODING = 1785751408
}

/**
 * Export options for untagged tables in tagged stories.
 * @enum
 */
export declare enum XMLExportUntaggedTablesFormat {
	/** Does not export untagged tables. */
	NONE = 1852796517,
	/** Exports untagged tables as CALS XML. */
	CALS = 1484022643
}

/**
 * File used for XML transformation.
 * @enum
 */
export declare enum XMLTransformFile {
	/** Use stylesheet specified in XML */
	STYLESHEET_IN_XML = 1483961208
}

/**
 * Options for specifying the position of the anchored object 
 * relative to the its anchor.
 * @enum
 */
export declare enum AnchorPosition {
	/**
	 * Align the anchored object with the baseline of the line that 
	 * contains the object.
	 */
	INLINE_POSITION = 1095716969,
	/**
	 * Place the anchored object above the line of text that 
	 * contains the object.
	 */
	ABOVE_LINE = 1095716961,
	/** Custom anchor position. */
	ANCHORED = 1097814113
}

/**
 * The horizontal alignment of an anchored object. Not valid 
 * when anchored position is inline.
 * @enum
 */
export declare enum HorizontalAlignment {
	/** Place the anchored object to the right of the reference. */
	RIGHT_ALIGN = 1919379572,
	/** Place the anchored object to the left of the reference. */
	LEFT_ALIGN = 1818584692,
	/** Place the anchored object at the center of the reference. */
	CENTER_ALIGN = 1667591796,
	/** Place the anchored object relative to the text alignment. */
	TEXT_ALIGN = 1954046316
}

/**
 * The vertical alignment of an anchored object.
 * @enum
 */
export declare enum VerticalAlignment {
	/**
	 * Place the anchored object at the top of the vertical 
	 * reference point.
	 */
	TOP_ALIGN = 1953460256,
	/**
	 * Place the anchored object at the bottom of the vertical 
	 * reference point.
	 */
	BOTTOM_ALIGN = 1651471469,
	/**
	 * Place the anchored object at the vertical center of the 
	 * vertical reference point.
	 */
	CENTER_ALIGN = 1667591796
}

/**
 * The horizontal alignment point of an anchored object.
 * @enum
 */
export declare enum AnchoredRelativeTo {
	/**
	 * Align the anchored object to the edge of the text or table 
	 * column.
	 */
	COLUMN_EDGE = 1095787375,
	/** Align the anchored object to the edge of the text frame. */
	TEXT_FRAME = 1954051174,
	/** Align the anchored object to the page margin. */
	PAGE_MARGINS = 1095789927,
	/** Align the anchored object to the edge of the page. */
	PAGE_EDGE = 1095790695,
	/** Align the anchored object to the anchor. */
	ANCHOR_LOCATION = 1095786862
}

/**
 * Options for balancing line endings in the text.
 * @enum
 */
export declare enum BalanceLinesStyle {
	/** Does not balance lines. */
	NO_BALANCING = 1114394470,
	/** Prefers shorter last lines. */
	VEE_SHAPE = 1114396261,
	/** Balances lines equally. */
	FULLY_BALANCED = 1114391921,
	/** Prefers longer last lines. */
	PYRAMID_SHAPE = 1114394745
}

/**
 * The vertical alignment point of an anchored object.
 * @enum
 */
export declare enum VerticallyRelativeTo {
	/**
	 * Align the anchored object to the edge of the text or table 
	 * column.
	 */
	COLUMN_EDGE = 1095787375,
	/** Align the anchored object to the edge of the text frame. */
	TEXT_FRAME = 1954051174,
	/** Align the anchored object to the page margin. */
	PAGE_MARGINS = 1095789927,
	/** Align the anchored object to the edge of the page. */
	PAGE_EDGE = 1095790695,
	/**
	 * Align the anchored object to the baseline of the line of 
	 * text.
	 */
	LINE_BASELINE = 1096180321,
	/**
	 * Align the anchored object to the top of lower case letters 
	 * with no ascent, such as x.
	 */
	LINE_XHEIGHT = 1096185960,
	/**
	 * Align the anchored object to the top of the tallest letters 
	 * in the text.
	 */
	LINE_ASCENT = 1096180083,
	/** Align the anchored object to the top of capital letters. */
	CAPHEIGHT = 1096185955,
	/** Align the anchored object to the top of the text leading. */
	TOP_OF_LEADING = 1096180332,
	/** Align the anchored object to the top of the embox. */
	EMBOX_TOP = 1096181101,
	/** Align the anchored object to the middle of the embox. */
	EMBOX_MIDDLE = 1096183117,
	/** Align the anchored object to the bottom of the embox. */
	EMBOX_BOTTOM = 1096183106
}

/**
 * OpenType positional form options.
 * @enum
 */
export declare enum PositionalForms {
	/** None. */
	NONE = 1852796517,
	/** Calculated forms. */
	CALCULATE = 1634756205,
	/** Initial form. */
	INITIAL = 1768843636,
	/** Medial form. */
	MEDIAL = 1835361385,
	/** Final form. */
	FINAL = 1718185569,
	/** Isolated form. */
	ISOLATED = 1769172844
}

/**
 * Stroke alignment options.
 * @enum
 */
export declare enum TextStrokeAlign {
	/** The stroke straddles the path. */
	CENTER_ALIGNMENT = 1936998723,
	/** The stroke is outside the path, like a picture frame. */
	OUTSIDE_ALIGNMENT = 1936998735
}

/**
 * End join types.
 * @enum
 */
export declare enum OutlineJoin {
	/** Miter end join. */
	MITER_END_JOIN = 1835691886,
	/** Rounded end join. */
	ROUND_END_JOIN = 1919577966,
	/** Beveled end join. */
	BEVEL_END_JOIN = 1651142510
}

/**
 * The starting point used to calculate the baseline frame grid 
 * offset.
 * @enum
 */
export declare enum BaselineFrameGridRelativeOption {
	/** Offsets the grid from the top of the page. */
	TOP_OF_PAGE = 1163161458,
	/** Offsets the grid from the top margin of the page. */
	TOP_OF_MARGIN = 1163161453,
	/** Offsets the grid from the top of the text frame. */
	TOP_OF_FRAME = 1163161446,
	/** Offsets the grid from the top inset of the text frame. */
	TOP_OF_INSET = 1163161449
}

/**
 * Options for specifying the amount of vertical space between 
 * the top of the footnote container and the first line of 
 * footnote text.
 * @enum
 */
export declare enum FootnoteFirstBaseline {
	/**
	 * The tallest character in the font falls below the top of the 
	 * footnote container.
	 */
	ASCENT_OFFSET = 1296135023,
	/**
	 * The tops of upper case letters touch the top of the footnote 
	 * container.
	 */
	CAP_HEIGHT = 1296255087,
	/**
	 * The leading value of the text defines the distance between 
	 * the baseline of the text and the top of the footnote 
	 * container.
	 */
	LEADING_OFFSET = 1296852079,
	/**
	 * The em box height of the text defines the distance between 
	 * the baseline of the text and the top of the footnote 
	 * container.
	 */
	EMBOX_HEIGHT = 1296386159,
	/**
	 * The tops of lower case letters without ascents, such as x, 
	 * touch the top of the footnote container.
	 */
	X_HEIGHT = 1299728495,
	/**
	 * The footnote minimum first baseline offset value defines the 
	 * distance between the baseline of the text and the top of the 
	 * footnote container.
	 */
	FIXED_HEIGHT = 1313228911
}

/**
 * Options for restarting footnote numbering.
 * @enum
 */
export declare enum FootnoteRestarting {
	/**
	 * Does not restart numbering; numbers footnotes sequentially 
	 * throughout the document.
	 */
	DONT_RESTART = 1180988019,
	/** Restarts footnote numbering on each page. */
	PAGE_RESTART = 1181774451,
	/** Restarts footnote numbering on each spread. */
	SPREAD_RESTART = 1181971059,
	/** Restarts footnote numbering in each section. */
	SECTION_RESTART = 1181053555
}

/**
 * Footnote prefix or suffix placement options.
 * @enum
 */
export declare enum FootnotePrefixSuffix {
	/** Does not use a prefix or suffix. */
	NO_PREFIX_SUFFIX = 1181774702,
	/**
	 * Places the prefix and/or suffix on the footnote reference 
	 * number in the main text.
	 */
	PREFIX_SUFFIX_REFERENCE = 1181774706,
	/**
	 * Places the prefix and/or suffix on the footnote marker 
	 * number in the footnote text.
	 */
	PREFIX_SUFFIX_MARKER = 1181774708,
	/**
	 * Places the prefix and/or suffix on both the the footnote 
	 * reference number in the main text and the footnote marker 
	 * number in the footnote text.
	 */
	PREFIX_SUFFIX_BOTH = 1181774690
}

/**
 * Footnote numbering style options.
 * @enum
 */
export declare enum FootnoteNumberingStyle {
	/** Uses uppercase Roman numerals. */
	UPPER_ROMAN = 1297247605,
	/** Uses lowercase Roman numerals. */
	LOWER_ROMAN = 1297247596,
	/** Uses uppercase letters. */
	UPPER_LETTERS = 1296855669,
	/** Uses lowercase letters. */
	LOWER_LETTERS = 1296855660,
	/** Uses Arabic numerals. */
	ARABIC = 1298231906,
	/** Uses symbols. */
	SYMBOLS = 1181971321,
	/** Kanji. */
	KANJI = 1296788073,
	/** Full-width Arabic. */
	FULL_WIDTH_ARABIC = 1296455521,
	/** Single leading zeros. */
	SINGLE_LEADING_ZEROS = 1297312890,
	/** Double leading zeros. */
	DOUBLE_LEADING_ZEROS = 1296329850,
	/** Asterisks. */
	ASTERISKS = 1298232180,
	/** Uses Arabic Alif Ba Tah */
	ARABIC_ALIF_BA_TAH = 1296130420,
	/** Uses Arabic Abjad */
	ARABIC_ABJAD = 1296130410,
	/** Uses Hebrew Biblical */
	HEBREW_BIBLICAL = 1296589410,
	/** Uses Hebrew Non Standard */
	HEBREW_NON_STANDARD = 1296589422
}

/**
 * Options for positioning footnote reference numbers relative 
 * to characters the main text.
 * @enum
 */
export declare enum FootnoteMarkerPositioning {
	/**
	 * Uses the position defined in the character style applied to 
	 * footnote reference numbers. For information, see footnote 
	 * marker style.
	 */
	NORMAL_MARKER = 1181576816,
	/** Superscripts footnote reference numbers. */
	SUPERSCRIPT_MARKER = 1181569904,
	/** Subscripts footnote reference numbers. */
	SUBSCRIPT_MARKER = 1181578096,
	/** Gives the marker ruby style positioning. */
	RUBY_MARKER = 1181577840
}

/**
 * Override clearing options.
 * @enum
 */
export declare enum OverrideType {
	/** Clears all types of override. */
	ALL = 1634495520,
	/** Clears only character style overrides. */
	CHARACTER_ONLY = 1667789423,
	/** Clears only paragraph style overrides. */
	PARAGRAPH_ONLY = 1885434479
}

/**
 * The resolution strategy to employ for imported styles that 
 * have the same names as existing styles.
 * @enum
 */
export declare enum GlobalClashResolutionStrategy {
	/**
	 * Overwrites existing styles whose names clash with imported 
	 * items.
	 */
	LOAD_ALL_WITH_OVERWRITE = 1279350607,
	/**
	 * Renames imported styles whose names clash with existing 
	 * items to preserve existing items.
	 */
	LOAD_ALL_WITH_RENAME = 1279350610,
	/**
	 * Does not import styles whose names clash with existing 
	 * items.
	 */
	DO_NOT_LOAD_THE_STYLE = 1147495276
}

/**
 * Text orientation options.
 * @enum
 */
export declare enum StoryHorizontalOrVertical {
	/** Orients the text horizontally. */
	HORIZONTAL = 1752134266,
	/** Orients the text vertically. */
	VERTICAL = 1986359924,
	/** The text direction is unknown. */
	UNKNOWN = 1433299822
}

/**
 * Options for auto page insertion in response to overset text.
 * @enum
 */
export declare enum AddPageOptions {
	/** Insert pages at end of story. */
	END_OF_STORY = 1634037619,
	/** Insert pages at end of section. */
	END_OF_SECTION = 1634037624,
	/** Insert pages at end of document. */
	END_OF_DOCUMENT = 1634037604
}

/**
 * Text variable types.
 * @enum
 */
export declare enum VariableTypes {
	/** Custom text variable. */
	CUSTOM_TEXT_TYPE = 1414947700,
	/** File name variable. */
	FILE_NAME_TYPE = 1414948462,
	/** Last page number variable. */
	LAST_PAGE_NUMBER_TYPE = 1414952048,
	/** Chapter number variable. */
	CHAPTER_NUMBER_TYPE = 1668183152,
	/** Output date variable. */
	OUTPUT_DATE_TYPE = 1414950756,
	/** Creation date variable. */
	CREATION_DATE_TYPE = 1414947684,
	/** Modification date variable. */
	MODIFICATION_DATE_TYPE = 1414950244,
	/** Running header (character style) variable. */
	MATCH_CHARACTER_STYLE_TYPE = 1414947667,
	/** Running header (paragraph style) variable. */
	MATCH_PARAGRAPH_STYLE_TYPE = 1414950995,
	/** Private cross reference page number variable. */
	XREF_PAGE_NUMBER_TYPE = 1414953074,
	/** Private cross reference chapter number variable. */
	XREF_CHAPTER_NUMBER_TYPE = 1414947694,
	/** Live Caption variable. */
	LIVE_CAPTION_TYPE = 1414947693
}

/**
 * Scopes for page number variable.
 * @enum
 */
export declare enum VariableScopes {
	/** The scope is limited to the current document. */
	DOCUMENT_SCOPE = 1129538671,
	/** The scope is limited to the current section. */
	SECTION_SCOPE = 1129542501
}

/**
 * Number variable numbering styles.
 * @enum
 */
export declare enum VariableNumberingStyles {
	/** Current */
	CURRENT = 1298363762,
	/** Arabic numerals. */
	ARABIC = 1298231906,
	/** Uppercase Roman numerals. */
	UPPER_ROMAN = 1297247605,
	/** Lowercase Roman numerals. */
	LOWER_ROMAN = 1297247596,
	/** Uppercase letters. */
	UPPER_LETTERS = 1296855669,
	/** Lowercase letters. */
	LOWER_LETTERS = 1296855660,
	/** Single leading zero. */
	SINGLE_LEADING_ZEROS = 1297312890,
	/** Double leading zeros. */
	DOUBLE_LEADING_ZEROS = 1296329850,
	/** Kanji. */
	KANJI = 1296788073,
	/** Full-width Arabic numerals. */
	FULL_WIDTH_ARABIC = 1296455521
}

/**
 * Search strategy options.
 * @enum
 */
export declare enum SearchStrategies {
	/** Searches forward from the start of the current page. */
	FIRST_ON_PAGE = 1396794992,
	/** Search backward from the end of the current page. */
	LAST_ON_PAGE = 1396796528
}

/**
 * Change case options.
 * @enum
 */
export declare enum ChangeCaseOptions {
	/** No conversion. */
	NONE = 1852796517,
	/** Converts all letters to uppercase. */
	UPPERCASE = 1667462499,
	/** Converts all letters to lowercase. */
	LOWERCASE = 1667460195,
	/** Converts the first letter of each word to uppercase. */
	TITLECASE = 1667462243,
	/**
	 * Converts the first letter of the first word of each sentence 
	 * to uppercase.
	 */
	SENTENCECASE = 1667461987
}

/**
 * Auto sizing type options for text.
 * @enum
 */
export declare enum AutoSizingTypeEnum {
	/** Text frame auto-sizing is off. */
	OFF = 1330005536,
	/** Text frame will be resized in height dimension only. */
	HEIGHT_ONLY = 1751476583,
	/** Text frame will be resized in width dimension only. */
	WIDTH_ONLY = 2003395700,
	/**
	 * Text frame will be resized in both(height and width) 
	 * dimensions.
	 */
	HEIGHT_AND_WIDTH = 1752069993,
	/**
	 * Text frame will be resized in both(height and width) 
	 * dimensions proportionally.
	 */
	HEIGHT_AND_WIDTH_PROPORTIONALLY = 1752070000
}

/**
 * Auto sizing reference points for text.
 * @enum
 */
export declare enum AutoSizingReferenceEnum {
	/** Top left point of bounding box */
	TOP_LEFT_POINT = 1953459301,
	/** Center point on the top edge of bounding box */
	TOP_CENTER_POINT = 1953456997,
	/** Top right point of bounding box */
	TOP_RIGHT_POINT = 1953460841,
	/** Center point on the left edge of bounding box */
	LEFT_CENTER_POINT = 1818583909,
	/** Center point of bounding box */
	CENTER_POINT = 1668183154,
	/** Center point on the right edge of bounding box */
	RIGHT_CENTER_POINT = 1919509349,
	/** Bottom left point of bounding box */
	BOTTOM_LEFT_POINT = 1651469413,
	/** Center point on the botom edge of bounding box */
	BOTTOM_CENTER_POINT = 1651467109,
	/** Bottom right point of bounding box */
	BOTTOM_RIGHT_POINT = 1651470953
}

/**
 * Type of Paragraph span.
 * @enum
 */
export declare enum SpanColumnTypeOptions {
	/** Paragraph is a single column */
	SINGLE_COLUMN = 1163092844,
	/** Paragraph spans the columns */
	SPAN_COLUMNS = 1936745326,
	/** Paragraph splits the columns */
	SPLIT_COLUMNS = 1937007470
}

/**
 * Span Column Count Options.
 * @enum
 */
export declare enum SpanColumnCountOptions {
	/** Paragraph spans all columns */
	ALL = 1634495520
}

/**
 * Options for specifying basis of the width of the paragraph 
 * shading.
 * @enum
 */
export declare enum ParagraphShadingWidthEnum {
	/**
	 * Makes the paragraph shading based on width of lines of text 
	 * in the paragraph.
	 */
	TEXT_WIDTH = 1886681207,
	/** Makes the paragraph shading based on width of the column. */
	COLUMN_WIDTH = 1265399652
}

/**
 * Line justification options.
 * @enum
 */
export declare enum LineAlignment {
	/** Left aligns horizontal text or top aligns vertical text. */
	LEFT_OR_TOP_LINE_ALIGN = 1818324084,
	/** Center aligns the text. */
	CENTER_LINE_ALIGN = 1818321774,
	/**
	 * Right aligns horizontal text or bottom aligns vertical text.
	 */
	RIGHT_OR_BOTTOM_LINE_ALIGN = 1818325602,
	/**
	 * Justifies horizontal text on both the right and left and 
	 * left aligns the last line or justifies vertical text on both 
	 * the top and bottom and top aligns the last line.
	 */
	LEFT_OR_TOP_LINE_JUSTIFY = 1819047018,
	/**
	 * Justifies horizontal text on both the right and left and 
	 * center aligns the last line or justifies vertical text on 
	 * both the top and bottom and center aligns the last line.
	 */
	CENTER_LINE_JUSTIFY = 1818455658,
	/**
	 * Justifies horizontal text on both the right and left and 
	 * right aligns the last line or justifies vertical text on 
	 * both the top and bottom and bottom aligns the last line.
	 */
	RIGHT_OR_BOTTOM_LINE_JUSTIFY = 1819435626,
	/**
	 * Justifies horizontal text on both the right and left or 
	 * justifies vertical text on both the top and bottom and gives 
	 * all lines a uniform length.
	 */
	FULL_LINE_JUSTIFY = 1818651754
}

/**
 * Grid view options.
 * @enum
 */
export declare enum GridViewSettings {
	/** Grid view. */
	GRID_VIEW_ENUM = 1783064438,
	/** ZN view. */
	ZN_VIEW_ENUM = 1783069302,
	/** Align view. */
	ALIGN_VIEW_ENUM = 1783062902,
	/** Grid and ZN view. */
	GRID_AND_ZN_VIEW_ENUM = 1783064442
}

/**
 * Character count location options.
 * @enum
 */
export declare enum CharacterCountLocation {
	/** Hides the character count. */
	NONE = 1852796517,
	/** Displays the character count at the top of the frame. */
	TOP_ALIGN = 1953460256,
	/** Displays the character count on the left side of the frame. */
	LEFT_ALIGN = 1818584692,
	/** Displays the character count at the bottom of the frame. */
	BOTTOM_ALIGN = 1651471469,
	/**
	 * Displays the character count on the right side of the frame.
	 */
	RIGHT_ALIGN = 1919379572
}

/**
 * InCopy UI colors.
 * @enum
 */
export declare enum InCopyUIColors {
	/** Canary. */
	CANARY = 1766026873,
	/** Lemon. */
	LEMON = 1766616430,
	/** Electrolyte. */
	ELECTROLYTE = 1766157411,
	/** Lime. */
	LIME = 1766615405,
	/** Forest. */
	FOREST = 1766224756,
	/** Lichen. */
	LICHEN = 1766615395,
	/** Jade. */
	JADE = 1766482276,
	/** Aqua. */
	AQUA = 1765896545,
	/** Cirrus. */
	CIRRUS = 1766025586,
	/** Ether. */
	ETHER = 1766159464,
	/** Slate. */
	SLATE = 1767074932,
	/** Ultramarine. */
	ULTRAMARINE = 1767205997,
	/** Midnight. */
	MIDNIGHT = 1766680932,
	/** Blueberry. */
	BLUEBERRY = 1765960802,
	/** Eggplant. */
	EGGPLANT = 1766156135,
	/** Grape. */
	GRAPE = 1766290032,
	/** Fuchsia. */
	FUCHSIA = 1766225267,
	/** Iris. */
	IRIS = 1766421107,
	/** Carnation. */
	CARNATION = 1766023538,
	/** Mocha. */
	MOCHA = 1766682467,
	/** Wheat. */
	WHEAT = 1767336037,
	/** Mustard. */
	MUSTARD = 1766684019,
	/** Amber. */
	AMBER = 1765895522,
	/** Cornstarch. */
	CORNSTARCH = 1766027886,
	/** Powder. */
	POWDER = 1766879095,
	/** Smoke. */
	SMOKE = 1767075179,
	/** Graphite. */
	GRAPHITE = 1766289512,
	/** Gunmetal. */
	GUNMETAL = 1766290798,
	/** Light blue. */
	LIGHT_BLUE = 1766613612,
	/** Red. */
	RED = 1767007588,
	/** Green. */
	GREEN = 1766290030,
	/** Blue. */
	BLUE = 1765960821,
	/** Yellow. */
	YELLOW = 1767468151,
	/** Magenta. */
	MAGENTA = 1766680430,
	/** Cyan. */
	CYAN = 1766029678,
	/** Gray. */
	GRAY = 1766290041,
	/** Black. */
	BLACK = 1765960811,
	/** Orange. */
	ORANGE = 1766814318,
	/** Dark green. */
	DARK_GREEN = 1766090610,
	/** Teal. */
	TEAL = 1767138668,
	/** Tan. */
	TAN = 1767137646,
	/** Brown. */
	BROWN = 1765962350,
	/** Violet. */
	VIOLET = 1767271540,
	/** Gold. */
	GOLD = 1766288484,
	/** Dark blue. */
	DARK_BLUE = 1766089324,
	/** Pink. */
	PINK = 1766878827,
	/** Lavender. */
	LAVENDER = 1766618734,
	/** Brick red. */
	BRICK_RED = 1765962340,
	/** Olive green. */
	OLIVE_GREEN = 1766812790,
	/** Peach. */
	PEACH = 1766876008,
	/** Burgundy. */
	BURGUNDY = 1765962343,
	/** Grass green. */
	GRASS_GREEN = 1766287218,
	/** Ochre. */
	OCHRE = 1766810482,
	/** Purple. */
	PURPLE = 1766879856,
	/** Light gray. */
	LIGHT_GRAY = 1766614898,
	/** Charcoal. */
	CHARCOAL = 1766025324,
	/** Grid blue. */
	GRID_BLUE = 1766285932,
	/** Grid orange. */
	GRID_ORANGE = 1766289266,
	/** Fiesta. */
	FIESTA = 1766222181,
	/** Light olive. */
	LIGHT_OLIVE = 1766616940,
	/** Lipstick. */
	LIPSTICK = 1766615408,
	/** Cute teal. */
	CUTE_TEAL = 1766028396,
	/** Sulphur. */
	SULPHUR = 1767077228,
	/** Grid green. */
	GRID_GREEN = 1766286439,
	/** White. */
	WHITE = 1767336052
}

/**
 * Cursor types.
 * @enum
 */
export declare enum CursorTypes {
	/** Uses a standard cursor. */
	STANDARD_CURSOR = 1699968100,
	/** Uses a thick cursor. */
	THICK_CURSOR = 1700029291,
	/** Uses a barbell cursor. */
	BARBELL_CURSOR = 1698841196,
	/** Uses a block cursor. */
	BLOCK_CURSOR = 1698851951
}

/**
 * The anti-aliasing type.
 * @enum
 */
export declare enum AntiAliasType {
	/** Gray anti-aliasing. */
	GRAY_ANTIALIASING = 1732527186,
	/** Color anti-aliasing. */
	COLOR_ANTIALIASING = 1665418322,
	/** Thicker anti-aliasing. */
	THICKER_ANTIALIASING = 1950444659
}

/**
 * Line spacing type.
 * @enum
 */
export declare enum LineSpacingType {
	/** Single space */
	SINGLE_SPACE = 1936282480,
	/** One and half space */
	ONE_AND_HALF_SPACE = 1866549363,
	/** Double space */
	DOUBLE_SPACE = 1682068336,
	/** Triple space */
	TRIPLE_SPACE = 1951552368
}

/**
 * Page numbering options for book content objects within the 
 * book.
 * @enum
 */
export declare enum RepaginateOption {
	/**
	 * Continues page numbers sequentially from the previous book 
	 * content object.
	 */
	NEXT_PAGE = 1885500011,
	/**
	 * Starts page numbers for each book content object at the next 
	 * odd-numbered page after the last page of the previous book 
	 * content object.
	 */
	NEXT_ODD_PAGE = 1332765291,
	/**
	 * Starts page numbers for each book content object at the next 
	 * even-numbered page after the last page of the previous book 
	 * content object.
	 */
	NEXT_EVEN_PAGE = 1164993131
}

/**
 * Book content file status options.
 * @enum
 */
export declare enum BookContentStatus {
	/** The book content object is not open and is unchanged. */
	NORMAL = 1852797549,
	/**
	 * The book content object is missing because it has been 
	 * moved, renamed, or deleted.
	 */
	MISSING_DOCUMENT = 1148150605,
	/**
	 * The book content object has been modified after 
	 * repagination.
	 */
	DOCUMENT_OUT_OF_DATE = 1148150596,
	/**
	 * The book content object is being used by someone else and is 
	 * therefore locked.
	 */
	DOCUMENT_IN_USE = 1148150601,
	/** The book content object is open. */
	DOCUMENT_IS_OPEN = 1148150607
}

/**
 * Options for matching names when synchronizing styles in a 
 * book.
 * @enum
 */
export declare enum SmartMatchOptions {
	/**
	 * Match the full path of style while finding styles in target.
	 */
	MATCH_STYLE_PATH = 1936549488,
	/** Match only the style name while finding styles in target. */
	MATCH_STYLE_NAME = 1936552814
}

/**
 * Specify the type of cell, either text or graphic.
 * @enum
 */
export declare enum CellTypeEnum {
	/** Text cell. */
	TEXT_TYPE_CELL = 1701730388,
	/** Graphic or Page item cell. */
	GRAPHIC_TYPE_CELL = 1701728329
}

/**
 * The row type.
 * @enum
 */
export declare enum RowTypes {
	/** Makes the row a body row. */
	BODY_ROW = 1161982583,
	/**
	 * Makes the row a header row. Note: When setting row type as 
	 * header row, the row must be either the top row in the table 
	 * or adjacent to an existing header row.
	 */
	HEADER_ROW = 1162375799,
	/**
	 * Makes the row a footer row. Note: When setting row type as 
	 * footer row, the row must be either the bottom row in the 
	 * table or adjacent to an existing footer row.
	 */
	FOOTER_ROW = 1162244727,
	/** (Read-only) The column's rows are of multiple types. */
	MIXED_STATE = 1162703479
}

/**
 * Placement options for header or footer rows.
 * @enum
 */
export declare enum HeaderFooterBreakTypes {
	/** Places headers or footers in each text column. */
	IN_ALL_TEXT_COLUMNS = 1231115363,
	/** Repeats headers or footers in each text frame. */
	ONCE_PER_TEXT_FRAME = 1332761702,
	/** Places one instance of headers or footers per page. */
	ONCE_PER_PAGE = 1332760673
}

/**
 * Pattern options for alternating fills.
 * @enum
 */
export declare enum AlternatingFillsTypes {
	/** No alternating pattern. */
	NO_ALTERNATING_PATTERN = 1097617007,
	/** Alternates row fills. */
	ALTERNATING_ROWS = 1097618039,
	/** Alternates column fills. */
	ALTERNATING_COLUMNS = 1097614188
}

/**
 * Options for displaying row and column strokes at corners.
 * @enum
 */
export declare enum StrokeOrderTypes {
	/** Places row strokes in front of column strokes. */
	ROW_ON_TOP = 1936879476,
	/** Places column strokes in front of row strokes. */
	COLUMN_ON_TOP = 1935896436,
	/**
	 * Places row strokes in front of column strokes when row and 
	 * column strokes are different colors; joins striped strokes 
	 * and connects crossing points.
	 */
	BEST_JOINS = 1935828330,
	/**
	 * Places row strokes in front when row and column strokes are 
	 * different colors; joins striped strokes only at points where 
	 * strokes cross in a T-shape.
	 */
	INDESIGN_2_COMPATIBILITY = 1936286819
}

/**
 * Values to specify the order table cells will display in 
 * story and galley views.
 * @enum
 */
export declare enum DisplayOrderOptions {
	/** Order by rows. */
	ORDER_BY_ROWS = 1652118103,
	/** Order by columns. */
	ORDER_BY_COLUMNS = 1652114254
}

/**
 * Rasterization options.
 * @enum
 */
export declare enum FlattenerLevel {
	/** Rasterizes all artwork. */
	LOW = 1701727351,
	/** Rasterizes almost all artwork. */
	MEDIUM_LOW = 1718373708,
	/** Rasterizes a medium amount of artwork. */
	MEDIUM = 1701727588,
	/** Rasterizes more than a medium amount of artwork. */
	MEDIUM_HIGH = 1718373704,
	/** Keeps as much artwork as possible vector data. */
	HIGH = 1701726313
}

/**
 * Transparency blending space options.
 * @enum
 */
export declare enum BlendingSpace {
	/** Defaults to the current color profile. */
	DEFAULT_VALUE = 1147563124,
	/** Uses the RGB color profile. */
	RGB = 1666336578,
	/** Uses the CMYK profile. */
	CMYK = 1129142603
}

/**
 * Blend mode options.
 * @enum
 */
export declare enum BlendMode {
	/**
	 * Colors the object with the blend color, without interaction 
	 * with the base color.
	 */
	NORMAL = 1852797549,
	/**
	 * Multiplies the base color by the blend color, resulting in a 
	 * darker color. Note: Multiplying with black produces black; 
	 * multiplying with white leaves the color unchanged.
	 */
	MULTIPLY = 2020625762,
	/**
	 * Multiplies the inverse of the blend and base colors, 
	 * resulting in a lighter color. Note: Screening with white 
	 * produces white; screening with black leaves the color 
	 * unchanged.
	 */
	SCREEN = 2020625763,
	/**
	 * Multiplies or screens the colors, depending on the base 
	 * color; patterns or colors overlay the existing artwork, 
	 * preserving base color highlights and shadows while mixing in 
	 * the blend color to reflect the lightness or darkness of the 
	 * original color.
	 */
	OVERLAY = 2020625764,
	/**
	 * For blend colors lighter than 50% gray, lightens the artwork 
	 * as if it were dodged; for blend colors darker than 50% gray, 
	 * darkens the artwork as if it were burned. Note: Painting 
	 * with pure black or white produces a distinctly darker or 
	 * lighter area, but does not result in pure black or white.
	 */
	SOFT_LIGHT = 2020625765,
	/**
	 * For blend colors lighter than 50% gray, lightens the artwork 
	 * as if it were screened; for blend colors darker than 50% 
	 * gray, darkens the artwork as if it were multiplied. Note: 
	 * Painting with pure black or white results in pure black or 
	 * white.
	 */
	HARD_LIGHT = 2020625766,
	/**
	 * Brightens the base color to reflect the blend color. Note: 
	 * Blending with pure black produces no change.
	 */
	COLOR_DODGE = 2020625767,
	/**
	 * Darkens the base color to reflect the blend color. Note: 
	 * Blending with white produces no change.
	 */
	COLOR_BURN = 2020625768,
	/**
	 * Selects the darker of the base or blend colors as the 
	 * resulting color; replaces areas lighter than the blend color 
	 * but does not change areas darker than the blend color.
	 */
	DARKEN = 2020625769,
	/**
	 * Selects the lighter of the base or blend colors as the 
	 * resulting color; replaces areas darker than the blend color 
	 * but does not change areas lighter than the blend color
	 */
	LIGHTEN = 2020625770,
	/**
	 * Subtracts either the blend color from the base color or vice 
	 * versa, depending on which has the greater brightness value. 
	 * Note: Blending with white inverts the base color values; 
	 * blending with black produces no change.
	 */
	DIFFERENCE = 2020625771,
	/**
	 * Creates an effect similar to--but lower in contrast 
	 * than--the difference blend mode. Note: Blending with white 
	 * inverts the base color values; blending with black produces 
	 * no change
	 */
	EXCLUSION = 2020625772,
	/**
	 * Creates a color with the luminance and saturation of the 
	 * base color and the hue of the blend color.
	 */
	HUE = 2020625773,
	/**
	 * Creates a color with the luminance and hue of the base color 
	 * and the saturation of the blend color. Note: Does not change 
	 * areas with no saturation (0% gray).
	 */
	SATURATION = 1380545377,
	/**
	 * Creates a color with the luminance of the base color and the 
	 * hue and saturation of the blend color. Note: Preserves gray 
	 * levels and is useful for coloring monochrome images or 
	 * tinting color images. Creates the inverse effect of the 
	 * luminosity blend mode.
	 */
	COLOR = 1668246642,
	/**
	 * Creates a color with the hue and saturation of the base 
	 * color and the luminance of the blend color. Note: Creates 
	 * the inverse effect of the color blend mode.
	 */
	LUMINOSITY = 2020625776
}

/**
 * Shadow mode options.
 * @enum
 */
export declare enum ShadowMode {
	/** Does not use a shadow. */
	NONE = 1852796517,
	/** Uses a standard blurred drop shadow. */
	DROP = 2020623440
}

/**
 * On/off options for feathering.
 * @enum
 */
export declare enum FeatherMode {
	/** Does not use feathering. */
	NONE = 1852796517,
	/** Uses standard feathering. */
	STANDARD = 2020623970
}

/**
 * Corner type options.
 * @enum
 */
export declare enum FeatherCornerType {
	/**
	 * The gradient exactly follows the outer edge of the object, 
	 * including sharp corners.
	 */
	SHARP = 2020623201,
	/** The corners are rounded by the feather radius. */
	ROUNDED = 2020623202,
	/** The edges of the object fade from opaque to transparent. */
	DIFFUSION = 2020623203
}

/**
 * Flattener level override options.
 * @enum
 */
export declare enum SpreadFlattenerLevel {
	/** Uses the default level. */
	DEFAULT_VALUE = 1147563124,
	/** Turns off flattening. */
	NONE = 1852796517,
	/** Uses the specified custom flattening level. */
	CUSTOM = 1131639917
}

/**
 * Glow technique options.
 * @enum
 */
export declare enum GlowTechnique {
	/** Softer. */
	SOFTER = 2020618337,
	/** Precise. */
	PRECISE = 2020618338
}

/**
 * Inner glow source options.
 * @enum
 */
export declare enum InnerGlowSource {
	/** The glow radiates from the object's center. */
	CENTER_SOURCED = 2020618593,
	/** The glow radiates from the edge of the object. */
	EDGE_SOURCED = 2020618594
}

/**
 * Bevel and emboss style options.
 * @enum
 */
export declare enum BevelAndEmbossStyle {
	/** The outside edges of the object are beveled. */
	OUTER_BEVEL = 2020618849,
	/** The inside edges of the object are beveled. */
	INNER_BEVEL = 2020618850,
	/** An emboss effect is applied to the object. */
	EMBOSS = 2020618851,
	/** An emboss effect is applied to the edges of the object. */
	PILLOW_EMBOSS = 2020618852
}

/**
 * Bevel and emboss technique options.
 * @enum
 */
export declare enum BevelAndEmbossTechnique {
	/** Emboss and bevel contours are smooth. */
	SMOOTH_CONTOUR = 2020619105,
	/**
	 * Emboss and bevel contours are chiseled and have hard 
	 * corners.
	 */
	CHISEL_HARD = 2020619106,
	/** Emboss or bevel contours chiseled but softened somewhat. */
	CHISEL_SOFT = 2020619107
}

/**
 * Bevel and emboss direction options.
 * @enum
 */
export declare enum BevelAndEmbossDirection {
	/** The effect appears raised. */
	UP = 1181971566,
	/** The effect appears depressed. */
	DOWN = 1181971556
}

/**
 * Follow-shape options for directional feathering.
 * @enum
 */
export declare enum FollowShapeModeOptions {
	/**
	 * Disables shape following and uses the rectangular bounds of 
	 * the object.
	 */
	NONE = 1852796517,
	/** Feathers only the leading edge facing the specified angle. */
	LEADING_EDGE = 1701721441,
	/** Feathers all edges that face the specified angle. */
	ALL_EDGES = 1701721442
}

/**
 * Page number position options.
 * @enum
 */
export declare enum PageNumberPosition {
	/** Places page numbers after entry text. */
	AFTER_ENTRY = 1634100590,
	/** Places page numbers before entry text. */
	BEFORE_ENTRY = 1650877806,
	/** Turns off page numbers. */
	NONE = 1852796517
}

/**
 * Numbered paragraphs options.
 * @enum
 */
export declare enum NumberedParagraphsOptions {
	/** Includes the full paragraph text. */
	INCLUDE_FULL_PARAGRAPH = 1953064560,
	/** Includes only the paragraph number. */
	INCLUDE_NUMBERS_ONLY = 1953066607,
	/** Excludes paragraph numbers. */
	EXCLUDE_NUMBERS = 1952804469
}

/**
 * Character set options for importing text files.
 * @enum
 */
export declare enum TextImportCharacterSet {
	/** The ANSI character set. */
	ANSI = 1095652169,
	/** The Recommend:Shift_JIS 83pv character set. */
	RECOMMENDSHIFTJIS83PV = 1412969328,
	/** The Shift_JIS 90pv character set. */
	SHIFTJIS90PV = 1413034096,
	/** The Shift_JIS 90ms character set. */
	SHIFTJIS90MS = 1413034093,
	/** The GB2312 character set. */
	GB2312 = 1416061535,
	/** The Chinese Big 5 character set. */
	CHINESE_BIG_5 = 1415799349,
	/** The Macintosh CE (Cantral European) character set. */
	MACINTOSH_CE = 1416446789,
	/** The Macintosh Cyrillic character set. */
	MACINTOSH_CYRILLIC = 1416446841,
	/** The Macintosh Greek character set. */
	MACINTOSH_GREEK = 1416447858,
	/** The Macintosh Turkish character set. */
	MACINTOSH_TURKISH = 1416451186,
	/** The Windows Cyrillic character set. */
	WINDOWS_CYRILLIC = 1417102201,
	/** The Windows EE (Eastern European) character set. */
	WINDOWS_EE = 1417102661,
	/** The Windows Greek character set. */
	WINDOWS_GREEK = 1417103218,
	/** The Windows Turkish character set. */
	WINDOWS_TURKISH = 1417106549,
	/** The GB18030 character set. */
	GB18030 = 1416061491,
	/** The KSC5601 character set. */
	KSC5601 = 1414230883,
	/** Tthe Windows Baltic character set. */
	WINDOWS_BALTIC = 1417101940,
	/** The Windows CE (Central European) character set. */
	WINDOWS_CE = 1417102149,
	/** The Macintosh Roman character set. */
	MACINTOSH_ROMAN = 1416450669,
	/** The Macintosh Croatian character set. */
	MACINTOSH_CROATIAN = 1416446834,
	/** The Macintosh Icelandic character set. */
	MACINTOSH_ICELANDIC = 1416448355,
	/** The Macintosh Romanian character set. */
	MACINTOSH_ROMANIAN = 1416450671,
	/** The Cyrillic (KOI8R) character set. */
	CYRILLIC_KOI8R = 1416312946,
	/** The Cyrillic (KOI8U) character set. */
	CYRILLIC_KOI8U = 1416312949,
	/** The Cyrillic (CP855) character set. */
	CYRILLIC_CP855 = 1415788597,
	/** The DOS Latin 2 character set. */
	DOS_LATIN_2 = 1415867442,
	/** The Cyrillic (ISO) character set. */
	CYRILLIC_ISO = 1416184697,
	/** The Greek (ISO) character set. */
	GREEK_ISO = 1416185707,
	/** The Central European (ISO) character set. */
	CENTRALEUROPEAN_ISO = 1416184645,
	/** The Turkish (ISO) character set. */
	TURKISH_ISO = 1416189045,
	/** The Macintosh Greek (Shared caps) character set. */
	MACINTOSH_GREEK_SHARED_CAPS = 1416447794,
	/** The Macintosh Arabic character set. */
	MACINTOSH_ARABIC = 1416446322,
	/** The Macintosh Hebrew character set. */
	MACINTOSH_HEBREW = 1416448098,
	/** The Windows Arabic character set. */
	WINDOWS_ARABIC = 1417101682,
	/** The Windows Hebrew character set. */
	WINDOWS_HEBREW = 1417103458,
	/** The Arabic ASMO character set. */
	ARABIC_ASMO = 1415672685,
	/** The Arabic ASMO transparent character set. */
	ARABIC_ASMO_TRANSPARENT = 1415672692,
	/** The Unicode UTF16 character set. */
	UTF16 = 1937125686,
	/** The Unicode UTF8 character set. */
	UTF8 = 1937134904
}

/**
 * Import platform options.
 * @enum
 */
export declare enum ImportPlatform {
	/** Macintosh. */
	MACINTOSH = 1296130931,
	/** Windows. */
	PC = 1466852474
}

/**
 * Options for converting manual page breaks.
 * @enum
 */
export declare enum ConvertPageBreaks {
	/** Does not preserve page breaks; allows text to flow. */
	NONE = 1852796517,
	/** Preserves page breaks. */
	PAGE_BREAK = 1397778242,
	/** Converts manual page breaks to column breaks. */
	COLUMN_BREAK = 1396927554
}

/**
 * Character set options exporting tagged text files.
 * @enum
 */
export declare enum TagTextExportCharacterSet {
	/** ASCII. */
	ASCII = 1095975753,
	/** ANSI. */
	ANSI = 1095652169,
	/** Unicode. */
	UNICODE = 1249209961,
	/** Shift_JIS. */
	SHIFT_JIS = 1249077875,
	/** Uses GB18030 encoding. */
	GB18030 = 1416061491,
	/** Uses KSC5601 encoding. */
	KSC5601 = 1414230883,
	/** Chinese Big 5 */
	CHINESE_BIG_5 = 1415799349,
	/** The Central European (ISO) character set. */
	CENTRALEUROPEAN_ISO = 1416184645,
	/** The Cyrillic (ISO) character set. */
	CYRILLIC_ISO = 1416184697,
	/** The Greek (ISO) character set. */
	GREEK_ISO = 1416185707,
	/** The Windows Arabic character set. */
	WINDOWS_ARABIC = 1417101682,
	/** The Windows Hebrew character set. */
	WINDOWS_HEBREW = 1417103458
}

/**
 * Tag form options.
 * @enum
 */
export declare enum TagTextForm {
	/** Displays tags in long form; creates larger text files. */
	VERBOSE = 1414821474,
	/** Abbreviates tags; creates smaller text files. */
	ABBREVIATED = 1414816098
}

/**
 * Options for resolving style conflicts when importing tagged 
 * text.
 * @enum
 */
export declare enum StyleConflict {
	/** Uses the publication style. */
	PUBLICATION_DEFINITION = 1414819940,
	/** Uses the tag file style. */
	TAG_FILE_DEFINITION = 1413903460
}

/**
 * Character set options for exported text files.
 * @enum
 */
export declare enum TextExportCharacterSet {
	/** The default character set for the platform. */
	DEFAULT_PLATFORM = 1415865972,
	/** The Unicode UTF16 character set. */
	UTF16 = 1937125686,
	/** The Unicode UTF8 character set. */
	UTF8 = 1937134904
}

/**
 * Options for converting tables.
 * @enum
 */
export declare enum ConvertTablesOptions {
	/** Converts tables to basic, unformatted tables. */
	UNFORMATTED_TABLE = 1396921684,
	/** Convert tables to unformatted, tab-delimited text. */
	UNFORMATTED_TABBED_TEXT = 1398101076
}

/**
 * Formatting options for imported spreadsheets.
 * @enum
 */
export declare enum TableFormattingOptions {
	/** Use formatting from the original spreadsheet. */
	EXCEL_FORMATTED_TABLE = 2020361812,
	/** Convert the spreadsheet to an unformatted table. */
	EXCEL_UNFORMATTED_TABLE = 2020365652,
	/** Convert the spreadsheet to unformatted, tab-delimited text. */
	EXCEL_UNFORMATTED_TABBED_TEXT = 2018858068,
	/**
	 * Converts the spreadsheet to a table that is formatted only 
	 * on initial import but not on update.
	 */
	EXCEL_FORMAT_ONLY_ONCE = 2017873748
}

/**
 * Alignment options.
 * @enum
 */
export declare enum AlignmentStyleOptions {
	/** Preserves the spreadsheet's alignment. */
	SPREADSHEET = 1936749171,
	/** Left aligns cells. */
	LEFT_ALIGN = 1818584692,
	/** Right aligns cells. */
	RIGHT_ALIGN = 1919379572,
	/** Center aligns cells. */
	CENTER_ALIGN = 1667591796
}

/**
 * Options for resolving clashes that result from matching 
 * style names.
 * @enum
 */
export declare enum ResolveStyleClash {
	/** Uses the existing style. */
	RESOLVE_CLASH_USE_EXISTING = 2001879877,
	/** Automatically renames the new style. */
	RESOLVE_CLASH_AUTO_RENAME = 2001879873,
	/** Uses the new style. */
	RESOLVE_CLASH_USE_NEW = 2001879886
}

/**
 * The container type.
 * @enum
 */
export declare enum ContainerType {
	/** The container contains unordered items. */
	BAG = 1298424423,
	/** The container contains ordered or sequential items. */
	SEQ = 1298428785,
	/**
	 * The container contains alternative values of which only one 
	 * can be used.
	 */
	ALT = 1298424180
}

/**
 * The copyright status of the document.
 * @enum
 */
export declare enum CopyrightStatus {
	/** The copyright status is unknown. */
	UNKNOWN = 1433299822,
	/** The document is copyrighted. */
	YES = 2036691744,
	/** The document is in the public domain. */
	NO = 1852776480
}

/**
 * Index entry capitalization options.
 * @enum
 */
export declare enum IndexCapitalizationOptions {
	/**
	 * Capitalizes the specified topic but does not capitalize its 
	 * nested topics. Valid only as parameter of the topic 
	 * capitalize method; cannot be used as a parameter of the 
	 * index capitalize method. Note: Must occur after the 
	 * specified topic and its nested topics are created.
	 */
	SELECTED_ENTRY = 1398042725,
	/**
	 * Capitalizes the specified topic and its nested topics. Valid 
	 * only as parameter of the topic capitalize method; cannot be 
	 * used as a parameter of the index capitalize method. Note: 
	 * Must occur after the selected topic and its nested subtopics 
	 * are created.
	 */
	INCLUDE_SUBENTRIES = 1767072325,
	/**
	 * Capitalizes all level 1 entries. Note: Capitalizes only 
	 * topics created before the capitalization statement appears 
	 * in the script.
	 */
	ALL_LEVEL_1_ENTRIES = 1095517556,
	/**
	 * Capitalizes all index entries. Note: Capitalizes only topics 
	 * created before the capitalization statement appears in the 
	 * script.
	 */
	ALL_ENTRIES = 1097624645
}

/**
 * Options for formatting level 2 and lower index topics.
 * @enum
 */
export declare enum IndexFormat {
	/**
	 * Places nested topics on the same line as their parent topic, 
	 * separated by the specified separator.
	 */
	RUNIN_FORMAT = 1382631782,
	/**
	 * Places nested topics on the line below and indented from the 
	 * parent topic.
	 */
	NESTED_FORMAT = 1316243814
}

/**
 * Instructional text options for cross reference.
 * @enum
 */
export declare enum CrossReferenceType {
	/**
	 * Inserts 'See also' in front of the referenced topic if the 
	 * topic has an associated page reference; inserts 'See' if the 
	 * topic does not have a page reference.
	 */
	SEE_OR_ALSO_BRACKET = 1399800172,
	/** Inserts 'See' in front of the referenced topic. */
	SEE = 1701729125,
	/** Inserts 'See also' in front of the referenced topic. */
	SEE_ALSO = 1399144812,
	/** Inserts 'See herein' in front of the referenced topic. */
	SEE_HEREIN = 1397256814,
	/** Inserts 'See also herein' in front of the referenced topic. */
	SEE_ALSO_HEREIN = 1398884466,
	/**
	 * Inserts the specified string in front of the referenced 
	 * topic.
	 */
	CUSTOM_CROSS_REFERENCE = 1131639875,
	/**
	 * Inserts the specified string and the specified before cross 
	 * reference separator in front of the referenced topic. If no 
	 * before cross reference separator is specified, inserts a 
	 * space.
	 */
	CUSTOM_CROSS_REFERENCE_BEFORE = 1131639906,
	/**
	 * Inserts the specified following topic separator and the 
	 * specified string after the referenced topic. If no following 
	 * topic separator is specified, inserts a space.
	 */
	CUSTOM_CROSS_REFERENCE_AFTER = 1131639905
}

/**
 * Options for index page references.
 * @enum
 */
export declare enum PageReferenceType {
	/** The page on which the index entry is located. */
	CURRENT_PAGE = 1668444263,
	/**
	 * The range of pages from the page containing the index entry 
	 * to the page containing the next paragraph style change.
	 */
	TO_NEXT_STYLE_CHANGE = 1953395555,
	/**
	 * The range of pages from the page containing the index entry 
	 * to the page that contains the next occurrance of the 
	 * specified paragraph style. If no paragraph style is 
	 * specified, the paragraph style of the index entry paragraph 
	 * is used.
	 */
	TO_NEXT_USE_OF_STYLE = 1953396083,
	/** The last page in the story containing the index entry. */
	TO_END_OF_STORY = 1701802868,
	/** The last page in the document. */
	TO_END_OF_DOCUMENT = 1701799011,
	/**
	 * The last page in the numbered section containing the index 
	 * entry.
	 */
	TO_END_OF_SECTION = 1701802851,
	/**
	 * The range of pages from the page containing the index entry 
	 * to the page containing the nth full paragraph from the 
	 * paragraph containing the index entry (where n is the number 
	 * of paragraphs to include).
	 */
	FOR_NEXT_N_PARAGRAPHS = 1718513778,
	/**
	 * The range of pages from the page containing the inedex entry 
	 * to the nth page after that page (where n is the number of 
	 * pages to include).
	 */
	FOR_NEXT_N_PAGES = 1718513767,
	/** Turns off page numbers for the index topic. */
	SUPPRESS_PAGE_NUMBERS = 1852863079
}

/**
 * Indexing sort option header types
 * @enum
 */
export declare enum HeaderTypes {
	/** Basic Latin */
	BASIC_LATIN = 1213481548,
	/** Finnish/Swedish */
	FINNISH_SWEDISH = 1213485894,
	/** Danish/Norwegian */
	DANISH_NORWEGIAN = 1213482062,
	/** Spanish */
	SPANISH = 1213485936,
	/** Croatian */
	CROATIAN = 1213481842,
	/** Czech */
	CZECH = 1213481850,
	/** Estonian */
	ESTONIAN = 1213482355,
	/** Hungarian */
	HUNGARIAN = 1213483125,
	/** Latvian */
	LATVIAN = 1213484129,
	/** Lithuanian */
	LITHUANIAN = 1213484137,
	/** Polish */
	POLISH = 1213485167,
	/** Romanian */
	ROMANIAN = 1213485679,
	/** Slovak */
	SLOVAK = 1213485931,
	/** Slovenian */
	SLOVENIAN = 1213485934,
	/** Turkish */
	TURKISH = 1213486197,
	/** Belarusian */
	BELARUSIAN = 1213481573,
	/** Bulgarian */
	BULGARIAN = 1213481589,
	/** Russian */
	RUSSIAN = 1213485685,
	/** Ukrainian */
	UKRAINIAN = 1213486443,
	/** Korean Consonant */
	KOREAN_CONSONANT = 1213483887,
	/** Korean Consonant Plus Vowel */
	KOREAN_CONSONANT_PLUS_VOWEL = 1213483862,
	/** Hiragana: A, I, U, E, O... */
	HIRAGANA_ALL = 1213483073,
	/** Hiragana: A, Ka, Sa, Ta, Na... */
	HIRAGANA_CONSONANTS_ONLY = 1213483075,
	/** Katakana: A, I, U, E, O... */
	KATAKANA_ALL = 1213483841,
	/** Katakana: A, Ka, Sa, Ta, Na... */
	KATAKANA_CONSONANTS_ONLY = 1213483843,
	/** Chinese Pinyin */
	CHINESE_PINYIN = 1213481808,
	/** Chinese Stroke Count */
	CHINESE_STROKE_COUNT = 1213481811
}

/**
 * Options for specifying how tranparencies are displayed.
 * @enum
 */
export declare enum TagTransparency {
	/**
	 * Turns off the on-screen display of transparency. Note: Does 
	 * not turn off transparency when printing or exporting the 
	 * file.
	 */
	OFF = 1330005536,
	/**
	 * Displays basic transparency (opacity and blend modes) and 
	 * shows transparency effects such as drop shadow and 
	 * feathering in a low-resolution approximation. Note: Does not 
	 * isolate page content from the background. Objects with blend 
	 * modes other than Normal might appear different in other 
	 * applications and output.
	 */
	LOW_QUALITY = 1481666146,
	/** Displays drop shadows and feathering in low resolution. */
	MEDIUM_QUALITY = 1481663597,
	/**
	 * Displays higher-resolution (144 dpi) drop shadows and 
	 * feathers, CMYK mattes, and spread isolation.
	 */
	HIGH_QUALITY = 1346922866,
	/**
	 * Uses the default setting. For information, see display 
	 * performance preferences.
	 */
	DEFAULT_VALUE = 1147563124
}

/**
 * The display method for vector images.
 * @enum
 */
export declare enum TagVector {
	/** Grays out the image. */
	GRAY_OUT = 1917284985,
	/** Displays a low-resolution proxy version of the image. */
	PROXY = 1917874808,
	/** Displays a high-resolution version of the image. */
	HIGH_RESOLUTION = 1917348177,
	/**
	 * Uses the default setting. For information, see display 
	 * performance preferences.
	 */
	DEFAULT_VALUE = 1147563124
}

/**
 * The display method for raster images.
 * @enum
 */
export declare enum TagRaster {
	/** Grays out raster images. */
	GRAY_OUT = 1917284985,
	/**
	 * Displays a low-resolution proxy image appropriate for 
	 * identifying and positioning an image.
	 */
	PROXY = 1917874808,
	/** Displays a high-resolution version of the image. */
	HIGH_RESOLUTION = 1917348177,
	/**
	 * Uses the default setting. For information, see display 
	 * performance preferences.
	 */
	DEFAULT_VALUE = 1147563124
}

/**
 * Options for highlighting the hyperlink when selected.
 * @enum
 */
export declare enum HyperlinkAppearanceHighlight {
	/** Does not highlight the hyperlink. */
	NONE = 1852796517,
	/** Highlights the hyperlink fill color. */
	INVERT = 1853256308,
	/** Highlights the hyperlink border. */
	OUTLINE = 1869900910,
	/** Highlights the hyperlink border inset. */
	INSET = 1853056372
}

/**
 * Hyperlink border weight options.
 * @enum
 */
export declare enum HyperlinkAppearanceWidth {
	/** Uses a thin border. */
	THIN = 1952999790,
	/** Uses a medium border. */
	MEDIUM = 1701727588,
	/** Uses a thick border. */
	THICK = 1952999787
}

/**
 * Hyperlink border style options.
 * @enum
 */
export declare enum HyperlinkAppearanceStyle {
	/** Uses a solid stroke. */
	SOLID = 1936682084,
	/** Uses a dashed stroke. */
	DASHED = 1684108136
}

/**
 * Hyperlink destination page display options.
 * @enum
 */
export declare enum HyperlinkDestinationPageSetting {
	/**
	 * Fits the destination page within the specified rectangle. 
	 * For information on specifying the rectangle size and 
	 * position, see the entry for view bounds.
	 */
	FIXED = 1212437350,
	/**
	 * Displays the visible portion of the destination page as the 
	 * destination.
	 */
	FIT_VIEW = 1212437366,
	/**
	 * Fits the entire destination page in the document window. 
	 * Note: The magnification changes automatically when the 
	 * window is resized.
	 */
	FIT_WINDOW = 1212437367,
	/**
	 * Fits the destination page to the width of the window; may 
	 * obscure the lower portion of the page. Note: The 
	 * magnification changes automatically when the window is 
	 * resized horizontally.
	 */
	FIT_WIDTH = 1212437335,
	/**
	 * Fits the destination page to the window height; may obscure 
	 * the right side the page. Note: The magnification changes 
	 * automatically when the window is resized vertically.
	 */
	FIT_HEIGHT = 1212437352,
	/**
	 * Fits the the text area of the destination page to the window 
	 * width; obscures page margins and may obscure the lower 
	 * portion of the page. Note: The magnification changes 
	 * automatically when the window is resized horizontally.
	 */
	FIT_VISIBLE = 1212437334,
	/**
	 * The destination page is displayed at the same zoom percent 
	 * as the previously displayed page. Note: The magnification 
	 * changes automatically when the window is resized.
	 */
	INHERIT_ZOOM = 1212437370
}

/**
 * Cross reference building block types.
 * @enum
 */
export declare enum BuildingBlockTypes {
	/** Custom string building block type. */
	CUSTOM_STRING_BUILDING_BLOCK = 1650615155,
	/** File name building block type. */
	FILE_NAME_BUILDING_BLOCK = 1650615918,
	/** Chapter number building block type. */
	CHAPTER_NUMBER_BUILDING_BLOCK = 1650615150,
	/** Page number building block type. */
	PAGE_NUMBER_BUILDING_BLOCK = 1650618478,
	/** Full paragraph building block type. */
	FULL_PARAGRAPH_BUILDING_BLOCK = 1650615920,
	/** Paragraph number building block type. */
	PARAGRAPH_NUMBER_BUILDING_BLOCK = 1651533678,
	/** Paragraph text building block type. */
	PARAGRAPH_TEXT_BUILDING_BLOCK = 1650618484,
	/** Bookmark name building block type. */
	BOOKMARK_NAME_BUILDING_BLOCK = 1650614894
}

/**
 * Sort order for hyperlink ranges.
 * @enum
 */
export declare enum RangeSortOrder {
	/** Do not sort the ranges. */
	NO_SORT = 1852797812,
	/** Sort the ranges in ascending order. */
	ASCENDING_SORT = 1634952307,
	/** Sort the ranges in descending order. */
	DESCENDING_SORT = 1685287796
}

/**
 * The flag indicating whether the rule is disabled, set for 
 * error, warning, or just informational.
 * @enum
 */
export declare enum PreflightRuleFlag {
	/** Rule is currently disabled. */
	RULE_IS_DISABLED = 1699890274,
	/** Treat as error if rule check failed. */
	RETURN_AS_ERROR = 1699890546,
	/** Treat as warning if rule check failed. */
	RETURN_AS_WARNING = 1699893879,
	/** Treat as information only if rule check failed. */
	RETURN_AS_INFORMATIONAL = 1699893865
}

/**
 * The type of data for this data object.
 * @enum
 */
export declare enum RuleDataType {
	/** The data type is an int32. */
	INTEGER_DATA_TYPE = 1920223598,
	/** The data type is an int16. */
	SHORT_INTEGER_DATA_TYPE = 1920226153,
	/** The data type is a real. */
	REAL_DATA_TYPE = 1920225900,
	/** The data type is a string. */
	STRING_DATA_TYPE = 1920226162,
	/** The data type is a boolean. */
	BOOLEAN_DATA_TYPE = 1920221804,
	/** The data type is an object. */
	OBJECT_DATA_TYPE = 1920225122,
	/** The data type is a list. */
	LIST_DATA_TYPE = 1920224372
}

/**
 * Preflight scope options.
 * @enum
 */
export declare enum PreflightScopeOptions {
	/** Include all pages in the preflight. */
	PREFLIGHT_ALL_PAGES = 1885552976,
	/** Include only selected document for book preflight. */
	PREFLIGHT_SELECTED_DOCUMENTS = 1885557572,
	/** Include all documents in the book preflight. */
	PREFLIGHT_ALL_DOCUMENTS = 1885552964
}

/**
 * Preflight layer options.
 * @enum
 */
export declare enum PreflightLayerOptions {
	/** Preflight all layers */
	PREFLIGHT_ALL_LAYERS = 1886142796,
	/** Preflight visible layers */
	PREFLIGHT_VISIBLE_LAYERS = 1886148172,
	/** Preflight visible and printable layers */
	PREFLIGHT_VISIBLE_PRINTABLE_LAYERS = 1886148176
}

/**
 * Preflight Profile options.
 * @enum
 */
export declare enum PreflightProfileOptions {
	/** Preflight using the embedded profile. */
	USE_EMBEDDED_PROFILE = 1885619533,
	/** Preflight using working profile. */
	USE_WORKING_PROFILE = 1885622342
}

/**
 * PNG page export range options.
 * @enum
 */
export declare enum PNGExportRangeEnum {
	/**
	 * Exports the page range specified in the page string 
	 * property.
	 */
	EXPORT_RANGE = 1785742674,
	/** Exports all pages. */
	EXPORT_ALL = 1785742657
}

/**
 * Quality options for exported PNG images.
 * @enum
 */
export declare enum PNGQualityEnum {
	/** Low quality. */
	LOW = 1701727351,
	/** Medium quality. */
	MEDIUM = 1701727588,
	/** High quality. */
	HIGH = 1701726313,
	/** Maximum quality. */
	MAXIMUM = 1701727608
}

/**
 * Color space options for representing color in the exported 
 * PNG.
 * @enum
 */
export declare enum PNGColorSpaceEnum {
	/**
	 * Represents all color values using the RGB color space. Best 
	 * suited for documents that will be viewed on-screen.
	 */
	RGB = 1666336578,
	/**
	 * Converts all color values to high-quality black-and-white 
	 * images. Gray levels of the converted objects represent the 
	 * luminosity of the original objects.
	 */
	GRAY = 1766290041
}

/**
 * Options for specifying the events (user actions) that change 
 * a button's state.
 * @enum
 */
export declare enum StateTypes {
	/**
	 * The default appearance, used when there is no user activity 
	 * on the button's area.
	 */
	UP = 1181971566,
	/** The mouse pointer moves into the button's area. */
	ROLLOVER = 1181971574,
	/** The mouse pointer is clicked on the button's area. */
	DOWN = 1181971556,
	/** Up on state. */
	UP_ON = 1181970031,
	/** Rollover on state. */
	ROLLOVER_ON = 1181972079,
	/** Down on state. */
	DOWN_ON = 1181967471,
	/** Up off state. */
	UP_OFF = 1181970022,
	/** Rollover off state. */
	ROLLOVER_OFF = 1181972070,
	/** Down off state. */
	DOWN_OFF = 1181967462
}

/**
 * Options for specifying the position of a movie's display 
 * window.
 * @enum
 */
export declare enum FloatingWindowPosition {
	/**
	 * Positions the window in the upper left corner of the screen.
	 */
	UPPER_LEFT = 1668183118,
	/**
	 * Positions the window at the top of the screen midway between 
	 * the left and right edges.
	 */
	UPPER_MIDDLE = 1299541348,
	/**
	 * Positions the window in the upper right corner of the 
	 * screen.
	 */
	UPPER_RIGHT = 1299542644,
	/**
	 * Positions the window on the left side of the screen midway 
	 * between the top and bottom.
	 */
	CENTER_LEFT = 1298361446,
	/** Positions the window in the center of the screen. */
	CENTER = 1298359662,
	/**
	 * Positions the window on the right side of the screen midway 
	 * between the top and bottom.
	 */
	CENTER_RIGHT = 1298362996,
	/**
	 * Positions the window in the lower left corner of the screen.
	 */
	LOWER_LEFT = 1298951270,
	/**
	 * Positions the window at the bottom of the screen midway 
	 * between the left and right edges.
	 */
	LOWER_MIDDLE = 1298951524,
	/**
	 * Positions the window in the lower right corner of the 
	 * screen.
	 */
	LOWER_RIGHT = 1298952820
}

/**
 * The size of the movie's floating window. Valid only when 
 * floating window is true.
 * @enum
 */
export declare enum FloatingWindowSize {
	/**
	 * The floating window is one fifth the length and height of 
	 * the movie's original display size.
	 */
	ONE_FIFTH = 1298557286,
	/**
	 * The floating window is one fourth the length and height of 
	 * the movie's original display size.
	 */
	ONE_FOURTH = 1298558834,
	/**
	 * The floating window is one half the length and height of the 
	 * movie's original display size.
	 */
	ONE_HALF = 1298686316,
	/** The floating window is the movie's original display size. */
	FULL = 1298560364,
	/**
	 * The floating window is twice the length and height of the 
	 * movie's original display size.
	 */
	TWICE = 1299476344,
	/**
	 * The floating window is triple the length and height of the 
	 * movie's original display size.
	 */
	TRIPLE = 1299477112,
	/**
	 * The floating window is quadruple the length and height of 
	 * the movie's original display size.
	 */
	QUADRUPLE = 1299281272,
	/** The floating window fills the entire screen. */
	MAX = 1299014008
}

/**
 * The type of graphic for the movie poster.
 * @enum
 */
export declare enum MoviePosterTypes {
	/** None. */
	NONE = 1852796517,
	/** Uses the generic movie poster image file. */
	STANDARD = 2020623970,
	/** Uses an image from the movie file. */
	FROM_MOVIE = 1298558310,
	/**
	 * (Read-only) Indicates whether the movie poster is not the 
	 * standard, generic image.
	 */
	PROXY_IMAGE = 1299216505
}

/**
 * Playback options.
 * @enum
 */
export declare enum MoviePlayOperations {
	/** Starts playback. */
	PLAY = 1886151033,
	/** Starts playback from the specified navigation point. */
	PLAY_FROM_NAVIGATION_POINT = 1886154358,
	/** Stops playback. */
	STOP = 1937010544,
	/** Pauses playback. */
	PAUSE = 1885435251,
	/** Resumes playback. */
	RESUME = 1919251317,
	/** Stops all playback (SWF only). */
	STOP_ALL = 1937010785
}

/**
 * Sound poster graphics options.
 * @enum
 */
export declare enum SoundPosterTypes {
	/** No sound poster. */
	NONE = 1852796517,
	/** Generic sound poster. */
	STANDARD = 2020623970,
	/** Proxy image sound poster. */
	PROXY_IMAGE = 1299216505
}

/**
 * Behavior trigger event options.
 * @enum
 */
export declare enum BehaviorEvents {
	/**
	 * Triggers the behavior when the mouse is released after a 
	 * click.
	 */
	MOUSE_UP = 1836410230,
	/**
	 * Triggers the behavior when the mouse button is clicked 
	 * (without being released).
	 */
	MOUSE_DOWN = 1835296118,
	/**
	 * Triggers the behavior when the mouse pointer enters the area 
	 * defined by the bounding box of the object.
	 */
	MOUSE_ENTER = 1835361654,
	/**
	 * Triggers the behavior when the mouse pointer exits the area 
	 * defined by the bounding box of the object.
	 */
	MOUSE_EXIT = 1836606838,
	/**
	 * Triggers the behavior when the object receives focus, either 
	 * through a mouse action or by pressing the Tab key.
	 */
	ON_FOCUS = 1868981622,
	/**
	 * Triggers the behavior when the focus moves to a different 
	 * interactive object.
	 */
	ON_BLUR = 1868719478
}

/**
 * Zoom options for the goto destination page.
 * @enum
 */
export declare enum GoToZoomOptions {
	/**
	 * Inherits the zoom setting from the previously displayed 
	 * page.
	 */
	INHERIT_ZOOM = 1212437370,
	/** Fits the page in the display window. */
	FIT_WINDOW = 1212437367,
	/**
	 * Fits the page to the width of the window; may obscure the 
	 * lower portion of the page.
	 */
	FIT_WIDTH = 1212437335,
	/**
	 * Fits the text area of the page to the window width; obscures 
	 * page margins and may obscure the lower portion of the page.
	 */
	FIT_VISIBLE = 1212437334,
	/** Displays the page at 100% magnification. */
	ACTUAL_SIZE = 2053206906
}

/**
 * Playback options.
 * @enum
 */
export declare enum PlayOperations {
	/** Starts playback. */
	PLAY = 1886151033,
	/** Stops playback. */
	STOP = 1937010544,
	/** Pauses playback. */
	PAUSE = 1885435251,
	/** Resumes playback. */
	RESUME = 1919251317,
	/** Stops all playback (SWF only). */
	STOP_ALL = 1937010785
}

/**
 * Playback options.
 * @enum
 */
export declare enum AnimationPlayOperations {
	/** Starts playback. */
	PLAY = 1886151033,
	/** Stops playback. */
	STOP = 1937010544,
	/** Pauses playback. */
	PAUSE = 1885435251,
	/** Resumes playback. */
	RESUME = 1919251317,
	/** Reverses playback. */
	REVERSE_PLAYBACK = 1919252069,
	/** Stops all playback. */
	STOP_ALL = 1937010785
}

/**
 * View zoom style options.
 * @enum
 */
export declare enum ViewZoomStyle {
	/**
	 * Fills the screen with the page; hides the toolbar, command 
	 * bar, menu bar, and window controls.
	 */
	FULL_SCREEN = 1987733107,
	/** Magnifies the view to the next preset percentage. */
	ZOOM_IN = 2053990766,
	/** Reduces the view to the previous preset percentage. */
	ZOOM_OUT = 2054124916,
	/** Fits the entire page in the window. */
	FIT_PAGE = 2053534832,
	/** Displays the page at 100% magnification. */
	ACTUAL_SIZE = 2053206906,
	/**
	 * Fits the page to the width of the window; may obscure the 
	 * lower portion of the page.
	 */
	FIT_WIDTH = 1212437335,
	/**
	 * Fits the the text area of the page to the window width; 
	 * obscures page margins and may obscure the lower portion of 
	 * the page.
	 */
	FIT_VISIBLE = 1212437334,
	/** Displays one page in the document pane at a time. */
	SINGLE_PAGE = 1987736432,
	/**
	 * Arranges the pages in a continuous vertical column that is 
	 * one page wide.
	 */
	ONE_COLUMN = 1987735395,
	/**
	 * Arranges the pages side by side in a continuous vertical 
	 * column that is two pages wide.
	 */
	TWO_COLUMN = 1987736675
}

/**
 * The version state of the file in Version Cue.
 * @enum
 */
export declare enum VersionState {
	/** The version is not known. */
	VERSION_UNKNOWN = 1986221653,
	/** The project has a newer file. */
	PROJECT_FILE_NEWER = 1986221648,
	/** The version is identical to the project. */
	LOCAL_PROJECT_MATCH = 1986221645,
	/**
	 * The version has modifications that make it newer than the 
	 * project.
	 */
	LOCAL_NEWER = 1986221644,
	/**
	 * The version contains local edits but the project file is 
	 * newer.
	 */
	VERSION_CONFLICT = 1986221635,
	/** No resource and no local file. */
	NO_RESOURCE = 1986221646
}

/**
 * The editing state of the file in Version Cue.
 * @enum
 */
export declare enum EditingState {
	/** The editing status is not known. */
	EDITING_UNKNOWN = 1986217301,
	/** The file is not currently in use and is not locked. */
	EDITING_NOWHERE = 1986217294,
	/** Lock held but not usable. */
	EDITING_REMOTELY = 1986217298,
	/** The file has been modified locally and not locked. */
	EDITING_LOCALLY = 1986217292,
	/** The file has been locked locally and may be modified. */
	EDITING_LOCALLY_LOCKED = 1986217291,
	/**
	 * The file was modified locally or remotely while it was 
	 * locked and therefore two versions exist.
	 */
	EDITING_CONFLICT = 1986217283
}

/**
 * The synchronization status of the file in Version Cue.
 * @enum
 */
export declare enum VersionCueSyncStatus {
	/**
	 * The project version of the file was downloaded to the local 
	 * workspace.
	 */
	FILE_DOWNLOADED = 1986220868,
	/** The local version of the file was uploaded to the project. */
	FILE_UPLOADED = 1986220885,
	/** The file was unlocked locally. */
	FILE_UNLOCKED = 1986220876,
	/** The file was not synchronized. */
	FILE_SKIPPED = 1986220875,
	/**
	 * The synchronization resulted in no change because the local 
	 * and project versions were identical.
	 */
	FILE_NO_CHANGE = 1986220878
}

/**
 * The type of conflict resolution to employ during Version Cue 
 * synchronization.
 * @enum
 */
export declare enum SyncConflictResolution {
	/** Skips conflicting files. */
	SKIP_CONFLICTS = 1986216787,
	/** Asks the user how to resolve conflicts. */
	ASK_ABOUT_CONFLICTS = 1986216769,
	/** Uses the local version. */
	PREFER_LOCAL = 1986216780,
	/** Uses the project version. */
	PREFER_PROJECT = 1986216784
}

/**
 * Used to specify a language and region.
 * @enum
 */
export declare enum LanguageAndRegion {
	/** Standard Arabic */
	STANDARD_ARABIC = 1634877765,
	/** Czech Republic: Czech */
	CZECH_REPUBLIC_CZECH = 1668498266,
	/** Denmark: Danish */
	DENMARK_DANISH = 1684096075,
	/** Germany: German */
	GERMANY_GERMAN = 1684358213,
	/** Greece: Greek */
	GREECE_GREEK = 1701594962,
	/** United Kingdom: English */
	UNITED_KINGDOM_ENGLISH = 1701726018,
	/** United States: English */
	UNITED_STATES_ENGLISH = 1701729619,
	/** Spain: Spanish */
	SPAIN_SPANISH = 1702053203,
	/** Finland: Finnish */
	FINLAND_FINNISH = 1718175305,
	/** France: French */
	FRANCE_FRENCH = 1718765138,
	/** Israel: Hebrew */
	ISRAEL_HEBREW = 1751468364,
	/** Hungary: Hungarian */
	HUNGARY_HUNGARIAN = 1752516693,
	/** Italy: Italian */
	ITALY_ITALIAN = 1769228628,
	/** Japan: Japanese */
	JAPAN_JAPANESE = 1784760912,
	/** Republic Of Korea: Korean */
	REPUBLIC_OF_KOREA_KOREAN = 1802455890,
	/** Norway: Norwegian */
	NORWAY_NORWEGIAN = 1851936335,
	/** Netherlands: Dutch */
	NETHERLANDS_DUTCH = 1852591692,
	/** Poland: Polish */
	POLAND_POLISH = 1886146636,
	/** Brazil: Portuguese */
	BRAZIL_PORTUGUESE = 1886667346,
	/** Russian Federation: Russian */
	RUSSIAN_FEDERATION_RUSSIAN = 1920291413,
	/** Sweden: Swedish */
	SWEDEN_SWEDISH = 1937134422,
	/** Turkey: Turkish */
	TURKEY_TURKISH = 1953649746,
	/** Ukraine: Ukrainian */
	UKRAINE_UKRAINIAN = 1969968449,
	/** Simplified Chinese */
	SIMPLIFIED_CHINESE = 2053653326,
	/** Traditional Chinese */
	TRADITIONAL_CHINESE = 2053657687,
	/** Belarus: Belarusian */
	BELARUS_BELARUSIAN = 1650803289,
	/** Bulgaria: Bulgarian */
	BULGARIA_BULGARIAN = 1650934343,
	/** Estonia: Estonian */
	ESTONIA_ESTONIAN = 1702118725,
	/** Croatia: Croatian */
	CROATIA_CROATIAN = 1752320082,
	/** Lituania: Lithuanian */
	LITUANIA_LITHUANIAN = 1819561044,
	/** Latvia: Latvian */
	LATVIA_LATVIAN = 1819692118,
	/** Romania: Romanian */
	ROMANIA_ROMANIAN = 1919898191,
	/** Slovakia: Slovak */
	SLOVAKIA_SLOVAK = 1936479051,
	/** Slovenia: Slovenian */
	SLOVENIA_SLOVENIAN = 1936479049,
	/** Albania: Albanian */
	ALBANIA_ALBANIAN = 1936802124,
	/** India: Tamil */
	INDIA_TAMIL = 1952532814,
	/** Thailand: Thai */
	THAILAND_THAI = 1952994376,
	/** Vietnam: Vietnamese */
	VIETNAM_VIETNAMESE = 1986614862,
	/** Indic */
	INDIC = 1768842345
}

/**
 * User interaction level options.
 * @enum
 */
export declare enum UserInteractionLevels {
	/** The script does not display any dialogs or alerts. */
	NEVER_INTERACT = 1699640946,
	/** The script displays all dialogs and alerts. */
	INTERACT_WITH_ALL = 1699311169,
	/** Displays alerts but not dialogs. */
	INTERACT_WITH_ALERTS = 1699311170
}

/**
 * The locale.
 * @enum
 */
export declare enum Locale {
	/** Danish. */
	DANISH_LOCALE = 1279476846,
	/** English. */
	ENGLISH_LOCALE = 1279477102,
	/** International English. */
	INTERNATIONAL_ENGLISH_LOCALE = 1279477097,
	/** Finnish. */
	FINNISH_LOCALE = 1279477358,
	/** French. */
	FRENCH_LOCALE = 1279477362,
	/** German. */
	GERMAN_LOCALE = 1279477613,
	/** Italian. */
	ITALIAN_LOCALE = 1279478132,
	/** Portuguese. */
	PORTUGUESE_LOCALE = 1279479911,
	/** Spanish. */
	SPANISH_LOCALE = 1279480688,
	/** Swedish. */
	SWEDISH_LOCALE = 1279480695,
	/** Japanese. */
	JAPANESE_LOCALE = 1279478384,
	/** Arabic */
	ARABIC_LOCALE = 1279476082,
	/** Czech */
	CZECH_LOCALE = 1279476602,
	/** Greek */
	GREEK_LOCALE = 1279477618,
	/** Hebrew */
	HEBREW_LOCALE = 1279477858,
	/** Hungarian */
	HUNGARIAN_LOCALE = 1279477877,
	/** Polish */
	POLISH_LOCALE = 1279479916,
	/** Romanian */
	ROMANIAN_LOCALE = 1279480431,
	/** Russian */
	RUSSIAN_LOCALE = 1279480437,
	/** Turkish */
	TURKISH_LOCALE = 1279480946,
	/** Ukrainian */
	UKRAINIAN_LOCALE = 1279481195,
	/** en_KoreanLocale */
	KOREAN_LOCALE = 1279478639,
	/** simplified chinese */
	SIMPLIFIED_CHINESE_LOCALE = 1279476590,
	/** traditional chinese */
	TRADITIONAL_CHINESE_LOCALE = 1279480951
}

/**
 * The language of the script to execute.
 * @enum
 */
export declare enum ScriptLanguage {
	/** Language not specified. */
	UNKNOWN = 1433299822,
	/** The JavaScript language. */
	JAVASCRIPT = 1246973031,
	/** The AppleScript language. */
	APPLESCRIPT_LANGUAGE = 1095978087
}

/**
 * Options for specifying a feature set.
 * @enum
 */
export declare enum FeatureSetOptions {
	/** Uses the Roman feature set and defaults. */
	ROMAN = 1383034222,
	/** Uses the Japanese feature set and defaults. */
	JAPANESE = 1247899758,
	/** Uses the R2L feature set */
	RIGHTTOLEFT = 1381265228
}

/**
 * Undo options for executing a script.
 * @enum
 */
export declare enum UndoModes {
	/** Undo each script request as a separate step. */
	SCRIPT_REQUEST = 1699967573,
	/** Undo the entire script as a single step. */
	ENTIRE_SCRIPT = 1699963733,
	/**
	 * Automatically undo the entire script as part of the previous 
	 * step.
	 */
	AUTO_UNDO = 1699963221,
	/** Fast undo the entire script as a single step. */
	FAST_ENTIRE_SCRIPT = 1699964501
}

/**
 * Used to specify how to open a document.
 * @enum
 */
export declare enum OpenOptions {
	/** Default based on the file type or extension. */
	DEFAULT_VALUE = 1147563124,
	/** Open the document itself. */
	OPEN_ORIGINAL = 1332760434,
	/** Open a copy of the document. */
	OPEN_COPY = 1332757360
}

/**
 * The state of a task.
 * @enum
 */
export declare enum TaskState {
	/**
	 * Task was queued and is waiting to be scheduled for execution
	 */
	QUEUED = 1699837285,
	/** Task is running */
	RUNNING = 1700033141,
	/** Task is waiting */
	WAITING = 1700225396,
	/** Task was signalled to cancel but did not stop yet */
	CANCELLING = 1700029281,
	/** Task completed execution (successfully or with errors) */
	COMPLETED = 1700029296,
	/**
	 * Task was cancelled (either before it ran or during execution
	 */
	CANCELLED = 1700029292
}

/**
 * The type of a task alert.
 * @enum
 */
export declare enum TaskAlertType {
	/** Information message */
	TASK_INFORMATION = 1699302771,
	/** Warning message */
	TASK_WARNING = 1700220275,
	/** error message */
	TASK_ERROR = 1699040627
}

/**
 * Options for saving a document before closing or quitting.
 * @enum
 */
export declare enum SaveOptions {
	/** Does not save changes. */
	NO = 1852776480,
	/** Displays a prompts asking whether to save changes. */
	ASK = 1634954016,
	/** Saves changes. */
	YES = 2036691744
}

/**
 * Display size options.
 * @enum
 */
export declare enum ZoomOptions {
	/** Magnifies the view to the next preset percentage. */
	ZOOM_IN = 2053990766,
	/** Reduces the view to the next preset percentage. */
	ZOOM_OUT = 2054124916,
	/** Centers the active spread in the window. */
	FIT_SPREAD = 2053534835,
	/** Centers the active page in the window. */
	FIT_PAGE = 2053534832,
	/** Fits the entire pasteboard in the window. */
	SHOW_PASTEBOARD = 2054385762,
	/** Zooms to 100%. */
	ACTUAL_SIZE = 2053206906
}

/**
 * Options for display performance settings, which influence 
 * the speed and quality with which an object draws and 
 * redraws.
 * @enum
 */
export declare enum ViewDisplaySettings {
	/**
	 * Slower performance; displays high-resolution graphics and 
	 * high-quality transparencies and turns on anti-aliasing.
	 */
	HIGH_QUALITY = 1346922866,
	/**
	 * Moderate performance speed; displays proxy graphics and 
	 * low-quality transparencies and turns on anti-aliasing.
	 */
	TYPICAL = 1349810544,
	/**
	 * Best performance; grays out graphics and turns off 
	 * transparency and anti-aliasing.
	 */
	OPTIMIZED = 1349480564
}

/**
 * The reference point on the object's bounding box that does 
 * not move during transformation operations. Note: 
 * Transformations include rotation, scaling, flipping, and 
 * shearing.
 * @enum
 */
export declare enum AnchorPoint {
	/** The top left corner. */
	TOP_LEFT_ANCHOR = 1095660652,
	/** The center point on the top of the bounding box. */
	TOP_CENTER_ANCHOR = 1095660643,
	/** The top right corner. */
	TOP_RIGHT_ANCHOR = 1095660658,
	/** The center point on the left side of the bounding box. */
	LEFT_CENTER_ANCHOR = 1095658595,
	/** The center point in the bounding box. */
	CENTER_ANCHOR = 1095656308,
	/** The center point on the right side of the bounding box. */
	RIGHT_CENTER_ANCHOR = 1095660131,
	/** The bottom left corner. */
	BOTTOM_LEFT_ANCHOR = 1095656044,
	/** The center point on the bottom of the bounding box. */
	BOTTOM_CENTER_ANCHOR = 1095656035,
	/** The bottom right corner. */
	BOTTOM_RIGHT_ANCHOR = 1095656050
}

/**
 * Color model options.
 * @enum
 */
export declare enum ColorModel {
	/** Spot color. */
	SPOT = 1936748404,
	/** Process color. */
	PROCESS = 1886548851,
	/** Registration color. */
	REGISTRATION = 1919248243,
	/** Mixed ink color. */
	MIXEDINKMODEL = 1768844664
}

/**
 * Color space options.
 * @enum
 */
export declare enum ColorSpace {
	/** RGB. */
	RGB = 1666336578,
	/** CMYK. */
	CMYK = 1129142603,
	/** LAB. */
	LAB = 1665941826,
	/** Mixed ink. */
	MIXEDINK = 1666009432
}

/**
 * Screen mode options.
 * @enum
 */
export declare enum ScreenModeOptions {
	/** Normal view; displays guides and frame edges. */
	PREVIEW_OFF = 1936552047,
	/**
	 * Preview mode; displays the document as it will be printed 
	 * (hides guides and frame edges).
	 */
	PREVIEW_TO_PAGE = 1936552048,
	/** Preview mode including the bleed area. */
	PREVIEW_TO_BLEED = 1936552034,
	/** Preview mode including the slug area. */
	PREVIEW_TO_SLUG = 1936552051,
	/**
	 * Preview mode with editing turned off. Mouse clicks and arrow 
	 * keys will move to previous or next spread.
	 */
	PRESENTATION_PREVIEW = 1936552046
}

/**
 * Watermark vertical position enum type.
 * @enum
 */
export declare enum WatermarkVerticalPositionEnum {
	/** Place watermark vertical top. */
	WATERMARK_V_TOP = 1884704884,
	/** Place watermark vertical center. */
	WATERMARK_V_CENTER = 1884704867,
	/** Place watermark vertical bottom. */
	WATERMARK_V_BOTTOM = 1884704866
}

/**
 * Watermark horizontal position enum type.
 * @enum
 */
export declare enum WatermarkHorizontalPositionEnum {
	/** Place watermark horizontal left. */
	WATERMARK_H_LEFT = 1883787372,
	/** Place watermark horizontal center. */
	WATERMARK_H_CENTER = 1883787363,
	/** Place watermark horizontal right. */
	WATERMARK_H_RIGHT = 1883787378
}

/**
 * Options for page numbering.
 * @enum
 */
export declare enum PageNumberingOptions {
	/**
	 * Numbers pages according to page numbering specifications of 
	 * the section.
	 */
	SECTION = 1935897710,
	/** Numbers all pages in the document sequentially. */
	ABSOLUTE = 1096971116
}

/**
 * Tool tip behavior options.
 * @enum
 */
export declare enum ToolTipOptions {
	/** Displays tool tips. */
	NORMAL = 1852797549,
	/** Turns off tool tips. */
	NONE = 1852796517,
	/** Displays tool tips more quickly than normal. */
	FAST = 1180791668
}

/**
 * Options for selection status in relation to previously 
 * selected objects.
 * @enum
 */
export declare enum SelectionOptions {
	/**
	 * Adds the object to the existing selection; if no object was 
	 * previously selected, makes the object the only selected 
	 * object.
	 */
	ADD_TO = 1633969202,
	/** Deselects the object. */
	REMOVE_FROM = 1919249734,
	/**
	 * Selects the object and deselects any previously selected 
	 * objects.
	 */
	REPLACE_WITH = 1919250519,
	/**
	 * Sets the key object. At least 2 objects must be selected, 
	 * and the key object specified must be one of them.
	 */
	SET_KEY = 1936028779
}

/**
 * Selection options.
 * @enum
 */
export declare enum SelectAll {
	/** Selects all. */
	ALL = 1634495520
}

/**
 * Preview size options.
 * @enum
 */
export declare enum PreviewSizeOptions {
	/** Small preview (128 x 128). */
	SMALL = 1399672946,
	/** Medium preview (256 x 256). */
	MEDIUM = 1701727588,
	/** Large preview (512 x 512). */
	LARGE = 1281446002,
	/** Extra large preview (1024 x 1024). */
	EXTRA_LARGE = 1162629234
}

/**
 * Options for Tools panel.
 * @enum
 */
export declare enum ToolsPanelOptions {
	/** Single column */
	SINGLE_COLUMN = 1163092844,
	/** Double column */
	DOUBLE_COLUMN = 1162109804,
	/** Single row */
	SINGLE_ROW = 1163096695
}

/**
 * Live drawing options for when user mouse actions trigger 
 * live screen drawing of page items.
 * @enum
 */
export declare enum LiveDrawingOptions {
	/**
	 * Never use live screen drawing during mouse operations, use 
	 * sprite mode.
	 */
	NEVER = 1347767926,
	/** Use live screen drawing during mouse operations. */
	IMMEDIATELY = 1347766637,
	/**
	 * Use live screen drawing during mouse operations after a 
	 * delay if user pauses before the mouse moves.
	 */
	DELAYED = 1347765349
}

/**
 * Options for preview pages.
 * @enum
 */
export declare enum PreviewPagesOptions {
	/** First page. */
	FIRST_PAGE = 1700947536,
	/** First two pages. */
	FIRST_2_PAGES = 1177702503,
	/** First five pages. */
	FIRST_5_PAGES = 1177899111,
	/** First ten pages. */
	FIRST_10_PAGES = 1180192871,
	/** All pages. */
	ALL_PAGES = 1886547553
}

/**
 * The alignment for static text.
 * @enum
 */
export declare enum StaticAlignmentOptions {
	/** Left align the text. */
	LEFT_ALIGN = 1818584692,
	/** Center align the text. */
	CENTER_ALIGN = 1667591796,
	/** Right align the text. */
	RIGHT_ALIGN = 1919379572
}

/**
 * Rendering intent options.
 * @enum
 */
export declare enum RenderingIntent {
	/** Uses the current color settings. */
	USE_COLOR_SETTINGS = 1380541299,
	/**
	 * Preserves the visual relationship between colors at the 
	 * expense of actual color values; most suitable for 
	 * photographic images with high percentages of out-of-gamut 
	 * colors.
	 */
	PERCEPTUAL = 1380544611,
	/**
	 * Produces vivid colors at the expense of color accuracy; most 
	 * suitable for business graphics such as graphs or charts.
	 */
	SATURATION = 1380545377,
	/**
	 * Compares the extreme highlight of the source color space to 
	 * that of the desination color space and shifts all colors 
	 * accordingly; out-of-gamut colors are shifted to the closest 
	 * reproducible color in the destination color space.
	 */
	RELATIVE_COLORIMETRIC = 1380545123,
	/**
	 * Maintains color accuracy at the expense of preserving 
	 * relationships between colors; most suitable for previewing 
	 * how paper color affects printed colors.
	 */
	ABSOLUTE_COLORIMETRIC = 1380540771
}

/**
 * Stroke weight options for printer marks.
 * @enum
 */
export declare enum MarkLineWeight {
	/** 125 pt. */
	P125PT = 825374064,
	/** 25 pt. */
	P25PT = 842346608,
	/** 50 pt. */
	P50PT = 892350576,
	/** 05 mm. */
	P05MM = 808807789,
	/** 07 mm. */
	P07MM = 808938861,
	/** 10 mm. */
	P10MM = 825257325,
	/** 15 mm. */
	P15MM = 825585005,
	/** 20 mm. */
	P20MM = 842034541,
	/** 30 mm. */
	P30MM = 858811757
}

/**
 * Options for printer marks formats.
 * @enum
 */
export declare enum MarkTypes {
	/** Uses the default format. */
	DEFAULT_VALUE = 1147563124,
	/** Uses J marks with a circle. */
	J_MARK_WITH_CIRCLE = 1785558883,
	/** Uses J marks without a circle. */
	J_MARK_WITHOUT_CIRCLE = 1785556579
}

/**
 * Color output mode options for composites.
 * @enum
 */
export declare enum ColorOutputModes {
	/**
	 * Sends a full-color version of the specified pages to the 
	 * printer, preserving all color values in the original 
	 * document. Note: Cannot simulate overprint when using this 
	 * option.
	 */
	COMPOSITE_LEAVE_UNCHANGED = 1668107349,
	/**
	 * Sends grayscale versions of the specified pages to the 
	 * printer.
	 */
	COMPOSITE_GRAY = 1668116583,
	/**
	 * Sends full-color versions of the specified pages to the 
	 * printer.
	 */
	COMPOSITE_RGB = 1668108866,
	/**
	 * Sends full-color versions of the specified pages to the 
	 * printer. Note: Available only for PostScript printers.
	 */
	COMPOSITE_CMYK = 1668105035,
	/**
	 * Sends PostScript information for each of the required 
	 * separations to the printer. Note: Available only for 
	 * PostScript printers.
	 */
	SEPARATIONS = 1936027745,
	/**
	 * Allows the printer to create color separations. Note: Valid 
	 * only with a PostScript raster image processing (RIP) device.
	 */
	INRIP_SEPARATIONS = 1919512691
}

/**
 * Format options for image data.
 * @enum
 */
export declare enum DataFormat {
	/** Uses ASCII format. */
	ASCII = 1095975753,
	/** Uses binary format. */
	BINARY = 1114534521
}

/**
 * Flip direction options.
 * @enum
 */
export declare enum Flip {
	/** The printed image is not flipped. */
	NONE = 1852796517,
	/** Flips the printed image horizontally. */
	HORIZONTAL = 1752134266,
	/** Flips the printed image vertically. */
	VERTICAL = 1986359924,
	/**
	 * Flips the printed image horizontally and vertically (same as 
	 * rotate 180).
	 */
	HORIZONTAL_AND_VERTICAL = 1215977068,
	/** Horizontal and vertical flip (same as rotate 180) */
	BOTH = 1651471464
}

/**
 * Options for downloading fonts to the printer.
 * @enum
 */
export declare enum FontDownloading {
	/**
	 * Downloads only references to fonts. Note: Use when fonts 
	 * reside in the printer.
	 */
	NONE = 1852796517,
	/** Downloads all fonts once per page. */
	COMPLETE = 2003332197,
	/**
	 * Downloads only the characters (glyphs) used in the document. 
	 * Glyphs are downloaded once per page.
	 */
	SUBSET = 1768842098,
	/**
	 * Downloads only the characters (glyphs) used in the document. 
	 * Glyphs are downloaded once per page. Note: Use when the 
	 * number of glyphs exceeds 350.
	 */
	SUBSET_LARGE = 1818325607
}

/**
 * Options for positioning the page on the paper or film.
 * @enum
 */
export declare enum PagePositions {
	/** Places the page in the upper left corner. */
	UPPER_LEFT = 1668183118,
	/** Centers the page horizontally. */
	CENTER_HORIZONTALLY = 1668183112,
	/** Centers the page vertically. */
	CENTER_VERTICALLY = 1668183126,
	/** Centers the page horizontally and vertically. */
	CENTERED = 1668183106
}

/**
 * Printer PostScript level options.
 * @enum
 */
export declare enum PostScriptLevels {
	/** Level 2 PostScript. */
	LEVEL_2 = 1347636274,
	/** Level 3 PostScript. */
	LEVEL_3 = 1347636275
}

/**
 * Page orientation options.
 * @enum
 */
export declare enum PrintPageOrientation {
	/** Portrait. */
	PORTRAIT = 1751738216,
	/** Landscape. */
	LANDSCAPE = 2003395685,
	/** Reverse portrait. */
	REVERSE_PORTRAIT = 1869771376,
	/** Reverse landscape. */
	REVERSE_LANDSCAPE = 1869771372
}

/**
 * Options for sending image data to the printer or file.
 * @enum
 */
export declare enum ImageDataTypes {
	/** Sends full-resolution data. */
	ALL_IMAGE_DATA = 1853058416,
	/**
	 * Sends just enough data to print graphics at the best 
	 * possible resolution for the output device.
	 */
	OPTIMIZED_SUBSAMPLING = 1869640563,
	/**
	 * Sends screen-resolution versions (72 dpi) of placed bitmap 
	 * images.
	 */
	PROXY_IMAGE_DATA = 1819243130,
	/** Prints graphics frames with crossbars in place of graphics. */
	NONE = 1852796517
}

/**
 * Options for printing page sequences.
 * @enum
 */
export declare enum Sequences {
	/** Prints all pages. */
	ALL = 1634495520,
	/** Prints only odd-numbered pages. */
	ODD = 1868850208,
	/** Prints only even-numbered pages. */
	EVEN = 1702258030
}

/**
 * Color-management system source options.
 * @enum
 */
export declare enum SourceSpaces {
	/** Uses the color space of the document. */
	USE_DOCUMENT = 1967419235,
	/** Uses the color space of the proof. */
	PROOF_SPACE = 1886548848
}

/**
 * Options for the number of thumbnails per page.
 * @enum
 */
export declare enum ThumbsPerPage {
	/** Fits one row on the page; the row contains two thumbnails. */
	K1X2 = 1949399090,
	/** Fits two rows of two. */
	K2X2 = 1949464626,
	/** Fits three rows of three. */
	K3X3 = 1949530163,
	/** Fits four rows of four. */
	K4X4 = 1949595700,
	/** Fits five rows of five. */
	K5X5 = 1949661237,
	/** Fits six rows of six. */
	K6X6 = 1949726774,
	/** Fits seven rows of seven. */
	K7X7 = 1949792311
}

/**
 * Tiling type options.
 * @enum
 */
export declare enum TilingTypes {
	/**
	 * Automatically calculates the number of tiles required, 
	 * including the overlap. For information, see tiling overlap.
	 */
	AUTO = 1635019116,
	/**
	 * Increases the amount of overlap as necessary so that the 
	 * right sides of the right-most tiles are aligned at the right 
	 * edge of the document page, and the bottom sides of the 
	 * bottom-most tiles are aligned at the bottom edge of the 
	 * document page. For information, see tiling overlap.
	 */
	AUTO_JUSTIFIED = 1634366324,
	/**
	 * Prints a single tile whose upper left corner is at the zero 
	 * point of the rulers.
	 */
	MANUAL = 1835955308
}

/**
 * Trapping options.
 * @enum
 */
export declare enum Trapping {
	/** No trapping. */
	OFF = 1330005536,
	/** Application built-in. */
	APPLICATION_BUILTIN = 1114199152,
	/** Adobe in-RIP. */
	ADOBE_INRIP = 1919512660
}

/**
 * Ink trapping type options.
 * @enum
 */
export declare enum InkTypes {
	/** Uses traditional process inks and most spot inks. */
	NORMAL = 1852797549,
	/**
	 * Uses heavy, nontransparent inks to prevent trapping of 
	 * underlying colors but allow for trapping along the edges of 
	 * the ink. Best for metallic inks.
	 */
	OPAQUE = 1769230192,
	/**
	 * Uses clear inks to ensure that underlying items trap. Best 
	 * for varnishes and dieline inks.
	 */
	TRANSPARENT = 1769231474,
	/**
	 * Uses heavy, nontransparent inks to prevent trapping of 
	 * underlying colors but allow for trapping along the edges of 
	 * the ink. Best for inks that have undesirable interactions 
	 * with other inks.
	 */
	OPAQUE_IGNORE = 1769228647
}

/**
 * Printer preset options.
 * @enum
 */
export declare enum PrinterPresetTypes {
	/** The default printer preset. */
	DEFAULT_VALUE = 1147563124,
	/** A custom printer preset. */
	CUSTOM = 1131639917
}

/**
 * The color-rendering dictionary (CRD) to use.
 * @enum
 */
export declare enum ColorRenderingDictionary {
	/** Uses the default CRD. */
	DEFAULT_VALUE = 1147563124,
	/** Uses the document's CRD. */
	USE_DOCUMENT = 1967419235,
	/** Uses the working CRD. */
	WORKING = 1466921579
}

/**
 * Page range options.
 * @enum
 */
export declare enum PageRange {
	/** Print or export all pages in the document. */
	ALL_PAGES = 1886547553,
	/** Export selected items in the document. */
	SELECTED_ITEMS = 1886547571
}

/**
 * Paper size options.
 * @enum
 */
export declare enum PaperSize {
	/** Automatic */
	AUTO = 1635019116
}

/**
 * PPD options.
 * @enum
 */
export declare enum PPDValues {
	/** Device-independent. */
	DEVICE_INDEPENDENT = 1684367716
}

/**
 * Color profile options.
 * @enum
 */
export declare enum Profile {
	/** Uses the PostScript CMS profile. */
	POSTSCRIPT_CMS = 1970303843,
	/** Uses the document profile. */
	USE_DOCUMENT = 1967419235,
	/** Uses the working profile. */
	WORKING = 1466921579,
	/** No CMS profile is used. */
	NO_CMS = 1970499183
}

/**
 * Options for ink screening for composite gray output in 
 * PostScript or PDF format.
 * @enum
 */
export declare enum Screeening {
	/** Uses the default screening settings. */
	DEFAULT_VALUE = 1147563124,
	/**
	 * Uses custom screening settings for ink angle and frequency. 
	 * For information, see composite angle and composite 
	 * frequency.
	 */
	CUSTOM = 1131639917
}

/**
 * Paper size optons.
 * @enum
 */
export declare enum PaperSizes {
	/** Allows the printer driver to define the paper size. */
	DEFINED_BY_DRIVER = 1347634290,
	/**
	 * Allows definition of a custom paper size. Note: Not all 
	 * printers allow custom paper sizes.
	 */
	CUSTOM = 1131639917
}

/**
 * Printer options.
 * @enum
 */
export declare enum Printer {
	/** Prints to a PostScript file. */
	POSTSCRIPT_FILE = 1886611052
}

/**
 * Options for trap placement between vector objects and bitmap 
 * images.
 * @enum
 */
export declare enum TrapImagePlacementTypes {
	/**
	 * Creates a trap that straddles the edge between vector 
	 * objects and bitmap images.
	 */
	CENTER_EDGES = 1953522542,
	/** Causes vector objects to overlap abutting images. */
	CHOKE = 1953522536,
	/**
	 * Applies the same trapping rules as used elsewhere in the 
	 * document. Note: When used to trap an object to a photograph, 
	 * can result in noticeably uneven edges as the trap moves from 
	 * one side of the edge to another.
	 */
	IMAGE_NEUTRAL_DENSITY = 1953525348,
	/** Causes bitmap images to overlap the abutting objects. */
	IMAGES_OVER_SPREAD = 1953526640
}

/**
 * Shape options for the intersection of three-way traps.
 * @enum
 */
export declare enum TrapEndTypes {
	/**
	 * Shapes the end of the trap to keep it away from the 
	 * intersecting object.
	 */
	MITER_TRAP_ENDS = 1953525093,
	/**
	 * Reshapes the trap generated by the lightest neutral density 
	 * object so that it wraps around the point where the three 
	 * objects intersect.
	 */
	OVERLAP_TRAP_ENDS = 1953525612
}

/**
 * Options for exporting image data to the EPS document.
 * @enum
 */
export declare enum EPSImageData {
	/**
	 * Exports high-resolution data. Note: Use when the file will 
	 * be printed on a high-resolution output device.
	 */
	ALL_IMAGE_DATA = 1853058416,
	/**
	 * Exports only screen-resolution versions (72 dpi) of placed 
	 * bitmap images. Note: Use in conjunction with OPI image 
	 * replacement or if the resulting file will be viewed 
	 * on-screen.
	 */
	PROXY_IMAGE_DATA = 1819243130
}

/**
 * Booklet type options.
 * @enum
 */
export declare enum BookletTypeOptions {
	/** Two up saddle stitch imposition. */
	TWO_UP_SADDLE_STITCH = 1110594387,
	/** Two up perfect bound imposition. */
	TWO_UP_PERFECT_BOUND = 1110593602,
	/** Two up consecutive imposition. */
	TWO_UP_CONSECUTIVE = 1110590291,
	/** Three up consecutive imposition. */
	THREE_UP_CONSECUTIVE = 1110655827,
	/** Four up consecutive imposition. */
	FOUR_UP_CONSECUTIVE = 1110721363
}

/**
 * Signature size options.
 * @enum
 */
export declare enum SignatureSizeOptions {
	/** Signature size 4. */
	SIGNATURE_SIZE_4 = 1112748084,
	/** Signature size 8. */
	SIGNATURE_SIZE_8 = 1112748088,
	/** Signature size 12. */
	SIGNATURE_SIZE_12 = 1112748338,
	/** Signature size 16. */
	SIGNATURE_SIZE_16 = 1112748342,
	/** Signature size 32. */
	SIGNATURE_SIZE_32 = 1112748850
}

/**
 * Document print ui options
 * @enum
 */
export declare enum DocumentPrintUiOptions {
	/** Do not show progress bar during printing. */
	SUPPRESS_PRINT_PROGRESS = 1936748659,
	/** Do not show warning dialog during printing. */
	SUPPRESS_PRINT_WARNINGS = 1936750450,
	/** Do not show print dialog. */
	SUPPRESS_PRINT_DIALOG = 1936745575,
	/** Do not show file save dialog during printing. */
	SUPPRESS_FILE_SAVE_DIALOG = 1936089444
}

/**
 * Note background color options.
 * @enum
 */
export declare enum NoteBackgrounds {
	/** Uses the galley background color. */
	GALLEY_BACKGROUND_COLOR = 1699168839,
	/** Uses the note color. */
	USE_NOTE_COLOR = 1700020807
}

/**
 * Note color options.
 * @enum
 */
export declare enum NoteColorChoices {
	/** Uses the color assigned to the user. */
	USE_USER_COLOR = 1700091203,
	/** Uses the note color. */
	USE_NOTE_PREF_COLOR = 1700089923
}

/**
 * Marking options for changed text.
 * @enum
 */
export declare enum ChangeMarkings {
	/** Does not mark changed text. */
	NONE = 1852796517,
	/** Uses a strikethrough to mark changed text. */
	STRIKETHROUGH = 1699968114,
	/** Underlines changed text. */
	UNDERLINE_SINGLE = 1700097636,
	/** Outlines changed text. */
	OUTLINE = 1869900910
}

/**
 * Change bar location options.
 * @enum
 */
export declare enum ChangebarLocations {
	/** Change bars are in the left margin. */
	LEFT_ALIGN = 1818584692,
	/** Change bars are in the right margin. */
	RIGHT_ALIGN = 1919379572
}

/**
 * Changed text color options.
 * @enum
 */
export declare enum ChangeTextColorChoices {
	/**
	 * The text color for changed text is the same as the galley 
	 * text color.
	 */
	CHANGE_USES_GALLEY_TEXT_COLOR = 1700095843,
	/**
	 * The text color for changed text is the same as the text 
	 * color defined in track changes preferences. For information, 
	 * see text color for added text, text color for deleted text, 
	 * or text color for moved text.
	 */
	CHANGE_USES_CHANGE_PREF_COLOR = 1700098147
}

/**
 * Background color options for changed text.
 * @enum
 */
export declare enum ChangeBackgroundColorChoices {
	/**
	 * The background color for changed text is the same as the 
	 * galley background color.
	 */
	CHANGE_BACKGROUND_USES_GALLEY_BACKGROUND_COLOR = 1700095842,
	/**
	 * The background color for changed text is the same as the 
	 * color assigned to the current user.
	 */
	CHANGE_BACKGROUND_USES_USER_COLOR = 1700099426,
	/**
	 * The background color for changed text is the same as the 
	 * track changes preferences background color. For information, 
	 * see background color for added text, background color for 
	 * deleted text, or background color for moved text.
	 */
	CHANGE_BACKGROUND_USES_CHANGE_PREF_COLOR = 1700098146
}

/**
 * Lock state options.
 * @enum
 */
export declare enum LockStateValues {
	/** No lock state. */
	NONE = 1852796517,
	/** The story is unmanaged. */
	UNMANAGED_STORY = 1112700269,
	/** The story has been checked in. */
	CHECKED_IN_STORY = 1112695657,
	/** The story has been checked out. */
	CHECKED_OUT_STORY = 1112695663,
	/** The story is locked. */
	LOCKED_STORY = 1112697963,
	/** The story is embedded. */
	EMBEDDED_STORY = 1112696173,
	/** The story file is missing. */
	MISSING_LOCK_STATE = 1112698227,
	/** The stories have a mixed lock state. */
	MIXED_LOCK_STATE = 1112698232
}

/**
 * Color space options for representing color in the exported 
 * JPEG.
 * @enum
 */
export declare enum JpegColorSpaceEnum {
	/**
	 * Represents all color values using the RGB color space. Best 
	 * suited for documents that will be viewed on-screen.
	 */
	RGB = 1666336578,
	/** Represents all color values using the CMYK color space. */
	CMYK = 1129142603,
	/**
	 * Converts all color values to high-quality black-and-white 
	 * images. Gray levels of the converted objects represent the 
	 * luminosity of the original objects.
	 */
	GRAY = 1766290041
}

/**
 * Page export options.
 * @enum
 */
export declare enum ExportRangeOrAllPages {
	/**
	 * Exports the page range specified in the page string 
	 * property.
	 */
	EXPORT_RANGE = 1785742674,
	/** Exports all pages. */
	EXPORT_ALL = 1785742657
}

/**
 * The records to merge.
 * @enum
 */
export declare enum RecordSelection {
	/** Merges all records. */
	ALL_RECORDS = 1684881778,
	/** Merges the specified record. */
	ONE_RECORD = 1684885362,
	/** Merges all records in the specified range. */
	RANGE = 1684886130
}

/**
 * The order in which to arrange records in the target 
 * document.
 * @enum
 */
export declare enum ArrangeBy {
	/** Arranges records by row. */
	ROWS_FIRST = 1684886118,
	/** Arranges records by column. */
	COLUMNS_FIRST = 1684882278
}

/**
 * The number of records per page.
 * @enum
 */
export declare enum RecordsPerPage {
	/** Places each record on a new page. */
	SINGLE_RECORD = 1684886386,
	/** Places as many records as fit on a page. */
	MULTIPLE_RECORD = 1684884850
}

/**
 * Options for fitting content to a frame.
 * @enum
 */
export declare enum Fitting {
	/**
	 * Resizes content to fit the frame while preserving content 
	 * proportions. If the content and frame have different 
	 * proportions, some empty space occurs in the frame.
	 */
	PROPORTIONAL = 1684885618,
	/**
	 * Resizes content to fit the frame. Note: Content that is a 
	 * different size than the frame appears stretched or squeezed.
	 */
	FIT_CONTENT_TO_FRAME = 1684883043,
	/** Resizes the frame to fit the content. */
	FIT_FRAME_TO_CONTENT = 1684883046,
	/**
	 * Preserves the original sizes of the frame and the content. 
	 * Note: Content that is larger than the frame is obscured 
	 * around the edges.
	 */
	PRESERVE_SIZES = 1684885619,
	/**
	 * Resizes content to fill the frame while preserving content 
	 * proportions. If the content and frame have different 
	 * proportions, some content is obscured by the bounding box of 
	 * the frame.
	 */
	FILL_PROPORTIONAL = 1684883056
}

/**
 * Data type options for data merge fields.
 * @enum
 */
export declare enum SourceFieldType {
	/** The field can fill a data merge text placeholder. */
	TEXT_FIELD = 1684886630,
	/** The field can fill a data merge image placeholder. */
	IMAGE_FIELD = 1684883814,
	/** The field can fill a data merge QR code placeholder. */
	QRCODE_FIELD = 1684885862
}

/**
 * List type options.
 * @enum
 */
export declare enum ListType {
	/** No list. */
	NO_LIST = 1280601711,
	/** Bullet list. */
	BULLET_LIST = 1280598644,
	/** Numbered list. */
	NUMBERED_LIST = 1280601709
}

/**
 * Bullet character type.
 * @enum
 */
export declare enum BulletCharacterType {
	/** Unicode only. */
	UNICODE_ONLY = 1111717231,
	/** Unicode with font. */
	UNICODE_WITH_FONT = 1111717222,
	/** Glyph with font. */
	GLYPH_WITH_FONT = 1111713638
}

/**
 * Numbering style
 * @enum
 */
export declare enum NumberingStyle {
	/** Upper roman */
	UPPER_ROMAN = 1297247605,
	/** Lower roman */
	LOWER_ROMAN = 1297247596,
	/** Upper letters */
	UPPER_LETTERS = 1296855669,
	/** Lower letters */
	LOWER_LETTERS = 1296855660,
	/** Arabic */
	ARABIC = 1298231906,
	/** Kanji */
	KANJI = 1296788073,
	/** Katakana (a, i, u, e, o...). */
	KATAKANA_MODERN = 1265920877,
	/** Katakana (i, ro, ha, ni...). */
	KATAKANA_TRADITIONAL = 1265920884,
	/** Do not add characters. */
	FORMAT_NONE = 1701733998,
	/** Add single leading zeros. */
	SINGLE_LEADING_ZEROS = 1297312890,
	/** Uses Arabic Alif Ba Tah */
	ARABIC_ALIF_BA_TAH = 1296130420,
	/** Uses Arabic Abjad */
	ARABIC_ABJAD = 1296130410,
	/** Uses Hebrew Biblical */
	HEBREW_BIBLICAL = 1296589410,
	/** Uses Hebrew Non Standard */
	HEBREW_NON_STANDARD = 1296589422,
	/** Add double leading zeros. */
	DOUBLE_LEADING_ZEROS = 1296329850,
	/** Add triple leading zeros. */
	TRIPLE_LEADING_ZEROS = 1297378426
}

/**
 * Restart numbering options.
 * @enum
 */
export declare enum RestartPolicy {
	/**
	 * Restart numbering after any previous (higher) numbering 
	 * level.
	 */
	ANY_PREVIOUS_LEVEL = 1701732720,
	/** Restart numbering after a specific numbering level. */
	AFTER_SPECIFIC_LEVEL = 1701737324,
	/** Restart numbering after any of a range of numbering levels. */
	RANGE_OF_LEVELS = 1701737068
}

/**
 * List alignment options.
 * @enum
 */
export declare enum ListAlignment {
	/** Align left. */
	LEFT_ALIGN = 1818584692,
	/** Align center. */
	CENTER_ALIGN = 1667591796,
	/** Align right. */
	RIGHT_ALIGN = 1919379572
}

/**
 * Chapter number sources.
 * @enum
 */
export declare enum ChapterNumberSources {
	/** User-defined chapter number. */
	USER_DEFINED = 1668183396,
	/** Continue chapter number from previous document. */
	CONTINUE_FROM_PREVIOUS_DOCUMENT = 1668178800,
	/** Chapter number same as previous document. */
	SAME_AS_PREVIOUS_DOCUMENT = 1668182896
}

/**
 * Custom Layout Type Options.
 * @enum
 */
export declare enum CustomLayoutTypeEnum {
	/** Float Left. */
	FLOAT_LEFT = 1181502565,
	/** Float Right. */
	FLOAT_RIGHT = 1181504105,
	/** Alignment And Spacing. */
	ALIGNMENT_AND_SPACING = 1097618288
}

/**
 * Export options for assignment files.
 * @enum
 */
export declare enum AssignmentExportOptions {
	/** Exports frames but does not export content. */
	EMPTY_FRAMES = 1098073446,
	/** Exports only spreads with assigned frames. */
	ASSIGNED_SPREADS = 1098073459,
	/** Exports the entire document. */
	EVERYTHING = 1098073441
}

/**
 * The status of the assigment.
 * @enum
 */
export declare enum AssignmentStatus {
	/** The assignment has not been modified. */
	ASSIGNMENT_UP_TO_DATE = 1096119364,
	/** The assignment has been modified and needs to be updated. */
	ASSIGNMENT_OUT_OF_DATE = 1095724868,
	/** The assignment file is missing. */
	ASSIGNMENT_FILE_MISSING = 1095126387
}

/**
 * The display performance settings to use while scrolling.
 * @enum
 */
export declare enum PanningTypes {
	/**
	 * While scrolling, does not greek images or text; lowest 
	 * quality display with the fastest performance.
	 */
	NO_GREEKING = 1699116368,
	/**
	 * While scrolling, greeks newly revealed images until the 
	 * mouse is released; medium quality display with medium 
	 * performance speed.
	 */
	GREEK_IMAGES = 1699111248,
	/**
	 * While scrolling, greeks newly revealed images and text until 
	 * the mouse is released; highest quality display with the 
	 * slowest performance.
	 */
	GREEK_IMAGES_AND_TEXT = 1699639120
}

/**
 * Options for aligning or distributing objects.
 * @enum
 */
export declare enum AlignDistributeBounds {
	/** Align or distribute to the bounds of the objects. */
	ITEM_BOUNDS = 1416587604,
	/** Align or distribute to the bounds of the page. */
	PAGE_BOUNDS = 1416589377,
	/** Align or distribute to the margins of the page. */
	MARGIN_BOUNDS = 1416588609,
	/** Align or distribute to the bounds of the spread. */
	SPREAD_BOUNDS = 1416590160,
	/** Align or distribute to a key object. */
	KEY_OBJECT = 1699439993
}

/**
 * Options for aligning objects.
 * @enum
 */
export declare enum AlignOptions {
	/** Align the left edges of the objects. */
	LEFT_EDGES = 1281770852,
	/** Align the top edges of the objects. */
	TOP_EDGES = 1416643940,
	/** Align the right edges of the objects. */
	RIGHT_EDGES = 1383351652,
	/** Align the bottom edges of the objects. */
	BOTTOM_EDGES = 1114916196,
	/** Align the horizontal centers of the objects. */
	HORIZONTAL_CENTERS = 1215257187,
	/** Align the vertical centers of the objects. */
	VERTICAL_CENTERS = 1449481315
}

/**
 * Options for distributing objects.
 * @enum
 */
export declare enum DistributeOptions {
	/** Distribute based on the left edges of the objects. */
	LEFT_EDGES = 1281770852,
	/** Distribute based on the top edges of the objects. */
	TOP_EDGES = 1416643940,
	/** Distribute based on the right edges of the objects. */
	RIGHT_EDGES = 1383351652,
	/** Distribute based on the bottom edges of the objects. */
	BOTTOM_EDGES = 1114916196,
	/** Distribute based on the horizontal centers of the objects. */
	HORIZONTAL_CENTERS = 1215257187,
	/** Distribute based on the vertical centers of the objects. */
	VERTICAL_CENTERS = 1449481315,
	/** Distribute based on the horizontal spacing of the objects. */
	HORIZONTAL_SPACE = 1215257203,
	/** Distribute based on the vertical spacing of the objects. */
	VERTICAL_SPACE = 1449489523
}

/**
 * The source type of alternate or actual text
 * @enum
 */
export declare enum SourceType {
	/** Custom Text */
	SOURCE_CUSTOM = 1934902125,
	/** XMP Title */
	SOURCE_XMP_TITLE = 1934907508,
	/** XMP Description */
	SOURCE_XMP_DESCRIPTION = 1934907492,
	/** XMP Headline */
	SOURCE_XMP_HEADLINE = 1934907496,
	/** User specified XMP metadata property */
	SOURCE_XMP_OTHER = 1934907503,
	/** XML Structure */
	SOURCE_XML_STRUCTURE = 1934907507
}

/**
 * The tag type of page item
 * @enum
 */
export declare enum TagType {
	/**
	 * Determine the tag from XML structure, or fallback to 
	 * standard tag
	 */
	TAG_FROM_STRUCTURE = 1952928613,
	/** Tag as artifact */
	TAG_ARTIFACT = 1952924006,
	/** Tag as Story or Figure based on object type */
	TAG_BASED_ON_OBJECT = 1952924271
}

/**
 * File format options for converted images
 * @enum
 */
export declare enum ImageFormat {
	/** Uses JPEG format for selected object. */
	JPEG = 1785751398,
	/** Uses GIF format for selected object. */
	GIF = 1734960742,
	/** Uses PNG format, for selected object. */
	PNG = 1397059687
}

/**
 * Image size option for a converted object
 * @enum
 */
export declare enum ImageSizeOption {
	/** Image size to be used is absolute. */
	SIZE_FIXED = 1182295162,
	/** Image size to be used is relative to the text flow. */
	SIZE_RELATIVE_TO_TEXT_FLOW = 1383486566
}

/**
 * Image resolution for converted object
 * @enum
 */
export declare enum ImageResolution {
	/** 72 pixels per inch */
	PPI_72 = 1920160628,
	/** 96 pixels per inch */
	PPI_96 = 1920159347,
	/** 150 pixels per inch */
	PPI_150 = 1920151654,
	/** 300 pixels per inch */
	PPI_300 = 1920160872
}

/**
 * Type of Image alignment for objects
 * @enum
 */
export declare enum ImageAlignmentType {
	/** image will be aligned left */
	ALIGN_LEFT = 1097616486,
	/** image will be aligned center */
	ALIGN_CENTER = 1097614194,
	/** image will be aligned right */
	ALIGN_RIGHT = 1097618036
}

/**
 * Image Page Break Options.
 * @enum
 */
export declare enum ImagePageBreakType {
	/** Page break before image. */
	PAGE_BREAK_BEFORE = 1114792550,
	/** Page break after image. */
	PAGE_BREAK_AFTER = 1114792294,
	/** Page break before and after image. */
	PAGE_BREAK_BEFORE_AND_AFTER = 1114792545
}

/**
 * size type options.
 * @enum
 */
export declare enum SizeTypeEnum {
	/** None size. */
	NONE_SIZE = 1315925587,
	/** Default size. */
	DEFAULT_SIZE = 1147491177,
	/** Fixed size. */
	FIXED_SIZE = 1181317203,
	/** Relative to text flow. */
	RELATIVE_TO_TEXT_FLOW = 1383289940,
	/** Relative to text size. */
	RELATIVE_TO_TEXT_SIZE = 1383486579,
	/** Use custom width. */
	USE_CUSTOM_WIDTH = 1430476649,
	/** Use custom height. */
	USE_CUSTOM_HEIGHT = 1430472805
}

/**
 * Preserve Appearance from Layout Options
 * @enum
 */
export declare enum PreserveAppearanceFromLayoutEnum {
	/** Export preferences will be honoured */
	PRESERVE_APPEARANCE_DEFAULT = 1349665893,
	/** Exiting image will be used */
	PRESERVE_APPEARANCE_USE_EXISTING_IMAGE = 1349670245,
	/** Container & content both will be rasterized, if can be */
	PRESERVE_APPEARANCE_RASTERIZE_CONTAINER = 1349669490,
	/** Content will be rasterized, if can be */
	PRESERVE_APPEARANCE_RASTERIZE_CONTENT = 1349669492
}

/**
 * Arrowhead alignment types.
 * @enum
 */
export declare enum ArrowHeadAlignmentEnum {
	/**
	 * The arrowhead is inside the path, path geometry changes to 
	 * accomodate arrow heads.
	 */
	INSIDE_PATH = 1634230633,
	/**
	 * The arrowhead is outside the path i.e. path geometry remains 
	 * same.
	 */
	OUTSIDE_PATH = 1634230639
}

/**
 * Performance metric options.
 * @enum
 */
export declare enum PerformanceMetricOptions {
	/** The CPU time. */
	CPU_TIME = 1668314484,
	/** The number of threads. */
	NUMBER_OF_THREADS = 1853122674,
	/** The overall system CPU. */
	OVERALL_SYSTEM_CPU = 1399025781,
	/** The overall user CPU. */
	OVERALL_USER_CPU = 1432580213,
	/** The core allocation count. */
	CORE_ALLOCATION_COUNT = 1128361059,
	/** The core memory size. */
	CORE_MEMORY_SIZE = 1129539962,
	/** The resident memory size. */
	RESIDENT_MEMORY_SIZE = 1381198202,
	/** The virtual memory size. */
	VIRTUAL_MEMORY_SIZE = 1448307066,
	/** The current memory mark. */
	CURRENT_MEMORY_MARK = 1296921195,
	/** The handle count. */
	HANDLE_COUNT = 1212378740,
	/** The GDI object count. */
	GDI_OBJECT_COUNT = 1195657582,
	/** heap allocations */
	HEAP_ALLOCATIONS = 1212247148,
	/** heap allocations peak */
	HEAP_ALLOCATIONS_PEAK = 1212239979,
	/** memory purge count */
	MEMORY_PURGE_COUNT = 1297105780,
	/** memory purge time */
	MEMORY_PURGE_TIME = 1297110125,
	/** BIB Allocations */
	BIB_ALLOCATIONS = 1112097345,
	/** BIB Allocations peak */
	BIB_ALLOCATIONS_PEAK = 1111576683,
	/** BIB cache */
	BIB_CACHE = 1112097379,
	/** BIB cache peak */
	BIB_CACHE_PEAK = 1111707755,
	/** PDF allocactions */
	PDF_ALLOCACTIONS = 1346651713,
	/** PDF allocactions peak */
	PDF_ALLOCACTIONS_PEAK = 1346650475,
	/** image cache allocations */
	IMAGE_CACHE_ALLOCATIONS = 1231897409,
	/** image cache allocations peak */
	IMAGE_CACHE_ALLOCATIONS_PEAK = 1229144427,
	/** image cache file bytes read */
	IMAGE_CACHE_FILE_BYTES_READ = 1231901284,
	/** image cache file bytes written */
	IMAGE_CACHE_FILE_BYTES_WRITTEN = 1231902578,
	/** image cache file read time */
	IMAGE_CACHE_FILE_READ_TIME = 1229148772,
	/** image cache file write time */
	IMAGE_CACHE_FILE_WRITE_TIME = 1229150066,
	/** VXferAlloc */
	VXFERALLOC = 1448633921,
	/** VXferAllocPeak */
	VXFERALLOCPEAK = 1448624491,
	/** VXferBytesRead */
	VXFERBYTESREAD = 1448633938,
	/** VXferBytesWritten */
	VXFERBYTESWRITTEN = 1448633943,
	/** VXferReadTime */
	VXFERREADTIME = 1448628852,
	/** VXferWriteTime */
	VXFERWRITETIME = 1448630132,
	/** VXferFileBytesRead */
	VXFERFILEBYTESREAD = 1447445106,
	/** VXFerFileBytesWritten */
	VXFERFILEBYTESWRITTEN = 1447445111,
	/** process IO bytes read */
	PROCESS_IO_BYTES_READ = 1229935204,
	/** process IO bytes written */
	PROCESS_IO_BYTES_WRITTEN = 1229936498,
	/** AGMXShowTime */
	AGMXSHOWTIME = 1095191924,
	/** database file bytes read */
	DATABASE_FILE_BYTES_READ = 1145197156,
	/** database file bytes written */
	DATABASE_FILE_BYTES_WRITTEN = 1145198450,
	/** database file read time */
	DATABASE_FILE_READ_TIME = 1145197172,
	/** database file write time */
	DATABASE_FILE_WRITE_TIME = 1145198452,
	/** drop shadow memory read time */
	DROP_SHADOW_MEMORY_READ_TIME = 1146311284,
	/** drop shadow memory read bytes */
	DROP_SHADOW_MEMORY_READ_BYTES = 1146311266,
	/** drop shadow memory write time */
	DROP_SHADOW_MEMORY_WRITE_TIME = 1146312564,
	/** drop shadow memory write bytes */
	DROP_SHADOW_MEMORY_WRITE_BYTES = 1146312546,
	/** drop shadow file read time */
	DROP_SHADOW_FILE_READ_TIME = 1145459316,
	/** drop shadow file read bytes */
	DROP_SHADOW_FILE_READ_BYTES = 1145459298,
	/** drop shadow file write time */
	DROP_SHADOW_FILE_WRITE_TIME = 1145460596,
	/** drop shadow file write bytes */
	DROP_SHADOW_FILE_WRITE_BYTES = 1145460578,
	/** change manager update call count */
	CHANGE_MANAGER_UPDATE_CALL_COUNT = 1129137012,
	/** change manager update call time */
	CHANGE_MANAGER_UPDATE_CALL_TIME = 1129141357,
	/** snapshot count */
	SNAPSHOT_COUNT = 1397965684,
	/** galley composition time */
	GALLEY_COMPOSITION_TIME = 1195594861,
	/** layout composition time */
	LAYOUT_COMPOSITION_TIME = 1279480941,
	/** galley composition count */
	GALLEY_COMPOSITION_COUNT = 1195590516,
	/** layout composition count */
	LAYOUT_COMPOSITION_COUNT = 1279476596,
	/** draw manager draw time */
	DRAW_MANAGER_DRAW_TIME = 1145918573,
	/** draw manager number of interrupts */
	DRAW_MANAGER_NUMBER_OF_INTERRUPTS = 1145915758,
	/** snapshot read write time */
	SNAPSHOT_READ_WRITE_TIME = 1397905268,
	/** new snapshot time */
	NEW_SNAPSHOT_TIME = 1397651284,
	/** database new UID count */
	DATABASE_NEW_UID_COUNT = 1145197929,
	/** database instantiate count */
	DATABASE_INSTANTIATE_COUNT = 1145194862,
	/** instance cache purge count */
	INSTANCE_CACHE_PURGE_COUNT = 1229148259,
	/** minisave count */
	MINISAVE_COUNT = 1297302388,
	/** XMP filter time */
	XMP_FILTER_TIME = 1481461876,
	/** snapshot read write byte count */
	SNAPSHOT_READ_WRITE_BYTE_COUNT = 1397905251,
	/** database file page reads */
	DATABASE_FILE_PAGE_READS = 1145194098,
	/** Number of attachable events that have been dispatched. */
	ATTACHABLE_EVENT_COUNT = 1095058292,
	/** Number of attached scripts that have been executed. */
	ATTACHED_SCRIPTS_COUNT = 1095975796,
	/** Total amount of time spent dispatching attachable events. */
	DISPATCH_EVENT_TIME = 1145394285
}

/**
 * SWF export background options.
 * @enum
 */
export declare enum SWFBackgroundOptions {
	/** Transparent background. */
	TRANSPARENT_SWF_BACKGROUND = 1935828852,
	/** Paper color background. */
	PAPER_COLOR = 1935831139
}

/**
 * XFL rasterize format options.
 * @enum
 */
export declare enum XFLRasterizeFormatOptions {
	/** Uses JPEG format when rasterizes. */
	JPEG = 1785751398,
	/** Uses GIF format when rasterizes. */
	GIF = 1734960742,
	/** Uses PNG format when rasterizes. */
	PNG = 1397059687,
	/** Uses the best format based on the image when rasterizes. */
	AUTOMATIC = 1768059764
}

/**
 * The ease option.
 * @enum
 */
export declare enum AnimationEaseOptions {
	/** no easing. */
	NO_EASE = 2051960645,
	/** simple ease in. */
	EASE_IN = 2051371849,
	/** simple ease out. */
	EASE_OUT = 2051371855,
	/** simple ease in and out. */
	EASE_IN_OUT = 2051361103,
	/** cutom read only ease type. */
	CUSTOM_EASE = 2051363407
}

/**
 * The event that triggers a list of dynamic target objects to 
 * play.
 * @enum
 */
export declare enum DynamicTriggerEvents {
	/** target is triggered on loading of the page. */
	ON_PAGE_LOAD = 1953321036,
	/** target is triggered on clicking on the page. */
	ON_PAGE_CLICK = 1953321027,
	/**
	 * target is triggered on loading of the state in a multi-state 
	 * object.
	 */
	ON_STATE_LOAD = 1953321804,
	/** target is triggered on a button or self click. */
	ON_CLICK = 1953317740,
	/** target is triggered on a button or self rollover. */
	ON_ROLLOVER = 1953321590,
	/** target is triggered on a button release. */
	ON_RELEASE = 1953321580,
	/** target is triggered on a button rolloff. */
	ON_ROLLOFF = 1953321574,
	/** target is triggered on self click. */
	ON_SELF_CLICK = 1951613804,
	/** target is triggered on self rollover. */
	ON_SELF_ROLLOVER = 1951617638
}

/**
 * The page transition type options.
 * @enum
 */
export declare enum PageTransitionTypeOptions {
	/** No page transition applied. */
	NONE = 1852796517,
	/** The Blinds page transition. */
	BLINDS_TRANSITION = 1886667372,
	/** The Blinds page transition. */
	BOX_TRANSITION = 1886667384,
	/** The Comb page transition. */
	COMB_TRANSITION = 1886667618,
	/** The Cover page transition. */
	COVER_TRANSITION = 1886667638,
	/** The Dissolve page transition. */
	DISSOLVE_TRANSITION = 1886667891,
	/** The Fade page transition. */
	FADE_TRANSITION = 1886668388,
	/** The Page Turn page transition. */
	PAGE_TURN_TRANSITION = 1886670932,
	/** The Push page transition. */
	PUSH_TRANSITION = 1886670963,
	/** The Split page transition. */
	SPLIT_TRANSITION = 1886671728,
	/** The Uncover page transition. */
	UNCOVER_TRANSITION = 1886672227,
	/** The Wipe page transition. */
	WIPE_TRANSITION = 1886672752,
	/** The Zoom In page transition. */
	ZOOM_IN_TRANSITION = 1886673481,
	/** The Zoom Out page transition. */
	ZOOM_OUT_TRANSITION = 1886673487
}

/**
 * The page transition direction options.
 * @enum
 */
export declare enum PageTransitionDirectionOptions {
	/** Direction does not apply. */
	NOT_APPLICABLE = 1886670401,
	/** The top to bottom direction. */
	DOWN = 1181971556,
	/** The right to left direction. */
	RIGHT_TO_LEFT = 1920232546,
	/** The down and left direction. */
	LEFT_DOWN = 1886669892,
	/** The up and left direction. */
	LEFT_UP = 1886669909,
	/** The left to right direction. */
	LEFT_TO_RIGHT = 1819570786,
	/** The down and right direction. */
	RIGHT_DOWN = 1886671428,
	/** The up and right direction. */
	RIGHT_UP = 1886671445,
	/** The bottom to top direction. */
	UP = 1181971566,
	/** The inward direction. */
	IN = 1768824864,
	/** The outward direction. */
	OUT = 1886670708,
	/** The horizontal direction. */
	HORIZONTAL = 1752134266,
	/** The vertical direction. */
	VERTICAL = 1986359924,
	/** The horizontal inward direction. */
	HORIZONTAL_IN = 1886668873,
	/** The horizontal outward direction. */
	HORIZONTAL_OUT = 1886668879,
	/** The vertical inward direction. */
	VERTICAL_IN = 1886672457,
	/** The vertical outward direction. */
	VERTICAL_OUT = 1886672463
}

/**
 * SWF raster compression options.
 * @enum
 */
export declare enum RasterCompressionOptions {
	/** Uses JPEG compression. */
	JPEG_COMPRESSION = 1936878179,
	/** Uses the best quality type. */
	LOSSLESS_COMPRESSION = 1936878691,
	/**
	 * Uses JPEG compression and automatically determines the best 
	 * quality type.
	 */
	AUTOMATIC_COMPRESSION = 1936875875
}

/**
 * Dynamic documents JPEG Quality options.
 * @enum
 */
export declare enum DynamicDocumentsJPEGQualityOptions {
	/** Uses minimum JPEG compression. */
	MINIMUM = 1701727598,
	/** Uses low JPEG compression. */
	LOW = 1701727351,
	/** Uses medium JPEG compression. */
	MEDIUM = 1701727588,
	/** Uses high JPEG compression. */
	HIGH = 1701726313,
	/** Uses maximum JPEG compression. */
	MAXIMUM = 1701727608
}

/**
 * Dynamic documents text export policy.
 * @enum
 */
export declare enum DynamicDocumentsTextExportPolicy {
	/** Text is exported as live text. */
	LIVE = 1952804972,
	/** Text is to be rasterized. */
	RASTERIZE = 1952804978,
	/** Text is to be vectorized. */
	VECTORIZE = 1952804982,
	/** Text is exported as Text Layout Framework text. */
	TLF = 1952804980
}

/**
 * Fit method settings.
 * @enum
 */
export declare enum FitMethodSettings {
	/** Fit to predefined settings. */
	FIT_PREDEFINED_SETTINGS = 1684301427,
	/** Fit to given width and height. */
	FIT_GIVEN_WIDTH_AND_HEIGHT = 1684305768,
	/** Fit to given scale percentage. */
	FIT_GIVEN_SCALE_PERCENTAGE = 1684304739
}

/**
 * Options for fitting to dimension.
 * @enum
 */
export declare enum FitDimension {
	/** Fit to 1280x800 dimension. */
	FIT1280X800 = 1718906725,
	/** Fit to 1240x620 dimension. */
	FIT1240X620 = 1718908023,
	/** Fit to 1024x768 dimension. */
	FIT1024X768 = 1718906726,
	/** Fit to 984x588 dimension. */
	FIT984X588 = 1718906470,
	/** Fit to 800x600 dimension. */
	FIT800X600 = 1718904179,
	/** Fit to 760x420 dimension. */
	FIT760X420 = 1718907750,
	/** Fit to 640x480 dimension. */
	FIT640X480 = 1718907753,
	/** Fit to 600x300 dimension. */
	FIT600X300 = 1718907764
}

/**
 * The page transition duration options.
 * @enum
 */
export declare enum PageTransitionDurationOptions {
	/** Fast duration. */
	FAST = 1180791668,
	/** Medium duration. */
	MEDIUM = 1701727588,
	/** Slow duration. */
	SLOW = 1886671692
}

/**
 * SWF curve quality values.
 * @enum
 */
export declare enum SWFCurveQualityValue {
	/** Minimum curve quality. */
	MINIMUM = 1701727598,
	/** Low curve quality. */
	LOW = 1701727351,
	/** Medium curve quality. */
	MEDIUM = 1701727588,
	/** High curve quality. */
	HIGH = 1701726313,
	/** Maximum curve quality. */
	MAXIMUM = 1701727608
}

/**
 * Dynamic media handling options.
 * @enum
 */
export declare enum DynamicMediaHandlingOptions {
	/** Include all interactive elements. */
	INCLUDE_ALL_MEDIA = 1231241580,
	/** Draw interactive elements appearance only. */
	APPEARANCE_ONLY = 1097887823
}

/**
 * The animation design options.
 * @enum
 */
export declare enum DesignOptions {
	/**
	 * Uses the current object's properties as the starting 
	 * appearance of the animation at runtime.
	 */
	FROM_CURRENT_APPEARANCE = 1634551405,
	/**
	 * Uses the current object's properties as the end appearance 
	 * of the animation at runtime.
	 */
	TO_CURRENT_APPEARANCE = 1634554991,
	/**
	 * Uses the current object's properties as the starting 
	 * appearance, and current position as the end location of the 
	 * animation at runtime.
	 */
	TO_CURRENT_LOCATION = 1634553702
}

/**
 * Options for the condition indicator method.
 * @enum
 */
export declare enum ConditionIndicatorMethod {
	/** Underlines conditional text. */
	USE_UNDERLINE = 1700097644,
	/** Highlights conditional text. */
	USE_HIGHLIGHT = 1699244391
}

/**
 * Options for the condition underline indicator appearance.
 * @enum
 */
export declare enum ConditionUnderlineIndicatorAppearance {
	/** Wavy underline. */
	WAVY = 1937208953,
	/** Solid underline. */
	SOLID = 1936682084,
	/** Dashed underline. */
	DASHED = 1684108136
}

/**
 * Condition indicator mode options.
 * @enum
 */
export declare enum ConditionIndicatorMode {
	/** Condition indicators show only. */
	SHOW_INDICATORS = 1698908531,
	/** Conditions indicators show and print. */
	SHOW_AND_PRINT_INDICATORS = 1698908528,
	/** Conditions indicators hide. */
	HIDE_INDICATORS = 1698908520
}

/**
 * Style Type
 * @enum
 */
export declare enum StyleType {
	/** Character Style */
	CHARACTER_STYLE_TYPE = 1665684340,
	/** Paragraph Style */
	PARAGRAPH_STYLE_TYPE = 1883730548
}

/**
 * The smooth scrolling option.
 * @enum
 */
export declare enum SmoothScrollingOptions {
	/** no smooth scrolling. */
	NO_SMOOTH_SCROLL = 1699959662,
	/** vertical smooth scrolling. */
	VERTICAL = 1986359924,
	/** horizontal smooth scrolling. */
	HORIZONTAL = 1752134266,
	/** vertical and horizontal smooth scrolling. */
	VERTICAL_AND_HORIZONTAL = 1699959650
}

/**
 * The folio orientation option.
 * @enum
 */
export declare enum FolioOrientationOptions {
	/** portrait orientation only. */
	PORTRAIT = 1751738216,
	/** landscape orientation only. */
	LANDSCAPE = 2003395685,
	/** both portrait and landscape orientations. */
	PORTRAIT_AND_LANDSCAPE = 1699303266,
	/**
	 * automatic - determine orientation based on the orientation 
	 * of the mini folios.
	 */
	AUTO = 1635019116
}

/**
 * The folio binding direction option.
 * @enum
 */
export declare enum FolioBindingDirectionOptions {
	/** left-edge binding. */
	LEFT = 1835102828,
	/** right-edge binding. */
	RIGHT = 1835102834
}

/**
 * The versions that are available.
 * @enum
 */
export declare enum DigpubVersion {
	/** plugin, folio and plist versions in that order. */
	ALL = 1634495520,
	/** plugin version. */
	PLUGIN = 1685090412,
	/** folio version. */
	FOLIO = 1685087862,
	/** plist version. */
	PLIST = 1685090422
}

/**
 * The device types that are attached.
 * @enum
 */
export declare enum AttachedDevices {
	/** all devices, Android followed by iOS. */
	ALL = 1634495520,
	/** Android devices. */
	ANDROID = 1685086564,
	/** iOS devices. */
	IOS = 1684631411
}

/**
 * The version of the plugin and article that are available.
 * @enum
 */
export declare enum DigpubArticleVersion {
	/** plugin and article versions in that order. */
	ALL = 1634495520,
	/** plugin version. */
	PLUGIN = 1685090412,
	/** article version. */
	ARTICLE = 1685078390
}

/**
 * Choices for export order of epub and html.
 * @enum
 */
export declare enum ExportOrder {
	/** based on document layout. */
	LAYOUT_ORDER = 1700949113,
	/** based on article defined in article panel. */
	ARTICLE_PANEL_ORDER = 1700946288,
	/** based on XML structure. */
	XML_STRUCTURE_ORDER = 1700952179
}

/**
 * EPub export option for cover image.
 * @enum
 */
export declare enum EpubCover {
	/** no cover image. */
	NONE = 1852796517,
	/** Rasterize first page as cover image. */
	FIRST_PAGE = 1700947536,
	/** Use external image as cover image. */
	EXTERNAL_IMAGE = 1700952169
}

/**
 * Options for export unorder list.
 * @enum
 */
export declare enum BulletListExportOption {
	/** map to html unordered list. */
	UNORDERED_LIST = 1700949333,
	/** convert to text. */
	AS_TEXT = 1700946804
}

/**
 * Options for export order list.
 * @enum
 */
export declare enum NumberedListExportOption {
	/** map to html ordered list. */
	ORDERED_LIST = 1700949359,
	/** convert to text. */
	AS_TEXT = 1700946804
}

/**
 * EPub export option for epub version.
 * @enum
 */
export declare enum EpubVersion {
	/** EPUB 2.0.1. */
	EPUB2 = 1702257970,
	/** EPUB 3.0. */
	EPUB3 = 1702257971
}

/**
 * Choices for export image.
 * @enum
 */
export declare enum ImageExportOption {
	/** original image. */
	ORIGINAL_IMAGE = 1700949874,
	/** optimized image. */
	OPTIMIZED_IMAGE = 1700949872,
	/** link to server. */
	LINK_TO_SERVER = 1700949107
}

/**
 * Choices for footnote placement.
 * @enum
 */
export declare enum EPubFootnotePlacement {
	/** Footnote after story. */
	FOOTNOTE_AFTER_STORY = 1701213267,
	/** Footnote after paragraph. */
	FOOTNOTE_AFTER_PARAGRAPH = 1701213296,
	/** Footnote inside popup. */
	FOOTNOTE_INSIDE_POPUP = 1701213235
}

/**
 * Choices for page range format for export.
 * @enum
 */
export declare enum PageRangeFormat {
	/** export all pages. */
	EXPORT_ALL_PAGES = 1700883568,
	/** export page ranges. */
	EXPORT_PAGE_RANGE = 1700951410
}

/**
 * Choices for epub navigation style.
 * @enum
 */
export declare enum EpubNavigationStyle {
	/** No navigation. */
	NO_NAVIGATION = 1701736054,
	/** File name based navigation */
	FILENAME_NAVIGATION = 1701211766,
	/** TOC style based navigation */
	TOC_STYLE_NAVIGATION = 1702129270,
	/** Bookmarks based navigation */
	BOOKMARKS_NAVIGATION = 1700949622
}

/**
 * Choices for spread control for fixed layout EPub.
 * @enum
 */
export declare enum EpubFixedLayoutSpreadControl {
	/** Spreads based on document. */
	SPREADS_BASED_ON_DOC = 1700949860,
	/** Physical spreads. */
	PHYSICAL_SPREADS = 1701865593,
	/** Synthetic spreads. */
	SYNTHETIC_SPREADS = 1702066542,
	/** No spreads. */
	NO_SPREADS = 1702063727
}

/**
 * Choices for publish format.
 * @enum
 */
export declare enum PublishFormatEnum {
	/** publish by pages. */
	PUBLISH_BY_PAGES = 1700950134,
	/** publish by spread. */
	PUBLISH_BY_SPREAD = 1700950902
}

/**
 * publish export option for cover image.
 * @enum
 */
export declare enum PublishCoverEnum {
	/** Rasterize first page as cover image. */
	FIRST_PAGE = 1700947536,
	/** Use external image as cover image. */
	EXTERNAL_IMAGE = 1700952169,
	/** Rasterize chosen page as cover image. */
	CHOSEN_PAGE = 1701013072
}

/**
 * Mapping type for style mappings.
 * @enum
 */
export declare enum MapType {
	/** style to style mapping rule. */
	STYLE_MAPPING_RULE = 1937011570,
	/** group to group mapping rule. */
	GROUP_MAPPING_RULE = 1735681906,
	/** style to group mapping rule. */
	STYLE_TO_GROUP_MAPPING_RULE = 1937008498,
	/** group to style mapping rule. */
	GROUP_TO_STYLE_MAPPING_RULE = 1735684978
}

/**
 * Paragraph direction.
 * @enum
 */
export declare enum ParagraphDirectionOptions {
	/** Left to Right paragraph direction */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,
	/** Right to Left paragraph direction */
	RIGHT_TO_LEFT_DIRECTION = 1379028068
}

/**
 * Paragraph justification.
 * @enum
 */
export declare enum ParagraphJustificationOptions {
	/** Default justification */
	DEFAULT_JUSTIFICATION = 1886020709,
	/** Arabic justification */
	ARABIC_JUSTIFICATION = 1886019954,
	/** Naskh justification */
	NASKH_JUSTIFICATION = 1886023265,
	/** Kashidas without Stretched Connections. */
	NASKH_TATWEEL_JUSTIFICATION = 1886023284,
	/**
	 * Kashidas. Use naskh justification if you want to also use 
	 * Justifcation Alternates.
	 */
	NASKH_KASHIDA_JUSTIFICATION = 1886023275,
	/** Fractional Kashidas without Stretched Connections. */
	NASKH_TATWEEL_JUSTIFICATION_FRAC = 1886021236,
	/**
	 * Fractional Kashidas. Use naskh justification if you want to 
	 * also use Justifcation Alternates.
	 */
	NASKH_KASHIDA_JUSTIFICATION_FRAC = 1886021227
}

/**
 * Character direction.
 * @enum
 */
export declare enum CharacterDirectionOptions {
	/** Default direction */
	DEFAULT_DIRECTION = 1147496036,
	/** Left to right direction */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,
	/** Right to left direction */
	RIGHT_TO_LEFT_DIRECTION = 1379028068
}

/**
 * Digits type options.
 * @enum
 */
export declare enum DigitsTypeOptions {
	/** Default digits */
	DEFAULT_DIGITS = 1684628581,
	/** Arabic digits */
	ARABIC_DIGITS = 1684627826,
	/** Hindi digits */
	HINDI_DIGITS = 1684629609,
	/** Farsi digits */
	FARSI_DIGITS = 1684629089,
	/** native digits */
	NATIVE_DIGITS = 1684631137,
	/** Full Farsi digits */
	FULL_FARSI_DIGITS = 1684629094,
	/** Thai digits */
	THAI_DIGITS = 1684632680,
	/** Lao digits */
	LAO_DIGITS = 1684630625,
	/** Devanagari digits */
	DEVANAGARI_DIGITS = 1684628598,
	/** Bengali digits */
	BENGALI_DIGITS = 1684628069,
	/** Gurmukhi digits */
	GURMUKHI_DIGITS = 1684629357,
	/** Gujarati digits */
	GUJARATI_DIGITS = 1684629354,
	/** Oriya digits */
	ORIYA_DIGITS = 1684631410,
	/** Tamil digits */
	TAMIL_DIGITS = 1684632673,
	/** Telugu digits */
	TELUGU_DIGITS = 1684632677,
	/** Kannada digits */
	KANNADA_DIGITS = 1684630369,
	/** Malayalam digits */
	MALAYALAM_DIGITS = 1684630881,
	/** Tibetan digits */
	TIBETAN_DIGITS = 1684632681,
	/** Khmer digits */
	KHMER_DIGITS = 1684630376,
	/** Burmese digits */
	BURMESE_DIGITS = 1684628085
}

/**
 * Kashidas.
 * @enum
 */
export declare enum KashidasOptions {
	/** Default kashidas */
	DEFAULT_KASHIDAS = 1801544805,
	/** Kashidas off */
	KASHIDAS_OFF = 1801547622
}

/**
 * Diacritic position.
 * @enum
 */
export declare enum DiacriticPositionOptions {
	/** Default position */
	DEFAULT_POSITION = 1685090150,
	/** Loose position */
	LOOSE_POSITION = 1685089391,
	/** Medium position */
	MEDIUM_POSITION = 1685089637,
	/** Tight position */
	TIGHT_POSITION = 1685091433,
	/** OpenType position */
	OPENTYPE_POSITION = 1685090164,
	/** OpenType position from baseline */
	OPENTYPE_POSITION_FROM_BASELINE = 1685090146
}

/**
 * Table direction options.
 * @enum
 */
export declare enum TableDirectionOptions {
	/** Set left to right table direction */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,
	/** Set right to left table direction */
	RIGHT_TO_LEFT_DIRECTION = 1379028068
}

/**
 * A hyperlink.
 * @class
 */
export declare class Hyperlink {
	/** If true, the hyperlink is hidden. */
	readonly hidden: boolean;
	/** The unique ID of the Hyperlink. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Hyperlink (a Document). */
	readonly parent: Document;
	/** The index of the Hyperlink within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the Hyperlink. */
	name: string;
	/**
	 * The hyperlinked text or page item. Can return: 
	 * HyperlinkPageItemSource, HyperlinkTextSource or 
	 * CrossReferenceSource.
	 */
	source: any;
	/** If true, the Hyperlink is visible. */
	visible: boolean;
	/** The hyperlink highlight style. */
	highlight: HyperlinkAppearanceHighlight;
	/** The stroke weight of the hyperlink border. */
	width: HyperlinkAppearanceWidth;
	/**
	 * The hyperlink border color. Can return: Array of 3 Reals (0 
	 * - 255) or UIColors enumerator.
	 */
	borderColor: any;
	/** The hyperlink border style. */
	borderStyle: HyperlinkAppearanceStyle;
	/**
	 * The text, page, or URL that the hyperlink points to. Can 
	 * return: HyperlinkTextDestination, HyperlinkPageDestination, 
	 * HyperlinkExternalPageDestination, HyperlinkURLDestination or 
	 * ParagraphDestination.
	 */
	destination: any;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Hyperlink. */
	remove(): void;
	/** Jumps to the hyperlink source. */
	showSource(): void;
	/** Jumps to the hyperlink destination. */
	showDestination(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Hyperlink.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Hyperlink;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of hyperlinks.
 * @class
 */
export declare class Hyperlinks {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new hyperlink.
	 * @param {any} hyperlinkSource - The hyperlinked object. Can 
	 * accept: HyperlinkPageItemSource, HyperlinkTextSource or 
	 * CrossReferenceSource.
	 * @param {any} hyperlinkDestination - The destination that the 
	 * hyperlink points to. Can accept: Ordered array containing 
	 * fileName:String, volumn:String, directoryId:Long Integer, 
	 * dataLinkClassId:Long Integer, destinationUid:Long Integer, 
	 * HyperlinkTextDestination, HyperlinkPageDestination, 
	 * HyperlinkExternalPageDestination, HyperlinkURLDestination or 
	 * ParagraphDestination. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Hyperlink (Optional)
	 */
	add(hyperlinkSource: any, hyperlinkDestination: any, withProperties: Object): Hyperlink;
	/** Displays the number of elements in the Hyperlink. */
	count(): number;
	/**
	 * Returns the Hyperlink with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Hyperlink;
	/**
	 * Returns the Hyperlink with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Hyperlink;
	/**
	 * Returns the Hyperlink with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Hyperlink;
	/**
	 * Returns the Hyperlinks within the specified range.
	 * @param {any} _from - The Hyperlink, index, or name at the 
	 * beginning of the range. Can accept: Hyperlink, Long Integer 
	 * or String.
	 * @param {any} to - The Hyperlink, index, or name at the end 
	 * of the range. Can accept: Hyperlink, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Hyperlink;
	/** Returns the first Hyperlink in the collection. */
	firstItem(): Hyperlink;
	/** Returns the last Hyperlink in the collection. */
	lastItem(): Hyperlink;
	/** Returns the middle Hyperlink in the collection. */
	middleItem(): Hyperlink;
	/**
	 * Returns the Hyperlink with the index previous to the 
	 * specified index.
	 * @param {Hyperlink} obj - The index of the Hyperlink that 
	 * follows the desired Hyperlink.
	 */
	previousItem(obj: Hyperlink): Hyperlink;
	/**
	 * Returns the Hyperlink whose index follows the specified 
	 * Hyperlink in the collection.
	 * @param {Hyperlink} obj - The Hyperlink whose index comes 
	 * before the desired Hyperlink.
	 */
	nextItem(obj: Hyperlink): Hyperlink;
	/** Returns any Hyperlink in the collection. */
	anyItem(): Hyperlink;
	/** Returns every Hyperlink in the collection. */
	everyItem(): Hyperlink;
	/**
	 * Generates a string which, if executed, will return the 
	 * Hyperlink.
	 */
	toSource(): string;
	/**
	 * Returns the Hyperlink with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Hyperlink;
}

/**
 * A bookmark.
 * @class
 */
export declare class Bookmark {
	/** The indent level of the bookmark. */
	readonly indent: number;
	/**
	 * The destination that the hyperlink points to. Can return: 
	 * HyperlinkTextDestination, HyperlinkPageDestination, 
	 * HyperlinkExternalPageDestination or Page.
	 */
	readonly destination: any;
	/** The unique ID of the Bookmark. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Bookmark (a Document or Bookmark). */
	readonly parent: any;
	/** The index of the Bookmark within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of bookmarks. */
	readonly bookmarks: Bookmarks;
	/** The name of the Bookmark. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Bookmark. */
	remove(): void;
	/**
	 * Moves the bookmark to the specified location.
	 * @param {LocationOptions} to - The bookmark location relative 
	 * to the reference object or within the containing object. 
	 * (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Bookmark, Document or Bookmark. (Optional)
	 */
	move(to?: LocationOptions, reference?: any): Bookmark;
	/** Go to the bookmark. */
	showBookmark(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Bookmark.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Bookmark;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of bookmarks.
 * @class
 */
export declare class Bookmarks {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new bookmark.
	 * @param {any} destination - The bookmark destination. Can 
	 * accept: HyperlinkTextDestination, HyperlinkPageDestination, 
	 * HyperlinkExternalPageDestination or Page.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Bookmark (Optional)
	 */
	add(destination: any, withProperties: Object): Bookmark;
	/** Displays the number of elements in the Bookmark. */
	count(): number;
	/**
	 * Returns the Bookmark with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Bookmark;
	/**
	 * Returns the Bookmark with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Bookmark;
	/**
	 * Returns the Bookmark with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Bookmark;
	/**
	 * Returns the Bookmarks within the specified range.
	 * @param {any} _from - The Bookmark, index, or name at the 
	 * beginning of the range. Can accept: Bookmark, Long Integer 
	 * or String.
	 * @param {any} to - The Bookmark, index, or name at the end of 
	 * the range. Can accept: Bookmark, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Bookmark;
	/** Returns the first Bookmark in the collection. */
	firstItem(): Bookmark;
	/** Returns the last Bookmark in the collection. */
	lastItem(): Bookmark;
	/** Returns the middle Bookmark in the collection. */
	middleItem(): Bookmark;
	/**
	 * Returns the Bookmark with the index previous to the 
	 * specified index.
	 * @param {Bookmark} obj - The index of the Bookmark that 
	 * follows the desired Bookmark.
	 */
	previousItem(obj: Bookmark): Bookmark;
	/**
	 * Returns the Bookmark whose index follows the specified 
	 * Bookmark in the collection.
	 * @param {Bookmark} obj - The Bookmark whose index comes 
	 * before the desired Bookmark.
	 */
	nextItem(obj: Bookmark): Bookmark;
	/** Returns any Bookmark in the collection. */
	anyItem(): Bookmark;
	/** Returns every Bookmark in the collection. */
	everyItem(): Bookmark;
	/**
	 * Generates a string which, if executed, will return the 
	 * Bookmark.
	 */
	toSource(): string;
	/**
	 * Returns the Bookmark with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Bookmark;
}

/**
 * A hyperlinked page item.
 * @class
 */
export declare class HyperlinkPageItemSource {
	/** If true, the hyperlink is hidden. */
	readonly hidden: boolean;
	/** The unique ID of the HyperlinkPageItemSource. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the HyperlinkPageItemSource (a Document). */
	readonly parent: Document;
	/**
	 * The index of the HyperlinkPageItemSource within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the HyperlinkPageItemSource. */
	name: string;
	/** The hyperlinked page item. */
	sourcePageItem: PageItem;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the HyperlinkPageItemSource. */
	remove(): void;
	/** Jumps to the hyperlink source. */
	showSource(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkPageItemSource.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HyperlinkPageItemSource;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of hyperlink page item sources.
 * @class
 */
export declare class HyperlinkPageItemSources {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new hyperlink page item source.
	 * @param {PageItem} source - The page item to hyperlink.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new HyperlinkPageItemSource (Optional)
	 */
	add(source: PageItem, withProperties: Object): HyperlinkPageItemSource;
	/**
	 * Displays the number of elements in the 
	 * HyperlinkPageItemSource.
	 */
	count(): number;
	/**
	 * Returns the HyperlinkPageItemSource with the specified index 
	 * or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): HyperlinkPageItemSource;
	/**
	 * Returns the HyperlinkPageItemSource with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): HyperlinkPageItemSource;
	/**
	 * Returns the HyperlinkPageItemSource with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): HyperlinkPageItemSource;
	/**
	 * Returns the HyperlinkPageItemSources within the specified 
	 * range.
	 * @param {any} _from - The HyperlinkPageItemSource, index, or 
	 * name at the beginning of the range. Can accept: 
	 * HyperlinkPageItemSource, Long Integer or String.
	 * @param {any} to - The HyperlinkPageItemSource, index, or 
	 * name at the end of the range. Can accept: 
	 * HyperlinkPageItemSource, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): HyperlinkPageItemSource;
	/**
	 * Returns the first HyperlinkPageItemSource in the collection.
	 */
	firstItem(): HyperlinkPageItemSource;
	/** Returns the last HyperlinkPageItemSource in the collection. */
	lastItem(): HyperlinkPageItemSource;
	/**
	 * Returns the middle HyperlinkPageItemSource in the 
	 * collection.
	 */
	middleItem(): HyperlinkPageItemSource;
	/**
	 * Returns the HyperlinkPageItemSource with the index previous 
	 * to the specified index.
	 * @param {HyperlinkPageItemSource} obj - The index of the 
	 * HyperlinkPageItemSource that follows the desired 
	 * HyperlinkPageItemSource.
	 */
	previousItem(obj: HyperlinkPageItemSource): HyperlinkPageItemSource;
	/**
	 * Returns the HyperlinkPageItemSource whose index follows the 
	 * specified HyperlinkPageItemSource in the collection.
	 * @param {HyperlinkPageItemSource} obj - The 
	 * HyperlinkPageItemSource whose index comes before the desired 
	 * HyperlinkPageItemSource.
	 */
	nextItem(obj: HyperlinkPageItemSource): HyperlinkPageItemSource;
	/** Returns any HyperlinkPageItemSource in the collection. */
	anyItem(): HyperlinkPageItemSource;
	/** Returns every HyperlinkPageItemSource in the collection. */
	everyItem(): HyperlinkPageItemSource;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkPageItemSource.
	 */
	toSource(): string;
	/**
	 * Returns the HyperlinkPageItemSource with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: HyperlinkPageItemSource;
}

/**
 * A hyperlinked text object or insertion point.
 * @class
 */
export declare class HyperlinkTextSource {
	/** If true, the hyperlink is hidden. */
	readonly hidden: boolean;
	/** The unique ID of the HyperlinkTextSource. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the HyperlinkTextSource (a Document). */
	readonly parent: Document;
	/**
	 * The index of the HyperlinkTextSource within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the HyperlinkTextSource. */
	name: string;
	/** The hyperlinked text or insertion point. */
	sourceText: Text;
	/** Character style of the hyperlink text source. */
	appliedCharacterStyle: CharacterStyle;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the HyperlinkTextSource. */
	remove(): void;
	/** Jumps to the hyperlink source. */
	showSource(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkTextSource.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HyperlinkTextSource;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of hyperlink text sources.
 * @class
 */
export declare class HyperlinkTextSources {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new hyperlink text source.
	 * @param {Text} source - The text or insertion point to 
	 * hyperlink.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new HyperlinkTextSource (Optional)
	 */
	add(source: Text, withProperties: Object): HyperlinkTextSource;
	/** Displays the number of elements in the HyperlinkTextSource. */
	count(): number;
	/**
	 * Returns the HyperlinkTextSource with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): HyperlinkTextSource;
	/**
	 * Returns the HyperlinkTextSource with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): HyperlinkTextSource;
	/**
	 * Returns the HyperlinkTextSource with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): HyperlinkTextSource;
	/**
	 * Returns the HyperlinkTextSources within the specified range.
	 * @param {any} _from - The HyperlinkTextSource, index, or name 
	 * at the beginning of the range. Can accept: 
	 * HyperlinkTextSource, Long Integer or String.
	 * @param {any} to - The HyperlinkTextSource, index, or name at 
	 * the end of the range. Can accept: HyperlinkTextSource, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): HyperlinkTextSource;
	/** Returns the first HyperlinkTextSource in the collection. */
	firstItem(): HyperlinkTextSource;
	/** Returns the last HyperlinkTextSource in the collection. */
	lastItem(): HyperlinkTextSource;
	/** Returns the middle HyperlinkTextSource in the collection. */
	middleItem(): HyperlinkTextSource;
	/**
	 * Returns the HyperlinkTextSource with the index previous to 
	 * the specified index.
	 * @param {HyperlinkTextSource} obj - The index of the 
	 * HyperlinkTextSource that follows the desired 
	 * HyperlinkTextSource.
	 */
	previousItem(obj: HyperlinkTextSource): HyperlinkTextSource;
	/**
	 * Returns the HyperlinkTextSource whose index follows the 
	 * specified HyperlinkTextSource in the collection.
	 * @param {HyperlinkTextSource} obj - The HyperlinkTextSource 
	 * whose index comes before the desired HyperlinkTextSource.
	 */
	nextItem(obj: HyperlinkTextSource): HyperlinkTextSource;
	/** Returns any HyperlinkTextSource in the collection. */
	anyItem(): HyperlinkTextSource;
	/** Returns every HyperlinkTextSource in the collection. */
	everyItem(): HyperlinkTextSource;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkTextSource.
	 */
	toSource(): string;
	/**
	 * Returns the HyperlinkTextSource with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: HyperlinkTextSource;
}

/**
 * A hyperlink destination that is either text or an insertion 
 * point.
 * @class
 */
export declare class HyperlinkTextDestination {
	/** If true, the hyperlink is hidden. */
	readonly hidden: boolean;
	/** The unique ID of the HyperlinkTextDestination. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the HyperlinkTextDestination (a Document). */
	readonly parent: Document;
	/**
	 * The index of the HyperlinkTextDestination within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the HyperlinkTextDestination. */
	name: string;
	/**
	 * The text or insertion point that the hyperlink points to. 
	 * Can also accept: Text.
	 */
	destinationText: InsertionPoint;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the HyperlinkTextDestination. */
	remove(): void;
	/** Jumps to the hyperlink destination. */
	showDestination(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkTextDestination.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HyperlinkTextDestination;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of hyperlink text destinations.
 * @class
 */
export declare class HyperlinkTextDestinations {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new hyperlink text destination.
	 * @param {Text} destination - The text or insertion point 
	 * location that the hyperlink points to.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new HyperlinkTextDestination (Optional)
	 */
	add(destination: Text, withProperties: Object): HyperlinkTextDestination;
	/**
	 * Displays the number of elements in the 
	 * HyperlinkTextDestination.
	 */
	count(): number;
	/**
	 * Returns the HyperlinkTextDestination with the specified 
	 * index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): HyperlinkTextDestination;
	/**
	 * Returns the HyperlinkTextDestination with the specified 
	 * name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): HyperlinkTextDestination;
	/**
	 * Returns the HyperlinkTextDestination with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): HyperlinkTextDestination;
	/**
	 * Returns the HyperlinkTextDestinations within the specified 
	 * range.
	 * @param {any} _from - The HyperlinkTextDestination, index, or 
	 * name at the beginning of the range. Can accept: 
	 * HyperlinkTextDestination, Long Integer or String.
	 * @param {any} to - The HyperlinkTextDestination, index, or 
	 * name at the end of the range. Can accept: 
	 * HyperlinkTextDestination, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): HyperlinkTextDestination;
	/**
	 * Returns the first HyperlinkTextDestination in the 
	 * collection.
	 */
	firstItem(): HyperlinkTextDestination;
	/**
	 * Returns the last HyperlinkTextDestination in the collection.
	 */
	lastItem(): HyperlinkTextDestination;
	/**
	 * Returns the middle HyperlinkTextDestination in the 
	 * collection.
	 */
	middleItem(): HyperlinkTextDestination;
	/**
	 * Returns the HyperlinkTextDestination with the index previous 
	 * to the specified index.
	 * @param {HyperlinkTextDestination} obj - The index of the 
	 * HyperlinkTextDestination that follows the desired 
	 * HyperlinkTextDestination.
	 */
	previousItem(obj: HyperlinkTextDestination): HyperlinkTextDestination;
	/**
	 * Returns the HyperlinkTextDestination whose index follows the 
	 * specified HyperlinkTextDestination in the collection.
	 * @param {HyperlinkTextDestination} obj - The 
	 * HyperlinkTextDestination whose index comes before the 
	 * desired HyperlinkTextDestination.
	 */
	nextItem(obj: HyperlinkTextDestination): HyperlinkTextDestination;
	/** Returns any HyperlinkTextDestination in the collection. */
	anyItem(): HyperlinkTextDestination;
	/** Returns every HyperlinkTextDestination in the collection. */
	everyItem(): HyperlinkTextDestination;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkTextDestination.
	 */
	toSource(): string;
	/**
	 * Returns the HyperlinkTextDestination with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: HyperlinkTextDestination;
}

/**
 * A hyperlink destination that is a document page.
 * @class
 */
export declare class HyperlinkPageDestination {
	/** If true, the hyperlink is hidden. */
	readonly hidden: boolean;
	/** The unique ID of the HyperlinkPageDestination. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the HyperlinkPageDestination (a Document). */
	readonly parent: Document;
	/**
	 * The index of the HyperlinkPageDestination within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the HyperlinkPageDestination. */
	name: string;
	/**
	 * If true or unspecified, allows a custom destination name; 
	 * also does not update the name when the destination is moved 
	 * to a different page. If false, uses the page number as the 
	 * page destination name and makes the name property read-only 
	 * for the destination object; also updates the name when the 
	 * destination is moved to a different page.
	 */
	nameManually: boolean;
	/** The page that the hyperlink points to. */
	destinationPage: Page;
	/**
	 * The destination page size when the page is reached by 
	 * clicking the hyperlink.
	 */
	viewSetting: HyperlinkDestinationPageSetting;
	/**
	 * The view rectangle, specified in the format [y1, x1, y2, 
	 * x2]. Note: Valid only when view setting is fixed. Can 
	 * return: Ordered array containing top:Unit, left:Unit, 
	 * bottom:Unit, right:Unit.
	 */
	viewBounds: any;
	/**
	 * The zoom percentage. (Range: 5 to 4000) Note: Valid only 
	 * when view setting is fixed.
	 */
	viewPercentage: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the HyperlinkPageDestination. */
	remove(): void;
	/** Jumps to the hyperlink destination. */
	showDestination(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkPageDestination.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HyperlinkPageDestination;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of hyperlink page destinations.
 * @class
 */
export declare class HyperlinkPageDestinations {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new hyperlink page destination.
	 * @param {Page} destination - The document page that the 
	 * hyperlink points to. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new HyperlinkPageDestination (Optional)
	 */
	add(destination: Page, withProperties: Object): HyperlinkPageDestination;
	/**
	 * Displays the number of elements in the 
	 * HyperlinkPageDestination.
	 */
	count(): number;
	/**
	 * Returns the HyperlinkPageDestination with the specified 
	 * index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): HyperlinkPageDestination;
	/**
	 * Returns the HyperlinkPageDestination with the specified 
	 * name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): HyperlinkPageDestination;
	/**
	 * Returns the HyperlinkPageDestination with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): HyperlinkPageDestination;
	/**
	 * Returns the HyperlinkPageDestinations within the specified 
	 * range.
	 * @param {any} _from - The HyperlinkPageDestination, index, or 
	 * name at the beginning of the range. Can accept: 
	 * HyperlinkPageDestination, Long Integer or String.
	 * @param {any} to - The HyperlinkPageDestination, index, or 
	 * name at the end of the range. Can accept: 
	 * HyperlinkPageDestination, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): HyperlinkPageDestination;
	/**
	 * Returns the first HyperlinkPageDestination in the 
	 * collection.
	 */
	firstItem(): HyperlinkPageDestination;
	/**
	 * Returns the last HyperlinkPageDestination in the collection.
	 */
	lastItem(): HyperlinkPageDestination;
	/**
	 * Returns the middle HyperlinkPageDestination in the 
	 * collection.
	 */
	middleItem(): HyperlinkPageDestination;
	/**
	 * Returns the HyperlinkPageDestination with the index previous 
	 * to the specified index.
	 * @param {HyperlinkPageDestination} obj - The index of the 
	 * HyperlinkPageDestination that follows the desired 
	 * HyperlinkPageDestination.
	 */
	previousItem(obj: HyperlinkPageDestination): HyperlinkPageDestination;
	/**
	 * Returns the HyperlinkPageDestination whose index follows the 
	 * specified HyperlinkPageDestination in the collection.
	 * @param {HyperlinkPageDestination} obj - The 
	 * HyperlinkPageDestination whose index comes before the 
	 * desired HyperlinkPageDestination.
	 */
	nextItem(obj: HyperlinkPageDestination): HyperlinkPageDestination;
	/** Returns any HyperlinkPageDestination in the collection. */
	anyItem(): HyperlinkPageDestination;
	/** Returns every HyperlinkPageDestination in the collection. */
	everyItem(): HyperlinkPageDestination;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkPageDestination.
	 */
	toSource(): string;
	/**
	 * Returns the HyperlinkPageDestination with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: HyperlinkPageDestination;
}

/**
 * A hyperlink destination that is a page in a document other 
 * than the document that contains the hyperlink source. For 
 * information on hyperlink sources, hyperlink page item source 
 * or hyperlink text source.
 * @class
 */
export declare class HyperlinkExternalPageDestination {
	/** The name of the HyperlinkExternalPageDestination. */
	readonly name: string;
	/** If true, the hyperlink is hidden. */
	readonly hidden: boolean;
	/** The unique ID of the HyperlinkExternalPageDestination. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the HyperlinkExternalPageDestination (a 
	 * Document).
	 */
	readonly parent: Document;
	/**
	 * The index of the HyperlinkExternalPageDestination within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The path to the document that the hyperlink destination 
	 * points to.
	 */
	documentPath: File;
	/**
	 * The index of the page that the hyperlink destination points 
	 * to. Note: Valid only when hyperlink destination is an 
	 * external page.
	 */
	destinationPageIndex: number;
	/**
	 * The destination page size when the page is reached by 
	 * clicking the hyperlink.
	 */
	viewSetting: HyperlinkDestinationPageSetting;
	/**
	 * The view rectangle, specified in the format [y1, x1, y2, 
	 * x2]. Note: Valid only when view setting is fixed. Can 
	 * return: Ordered array containing top:Unit, left:Unit, 
	 * bottom:Unit, right:Unit.
	 */
	viewBounds: any;
	/**
	 * The zoom percentage. (Range: 5 to 4000) Note: Valid only 
	 * when view setting is fixed.
	 */
	viewPercentage: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the HyperlinkExternalPageDestination. */
	remove(): void;
	/** Jumps to the hyperlink destination. */
	showDestination(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkExternalPageDestination.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HyperlinkExternalPageDestination;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of hyperlink external page destinations.
 * @class
 */
export declare class HyperlinkExternalPageDestinations {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new hyperlink external page destination.
	 * @param {Page} destination - The destination page. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new HyperlinkExternalPageDestination 
	 * (Optional)
	 */
	add(destination: Page, withProperties: Object): HyperlinkExternalPageDestination;
	/**
	 * Displays the number of elements in the 
	 * HyperlinkExternalPageDestination.
	 */
	count(): number;
	/**
	 * Returns the HyperlinkExternalPageDestination with the 
	 * specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): HyperlinkExternalPageDestination;
	/**
	 * Returns the HyperlinkExternalPageDestination with the 
	 * specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): HyperlinkExternalPageDestination;
	/**
	 * Returns the HyperlinkExternalPageDestination with the 
	 * specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): HyperlinkExternalPageDestination;
	/**
	 * Returns the HyperlinkExternalPageDestinations within the 
	 * specified range.
	 * @param {any} _from - The HyperlinkExternalPageDestination, 
	 * index, or name at the beginning of the range. Can accept: 
	 * HyperlinkExternalPageDestination, Long Integer or String.
	 * @param {any} to - The HyperlinkExternalPageDestination, 
	 * index, or name at the end of the range. Can accept: 
	 * HyperlinkExternalPageDestination, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): HyperlinkExternalPageDestination;
	/**
	 * Returns the first HyperlinkExternalPageDestination in the 
	 * collection.
	 */
	firstItem(): HyperlinkExternalPageDestination;
	/**
	 * Returns the last HyperlinkExternalPageDestination in the 
	 * collection.
	 */
	lastItem(): HyperlinkExternalPageDestination;
	/**
	 * Returns the middle HyperlinkExternalPageDestination in the 
	 * collection.
	 */
	middleItem(): HyperlinkExternalPageDestination;
	/**
	 * Returns the HyperlinkExternalPageDestination with the index 
	 * previous to the specified index.
	 * @param {HyperlinkExternalPageDestination} obj - The index of 
	 * the HyperlinkExternalPageDestination that follows the 
	 * desired HyperlinkExternalPageDestination.
	 */
	previousItem(obj: HyperlinkExternalPageDestination): HyperlinkExternalPageDestination;
	/**
	 * Returns the HyperlinkExternalPageDestination whose index 
	 * follows the specified HyperlinkExternalPageDestination in 
	 * the collection.
	 * @param {HyperlinkExternalPageDestination} obj - The 
	 * HyperlinkExternalPageDestination whose index comes before 
	 * the desired HyperlinkExternalPageDestination.
	 */
	nextItem(obj: HyperlinkExternalPageDestination): HyperlinkExternalPageDestination;
	/**
	 * Returns any HyperlinkExternalPageDestination in the 
	 * collection.
	 */
	anyItem(): HyperlinkExternalPageDestination;
	/**
	 * Returns every HyperlinkExternalPageDestination in the 
	 * collection.
	 */
	everyItem(): HyperlinkExternalPageDestination;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkExternalPageDestination.
	 */
	toSource(): string;
	/**
	 * Returns the HyperlinkExternalPageDestination with the 
	 * specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: HyperlinkExternalPageDestination;
}

/**
 * A hyperlink destination that is a URL.
 * @class
 */
export declare class HyperlinkURLDestination {
	/** If true, the hyperlink is hidden. */
	readonly hidden: boolean;
	/** The unique ID of the HyperlinkURLDestination. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the HyperlinkURLDestination (a Document). */
	readonly parent: Document;
	/**
	 * The index of the HyperlinkURLDestination within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the HyperlinkURLDestination. */
	name: string;
	/** The URL the hyperlink points to. */
	destinationURL: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the HyperlinkURLDestination. */
	remove(): void;
	/** Jumps to the hyperlink destination. */
	showDestination(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkURLDestination.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HyperlinkURLDestination;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of hyperlink URL destinations.
 * @class
 */
export declare class HyperlinkURLDestinations {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new hyperlink URL destination.
	 * @param {string} destination - The URL that the hyperlink 
	 * points to. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new HyperlinkURLDestination (Optional)
	 */
	add(destination: string, withProperties: Object): HyperlinkURLDestination;
	/**
	 * Displays the number of elements in the 
	 * HyperlinkURLDestination.
	 */
	count(): number;
	/**
	 * Returns the HyperlinkURLDestination with the specified index 
	 * or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): HyperlinkURLDestination;
	/**
	 * Returns the HyperlinkURLDestination with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): HyperlinkURLDestination;
	/**
	 * Returns the HyperlinkURLDestination with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): HyperlinkURLDestination;
	/**
	 * Returns the HyperlinkURLDestinations within the specified 
	 * range.
	 * @param {any} _from - The HyperlinkURLDestination, index, or 
	 * name at the beginning of the range. Can accept: 
	 * HyperlinkURLDestination, Long Integer or String.
	 * @param {any} to - The HyperlinkURLDestination, index, or 
	 * name at the end of the range. Can accept: 
	 * HyperlinkURLDestination, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): HyperlinkURLDestination;
	/**
	 * Returns the first HyperlinkURLDestination in the collection.
	 */
	firstItem(): HyperlinkURLDestination;
	/** Returns the last HyperlinkURLDestination in the collection. */
	lastItem(): HyperlinkURLDestination;
	/**
	 * Returns the middle HyperlinkURLDestination in the 
	 * collection.
	 */
	middleItem(): HyperlinkURLDestination;
	/**
	 * Returns the HyperlinkURLDestination with the index previous 
	 * to the specified index.
	 * @param {HyperlinkURLDestination} obj - The index of the 
	 * HyperlinkURLDestination that follows the desired 
	 * HyperlinkURLDestination.
	 */
	previousItem(obj: HyperlinkURLDestination): HyperlinkURLDestination;
	/**
	 * Returns the HyperlinkURLDestination whose index follows the 
	 * specified HyperlinkURLDestination in the collection.
	 * @param {HyperlinkURLDestination} obj - The 
	 * HyperlinkURLDestination whose index comes before the desired 
	 * HyperlinkURLDestination.
	 */
	nextItem(obj: HyperlinkURLDestination): HyperlinkURLDestination;
	/** Returns any HyperlinkURLDestination in the collection. */
	anyItem(): HyperlinkURLDestination;
	/** Returns every HyperlinkURLDestination in the collection. */
	everyItem(): HyperlinkURLDestination;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyperlinkURLDestination.
	 */
	toSource(): string;
	/**
	 * Returns the HyperlinkURLDestination with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: HyperlinkURLDestination;
}

/**
 * A cross reference format object.
 * @class
 */
export declare class CrossReferenceFormat {
	/** The unique ID of the CrossReferenceFormat. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the CrossReferenceFormat (a Document). */
	readonly parent: Document;
	/**
	 * The index of the CrossReferenceFormat within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of cross reference building blocks. */
	readonly buildingBlocks: BuildingBlocks;
	/** The name of the CrossReferenceFormat. */
	name: string;
	/** Character style of the cross reference format. */
	appliedCharacterStyle: CharacterStyle;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the CrossReferenceFormat. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * CrossReferenceFormat.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CrossReferenceFormat;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of cross reference formats.
 * @class
 */
export declare class CrossReferenceFormats {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new cross reference format.
	 * @param {string} name - The format name. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CrossReferenceFormat (Optional)
	 */
	add(name: string, withProperties: Object): CrossReferenceFormat;
	/**
	 * Displays the number of elements in the CrossReferenceFormat.
	 */
	count(): number;
	/**
	 * Returns the CrossReferenceFormat with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CrossReferenceFormat;
	/**
	 * Returns the CrossReferenceFormat with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): CrossReferenceFormat;
	/**
	 * Returns the CrossReferenceFormat with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CrossReferenceFormat;
	/**
	 * Returns the CrossReferenceFormats within the specified 
	 * range.
	 * @param {any} _from - The CrossReferenceFormat, index, or 
	 * name at the beginning of the range. Can accept: 
	 * CrossReferenceFormat, Long Integer or String.
	 * @param {any} to - The CrossReferenceFormat, index, or name 
	 * at the end of the range. Can accept: CrossReferenceFormat, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): CrossReferenceFormat;
	/** Returns the first CrossReferenceFormat in the collection. */
	firstItem(): CrossReferenceFormat;
	/** Returns the last CrossReferenceFormat in the collection. */
	lastItem(): CrossReferenceFormat;
	/** Returns the middle CrossReferenceFormat in the collection. */
	middleItem(): CrossReferenceFormat;
	/**
	 * Returns the CrossReferenceFormat with the index previous to 
	 * the specified index.
	 * @param {CrossReferenceFormat} obj - The index of the 
	 * CrossReferenceFormat that follows the desired 
	 * CrossReferenceFormat.
	 */
	previousItem(obj: CrossReferenceFormat): CrossReferenceFormat;
	/**
	 * Returns the CrossReferenceFormat whose index follows the 
	 * specified CrossReferenceFormat in the collection.
	 * @param {CrossReferenceFormat} obj - The CrossReferenceFormat 
	 * whose index comes before the desired CrossReferenceFormat.
	 */
	nextItem(obj: CrossReferenceFormat): CrossReferenceFormat;
	/** Returns any CrossReferenceFormat in the collection. */
	anyItem(): CrossReferenceFormat;
	/** Returns every CrossReferenceFormat in the collection. */
	everyItem(): CrossReferenceFormat;
	/**
	 * Generates a string which, if executed, will return the 
	 * CrossReferenceFormat.
	 */
	toSource(): string;
	/**
	 * Returns the CrossReferenceFormat with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CrossReferenceFormat;
}

/**
 * A cross reference text source object.
 * @class
 * @extends HyperlinkTextSource
 */
export declare class CrossReferenceSource extends HyperlinkTextSource {
	/** If true, the hyperlink is hidden. */
	readonly hidden: boolean;
	/** The unique ID of the CrossReferenceSource. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the CrossReferenceSource (a Document). */
	readonly parent: Document;
	/**
	 * The index of the CrossReferenceSource within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Format used for cross reference source. */
	appliedFormat: CrossReferenceFormat;
	/** The name of the CrossReferenceSource. */
	name: string;
	/** The hyperlinked text or insertion point. */
	sourceText: Text;
	/** Character style of the hyperlink text source. */
	appliedCharacterStyle: CharacterStyle;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Updates cross reference text source content. */
	update(): void;
	/** Deletes the CrossReferenceSource. */
	remove(): void;
	/** Jumps to the hyperlink source. */
	showSource(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * CrossReferenceSource.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CrossReferenceSource;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of cross reference text sources.
 * @class
 */
export declare class CrossReferenceSources {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new cross reference text source.
	 * @param {Text} source - The text or insertion point to create 
	 * the source.
	 * @param {CrossReferenceFormat} appliedFormat - Format used 
	 * for cross reference source.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CrossReferenceSource (Optional)
	 */
	add(source: Text, appliedFormat: CrossReferenceFormat, withProperties: Object): CrossReferenceSource;
	/**
	 * Displays the number of elements in the CrossReferenceSource.
	 */
	count(): number;
	/**
	 * Returns the CrossReferenceSource with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CrossReferenceSource;
	/**
	 * Returns the CrossReferenceSource with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): CrossReferenceSource;
	/**
	 * Returns the CrossReferenceSource with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CrossReferenceSource;
	/**
	 * Returns the CrossReferenceSources within the specified 
	 * range.
	 * @param {any} _from - The CrossReferenceSource, index, or 
	 * name at the beginning of the range. Can accept: 
	 * CrossReferenceSource, Long Integer or String.
	 * @param {any} to - The CrossReferenceSource, index, or name 
	 * at the end of the range. Can accept: CrossReferenceSource, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): CrossReferenceSource;
	/** Returns the first CrossReferenceSource in the collection. */
	firstItem(): CrossReferenceSource;
	/** Returns the last CrossReferenceSource in the collection. */
	lastItem(): CrossReferenceSource;
	/** Returns the middle CrossReferenceSource in the collection. */
	middleItem(): CrossReferenceSource;
	/**
	 * Returns the CrossReferenceSource with the index previous to 
	 * the specified index.
	 * @param {CrossReferenceSource} obj - The index of the 
	 * CrossReferenceSource that follows the desired 
	 * CrossReferenceSource.
	 */
	previousItem(obj: CrossReferenceSource): CrossReferenceSource;
	/**
	 * Returns the CrossReferenceSource whose index follows the 
	 * specified CrossReferenceSource in the collection.
	 * @param {CrossReferenceSource} obj - The CrossReferenceSource 
	 * whose index comes before the desired CrossReferenceSource.
	 */
	nextItem(obj: CrossReferenceSource): CrossReferenceSource;
	/** Returns any CrossReferenceSource in the collection. */
	anyItem(): CrossReferenceSource;
	/** Returns every CrossReferenceSource in the collection. */
	everyItem(): CrossReferenceSource;
	/**
	 * Generates a string which, if executed, will return the 
	 * CrossReferenceSource.
	 */
	toSource(): string;
	/**
	 * Returns the CrossReferenceSource with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CrossReferenceSource;
}

/**
 * A cross reference building block object.
 * @class
 */
export declare class BuildingBlock {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the BuildingBlock (a CrossReferenceFormat). */
	readonly parent: CrossReferenceFormat;
	/**
	 * The index of the BuildingBlock within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Type of the building block. */
	blockType: BuildingBlockTypes;
	/** Character style to be applied to the building block. */
	appliedCharacterStyle: CharacterStyle;
	/**
	 * Building block custom text. Currently this is only useful in 
	 * custom string building block. It is ignored for other types 
	 * of building blocks.
	 */
	customText: string;
	/**
	 * Delimiter character for paragraph text and full paragraph 
	 * building blocks. It is ignored for other types of building 
	 * blocks.
	 */
	appliedDelimiter: string;
	/**
	 * If true, the source generated for the building block 
	 * includes the delimiter. It is ignored if no delimiter is 
	 * specified on the building block.
	 */
	includeDelimiter: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the BuildingBlock. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * BuildingBlock.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): BuildingBlock;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of cross reference building blocks.
 * @class
 */
export declare class BuildingBlocks {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new cross reference building block.
	 * @param {BuildingBlockTypes} blockType - Type of the building 
	 * block.
	 * @param {CharacterStyle} appliedCharacterStyle - Character 
	 * style to be applied to the building block. (Optional)
	 * @param {string} customText - Building block custom text. 
	 * Currently this is only useful in custom string building 
	 * block. It is ignored for other types of building blocks. 
	 * (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new BuildingBlock (Optional)
	 */
	add(blockType: BuildingBlockTypes, appliedCharacterStyle: CharacterStyle, customText: string, withProperties: Object): BuildingBlock;
	/** Displays the number of elements in the BuildingBlock. */
	count(): number;
	/**
	 * Returns the BuildingBlock with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): BuildingBlock;
	/**
	 * Returns the BuildingBlocks within the specified range.
	 * @param {any} _from - The BuildingBlock, index, or name at 
	 * the beginning of the range. Can accept: BuildingBlock, Long 
	 * Integer or String.
	 * @param {any} to - The BuildingBlock, index, or name at the 
	 * end of the range. Can accept: BuildingBlock, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): BuildingBlock;
	/** Returns the first BuildingBlock in the collection. */
	firstItem(): BuildingBlock;
	/** Returns the last BuildingBlock in the collection. */
	lastItem(): BuildingBlock;
	/** Returns the middle BuildingBlock in the collection. */
	middleItem(): BuildingBlock;
	/**
	 * Returns the BuildingBlock with the index previous to the 
	 * specified index.
	 * @param {BuildingBlock} obj - The index of the BuildingBlock 
	 * that follows the desired BuildingBlock.
	 */
	previousItem(obj: BuildingBlock): BuildingBlock;
	/**
	 * Returns the BuildingBlock whose index follows the specified 
	 * BuildingBlock in the collection.
	 * @param {BuildingBlock} obj - The BuildingBlock whose index 
	 * comes before the desired BuildingBlock.
	 */
	nextItem(obj: BuildingBlock): BuildingBlock;
	/** Returns any BuildingBlock in the collection. */
	anyItem(): BuildingBlock;
	/** Returns every BuildingBlock in the collection. */
	everyItem(): BuildingBlock;
	/**
	 * Generates a string which, if executed, will return the 
	 * BuildingBlock.
	 */
	toSource(): string;
	/**
	 * Returns the BuildingBlock with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: BuildingBlock;
}

/**
 * Paragraph destination of a cross reference.
 * @class
 * @extends HyperlinkTextDestination
 */
export declare class ParagraphDestination extends HyperlinkTextDestination {
	/** If true, the hyperlink is hidden. */
	readonly hidden: boolean;
	/** The unique ID of the ParagraphDestination. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ParagraphDestination (a Document). */
	readonly parent: Document;
	/**
	 * The index of the ParagraphDestination within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the ParagraphDestination. */
	name: string;
	/**
	 * The text or insertion point that the hyperlink points to. 
	 * Can also accept: Text.
	 */
	destinationText: InsertionPoint;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the ParagraphDestination. */
	remove(): void;
	/** Jumps to the hyperlink destination. */
	showDestination(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ParagraphDestination.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ParagraphDestination;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of paragraph destinations.
 * @class
 */
export declare class ParagraphDestinations {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new paragraph destination.
	 * @param {Text} destination - The text or insertion point 
	 * inside the paragraph that the cross reference points to. The 
	 * insertion point is always adjusted to the beginning of the 
	 * paragraph.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ParagraphDestination (Optional)
	 */
	add(destination: Text, withProperties: Object): ParagraphDestination;
	/**
	 * Displays the number of elements in the ParagraphDestination.
	 */
	count(): number;
	/**
	 * Returns the ParagraphDestination with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ParagraphDestination;
	/**
	 * Returns the ParagraphDestination with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ParagraphDestination;
	/**
	 * Returns the ParagraphDestination with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ParagraphDestination;
	/**
	 * Returns the ParagraphDestinations within the specified 
	 * range.
	 * @param {any} _from - The ParagraphDestination, index, or 
	 * name at the beginning of the range. Can accept: 
	 * ParagraphDestination, Long Integer or String.
	 * @param {any} to - The ParagraphDestination, index, or name 
	 * at the end of the range. Can accept: ParagraphDestination, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): ParagraphDestination;
	/** Returns the first ParagraphDestination in the collection. */
	firstItem(): ParagraphDestination;
	/** Returns the last ParagraphDestination in the collection. */
	lastItem(): ParagraphDestination;
	/** Returns the middle ParagraphDestination in the collection. */
	middleItem(): ParagraphDestination;
	/**
	 * Returns the ParagraphDestination with the index previous to 
	 * the specified index.
	 * @param {ParagraphDestination} obj - The index of the 
	 * ParagraphDestination that follows the desired 
	 * ParagraphDestination.
	 */
	previousItem(obj: ParagraphDestination): ParagraphDestination;
	/**
	 * Returns the ParagraphDestination whose index follows the 
	 * specified ParagraphDestination in the collection.
	 * @param {ParagraphDestination} obj - The ParagraphDestination 
	 * whose index comes before the desired ParagraphDestination.
	 */
	nextItem(obj: ParagraphDestination): ParagraphDestination;
	/** Returns any ParagraphDestination in the collection. */
	anyItem(): ParagraphDestination;
	/** Returns every ParagraphDestination in the collection. */
	everyItem(): ParagraphDestination;
	/**
	 * Generates a string which, if executed, will return the 
	 * ParagraphDestination.
	 */
	toSource(): string;
	/**
	 * Returns the ParagraphDestination with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ParagraphDestination;
}

/**
 * An index.
 * @class
 */
export declare class Index {
	/** The topics in the specified index section. */
	readonly allTopics: Topic;
	/** The unique ID of the Index. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Index (a Document). */
	readonly parent: Document;
	/** The index of the Index within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of index sections. */
	readonly indexSections: IndexSections;
	/** A collection of index topics. */
	readonly topics: Topics;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the Index; this is an alias to the Index's label 
	 * property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Imports a list of index topics.
	 * @param {File} _from - The file from which to import the 
	 * topics.
	 */
	importTopics(_from: File): void;
	/**
	 * Removes all index topics that do not have any index entries.
	 */
	removeUnusedTopics(): void;
	/**
	 * Makes the initial letter for the specified index topic or 
	 * group of index topics upper case.
	 * @param {IndexCapitalizationOptions} capitalizationOption - 
	 * The entry or entries to capitalize. (Optional)
	 */
	capitalize(capitalizationOption?: IndexCapitalizationOptions): void;
	/**
	 * Updates the index preview pane. Note: Does not update the 
	 * index.
	 */
	update(): void;
	/**
	 * Generates a new index story.
	 * @param {any} on - The spread or page on which to place the 
	 * story. Can accept: Page, Spread or MasterSpread. (Optional)
	 * @param {number|string} placePoint - The coordinates of the 
	 * upper left corner of the story bounding box, in the format 
	 * [x, y]. (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place the story. (Optional)
	 * @param {boolean} autoflowing - If true, allows the story to 
	 * flow onto subsequent pages if the story does not fit on the 
	 * specified page. If no subsequent pages exist in the 
	 * document, creates the necessary pages. (Optional)
	 * @param {boolean} includeOverset - If true, includes topics 
	 * in overset text in the story.  (Optional)
	 */
	generate(on: any, placePoint: number|string, destinationLayer: Layer, autoflowing?: boolean, includeOverset?: boolean): Story;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Index.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Index;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of indexes.
 * @class
 */
export declare class Indexes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Index.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Index (Optional)
	 */
	add(withProperties: Object): Index;
	/** Displays the number of elements in the Index. */
	count(): number;
	/**
	 * Returns the Index with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Index;
	/**
	 * Returns the Index with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Index;
	/**
	 * Returns the Index with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Index;
	/**
	 * Returns the Indexes within the specified range.
	 * @param {any} _from - The Index, index, or name at the 
	 * beginning of the range. Can accept: Index, Long Integer or 
	 * String.
	 * @param {any} to - The Index, index, or name at the end of 
	 * the range. Can accept: Index, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Index;
	/** Returns the first Index in the collection. */
	firstItem(): Index;
	/** Returns the last Index in the collection. */
	lastItem(): Index;
	/** Returns the middle Index in the collection. */
	middleItem(): Index;
	/**
	 * Returns the Index with the index previous to the specified 
	 * index.
	 * @param {Index} obj - The index of the Index that follows the 
	 * desired Index.
	 */
	previousItem(obj: Index): Index;
	/**
	 * Returns the Index whose index follows the specified Index in 
	 * the collection.
	 * @param {Index} obj - The Index whose index comes before the 
	 * desired Index.
	 */
	nextItem(obj: Index): Index;
	/** Returns any Index in the collection. */
	anyItem(): Index;
	/** Returns every Index in the collection. */
	everyItem(): Index;
	/**
	 * Generates a string which, if executed, will return the 
	 * Index.
	 */
	toSource(): string;
	/**
	 * Returns the Index with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Index;
}

/**
 * Index options.
 * @class
 * @extends Preference
 */
export declare class IndexOptions extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the IndexOptions (a Document or Application). */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The title of the generated index. */
	title: string;
	/**
	 * The paragraph style applied to the title of the generated 
	 * index. Can also accept: String.
	 */
	titleStyle: ParagraphStyle;
	/**
	 * If true, replaces the content of the existing index. Note: 
	 * Replaces only index content; does not update the index 
	 * location or other index properties that may have been 
	 * changed.
	 */
	replaceExistingIndex: boolean;
	/**
	 * If true, includes topics and page references from all the 
	 * documents in a book.
	 */
	includeBookDocuments: boolean;
	/**
	 * If true, includes topics and page references on hidden 
	 * layers.
	 */
	includeHiddenEntries: boolean;
	/** The format for level 2 and lower index topics. */
	indexFormat: IndexFormat;
	/**
	 * If true, displays the letters of the alphabet as index 
	 * section headings.
	 */
	includeSectionHeadings: boolean;
	/**
	 * If true, displays headings for sections with no index 
	 * topics. Note: Valid only when include section headings is 
	 * true.
	 */
	includeEmptyIndexSections: boolean;
	/** The paragraph style applied to level 1 index topics. */
	level1Style: ParagraphStyle;
	/** The paragraph style applied to level 2 index topics. */
	level2Style: ParagraphStyle;
	/** The paragraph style applied to level 3 index topics. */
	level3Style: ParagraphStyle;
	/** The paragraph style applied to level 4 index topics. */
	level4Style: ParagraphStyle;
	/**
	 * The paragraph style applied to index section headings. Note: 
	 * Valid when include section headings is true.
	 */
	sectionHeadingStyle: ParagraphStyle;
	/** The character style applied to page numbers in the index. */
	pageNumberStyle: CharacterStyle;
	/** The character style applied to cross references. */
	crossReferenceStyle: CharacterStyle;
	/** The character style applied to cross reference topics. */
	crossReferenceTopicStyle: CharacterStyle;
	/** The character(s) inserted after each index topic. */
	followingTopicSeparator: string;
	/**
	 * The character(s) inserted between index entries when 
	 * runin-style index format is used for nested topics.
	 */
	betweenEntriesSeparator: string;
	/**
	 * The character(s) inserted between page numbers to indicate a 
	 * page range.
	 */
	pageRangeSeparator: string;
	/**
	 * The character(s) inserted between separate page numbers, 
	 * page numbers and page ranges, and series of page ranges.
	 */
	betweenPageNumbersSeparator: string;
	/** The character(s) inserted at the start of cross references. */
	beforeCrossReferenceSeparator: string;
	/** The character(s) inserted at the end of each index entry. */
	entryEndSeparator: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * IndexOptions.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): IndexOptions;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * An index topic.
 * @class
 */
export declare class Topic {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Topic (a IndexSection, Topic or Index). */
	readonly parent: any;
	/** The index of the Topic within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of index topics. */
	readonly topics: Topics;
	/**
	 * A collection of index cross references. (For cross 
	 * references in text, use the 'cross reference source' and 
	 * 'hyperlink' objects.)
	 */
	readonly crossReferences: CrossReferences;
	/** A collection of index page references. */
	readonly pageReferences: PageReferences;
	/**
	 * The string by which the topic is sorted instead of the topic 
	 * name is not used. Note: The actual topic text, rather than 
	 * the sort order text, appears in the index.
	 */
	sortOrder: string;
	/** The name of the Topic. */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Topic. */
	remove(): void;
	/**
	 * Makes the initial letter for the specified index topic or 
	 * group of index topics upper case.
	 * @param {IndexCapitalizationOptions} capitalizationOption - 
	 * The entry or entries to capitalize. (Optional)
	 */
	capitalize(capitalizationOption?: IndexCapitalizationOptions): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * Topic.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Topic;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of index topics.
 * @class
 */
export declare class Topics {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Topic. */
	count(): number;
	/**
	 * Creates a new index topic.
	 * @param {string} name - The name of the topic. Note: This is 
	 * the text that appears in the index.
	 * @param {string} sortBy - The string to sort this topic by 
	 * instead of the topic name. Note: The actual topic text, 
	 * rather than the sort order text, appears in the index. 
	 * (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Topic (Optional)
	 */
	add(name: string, sortBy: string, withProperties: Object): Topic;
	/**
	 * Returns the Topic with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Topic;
	/**
	 * Returns the Topic with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Topic;
	/**
	 * Returns the Topics within the specified range.
	 * @param {any} _from - The Topic, index, or name at the 
	 * beginning of the range. Can accept: Topic, Long Integer or 
	 * String.
	 * @param {any} to - The Topic, index, or name at the end of 
	 * the range. Can accept: Topic, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Topic;
	/** Returns the first Topic in the collection. */
	firstItem(): Topic;
	/** Returns the last Topic in the collection. */
	lastItem(): Topic;
	/** Returns the middle Topic in the collection. */
	middleItem(): Topic;
	/**
	 * Returns the Topic with the index previous to the specified 
	 * index.
	 * @param {Topic} obj - The index of the Topic that follows the 
	 * desired Topic.
	 */
	previousItem(obj: Topic): Topic;
	/**
	 * Returns the Topic whose index follows the specified Topic in 
	 * the collection.
	 * @param {Topic} obj - The Topic whose index comes before the 
	 * desired Topic.
	 */
	nextItem(obj: Topic): Topic;
	/** Returns any Topic in the collection. */
	anyItem(): Topic;
	/** Returns every Topic in the collection. */
	everyItem(): Topic;
	/**
	 * Generates a string which, if executed, will return the 
	 * Topic.
	 */
	toSource(): string;
	/**
	 * Returns the Topic with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Topic;
}

/**
 * A cross reference to a different index topic. (For cross 
 * references in text, use the 'cross reference source' and 
 * 'hyperlink' objects.)
 * @class
 */
export declare class CrossReference {
	/** The unique ID of the CrossReference. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the CrossReference (a Topic). */
	readonly parent: Topic;
	/**
	 * The index of the CrossReference within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The topic to which this CrossReference points. */
	referencedTopic: Topic;
	/** The text that precedes or follows the referenced topic. */
	crossReferenceType: CrossReferenceType;
	/**
	 * The text used for a custom cross reference type. Note: Valid 
	 * only for custom cross reference types.
	 */
	customTypeString: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the CrossReference; this is an alias to the 
	 * CrossReference's label property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the CrossReference. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * CrossReference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CrossReference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of index cross references. (For cross 
 * references in text, use the 'cross reference source' and 
 * 'hyperlink' objects.)
 * @class
 */
export declare class CrossReferences {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new cross reference.
	 * @param {Topic} referencedTopic - The topic that the cross 
	 * reference points to.
	 * @param {CrossReferenceType} crossReferenceType - The cross 
	 * reference type.
	 * @param {string} customTypeString - The custom string to use 
	 * in the cross reference. Valid only for custom cross 
	 * reference types. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CrossReference (Optional)
	 */
	add(referencedTopic: Topic, crossReferenceType: CrossReferenceType, customTypeString: string, withProperties: Object): CrossReference;
	/** Displays the number of elements in the CrossReference. */
	count(): number;
	/**
	 * Returns the CrossReference with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CrossReference;
	/**
	 * Returns the CrossReference with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): CrossReference;
	/**
	 * Returns the CrossReference with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CrossReference;
	/**
	 * Returns the CrossReferences within the specified range.
	 * @param {any} _from - The CrossReference, index, or name at 
	 * the beginning of the range. Can accept: CrossReference, Long 
	 * Integer or String.
	 * @param {any} to - The CrossReference, index, or name at the 
	 * end of the range. Can accept: CrossReference, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): CrossReference;
	/** Returns the first CrossReference in the collection. */
	firstItem(): CrossReference;
	/** Returns the last CrossReference in the collection. */
	lastItem(): CrossReference;
	/** Returns the middle CrossReference in the collection. */
	middleItem(): CrossReference;
	/**
	 * Returns the CrossReference with the index previous to the 
	 * specified index.
	 * @param {CrossReference} obj - The index of the 
	 * CrossReference that follows the desired CrossReference.
	 */
	previousItem(obj: CrossReference): CrossReference;
	/**
	 * Returns the CrossReference whose index follows the specified 
	 * CrossReference in the collection.
	 * @param {CrossReference} obj - The CrossReference whose index 
	 * comes before the desired CrossReference.
	 */
	nextItem(obj: CrossReference): CrossReference;
	/** Returns any CrossReference in the collection. */
	anyItem(): CrossReference;
	/** Returns every CrossReference in the collection. */
	everyItem(): CrossReference;
	/**
	 * Generates a string which, if executed, will return the 
	 * CrossReference.
	 */
	toSource(): string;
	/**
	 * Returns the CrossReference with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CrossReference;
}

/**
 * The page reference for an index topic.
 * @class
 */
export declare class PageReference {
	/** The hyperlinked text or insertion point. */
	readonly sourceText: Text;
	/** The unique ID of the PageReference. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PageReference (a Topic). */
	readonly parent: Topic;
	/**
	 * The index of the PageReference within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Options for index page references. */
	pageReferenceType: PageReferenceType;
	/**
	 * The paragraph style or number of paragraphs or pages that 
	 * defines the last page in a page range. Note: Valid only when 
	 * page reference type specifies the next use of a paragraph 
	 * style or a number of paragraphs or pages. . Can return: 
	 * ParagraphStyle or Long Integer.
	 */
	pageReferenceLimit: any;
	/** The character style applied to page numbers. */
	pageNumberStyleOverride: CharacterStyle;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the PageReference; this is an alias to the 
	 * PageReference's label property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the PageReference. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * PageReference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PageReference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of index page references.
 * @class
 */
export declare class PageReferences {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new page reference.
	 * @param {Text} source - The text or insertion point to which 
	 * the page reference points.
	 * @param {PageReferenceType} pageReferenceType - The page 
	 * number for an index page reference or the last page in an 
	 * index page reference page range. (Optional)
	 * @param {any} pageReferenceLimit - The paragraph style or 
	 * number of paragraphs or pages that defines the last page in 
	 * a page range. Valid only when page reference type specifies 
	 * the next use of a paragraph style or a number of paragraphs 
	 * or pages. . Can accept: ParagraphStyle or Long Integer. 
	 * (Optional)
	 * @param {CharacterStyle} pageNumberStyleOverride - The style 
	 * override for the page number.  (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PageReference (Optional)
	 */
	add(source: Text, pageReferenceType?: PageReferenceType, pageReferenceLimit?: any, pageNumberStyleOverride?: CharacterStyle, withProperties?: Object): PageReference;
	/** Displays the number of elements in the PageReference. */
	count(): number;
	/**
	 * Returns the PageReference with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PageReference;
	/**
	 * Returns the PageReference with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PageReference;
	/**
	 * Returns the PageReference with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PageReference;
	/**
	 * Returns the PageReferences within the specified range.
	 * @param {any} _from - The PageReference, index, or name at 
	 * the beginning of the range. Can accept: PageReference, Long 
	 * Integer or String.
	 * @param {any} to - The PageReference, index, or name at the 
	 * end of the range. Can accept: PageReference, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): PageReference;
	/** Returns the first PageReference in the collection. */
	firstItem(): PageReference;
	/** Returns the last PageReference in the collection. */
	lastItem(): PageReference;
	/** Returns the middle PageReference in the collection. */
	middleItem(): PageReference;
	/**
	 * Returns the PageReference with the index previous to the 
	 * specified index.
	 * @param {PageReference} obj - The index of the PageReference 
	 * that follows the desired PageReference.
	 */
	previousItem(obj: PageReference): PageReference;
	/**
	 * Returns the PageReference whose index follows the specified 
	 * PageReference in the collection.
	 * @param {PageReference} obj - The PageReference whose index 
	 * comes before the desired PageReference.
	 */
	nextItem(obj: PageReference): PageReference;
	/** Returns any PageReference in the collection. */
	anyItem(): PageReference;
	/** Returns every PageReference in the collection. */
	everyItem(): PageReference;
	/**
	 * Generates a string which, if executed, will return the 
	 * PageReference.
	 */
	toSource(): string;
	/**
	 * Returns the PageReference with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PageReference;
}

/**
 * A section within an index.
 * @class
 */
export declare class IndexSection {
	/** The topics in the specified index section. */
	readonly allTopics: Topic;
	/** The name of the IndexSection. */
	readonly name: string;
	/** The unique ID of the IndexSection. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the IndexSection (a Index). */
	readonly parent: Index;
	/** The index of the IndexSection within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of index topics. */
	readonly topics: Topics;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * IndexSection.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): IndexSection;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of index sections.
 * @class
 */
export declare class IndexSections {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the IndexSection. */
	count(): number;
	/**
	 * Returns the IndexSection with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): IndexSection;
	/**
	 * Returns the IndexSection with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): IndexSection;
	/**
	 * Returns the IndexSection with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): IndexSection;
	/**
	 * Returns the IndexSections within the specified range.
	 * @param {any} _from - The IndexSection, index, or name at the 
	 * beginning of the range. Can accept: IndexSection, Long 
	 * Integer or String.
	 * @param {any} to - The IndexSection, index, or name at the 
	 * end of the range. Can accept: IndexSection, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): IndexSection;
	/** Returns the first IndexSection in the collection. */
	firstItem(): IndexSection;
	/** Returns the last IndexSection in the collection. */
	lastItem(): IndexSection;
	/** Returns the middle IndexSection in the collection. */
	middleItem(): IndexSection;
	/**
	 * Returns the IndexSection with the index previous to the 
	 * specified index.
	 * @param {IndexSection} obj - The index of the IndexSection 
	 * that follows the desired IndexSection.
	 */
	previousItem(obj: IndexSection): IndexSection;
	/**
	 * Returns the IndexSection whose index follows the specified 
	 * IndexSection in the collection.
	 * @param {IndexSection} obj - The IndexSection whose index 
	 * comes before the desired IndexSection.
	 */
	nextItem(obj: IndexSection): IndexSection;
	/** Returns any IndexSection in the collection. */
	anyItem(): IndexSection;
	/** Returns every IndexSection in the collection. */
	everyItem(): IndexSection;
	/**
	 * Generates a string which, if executed, will return the 
	 * IndexSection.
	 */
	toSource(): string;
	/**
	 * Returns the IndexSection with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: IndexSection;
}

/**
 * A form field.
 * @class
 * @extends PageItem
 */
export declare class FormField extends PageItem {
	/**
	 * Dispatched before a FormField is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a FormField is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** The XML element associated with the FormField. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the FormField.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the FormField. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the FormField. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the FormField. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the FormField. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FormField (a PlaceGun, Spread, 
	 * MasterSpread, SplineItem, Polygon, GraphicLine, Rectangle, 
	 * Oval, Group, Character or Snippet).
	 */
	readonly parent: any;
	/** The index of the FormField within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The index of the active state in the object's states 
	 * collection.
	 */
	activeStateIndex: number;
	/** The name of the FormField. */
	name: string;
	/** The description of the FormField. */
	description: string;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the FormField excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the FormField including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the FormField. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the FormField's fill color. 
	 * (To specify a tint percent, use a number in the range of 0 
	 * to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the FormField's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the FormField's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the FormField. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the FormField. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the FormField. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the FormField, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the FormField.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * FormField. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the FormField, in the format [x, 
	 * y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the FormField.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * FormField. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the FormField's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the FormField. */
	strokeAlignment: StrokeAlignment;
	/** If true, the FormField does not print. */
	nonprinting: boolean;
	/** The layer that the FormField is on. */
	itemLayer: Layer;
	/** If true, the FormField is locked. */
	locked: boolean;
	/** Display performance options for the FormField. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the FormField. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the FormField. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the FormField. */
	horizontalScale: number;
	/** The vertical scaling applied to the FormField. */
	verticalScale: number;
	/**
	 * The rotation angle of the FormField relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the FormField relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the FormField relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the FormField relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the FormField. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the FormField has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the FormField was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the FormField is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the FormField. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the FormField. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the FormField.
	 * @param {Flip} given - The axis around which to flip the 
	 * FormField.
	 * @param {any} around - The point around which to flip the 
	 * FormField. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the FormField at the specified location or 
	 * offset.
	 * @param {any} to - The location of the new FormField, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new FormField from the original FormField's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the FormField to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the FormField,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the FormField relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * FormField's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * FormField that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Converts the FormField to a different shape.
	 * @param {ConvertShapeOptions} given - The FormField's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the FormField. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the FormField using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the FormField using the last sequence of 
	 * transform operations performed on any single object or 
	 * performed at the same time on any group of objects. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the FormField using the last transformation 
	 * performed on any FormField. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the FormField using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new FormField. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new FormField. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new FormField. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new FormField. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new FormField. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the FormField in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new FormField (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * FormField.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FormField;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of form fields.
 * @class
 */
export declare class FormFields {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the FormField. */
	count(): number;
	/**
	 * Creates a new FormField
	 * @param {Layer} layer - The layer on which to create the 
	 * FormField. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the FormField relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new FormField (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): FormField;
	/**
	 * Returns the FormField with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): FormField;
	/**
	 * Returns the FormField with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): FormField;
	/**
	 * Returns the FormField with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): FormField;
	/**
	 * Returns the FormFields within the specified range.
	 * @param {any} _from - The FormField, index, or name at the 
	 * beginning of the range. Can accept: FormField, Long Integer 
	 * or String.
	 * @param {any} to - The FormField, index, or name at the end 
	 * of the range. Can accept: FormField, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): FormField;
	/** Returns the first FormField in the collection. */
	firstItem(): FormField;
	/** Returns the last FormField in the collection. */
	lastItem(): FormField;
	/** Returns the middle FormField in the collection. */
	middleItem(): FormField;
	/**
	 * Returns the FormField with the index previous to the 
	 * specified index.
	 * @param {FormField} obj - The index of the FormField that 
	 * follows the desired FormField.
	 */
	previousItem(obj: FormField): FormField;
	/**
	 * Returns the FormField whose index follows the specified 
	 * FormField in the collection.
	 * @param {FormField} obj - The FormField whose index comes 
	 * before the desired FormField.
	 */
	nextItem(obj: FormField): FormField;
	/** Returns any FormField in the collection. */
	anyItem(): FormField;
	/** Returns every FormField in the collection. */
	everyItem(): FormField;
	/**
	 * Generates a string which, if executed, will return the 
	 * FormField.
	 */
	toSource(): string;
	/**
	 * Returns the FormField with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: FormField;
}

/**
 * A button.
 * @class
 * @extends FormField
 */
export declare class Button extends FormField {
	/**
	 * Dispatched before a Button is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Button is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The XML element associated with the Button. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the Button. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the Button. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the Button. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Button. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the Button. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Button (a PlaceGun, Spread, MasterSpread, 
	 * SplineItem, Polygon, GraphicLine, Rectangle, Oval, Group, 
	 * Character or Snippet).
	 */
	readonly parent: any;
	/** The index of the Button within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of states. */
	readonly states: States;
	/** A collection of behavior objects. */
	readonly behaviors: Behaviors;
	/** A collection of goto first page behavior objects. */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;
	/** A collection of goto last page behavior objects. */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;
	/** A collection of goto next page behavior objects. */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;
	/** A collection of goto previous page behavior objects. */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;
	/** A collection of goto next view behavior objects. */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;
	/** A collection of goto previous view behavior objects. */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;
	/** A collection of goto URL behavior objects. */
	readonly gotoURLBehaviors: GotoURLBehaviors;
	/** A collection of goto anchor behavior objects. */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;
	/** A collection of movie behavior objects. */
	readonly movieBehaviors: MovieBehaviors;
	/** A collection of sound behavior objects. */
	readonly soundBehaviors: SoundBehaviors;
	/** A collection of show/hide fields behavior objects. */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;
	/** A collection of open file behavior objects. */
	readonly openFileBehaviors: OpenFileBehaviors;
	/** A collection of view zoom behavior objects. */
	readonly viewZoomBehaviors: ViewZoomBehaviors;
	/** A collection of submit form behavior objects. */
	readonly submitFormBehaviors: SubmitFormBehaviors;
	/** A collection of clear form behavior objects. */
	readonly clearFormBehaviors: ClearFormBehaviors;
	/** A collection of print form behavior objects. */
	readonly printFormBehaviors: PrintFormBehaviors;
	/** A collection of animation behaviors. */
	readonly animationBehaviors: AnimationBehaviors;
	/** A collection of goto next state behaviors. */
	readonly gotoNextStateBehaviors: GotoNextStateBehaviors;
	/** A collection of goto previous state behaviors. */
	readonly gotoPreviousStateBehaviors: GotoPreviousStateBehaviors;
	/** A collection of goto state behaviors. */
	readonly gotoStateBehaviors: GotoStateBehaviors;
	/** A collection of go to page behavior objects. */
	readonly gotoPageBehaviors: GotoPageBehaviors;
	/**
	 * If true, the form field/push button is printable in the 
	 * exported PDF.
	 */
	printableInPdf: boolean;
	/**
	 * If true, the form field/push button is hidden until 
	 * triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;
	/**
	 * The index of the active state in the object's states 
	 * collection.
	 */
	activeStateIndex: number;
	/** The name of the Button. */
	name: string;
	/** The description of the Button. */
	description: string;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the Button excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the Button including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Button. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the Button's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the Button's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the Button's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the Button. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the Button. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Button. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Button, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the Button.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * Button. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the Button, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the Button.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * Button. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the Button's stroke color overprints any underlying 
	 * objects. If false, the stroke color knocks out the  
	 * underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the Button. */
	strokeAlignment: StrokeAlignment;
	/** If true, the Button does not print. */
	nonprinting: boolean;
	/** The layer that the Button is on. */
	itemLayer: Layer;
	/** If true, the Button is locked. */
	locked: boolean;
	/** Display performance options for the Button. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the Button. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the Button. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the Button. */
	horizontalScale: number;
	/** The vertical scaling applied to the Button. */
	verticalScale: number;
	/**
	 * The rotation angle of the Button relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the Button relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the Button relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the Button relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the Button. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the Button has been flipped independently 
	 * of its parent object and, if yes, the direction in which the 
	 * Button was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the Button is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the Button. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Brings the Button to the front of its layer or in front of a 
	 * particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the Button to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the Button forward one level in its layer. */
	bringForward(): void;
	/** Sends the Button back one level in its layer. */
	sendBackward(): void;
	/**
	 * Converts the Button to a different shape.
	 * @param {ConvertShapeOptions} given - The Button's new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Converts the button object to the page item currently in the 
	 * active state. Page items from other states will be lost.
	 */
	convertToObject(): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the Button. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the Button.
	 * @param {Flip} given - The axis around which to flip the 
	 * Button.
	 * @param {any} around - The point around which to flip the 
	 * Button. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the Button at the specified location or offset.
	 * @param {any} to - The location of the new Button, specified 
	 * in coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new Button from the original Button's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the Button to a new location. Note: Either the 'to' or 
	 * 'by' parameter is required; if both parameters are defined, 
	 * only the to value is used.
	 * @param {any} to - The new location of the Button,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the Button relative to its current position, 
	 * in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * Button's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * Button that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the Button. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the Button using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the Button using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the Button using the last transformation 
	 * performed on any Button. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the Button using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Button. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Button. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Button. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Button. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Button. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Button in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Button (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Button.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Button;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of buttons.
 * @class
 */
export declare class Buttons {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Button. */
	count(): number;
	/**
	 * Creates a new Button
	 * @param {Layer} layer - The layer on which to create the 
	 * Button. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the Button relative to the reference object or within 
	 * the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Button (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): Button;
	/**
	 * Returns the Button with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Button;
	/**
	 * Returns the Button with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Button;
	/**
	 * Returns the Button with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Button;
	/**
	 * Returns the Buttons within the specified range.
	 * @param {any} _from - The Button, index, or name at the 
	 * beginning of the range. Can accept: Button, Long Integer or 
	 * String.
	 * @param {any} to - The Button, index, or name at the end of 
	 * the range. Can accept: Button, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Button;
	/** Returns the first Button in the collection. */
	firstItem(): Button;
	/** Returns the last Button in the collection. */
	lastItem(): Button;
	/** Returns the middle Button in the collection. */
	middleItem(): Button;
	/**
	 * Returns the Button with the index previous to the specified 
	 * index.
	 * @param {Button} obj - The index of the Button that follows 
	 * the desired Button.
	 */
	previousItem(obj: Button): Button;
	/**
	 * Returns the Button whose index follows the specified Button 
	 * in the collection.
	 * @param {Button} obj - The Button whose index comes before 
	 * the desired Button.
	 */
	nextItem(obj: Button): Button;
	/** Returns any Button in the collection. */
	anyItem(): Button;
	/** Returns every Button in the collection. */
	everyItem(): Button;
	/**
	 * Generates a string which, if executed, will return the 
	 * Button.
	 */
	toSource(): string;
	/**
	 * Returns the Button with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Button;
}

/**
 * A state (states define the display of the field in an 
 * exported PDF or SWF).
 * @class
 */
export declare class State {
	/** The unique ID of the State. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the State (a Button, MultiStateObject, 
	 * CheckBox or RadioButton).
	 */
	readonly parent: any;
	/** The index of the State within its containing object. */
	readonly index: number;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** The name of the State. */
	name: string;
	/** If true, the state is active in the exported PDF. */
	active: boolean;
	/** If true, the state is enabled in PDF documents. */
	enabled: boolean;
	/**
	 * For a button, the type of user action that dictates the 
	 * object's appearance. For a MultiStateObject, which has no 
	 * user actions associated with states, this property is a 
	 * numeric value uniquely identifying the state. Can return: 
	 * StateTypes enumerator or Long Integer.
	 */
	statetype: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Releases this state's appearance as a page item, removing 
	 * the state from its parent object.
	 */
	releaseAsObject(): void;
	/**
	 * Moves the state to a new position in its parent collection.
	 * @param {number} newPosition - the index to move the state to 
	 * in its parent collection
	 */
	move(newPosition: number): void;
	/**
	 * Adds page items to this state.
	 * @param {PageItem} pageitems - One or more page items to add 
	 * to this state.
	 */
	addItemsToState(pageitems: PageItem): void;
	/** Deletes the State. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * State.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): State;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of states.
 * @class
 */
export declare class States {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new State.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new State (Optional)
	 */
	add(withProperties: Object): State;
	/** Displays the number of elements in the State. */
	count(): number;
	/**
	 * Returns the State with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): State;
	/**
	 * Returns the State with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): State;
	/**
	 * Returns the State with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): State;
	/**
	 * Returns the States within the specified range.
	 * @param {any} _from - The State, index, or name at the 
	 * beginning of the range. Can accept: State, Long Integer or 
	 * String.
	 * @param {any} to - The State, index, or name at the end of 
	 * the range. Can accept: State, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): State;
	/** Returns the first State in the collection. */
	firstItem(): State;
	/** Returns the last State in the collection. */
	lastItem(): State;
	/** Returns the middle State in the collection. */
	middleItem(): State;
	/**
	 * Returns the State with the index previous to the specified 
	 * index.
	 * @param {State} obj - The index of the State that follows the 
	 * desired State.
	 */
	previousItem(obj: State): State;
	/**
	 * Returns the State whose index follows the specified State in 
	 * the collection.
	 * @param {State} obj - The State whose index comes before the 
	 * desired State.
	 */
	nextItem(obj: State): State;
	/** Returns any State in the collection. */
	anyItem(): State;
	/** Returns every State in the collection. */
	everyItem(): State;
	/**
	 * Generates a string which, if executed, will return the 
	 * State.
	 */
	toSource(): string;
	/**
	 * Returns the State with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: State;
}

/**
 * A multi-state object.
 * @class
 * @extends FormField
 */
export declare class MultiStateObject extends FormField {
	/**
	 * Dispatched before a MultiStateObject is placed. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a MultiStateObject is placed. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** The XML element associated with the MultiStateObject. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the 
	 * MultiStateObject.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/**
	 * Transparency settings for the content of the 
	 * MultiStateObject.
	 */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the MultiStateObject. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the MultiStateObject. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the MultiStateObject. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MultiStateObject (a PlaceGun, Spread, 
	 * MasterSpread, SplineItem, Polygon, GraphicLine, Rectangle, 
	 * Oval, Group, Character or Snippet).
	 */
	readonly parent: any;
	/**
	 * The index of the MultiStateObject within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of states. */
	readonly states: States;
	/**
	 * Determines if this object is initially hidden when displayed 
	 * in an exported SWF file.
	 */
	initiallyHidden: boolean;
	/**
	 * The index of the active state in the object's states 
	 * collection.
	 */
	activeStateIndex: number;
	/** The name of the MultiStateObject. */
	name: string;
	/** The description of the MultiStateObject. */
	description: string;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the MultiStateObject excluding the stroke 
	 * width, in the format [y1, x1, y2, x2], which give the 
	 * coordinates of the top-left and bottom-right corners of the 
	 * bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the MultiStateObject including the stroke 
	 * width, in the format [y1, x1, y2, x2], which give the 
	 * coordinates of the top-left and bottom-right corners of the 
	 * bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the MultiStateObject. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the MultiStateObject's fill 
	 * color. (To specify a tint percent, use a number in the range 
	 * of 0 to 100; to use the inherited or overridden value, use 
	 * -1.)
	 */
	fillTint: number;
	/**
	 * If true, the MultiStateObject's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/**
	 * The weight (in points) to apply to the MultiStateObject's 
	 * stroke.
	 */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the MultiStateObject. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the MultiStateObject. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the MultiStateObject. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the MultiStateObject, in the format 
	 * [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the MultiStateObject.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * MultiStateObject. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the MultiStateObject, in the format 
	 * [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the MultiStateObject.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * MultiStateObject. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the MultiStateObject's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the MultiStateObject. */
	strokeAlignment: StrokeAlignment;
	/** If true, the MultiStateObject does not print. */
	nonprinting: boolean;
	/** The layer that the MultiStateObject is on. */
	itemLayer: Layer;
	/** If true, the MultiStateObject is locked. */
	locked: boolean;
	/** Display performance options for the MultiStateObject. */
	localDisplaySetting: DisplaySettingOptions;
	/**
	 * The rotatation angle of the MultiStateObject. (Range: -360 
	 * to 360)
	 */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the MultiStateObject. (Range: 
	 * -360 to 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the MultiStateObject. */
	horizontalScale: number;
	/** The vertical scaling applied to the MultiStateObject. */
	verticalScale: number;
	/**
	 * The rotation angle of the MultiStateObject relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the MultiStateObject relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the MultiStateObject relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the MultiStateObject relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the MultiStateObject. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the MultiStateObject has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the MultiStateObject was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the MultiStateObject is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the MultiStateObject. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Brings the MultiStateObject to the front of its layer or in 
	 * front of a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the MultiStateObject to the back of its layer or 
	 * behind a particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the MultiStateObject forward one level in its layer. */
	bringForward(): void;
	/** Sends the MultiStateObject back one level in its layer. */
	sendBackward(): void;
	/**
	 * Converts the MultiStateObject to a different shape.
	 * @param {ConvertShapeOptions} given - The MultiStateObject's 
	 * new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Releases all the states associated with this object and then 
	 * destroys the parent object.
	 */
	releaseAsObjects(): void;
	/**
	 * Adds items to a specific appearance state of this object.
	 * @param {PageItem} pageitems - One or more page items to add 
	 * as a state.
	 */
	addItemsAsState(pageitems: PageItem): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the MultiStateObject. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the MultiStateObject.
	 * @param {Flip} given - The axis around which to flip the 
	 * MultiStateObject.
	 * @param {any} around - The point around which to flip the 
	 * MultiStateObject. Can accept: Array of 2 Units or 
	 * AnchorPoint enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the MultiStateObject at the specified location or 
	 * offset.
	 * @param {any} to - The location of the new MultiStateObject, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new MultiStateObject from the original MultiStateObject's 
	 * position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the MultiStateObject to a new location. Note: Either 
	 * the 'to' or 'by' parameter is required; if both parameters 
	 * are defined, only the to value is used.
	 * @param {any} to - The new location of the 
	 * MultiStateObject,in the format (x, y). Can accept: Array of 
	 * 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the MultiStateObject relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * MultiStateObject's existing attributes before applying the 
	 * style. (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * MultiStateObject that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the MultiStateObject. 
	 * Transformations include rotation, scaling, flipping, 
	 * fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the MultiStateObject using the last 
	 * transformation performed on any object. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the MultiStateObject using the last sequence of 
	 * transform operations performed on any single object or 
	 * performed at the same time on any group of objects. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the MultiStateObject using the last 
	 * transformation performed on any MultiStateObject. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the MultiStateObject using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new MultiStateObject. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new MultiStateObject. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new MultiStateObject. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new MultiStateObject. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new MultiStateObject. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the MultiStateObject in relation to previously 
	 * selected objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MultiStateObject (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * MultiStateObject.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MultiStateObject;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of multi-state objects.
 * @class
 */
export declare class MultiStateObjects {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the MultiStateObject. */
	count(): number;
	/**
	 * Creates a new MultiStateObject
	 * @param {Layer} layer - The layer on which to create the 
	 * MultiStateObject. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the MultiStateObject relative to the reference object 
	 * or within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MultiStateObject (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): MultiStateObject;
	/**
	 * Returns the MultiStateObject with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MultiStateObject;
	/**
	 * Returns the MultiStateObject with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): MultiStateObject;
	/**
	 * Returns the MultiStateObject with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MultiStateObject;
	/**
	 * Returns the MultiStateObjects within the specified range.
	 * @param {any} _from - The MultiStateObject, index, or name at 
	 * the beginning of the range. Can accept: MultiStateObject, 
	 * Long Integer or String.
	 * @param {any} to - The MultiStateObject, index, or name at 
	 * the end of the range. Can accept: MultiStateObject, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): MultiStateObject;
	/** Returns the first MultiStateObject in the collection. */
	firstItem(): MultiStateObject;
	/** Returns the last MultiStateObject in the collection. */
	lastItem(): MultiStateObject;
	/** Returns the middle MultiStateObject in the collection. */
	middleItem(): MultiStateObject;
	/**
	 * Returns the MultiStateObject with the index previous to the 
	 * specified index.
	 * @param {MultiStateObject} obj - The index of the 
	 * MultiStateObject that follows the desired MultiStateObject.
	 */
	previousItem(obj: MultiStateObject): MultiStateObject;
	/**
	 * Returns the MultiStateObject whose index follows the 
	 * specified MultiStateObject in the collection.
	 * @param {MultiStateObject} obj - The MultiStateObject whose 
	 * index comes before the desired MultiStateObject.
	 */
	nextItem(obj: MultiStateObject): MultiStateObject;
	/** Returns any MultiStateObject in the collection. */
	anyItem(): MultiStateObject;
	/** Returns every MultiStateObject in the collection. */
	everyItem(): MultiStateObject;
	/**
	 * Generates a string which, if executed, will return the 
	 * MultiStateObject.
	 */
	toSource(): string;
	/**
	 * Returns the MultiStateObject with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MultiStateObject;
}

/**
 * A checkbox.
 * @class
 * @extends FormField
 */
export declare class CheckBox extends FormField {
	/**
	 * Dispatched before a CheckBox is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a CheckBox is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** The XML element associated with the CheckBox. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the CheckBox. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the CheckBox. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the CheckBox. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the CheckBox. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the CheckBox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CheckBox (a PlaceGun, Character, Spread, 
	 * MasterSpread, SplineItem, Polygon, GraphicLine, Rectangle, 
	 * Oval, Group or Snippet).
	 */
	readonly parent: any;
	/** The index of the CheckBox within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of states. */
	readonly states: States;
	/** A collection of submit form behavior objects. */
	readonly submitFormBehaviors: SubmitFormBehaviors;
	/** A collection of behavior objects. */
	readonly behaviors: Behaviors;
	/** A collection of clear form behavior objects. */
	readonly clearFormBehaviors: ClearFormBehaviors;
	/** A collection of print form behavior objects. */
	readonly printFormBehaviors: PrintFormBehaviors;
	/** A collection of view zoom behavior objects. */
	readonly viewZoomBehaviors: ViewZoomBehaviors;
	/** A collection of sound behavior objects. */
	readonly soundBehaviors: SoundBehaviors;
	/** A collection of show/hide fields behavior objects. */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;
	/** A collection of movie behavior objects. */
	readonly movieBehaviors: MovieBehaviors;
	/** A collection of goto anchor behavior objects. */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;
	/** A collection of goto first page behavior objects. */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;
	/** A collection of goto last page behavior objects. */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;
	/** A collection of goto next page behavior objects. */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;
	/** A collection of goto previous page behavior objects. */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;
	/** A collection of goto next view behavior objects. */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;
	/** A collection of goto previous view behavior objects. */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;
	/** A collection of goto URL behavior objects. */
	readonly gotoURLBehaviors: GotoURLBehaviors;
	/** A collection of open file behavior objects. */
	readonly openFileBehaviors: OpenFileBehaviors;
	/** If true, the form field is read only in the exported PDF. */
	readOnly: boolean;
	/** If true, the form field is required in the exported PDF. */
	required: boolean;
	/**
	 * If true, the form field/push button is printable in the 
	 * exported PDF.
	 */
	printableInPdf: boolean;
	/**
	 * If true, the form field/push button is hidden until 
	 * triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;
	/**
	 * If true, the check box/radio button is selected by default 
	 * in the exported PDF.
	 */
	checkedByDefault: boolean;
	/**
	 * Export value for the check box/radio button in the exported 
	 * PDF.
	 */
	exportValue: string;
	/**
	 * The index of the active state in the object's states 
	 * collection.
	 */
	activeStateIndex: number;
	/** The name of the CheckBox. */
	name: string;
	/** The description of the CheckBox. */
	description: string;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the CheckBox excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the CheckBox including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the CheckBox. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the CheckBox's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the CheckBox's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the CheckBox's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the CheckBox. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the CheckBox. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the CheckBox. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the CheckBox, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the CheckBox.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * CheckBox. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the CheckBox, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the CheckBox.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * CheckBox. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the CheckBox's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the CheckBox. */
	strokeAlignment: StrokeAlignment;
	/** If true, the CheckBox does not print. */
	nonprinting: boolean;
	/** The layer that the CheckBox is on. */
	itemLayer: Layer;
	/** If true, the CheckBox is locked. */
	locked: boolean;
	/** Display performance options for the CheckBox. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the CheckBox. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the CheckBox. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the CheckBox. */
	horizontalScale: number;
	/** The vertical scaling applied to the CheckBox. */
	verticalScale: number;
	/**
	 * The rotation angle of the CheckBox relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the CheckBox relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the CheckBox relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the CheckBox relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the CheckBox. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the CheckBox has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the CheckBox was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the CheckBox is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the CheckBox. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Brings the CheckBox to the front of its layer or in front of 
	 * a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the CheckBox to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the CheckBox forward one level in its layer. */
	bringForward(): void;
	/** Sends the CheckBox back one level in its layer. */
	sendBackward(): void;
	/**
	 * Converts the CheckBox to a different shape.
	 * @param {ConvertShapeOptions} given - The CheckBox's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Converts the button object to the page item currently in the 
	 * active state. Page items from other states will be lost.
	 */
	convertToObject(): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the CheckBox. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the CheckBox.
	 * @param {Flip} given - The axis around which to flip the 
	 * CheckBox.
	 * @param {any} around - The point around which to flip the 
	 * CheckBox. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the CheckBox at the specified location or offset.
	 * @param {any} to - The location of the new CheckBox, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new CheckBox from the original CheckBox's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the CheckBox to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the CheckBox,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the CheckBox relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * CheckBox's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * CheckBox that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the CheckBox. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the CheckBox using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the CheckBox using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the CheckBox using the last transformation 
	 * performed on any CheckBox. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the CheckBox using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new CheckBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new CheckBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new CheckBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new CheckBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new CheckBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the CheckBox in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CheckBox (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * CheckBox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CheckBox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of checkboxes.
 * @class
 */
export declare class CheckBoxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the CheckBox. */
	count(): number;
	/**
	 * Creates a new CheckBox
	 * @param {Layer} layer - The layer on which to create the 
	 * CheckBox. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the CheckBox relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CheckBox (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): CheckBox;
	/**
	 * Returns the CheckBox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CheckBox;
	/**
	 * Returns the CheckBox with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): CheckBox;
	/**
	 * Returns the CheckBox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CheckBox;
	/**
	 * Returns the CheckBoxes within the specified range.
	 * @param {any} _from - The CheckBox, index, or name at the 
	 * beginning of the range. Can accept: CheckBox, Long Integer 
	 * or String.
	 * @param {any} to - The CheckBox, index, or name at the end of 
	 * the range. Can accept: CheckBox, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): CheckBox;
	/** Returns the first CheckBox in the collection. */
	firstItem(): CheckBox;
	/** Returns the last CheckBox in the collection. */
	lastItem(): CheckBox;
	/** Returns the middle CheckBox in the collection. */
	middleItem(): CheckBox;
	/**
	 * Returns the CheckBox with the index previous to the 
	 * specified index.
	 * @param {CheckBox} obj - The index of the CheckBox that 
	 * follows the desired CheckBox.
	 */
	previousItem(obj: CheckBox): CheckBox;
	/**
	 * Returns the CheckBox whose index follows the specified 
	 * CheckBox in the collection.
	 * @param {CheckBox} obj - The CheckBox whose index comes 
	 * before the desired CheckBox.
	 */
	nextItem(obj: CheckBox): CheckBox;
	/** Returns any CheckBox in the collection. */
	anyItem(): CheckBox;
	/** Returns every CheckBox in the collection. */
	everyItem(): CheckBox;
	/**
	 * Generates a string which, if executed, will return the 
	 * CheckBox.
	 */
	toSource(): string;
	/**
	 * Returns the CheckBox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CheckBox;
}

/**
 * A combobox.
 * @class
 * @extends FormField
 */
export declare class ComboBox extends FormField {
	/**
	 * Dispatched before a ComboBox is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a ComboBox is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** The XML element associated with the ComboBox. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the ComboBox. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the ComboBox. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the ComboBox. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the ComboBox. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the ComboBox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ComboBox (a PlaceGun, Character, Spread, 
	 * MasterSpread, SplineItem, Polygon, GraphicLine, Rectangle, 
	 * Oval, Group or Snippet).
	 */
	readonly parent: any;
	/** The index of the ComboBox within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of submit form behavior objects. */
	readonly submitFormBehaviors: SubmitFormBehaviors;
	/** A collection of behavior objects. */
	readonly behaviors: Behaviors;
	/** A collection of clear form behavior objects. */
	readonly clearFormBehaviors: ClearFormBehaviors;
	/** A collection of print form behavior objects. */
	readonly printFormBehaviors: PrintFormBehaviors;
	/** A collection of view zoom behavior objects. */
	readonly viewZoomBehaviors: ViewZoomBehaviors;
	/** A collection of sound behavior objects. */
	readonly soundBehaviors: SoundBehaviors;
	/** A collection of show/hide fields behavior objects. */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;
	/** A collection of movie behavior objects. */
	readonly movieBehaviors: MovieBehaviors;
	/** A collection of goto anchor behavior objects. */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;
	/** A collection of goto first page behavior objects. */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;
	/** A collection of goto last page behavior objects. */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;
	/** A collection of goto next page behavior objects. */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;
	/** A collection of goto previous page behavior objects. */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;
	/** A collection of goto next view behavior objects. */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;
	/** A collection of goto previous view behavior objects. */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;
	/** A collection of goto URL behavior objects. */
	readonly gotoURLBehaviors: GotoURLBehaviors;
	/** A collection of open file behavior objects. */
	readonly openFileBehaviors: OpenFileBehaviors;
	/** If true, the form field is read only in the exported PDF. */
	readOnly: boolean;
	/** If true, the form field is required in the exported PDF. */
	required: boolean;
	/**
	 * If true, the form field/push button is printable in the 
	 * exported PDF.
	 */
	printableInPdf: boolean;
	/**
	 * If true, the form field/push button is hidden until 
	 * triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;
	/** The font size for the form field in the exported PDF. */
	fontSize: number;
	/** If true, the choices would be sorted in the exported PDF. */
	sortChoices: boolean;
	/**
	 * The list of choices for combo and list boxes in the exported 
	 * PDF.
	 */
	choiceList: string;
	/**
	 * If true, the form field has right to left text enabled in 
	 * the exported PDF.
	 */
	rightToLeftField: boolean;
	/**
	 * The index of the active state in the object's states 
	 * collection.
	 */
	activeStateIndex: number;
	/** The name of the ComboBox. */
	name: string;
	/** The description of the ComboBox. */
	description: string;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the ComboBox excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the ComboBox including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the ComboBox. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the ComboBox's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the ComboBox's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the ComboBox's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the ComboBox. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the ComboBox. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the ComboBox. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the ComboBox, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the ComboBox.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * ComboBox. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the ComboBox, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the ComboBox.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * ComboBox. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the ComboBox's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the ComboBox. */
	strokeAlignment: StrokeAlignment;
	/** If true, the ComboBox does not print. */
	nonprinting: boolean;
	/** The layer that the ComboBox is on. */
	itemLayer: Layer;
	/** If true, the ComboBox is locked. */
	locked: boolean;
	/** Display performance options for the ComboBox. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the ComboBox. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the ComboBox. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the ComboBox. */
	horizontalScale: number;
	/** The vertical scaling applied to the ComboBox. */
	verticalScale: number;
	/**
	 * The rotation angle of the ComboBox relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the ComboBox relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the ComboBox relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the ComboBox relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the ComboBox. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the ComboBox has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the ComboBox was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the ComboBox is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the ComboBox. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Brings the ComboBox to the front of its layer or in front of 
	 * a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the ComboBox to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the ComboBox forward one level in its layer. */
	bringForward(): void;
	/** Sends the ComboBox back one level in its layer. */
	sendBackward(): void;
	/**
	 * Converts the ComboBox to a different shape.
	 * @param {ConvertShapeOptions} given - The ComboBox's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Converts the button object to the page item currently in the 
	 * active state. Page items from other states will be lost.
	 */
	convertToObject(): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the ComboBox. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the ComboBox.
	 * @param {Flip} given - The axis around which to flip the 
	 * ComboBox.
	 * @param {any} around - The point around which to flip the 
	 * ComboBox. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the ComboBox at the specified location or offset.
	 * @param {any} to - The location of the new ComboBox, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new ComboBox from the original ComboBox's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the ComboBox to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the ComboBox,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the ComboBox relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * ComboBox's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * ComboBox that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the ComboBox. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the ComboBox using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the ComboBox using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the ComboBox using the last transformation 
	 * performed on any ComboBox. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the ComboBox using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ComboBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ComboBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ComboBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ComboBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ComboBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the ComboBox in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ComboBox (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ComboBox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ComboBox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of comboboxes.
 * @class
 */
export declare class ComboBoxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the ComboBox. */
	count(): number;
	/**
	 * Creates a new ComboBox
	 * @param {Layer} layer - The layer on which to create the 
	 * ComboBox. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the ComboBox relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ComboBox (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): ComboBox;
	/**
	 * Returns the ComboBox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ComboBox;
	/**
	 * Returns the ComboBox with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ComboBox;
	/**
	 * Returns the ComboBox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ComboBox;
	/**
	 * Returns the ComboBoxes within the specified range.
	 * @param {any} _from - The ComboBox, index, or name at the 
	 * beginning of the range. Can accept: ComboBox, Long Integer 
	 * or String.
	 * @param {any} to - The ComboBox, index, or name at the end of 
	 * the range. Can accept: ComboBox, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): ComboBox;
	/** Returns the first ComboBox in the collection. */
	firstItem(): ComboBox;
	/** Returns the last ComboBox in the collection. */
	lastItem(): ComboBox;
	/** Returns the middle ComboBox in the collection. */
	middleItem(): ComboBox;
	/**
	 * Returns the ComboBox with the index previous to the 
	 * specified index.
	 * @param {ComboBox} obj - The index of the ComboBox that 
	 * follows the desired ComboBox.
	 */
	previousItem(obj: ComboBox): ComboBox;
	/**
	 * Returns the ComboBox whose index follows the specified 
	 * ComboBox in the collection.
	 * @param {ComboBox} obj - The ComboBox whose index comes 
	 * before the desired ComboBox.
	 */
	nextItem(obj: ComboBox): ComboBox;
	/** Returns any ComboBox in the collection. */
	anyItem(): ComboBox;
	/** Returns every ComboBox in the collection. */
	everyItem(): ComboBox;
	/**
	 * Generates a string which, if executed, will return the 
	 * ComboBox.
	 */
	toSource(): string;
	/**
	 * Returns the ComboBox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ComboBox;
}

/**
 * A listbox.
 * @class
 * @extends FormField
 */
export declare class ListBox extends FormField {
	/**
	 * Dispatched before a ListBox is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a ListBox is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** The XML element associated with the ListBox. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the ListBox. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the ListBox. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the ListBox. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the ListBox. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the ListBox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ListBox (a PlaceGun, Character, Spread, 
	 * MasterSpread, SplineItem, Polygon, GraphicLine, Rectangle, 
	 * Oval, Group or Snippet).
	 */
	readonly parent: any;
	/** The index of the ListBox within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of submit form behavior objects. */
	readonly submitFormBehaviors: SubmitFormBehaviors;
	/** A collection of behavior objects. */
	readonly behaviors: Behaviors;
	/** A collection of clear form behavior objects. */
	readonly clearFormBehaviors: ClearFormBehaviors;
	/** A collection of print form behavior objects. */
	readonly printFormBehaviors: PrintFormBehaviors;
	/** A collection of view zoom behavior objects. */
	readonly viewZoomBehaviors: ViewZoomBehaviors;
	/** A collection of sound behavior objects. */
	readonly soundBehaviors: SoundBehaviors;
	/** A collection of show/hide fields behavior objects. */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;
	/** A collection of movie behavior objects. */
	readonly movieBehaviors: MovieBehaviors;
	/** A collection of goto anchor behavior objects. */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;
	/** A collection of goto first page behavior objects. */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;
	/** A collection of goto last page behavior objects. */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;
	/** A collection of goto next page behavior objects. */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;
	/** A collection of goto previous page behavior objects. */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;
	/** A collection of goto next view behavior objects. */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;
	/** A collection of goto previous view behavior objects. */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;
	/** A collection of goto URL behavior objects. */
	readonly gotoURLBehaviors: GotoURLBehaviors;
	/** A collection of open file behavior objects. */
	readonly openFileBehaviors: OpenFileBehaviors;
	/** If true, the form field is read only in the exported PDF. */
	readOnly: boolean;
	/** If true, the form field is required in the exported PDF. */
	required: boolean;
	/**
	 * If true, the form field/push button is printable in the 
	 * exported PDF.
	 */
	printableInPdf: boolean;
	/**
	 * If true, the form field/push button is hidden until 
	 * triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;
	/** The font size for the form field in the exported PDF. */
	fontSize: number;
	/** If true, the choices would be sorted in the exported PDF. */
	sortChoices: boolean;
	/**
	 * The list of choices for combo and list boxes in the exported 
	 * PDF.
	 */
	choiceList: string;
	/**
	 * If true, the form field has right to left text enabled in 
	 * the exported PDF.
	 */
	rightToLeftField: boolean;
	/**
	 * If true, the list box can have multiple items selected 
	 * simultaneously in the exported PDF.
	 */
	multipleSelection: boolean;
	/**
	 * The index of the active state in the object's states 
	 * collection.
	 */
	activeStateIndex: number;
	/** The name of the ListBox. */
	name: string;
	/** The description of the ListBox. */
	description: string;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the ListBox excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the ListBox including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the ListBox. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the ListBox's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the ListBox's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the ListBox's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the ListBox. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the ListBox. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the ListBox. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the ListBox, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the ListBox.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * ListBox. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the ListBox, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the ListBox.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * ListBox. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the ListBox's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the ListBox. */
	strokeAlignment: StrokeAlignment;
	/** If true, the ListBox does not print. */
	nonprinting: boolean;
	/** The layer that the ListBox is on. */
	itemLayer: Layer;
	/** If true, the ListBox is locked. */
	locked: boolean;
	/** Display performance options for the ListBox. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the ListBox. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the ListBox. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the ListBox. */
	horizontalScale: number;
	/** The vertical scaling applied to the ListBox. */
	verticalScale: number;
	/**
	 * The rotation angle of the ListBox relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the ListBox relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the ListBox relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the ListBox relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the ListBox. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the ListBox has been flipped independently 
	 * of its parent object and, if yes, the direction in which the 
	 * ListBox was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the ListBox is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the ListBox. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Brings the ListBox to the front of its layer or in front of 
	 * a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the ListBox to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the ListBox forward one level in its layer. */
	bringForward(): void;
	/** Sends the ListBox back one level in its layer. */
	sendBackward(): void;
	/**
	 * Converts the ListBox to a different shape.
	 * @param {ConvertShapeOptions} given - The ListBox's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Converts the button object to the page item currently in the 
	 * active state. Page items from other states will be lost.
	 */
	convertToObject(): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the ListBox. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the ListBox.
	 * @param {Flip} given - The axis around which to flip the 
	 * ListBox.
	 * @param {any} around - The point around which to flip the 
	 * ListBox. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the ListBox at the specified location or offset.
	 * @param {any} to - The location of the new ListBox, specified 
	 * in coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new ListBox from the original ListBox's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the ListBox to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the ListBox,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the ListBox relative to its current position, 
	 * in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * ListBox's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * ListBox that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the ListBox. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the ListBox using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the ListBox using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the ListBox using the last transformation 
	 * performed on any ListBox. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the ListBox using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ListBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ListBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ListBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ListBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ListBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the ListBox in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ListBox (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ListBox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ListBox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of listboxes.
 * @class
 */
export declare class ListBoxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the ListBox. */
	count(): number;
	/**
	 * Creates a new ListBox
	 * @param {Layer} layer - The layer on which to create the 
	 * ListBox. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the ListBox relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ListBox (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): ListBox;
	/**
	 * Returns the ListBox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ListBox;
	/**
	 * Returns the ListBox with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ListBox;
	/**
	 * Returns the ListBox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ListBox;
	/**
	 * Returns the ListBoxes within the specified range.
	 * @param {any} _from - The ListBox, index, or name at the 
	 * beginning of the range. Can accept: ListBox, Long Integer or 
	 * String.
	 * @param {any} to - The ListBox, index, or name at the end of 
	 * the range. Can accept: ListBox, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): ListBox;
	/** Returns the first ListBox in the collection. */
	firstItem(): ListBox;
	/** Returns the last ListBox in the collection. */
	lastItem(): ListBox;
	/** Returns the middle ListBox in the collection. */
	middleItem(): ListBox;
	/**
	 * Returns the ListBox with the index previous to the specified 
	 * index.
	 * @param {ListBox} obj - The index of the ListBox that follows 
	 * the desired ListBox.
	 */
	previousItem(obj: ListBox): ListBox;
	/**
	 * Returns the ListBox whose index follows the specified 
	 * ListBox in the collection.
	 * @param {ListBox} obj - The ListBox whose index comes before 
	 * the desired ListBox.
	 */
	nextItem(obj: ListBox): ListBox;
	/** Returns any ListBox in the collection. */
	anyItem(): ListBox;
	/** Returns every ListBox in the collection. */
	everyItem(): ListBox;
	/**
	 * Generates a string which, if executed, will return the 
	 * ListBox.
	 */
	toSource(): string;
	/**
	 * Returns the ListBox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ListBox;
}

/**
 * A radio button.
 * @class
 * @extends FormField
 */
export declare class RadioButton extends FormField {
	/**
	 * Dispatched before a RadioButton is placed. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a RadioButton is placed. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** The XML element associated with the RadioButton. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the 
	 * RadioButton.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the RadioButton. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the RadioButton. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the RadioButton. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the RadioButton. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the RadioButton (a PlaceGun, Character, 
	 * Spread, MasterSpread, SplineItem, Polygon, GraphicLine, 
	 * Rectangle, Oval, Group or Snippet).
	 */
	readonly parent: any;
	/** The index of the RadioButton within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of states. */
	readonly states: States;
	/** A collection of submit form behavior objects. */
	readonly submitFormBehaviors: SubmitFormBehaviors;
	/** A collection of behavior objects. */
	readonly behaviors: Behaviors;
	/** A collection of clear form behavior objects. */
	readonly clearFormBehaviors: ClearFormBehaviors;
	/** A collection of print form behavior objects. */
	readonly printFormBehaviors: PrintFormBehaviors;
	/** A collection of view zoom behavior objects. */
	readonly viewZoomBehaviors: ViewZoomBehaviors;
	/** A collection of sound behavior objects. */
	readonly soundBehaviors: SoundBehaviors;
	/** A collection of show/hide fields behavior objects. */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;
	/** A collection of movie behavior objects. */
	readonly movieBehaviors: MovieBehaviors;
	/** A collection of goto anchor behavior objects. */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;
	/** A collection of goto first page behavior objects. */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;
	/** A collection of goto last page behavior objects. */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;
	/** A collection of goto next page behavior objects. */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;
	/** A collection of goto previous page behavior objects. */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;
	/** A collection of goto next view behavior objects. */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;
	/** A collection of goto previous view behavior objects. */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;
	/** A collection of goto URL behavior objects. */
	readonly gotoURLBehaviors: GotoURLBehaviors;
	/** A collection of open file behavior objects. */
	readonly openFileBehaviors: OpenFileBehaviors;
	/** If true, the form field is read only in the exported PDF. */
	readOnly: boolean;
	/** If true, the form field is required in the exported PDF. */
	required: boolean;
	/**
	 * If true, the form field/push button is printable in the 
	 * exported PDF.
	 */
	printableInPdf: boolean;
	/**
	 * If true, the form field/push button is hidden until 
	 * triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;
	/**
	 * If true, the check box/radio button is selected by default 
	 * in the exported PDF.
	 */
	checkedByDefault: boolean;
	/**
	 * Export value for the check box/radio button in the exported 
	 * PDF.
	 */
	exportValue: string;
	/**
	 * The index of the active state in the object's states 
	 * collection.
	 */
	activeStateIndex: number;
	/** The name of the RadioButton. */
	name: string;
	/** The description of the RadioButton. */
	description: string;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the RadioButton excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the RadioButton including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the RadioButton. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the RadioButton's fill color. 
	 * (To specify a tint percent, use a number in the range of 0 
	 * to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the RadioButton's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/**
	 * The weight (in points) to apply to the RadioButton's stroke.
	 */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the RadioButton. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the RadioButton. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the RadioButton. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the RadioButton, in the format [x, 
	 * y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the RadioButton.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * RadioButton. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the RadioButton, in the format [x, 
	 * y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the RadioButton.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * RadioButton. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the RadioButton's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the RadioButton. */
	strokeAlignment: StrokeAlignment;
	/** If true, the RadioButton does not print. */
	nonprinting: boolean;
	/** The layer that the RadioButton is on. */
	itemLayer: Layer;
	/** If true, the RadioButton is locked. */
	locked: boolean;
	/** Display performance options for the RadioButton. */
	localDisplaySetting: DisplaySettingOptions;
	/**
	 * The rotatation angle of the RadioButton. (Range: -360 to 
	 * 360)
	 */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the RadioButton. (Range: -360 
	 * to 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the RadioButton. */
	horizontalScale: number;
	/** The vertical scaling applied to the RadioButton. */
	verticalScale: number;
	/**
	 * The rotation angle of the RadioButton relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the RadioButton relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the RadioButton relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the RadioButton relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the RadioButton. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the RadioButton has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the RadioButton was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the RadioButton is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the RadioButton. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Brings the RadioButton to the front of its layer or in front 
	 * of a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the RadioButton to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the RadioButton forward one level in its layer. */
	bringForward(): void;
	/** Sends the RadioButton back one level in its layer. */
	sendBackward(): void;
	/**
	 * Converts the RadioButton to a different shape.
	 * @param {ConvertShapeOptions} given - The RadioButton's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Converts the button object to the page item currently in the 
	 * active state. Page items from other states will be lost.
	 */
	convertToObject(): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the RadioButton. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the RadioButton.
	 * @param {Flip} given - The axis around which to flip the 
	 * RadioButton.
	 * @param {any} around - The point around which to flip the 
	 * RadioButton. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the RadioButton at the specified location or 
	 * offset.
	 * @param {any} to - The location of the new RadioButton, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new RadioButton from the original RadioButton's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the RadioButton to a new location. Note: Either the 
	 * 'to' or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the RadioButton,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the RadioButton relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * RadioButton's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * RadioButton that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the RadioButton. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the RadioButton using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the RadioButton using the last sequence of 
	 * transform operations performed on any single object or 
	 * performed at the same time on any group of objects. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the RadioButton using the last transformation 
	 * performed on any RadioButton. Transformations include 
	 * moving, rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the RadioButton using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new RadioButton. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new RadioButton. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new RadioButton. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new RadioButton. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new RadioButton. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the RadioButton in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new RadioButton (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * RadioButton.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): RadioButton;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of radio buttons.
 * @class
 */
export declare class RadioButtons {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the RadioButton. */
	count(): number;
	/**
	 * Creates a new RadioButton
	 * @param {Layer} layer - The layer on which to create the 
	 * RadioButton. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the RadioButton relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new RadioButton (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): RadioButton;
	/**
	 * Returns the RadioButton with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): RadioButton;
	/**
	 * Returns the RadioButton with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): RadioButton;
	/**
	 * Returns the RadioButton with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): RadioButton;
	/**
	 * Returns the RadioButtons within the specified range.
	 * @param {any} _from - The RadioButton, index, or name at the 
	 * beginning of the range. Can accept: RadioButton, Long 
	 * Integer or String.
	 * @param {any} to - The RadioButton, index, or name at the end 
	 * of the range. Can accept: RadioButton, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): RadioButton;
	/** Returns the first RadioButton in the collection. */
	firstItem(): RadioButton;
	/** Returns the last RadioButton in the collection. */
	lastItem(): RadioButton;
	/** Returns the middle RadioButton in the collection. */
	middleItem(): RadioButton;
	/**
	 * Returns the RadioButton with the index previous to the 
	 * specified index.
	 * @param {RadioButton} obj - The index of the RadioButton that 
	 * follows the desired RadioButton.
	 */
	previousItem(obj: RadioButton): RadioButton;
	/**
	 * Returns the RadioButton whose index follows the specified 
	 * RadioButton in the collection.
	 * @param {RadioButton} obj - The RadioButton whose index comes 
	 * before the desired RadioButton.
	 */
	nextItem(obj: RadioButton): RadioButton;
	/** Returns any RadioButton in the collection. */
	anyItem(): RadioButton;
	/** Returns every RadioButton in the collection. */
	everyItem(): RadioButton;
	/**
	 * Generates a string which, if executed, will return the 
	 * RadioButton.
	 */
	toSource(): string;
	/**
	 * Returns the RadioButton with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: RadioButton;
}

/**
 * A text box.
 * @class
 * @extends FormField
 */
export declare class TextBox extends FormField {
	/**
	 * Dispatched before a TextBox is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a TextBox is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** The XML element associated with the TextBox. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the TextBox. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the TextBox. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the TextBox. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the TextBox. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the TextBox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextBox (a PlaceGun, Character, Spread, 
	 * MasterSpread, SplineItem, Polygon, GraphicLine, Rectangle, 
	 * Oval, Group or Snippet).
	 */
	readonly parent: any;
	/** The index of the TextBox within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of submit form behavior objects. */
	readonly submitFormBehaviors: SubmitFormBehaviors;
	/** A collection of behavior objects. */
	readonly behaviors: Behaviors;
	/** A collection of clear form behavior objects. */
	readonly clearFormBehaviors: ClearFormBehaviors;
	/** A collection of print form behavior objects. */
	readonly printFormBehaviors: PrintFormBehaviors;
	/** A collection of view zoom behavior objects. */
	readonly viewZoomBehaviors: ViewZoomBehaviors;
	/** A collection of sound behavior objects. */
	readonly soundBehaviors: SoundBehaviors;
	/** A collection of show/hide fields behavior objects. */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;
	/** A collection of movie behavior objects. */
	readonly movieBehaviors: MovieBehaviors;
	/** A collection of goto anchor behavior objects. */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;
	/** A collection of goto first page behavior objects. */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;
	/** A collection of goto last page behavior objects. */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;
	/** A collection of goto next page behavior objects. */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;
	/** A collection of goto previous page behavior objects. */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;
	/** A collection of goto next view behavior objects. */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;
	/** A collection of goto previous view behavior objects. */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;
	/** A collection of goto URL behavior objects. */
	readonly gotoURLBehaviors: GotoURLBehaviors;
	/** A collection of open file behavior objects. */
	readonly openFileBehaviors: OpenFileBehaviors;
	/** If true, the form field is read only in the exported PDF. */
	readOnly: boolean;
	/** If true, the form field is required in the exported PDF. */
	required: boolean;
	/**
	 * If true, the form field/push button is printable in the 
	 * exported PDF.
	 */
	printableInPdf: boolean;
	/**
	 * If true, the form field/push button is hidden until 
	 * triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;
	/** If true, the text field is multiline in the exported PDF. */
	multiline: boolean;
	/**
	 * If true, the text field is a password field in the exported 
	 * PDF.
	 */
	password: boolean;
	/** If true, the text field is scrollable in the exported PDF. */
	scrollable: boolean;
	/** The font size for the form field in the exported PDF. */
	fontSize: number;
	/**
	 * If true, the form field has right to left text enabled in 
	 * the exported PDF.
	 */
	rightToLeftField: boolean;
	/**
	 * The index of the active state in the object's states 
	 * collection.
	 */
	activeStateIndex: number;
	/** The name of the TextBox. */
	name: string;
	/** The description of the TextBox. */
	description: string;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the TextBox excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the TextBox including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the TextBox. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the TextBox's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the TextBox's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the TextBox's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the TextBox. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the TextBox. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the TextBox. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the TextBox, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the TextBox.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * TextBox. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the TextBox, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the TextBox.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * TextBox. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the TextBox's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the TextBox. */
	strokeAlignment: StrokeAlignment;
	/** If true, the TextBox does not print. */
	nonprinting: boolean;
	/** The layer that the TextBox is on. */
	itemLayer: Layer;
	/** If true, the TextBox is locked. */
	locked: boolean;
	/** Display performance options for the TextBox. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the TextBox. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the TextBox. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the TextBox. */
	horizontalScale: number;
	/** The vertical scaling applied to the TextBox. */
	verticalScale: number;
	/**
	 * The rotation angle of the TextBox relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the TextBox relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the TextBox relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the TextBox relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the TextBox. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the TextBox has been flipped independently 
	 * of its parent object and, if yes, the direction in which the 
	 * TextBox was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the TextBox is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the TextBox. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Brings the TextBox to the front of its layer or in front of 
	 * a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the TextBox to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the TextBox forward one level in its layer. */
	bringForward(): void;
	/** Sends the TextBox back one level in its layer. */
	sendBackward(): void;
	/**
	 * Converts the TextBox to a different shape.
	 * @param {ConvertShapeOptions} given - The TextBox's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Converts the button object to the page item currently in the 
	 * active state. Page items from other states will be lost.
	 */
	convertToObject(): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the TextBox. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the TextBox.
	 * @param {Flip} given - The axis around which to flip the 
	 * TextBox.
	 * @param {any} around - The point around which to flip the 
	 * TextBox. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the TextBox at the specified location or offset.
	 * @param {any} to - The location of the new TextBox, specified 
	 * in coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new TextBox from the original TextBox's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the TextBox to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the TextBox,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the TextBox relative to its current position, 
	 * in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * TextBox's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * TextBox that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the TextBox. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the TextBox using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the TextBox using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the TextBox using the last transformation 
	 * performed on any TextBox. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the TextBox using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextBox. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the TextBox in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TextBox (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextBox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextBox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of text boxes.
 * @class
 */
export declare class TextBoxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the TextBox. */
	count(): number;
	/**
	 * Creates a new TextBox
	 * @param {Layer} layer - The layer on which to create the 
	 * TextBox. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the TextBox relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TextBox (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): TextBox;
	/**
	 * Returns the TextBox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TextBox;
	/**
	 * Returns the TextBox with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TextBox;
	/**
	 * Returns the TextBox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): TextBox;
	/**
	 * Returns the TextBoxes within the specified range.
	 * @param {any} _from - The TextBox, index, or name at the 
	 * beginning of the range. Can accept: TextBox, Long Integer or 
	 * String.
	 * @param {any} to - The TextBox, index, or name at the end of 
	 * the range. Can accept: TextBox, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): TextBox;
	/** Returns the first TextBox in the collection. */
	firstItem(): TextBox;
	/** Returns the last TextBox in the collection. */
	lastItem(): TextBox;
	/** Returns the middle TextBox in the collection. */
	middleItem(): TextBox;
	/**
	 * Returns the TextBox with the index previous to the specified 
	 * index.
	 * @param {TextBox} obj - The index of the TextBox that follows 
	 * the desired TextBox.
	 */
	previousItem(obj: TextBox): TextBox;
	/**
	 * Returns the TextBox whose index follows the specified 
	 * TextBox in the collection.
	 * @param {TextBox} obj - The TextBox whose index comes before 
	 * the desired TextBox.
	 */
	nextItem(obj: TextBox): TextBox;
	/** Returns any TextBox in the collection. */
	anyItem(): TextBox;
	/** Returns every TextBox in the collection. */
	everyItem(): TextBox;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextBox.
	 */
	toSource(): string;
	/**
	 * Returns the TextBox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TextBox;
}

/**
 * A signature field.
 * @class
 * @extends FormField
 */
export declare class SignatureField extends FormField {
	/**
	 * Dispatched before a SignatureField is placed. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a SignatureField is placed. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** The XML element associated with the SignatureField. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the 
	 * SignatureField.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/**
	 * Transparency settings for the content of the SignatureField.
	 */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the SignatureField. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the SignatureField. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the SignatureField. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the SignatureField (a PlaceGun, Character, 
	 * Spread, MasterSpread, SplineItem, Polygon, GraphicLine, 
	 * Rectangle, Oval, Group or Snippet).
	 */
	readonly parent: any;
	/**
	 * The index of the SignatureField within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of submit form behavior objects. */
	readonly submitFormBehaviors: SubmitFormBehaviors;
	/** A collection of behavior objects. */
	readonly behaviors: Behaviors;
	/** A collection of clear form behavior objects. */
	readonly clearFormBehaviors: ClearFormBehaviors;
	/** A collection of print form behavior objects. */
	readonly printFormBehaviors: PrintFormBehaviors;
	/** A collection of view zoom behavior objects. */
	readonly viewZoomBehaviors: ViewZoomBehaviors;
	/** A collection of sound behavior objects. */
	readonly soundBehaviors: SoundBehaviors;
	/** A collection of show/hide fields behavior objects. */
	readonly showHideFieldsBehaviors: ShowHideFieldsBehaviors;
	/** A collection of movie behavior objects. */
	readonly movieBehaviors: MovieBehaviors;
	/** A collection of goto anchor behavior objects. */
	readonly gotoAnchorBehaviors: GotoAnchorBehaviors;
	/** A collection of goto first page behavior objects. */
	readonly gotoFirstPageBehaviors: GotoFirstPageBehaviors;
	/** A collection of goto last page behavior objects. */
	readonly gotoLastPageBehaviors: GotoLastPageBehaviors;
	/** A collection of goto next page behavior objects. */
	readonly gotoNextPageBehaviors: GotoNextPageBehaviors;
	/** A collection of goto previous page behavior objects. */
	readonly gotoPreviousPageBehaviors: GotoPreviousPageBehaviors;
	/** A collection of goto next view behavior objects. */
	readonly gotoNextViewBehaviors: GotoNextViewBehaviors;
	/** A collection of goto previous view behavior objects. */
	readonly gotoPreviousViewBehaviors: GotoPreviousViewBehaviors;
	/** A collection of goto URL behavior objects. */
	readonly gotoURLBehaviors: GotoURLBehaviors;
	/** A collection of open file behavior objects. */
	readonly openFileBehaviors: OpenFileBehaviors;
	/** If true, the form field is read only in the exported PDF. */
	readOnly: boolean;
	/** If true, the form field is required in the exported PDF. */
	required: boolean;
	/**
	 * If true, the form field/push button is printable in the 
	 * exported PDF.
	 */
	printableInPdf: boolean;
	/**
	 * If true, the form field/push button is hidden until 
	 * triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean;
	/**
	 * The index of the active state in the object's states 
	 * collection.
	 */
	activeStateIndex: number;
	/** The name of the SignatureField. */
	name: string;
	/** The description of the SignatureField. */
	description: string;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the SignatureField excluding the stroke width, 
	 * in the format [y1, x1, y2, x2], which give the coordinates 
	 * of the top-left and bottom-right corners of the bounding 
	 * box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the SignatureField including the stroke width, 
	 * in the format [y1, x1, y2, x2], which give the coordinates 
	 * of the top-left and bottom-right corners of the bounding 
	 * box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the SignatureField. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the SignatureField's fill 
	 * color. (To specify a tint percent, use a number in the range 
	 * of 0 to 100; to use the inherited or overridden value, use 
	 * -1.)
	 */
	fillTint: number;
	/**
	 * If true, the SignatureField's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/**
	 * The weight (in points) to apply to the SignatureField's 
	 * stroke.
	 */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the SignatureField. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the SignatureField. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the SignatureField. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the SignatureField, in the format [x, 
	 * y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the SignatureField.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * SignatureField. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the SignatureField, in the format 
	 * [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the SignatureField.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * SignatureField. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the SignatureField's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the SignatureField. */
	strokeAlignment: StrokeAlignment;
	/** If true, the SignatureField does not print. */
	nonprinting: boolean;
	/** The layer that the SignatureField is on. */
	itemLayer: Layer;
	/** If true, the SignatureField is locked. */
	locked: boolean;
	/** Display performance options for the SignatureField. */
	localDisplaySetting: DisplaySettingOptions;
	/**
	 * The rotatation angle of the SignatureField. (Range: -360 to 
	 * 360)
	 */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the SignatureField. (Range: 
	 * -360 to 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the SignatureField. */
	horizontalScale: number;
	/** The vertical scaling applied to the SignatureField. */
	verticalScale: number;
	/**
	 * The rotation angle of the SignatureField relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the SignatureField relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the SignatureField relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the SignatureField relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the SignatureField. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the SignatureField has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the SignatureField was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the SignatureField is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the SignatureField. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Brings the SignatureField to the front of its layer or in 
	 * front of a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the SignatureField to the back of its layer or behind 
	 * a particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the SignatureField forward one level in its layer. */
	bringForward(): void;
	/** Sends the SignatureField back one level in its layer. */
	sendBackward(): void;
	/**
	 * Converts the SignatureField to a different shape.
	 * @param {ConvertShapeOptions} given - The SignatureField's 
	 * new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Converts the button object to the page item currently in the 
	 * active state. Page items from other states will be lost.
	 */
	convertToObject(): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the SignatureField. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the SignatureField.
	 * @param {Flip} given - The axis around which to flip the 
	 * SignatureField.
	 * @param {any} around - The point around which to flip the 
	 * SignatureField. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the SignatureField at the specified location or 
	 * offset.
	 * @param {any} to - The location of the new SignatureField, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new SignatureField from the original SignatureField's 
	 * position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the SignatureField to a new location. Note: Either the 
	 * 'to' or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the SignatureField,in 
	 * the format (x, y). Can accept: Array of 2 Units, Spread, 
	 * Page or Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the SignatureField relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * SignatureField's existing attributes before applying the 
	 * style. (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * SignatureField that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the SignatureField. 
	 * Transformations include rotation, scaling, flipping, 
	 * fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the SignatureField using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the SignatureField using the last sequence of 
	 * transform operations performed on any single object or 
	 * performed at the same time on any group of objects. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the SignatureField using the last transformation 
	 * performed on any SignatureField. Transformations include 
	 * moving, rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the SignatureField using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new SignatureField. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new SignatureField. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new SignatureField. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new SignatureField. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new SignatureField. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the SignatureField in relation to previously 
	 * selected objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new SignatureField (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * SignatureField.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): SignatureField;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of signature fields.
 * @class
 */
export declare class SignatureFields {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the SignatureField. */
	count(): number;
	/**
	 * Creates a new SignatureField
	 * @param {Layer} layer - The layer on which to create the 
	 * SignatureField. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the SignatureField relative to the reference object 
	 * or within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new SignatureField (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): SignatureField;
	/**
	 * Returns the SignatureField with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): SignatureField;
	/**
	 * Returns the SignatureField with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): SignatureField;
	/**
	 * Returns the SignatureField with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): SignatureField;
	/**
	 * Returns the SignatureFields within the specified range.
	 * @param {any} _from - The SignatureField, index, or name at 
	 * the beginning of the range. Can accept: SignatureField, Long 
	 * Integer or String.
	 * @param {any} to - The SignatureField, index, or name at the 
	 * end of the range. Can accept: SignatureField, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): SignatureField;
	/** Returns the first SignatureField in the collection. */
	firstItem(): SignatureField;
	/** Returns the last SignatureField in the collection. */
	lastItem(): SignatureField;
	/** Returns the middle SignatureField in the collection. */
	middleItem(): SignatureField;
	/**
	 * Returns the SignatureField with the index previous to the 
	 * specified index.
	 * @param {SignatureField} obj - The index of the 
	 * SignatureField that follows the desired SignatureField.
	 */
	previousItem(obj: SignatureField): SignatureField;
	/**
	 * Returns the SignatureField whose index follows the specified 
	 * SignatureField in the collection.
	 * @param {SignatureField} obj - The SignatureField whose index 
	 * comes before the desired SignatureField.
	 */
	nextItem(obj: SignatureField): SignatureField;
	/** Returns any SignatureField in the collection. */
	anyItem(): SignatureField;
	/** Returns every SignatureField in the collection. */
	everyItem(): SignatureField;
	/**
	 * Generates a string which, if executed, will return the 
	 * SignatureField.
	 */
	toSource(): string;
	/**
	 * Returns the SignatureField with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: SignatureField;
}

/**
 * A movie.
 * @class
 * @extends MediaItem
 */
export declare class Movie extends MediaItem {
	/**
	 * Dispatched when the value of a property changes on this 
	 * Movie. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched before a Movie is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Movie is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** The XML element associated with the Movie. */
	readonly associatedXMLElement: XMLItem;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the Movie. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the Movie. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Lists all page items contained by the Movie. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Movie. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the Movie. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Movie (a SplineItem, Polygon, GraphicLine, 
	 * Rectangle or Oval).
	 */
	readonly parent: any;
	/** The index of the Movie within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of navigation points. */
	readonly navigationPoints: NavigationPoints;
	/** The name of the Movie. */
	name: string;
	/** The description of the Movie. */
	description: string;
	/**
	 * The position of the floating window that displays the movie.
	 */
	floatingWindowPosition: FloatingWindowPosition;
	/** The size of the floating window that displays the movie. */
	floatingWindowSize: FloatingWindowSize;
	/**
	 * If true, the movie plays automatically when a user views the 
	 * page that contains the movie poster in the PDF document.
	 */
	playOnPageTurn: boolean;
	/**
	 * If true, displays playback controls at the bottom of the 
	 * movie display window.
	 */
	showControls: boolean;
	/**
	 * If true, opens a new window to play the movie. If false, 
	 * plays the movie in the poster frame on the PDF document 
	 * page.
	 */
	floatingWindow: boolean;
	/** The URL. */
	url: string;
	/** The poster file. */
	posterFile: string;
	/** The type of poster for the movie. */
	moviePosterType: MoviePosterTypes;
	/**
	 * If true, the file is embedded in the PDF. If false, the file 
	 * is linked to the PDF. Note: To embed movie files, acrobat 
	 * compatibility must be acrobat 6 or higher.
	 */
	embedInPDF: boolean;
	/** The horizontal scaling applied to the Movie. */
	horizontalScale: number;
	/** The vertical scaling applied to the Movie. */
	verticalScale: number;
	/**
	 * The bounds of the Movie excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the Movie including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/** The layer that the Movie is on. */
	itemLayer: Layer;
	/**
	 * The file path (colon delimited on the Mac OS). Can also 
	 * accept: File.
	 */
	filePath: string;
	/** The video controller skin name. */
	controllerSkin: string;
	/** If true, displays controller skin with mouse rollover. */
	showController: boolean;
	/** If true, movie loops forever. */
	movieLoop: boolean;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Movie. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the Movie's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the Movie's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the Movie's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the Movie. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the Movie. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Movie. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Movie, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the Movie.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * Movie. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the Movie, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the Movie.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * Movie. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the Movie's stroke color overprints any underlying 
	 * objects. If false, the stroke color knocks out the  
	 * underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the Movie. */
	strokeAlignment: StrokeAlignment;
	/** If true, the Movie does not print. */
	nonprinting: boolean;
	/** If true, the Movie is locked. */
	locked: boolean;
	/** Display performance options for the Movie. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the Movie. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the Movie. (Range: -360 to 360)
	 */
	shearAngle: number;
	/**
	 * The rotation angle of the Movie relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the Movie relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the Movie relative to its containing 
	 * object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the Movie relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the Movie. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the Movie has been flipped independently 
	 * of its parent object and, if yes, the direction in which the 
	 * Movie was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the Movie is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the Movie. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Verifies that the specified URL is valid and contains the 
	 * specified movie file. Valid only when the movie file is 
	 * specified by a URL rather than a file path.
	 */
	verifyURL(): boolean;
	/** Duplicates the Movie. */
	duplicate(): Movie;
	/**
	 * Brings the Movie to the front of its layer or in front of a 
	 * particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the Movie to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the Movie forward one level in its layer. */
	bringForward(): void;
	/** Sends the Movie back one level in its layer. */
	sendBackward(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/** Deletes the Movie. */
	remove(): void;
	/**
	 * Moves the Movie to a new location. Note: Either the 'to' or 
	 * 'by' parameter is required; if both parameters are defined, 
	 * only the to value is used.
	 * @param {any} to - The new location of the Movie,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the Movie relative to its current position, 
	 * in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/**
	 * Converts the Movie to a different shape.
	 * @param {ConvertShapeOptions} given - The Movie's new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the Movie. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Movie in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Movie (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Flips the Movie.
	 * @param {Flip} given - The axis around which to flip the 
	 * Movie.
	 * @param {any} around - The point around which to flip the 
	 * Movie. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * Movie's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * Movie that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the Movie using the last transformation performed 
	 * on any object. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the Movie using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the Movie using the last transformation performed 
	 * on any Movie. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the Movie using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Movie. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Movie. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Movie. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Movie. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Movie. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Movie.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Movie;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of movies.
 * @class
 */
export declare class Movies {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Movie
	 * @param {Layer} layer - The layer on which to create the 
	 * Movie. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the Movie relative to the reference object or within 
	 * the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Movie (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): Movie;
	/** Displays the number of elements in the Movie. */
	count(): number;
	/**
	 * Returns the Movie with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Movie;
	/**
	 * Returns the Movie with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Movie;
	/**
	 * Returns the Movie with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Movie;
	/**
	 * Returns the Movies within the specified range.
	 * @param {any} _from - The Movie, index, or name at the 
	 * beginning of the range. Can accept: Movie, Long Integer or 
	 * String.
	 * @param {any} to - The Movie, index, or name at the end of 
	 * the range. Can accept: Movie, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Movie;
	/** Returns the first Movie in the collection. */
	firstItem(): Movie;
	/** Returns the last Movie in the collection. */
	lastItem(): Movie;
	/** Returns the middle Movie in the collection. */
	middleItem(): Movie;
	/**
	 * Returns the Movie with the index previous to the specified 
	 * index.
	 * @param {Movie} obj - The index of the Movie that follows the 
	 * desired Movie.
	 */
	previousItem(obj: Movie): Movie;
	/**
	 * Returns the Movie whose index follows the specified Movie in 
	 * the collection.
	 * @param {Movie} obj - The Movie whose index comes before the 
	 * desired Movie.
	 */
	nextItem(obj: Movie): Movie;
	/** Returns any Movie in the collection. */
	anyItem(): Movie;
	/** Returns every Movie in the collection. */
	everyItem(): Movie;
	/**
	 * Generates a string which, if executed, will return the 
	 * Movie.
	 */
	toSource(): string;
	/**
	 * Returns the Movie with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Movie;
}

/**
 * A navigation point.
 * @class
 */
export declare class NavigationPoint {
	/** Unique internally-generated identifier (read only). */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the NavigationPoint (a Movie). */
	readonly parent: Movie;
	/**
	 * The index of the NavigationPoint within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The UI display name. */
	name: string;
	/**
	 * The time in seconds rounded up to two decimal places (e.g., 
	 * 3.115 rounded to 3.12).
	 */
	time: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the NavigationPoint. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * NavigationPoint.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): NavigationPoint;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of navigation points.
 * @class
 */
export declare class NavigationPoints {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new NavigationPoint.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new NavigationPoint (Optional)
	 */
	add(withProperties: Object): NavigationPoint;
	/** Displays the number of elements in the NavigationPoint. */
	count(): number;
	/**
	 * Returns the NavigationPoint with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): NavigationPoint;
	/**
	 * Returns the NavigationPoint with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): NavigationPoint;
	/**
	 * Returns the NavigationPoint with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): NavigationPoint;
	/**
	 * Returns the NavigationPoints within the specified range.
	 * @param {any} _from - The NavigationPoint, index, or name at 
	 * the beginning of the range. Can accept: NavigationPoint, 
	 * Long Integer or String.
	 * @param {any} to - The NavigationPoint, index, or name at the 
	 * end of the range. Can accept: NavigationPoint, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): NavigationPoint;
	/** Returns the first NavigationPoint in the collection. */
	firstItem(): NavigationPoint;
	/** Returns the last NavigationPoint in the collection. */
	lastItem(): NavigationPoint;
	/** Returns the middle NavigationPoint in the collection. */
	middleItem(): NavigationPoint;
	/**
	 * Returns the NavigationPoint with the index previous to the 
	 * specified index.
	 * @param {NavigationPoint} obj - The index of the 
	 * NavigationPoint that follows the desired NavigationPoint.
	 */
	previousItem(obj: NavigationPoint): NavigationPoint;
	/**
	 * Returns the NavigationPoint whose index follows the 
	 * specified NavigationPoint in the collection.
	 * @param {NavigationPoint} obj - The NavigationPoint whose 
	 * index comes before the desired NavigationPoint.
	 */
	nextItem(obj: NavigationPoint): NavigationPoint;
	/** Returns any NavigationPoint in the collection. */
	anyItem(): NavigationPoint;
	/** Returns every NavigationPoint in the collection. */
	everyItem(): NavigationPoint;
	/**
	 * Generates a string which, if executed, will return the 
	 * NavigationPoint.
	 */
	toSource(): string;
	/**
	 * Returns the NavigationPoint with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: NavigationPoint;
}

/**
 * A sound clip.
 * @class
 * @extends MediaItem
 */
export declare class Sound extends MediaItem {
	/**
	 * Dispatched when the value of a property changes on this 
	 * Sound. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched before a Sound is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Sound is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** The XML element associated with the Sound. */
	readonly associatedXMLElement: XMLItem;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the Sound. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the Sound. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Lists all page items contained by the Sound. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Sound. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the Sound. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Sound (a SplineItem, Polygon, GraphicLine, 
	 * Rectangle or Oval).
	 */
	readonly parent: any;
	/** The index of the Sound within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of paths. */
	readonly paths: Paths;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the Sound. */
	name: string;
	/** The description of the Sound. */
	description: string;
	/**
	 * If true, the movie plays automatically when a user views the 
	 * page that contains the movie poster in the PDF document.
	 */
	playOnPageTurn: boolean;
	/** If true, the sound poster does not print with the document. */
	doNotPrintPoster: boolean;
	/** The poster file. */
	posterFile: string;
	/** The type of sound poster. */
	soundPosterType: SoundPosterTypes;
	/**
	 * If true, the file is embedded in the PDF. If false, the file 
	 * is linked to the PDF. Note: To embed movie files, acrobat 
	 * compatibility must be acrobat 6 or higher.
	 */
	embedInPDF: boolean;
	/** The horizontal scaling applied to the Sound. */
	horizontalScale: number;
	/** The vertical scaling applied to the Sound. */
	verticalScale: number;
	/**
	 * The bounds of the Sound excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the Sound including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/** The layer that the Sound is on. */
	itemLayer: Layer;
	/**
	 * The file path (colon delimited on the Mac OS). Can also 
	 * accept: File.
	 */
	filePath: string;
	/** If true, sounds stops playing when its page turns. */
	stopOnPageTurn: boolean;
	/** If true, sound loops forever (SWF only). */
	soundLoop: boolean;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Sound. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the Sound's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the Sound's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the Sound's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the Sound. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the Sound. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Sound. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Sound, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the Sound.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * Sound. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the Sound, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the Sound.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * Sound. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the Sound's stroke color overprints any underlying 
	 * objects. If false, the stroke color knocks out the  
	 * underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the Sound. */
	strokeAlignment: StrokeAlignment;
	/** If true, the Sound does not print. */
	nonprinting: boolean;
	/** If true, the Sound is locked. */
	locked: boolean;
	/** Display performance options for the Sound. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the Sound. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the Sound. (Range: -360 to 360)
	 */
	shearAngle: number;
	/**
	 * The rotation angle of the Sound relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the Sound relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the Sound relative to its containing 
	 * object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the Sound relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the Sound. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the Sound has been flipped independently 
	 * of its parent object and, if yes, the direction in which the 
	 * Sound was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the Sound is visible. */
	visible: boolean;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the Sound. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/** Duplicates the Sound. */
	duplicate(): Sound;
	/**
	 * Brings the Sound to the front of its layer or in front of a 
	 * particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the Sound to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the Sound forward one level in its layer. */
	bringForward(): void;
	/** Sends the Sound back one level in its layer. */
	sendBackward(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/** Deletes the Sound. */
	remove(): void;
	/**
	 * Moves the Sound to a new location. Note: Either the 'to' or 
	 * 'by' parameter is required; if both parameters are defined, 
	 * only the to value is used.
	 * @param {any} to - The new location of the Sound,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the Sound relative to its current position, 
	 * in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/**
	 * Converts the Sound to a different shape.
	 * @param {ConvertShapeOptions} given - The Sound's new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the Sound. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Sound in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Sound (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Flips the Sound.
	 * @param {Flip} given - The axis around which to flip the 
	 * Sound.
	 * @param {any} around - The point around which to flip the 
	 * Sound. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * Sound's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * Sound that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the Sound using the last transformation performed 
	 * on any object. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the Sound using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the Sound using the last transformation performed 
	 * on any Sound. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the Sound using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Sound. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Sound. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Sound. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Sound. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Sound. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Sound.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Sound;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of sound clips.
 * @class
 */
export declare class Sounds {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Sound
	 * @param {Layer} layer - The layer on which to create the 
	 * Sound. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the Sound relative to the reference object or within 
	 * the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Sound (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): Sound;
	/** Displays the number of elements in the Sound. */
	count(): number;
	/**
	 * Returns the Sound with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Sound;
	/**
	 * Returns the Sound with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Sound;
	/**
	 * Returns the Sound with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Sound;
	/**
	 * Returns the Sounds within the specified range.
	 * @param {any} _from - The Sound, index, or name at the 
	 * beginning of the range. Can accept: Sound, Long Integer or 
	 * String.
	 * @param {any} to - The Sound, index, or name at the end of 
	 * the range. Can accept: Sound, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Sound;
	/** Returns the first Sound in the collection. */
	firstItem(): Sound;
	/** Returns the last Sound in the collection. */
	lastItem(): Sound;
	/** Returns the middle Sound in the collection. */
	middleItem(): Sound;
	/**
	 * Returns the Sound with the index previous to the specified 
	 * index.
	 * @param {Sound} obj - The index of the Sound that follows the 
	 * desired Sound.
	 */
	previousItem(obj: Sound): Sound;
	/**
	 * Returns the Sound whose index follows the specified Sound in 
	 * the collection.
	 * @param {Sound} obj - The Sound whose index comes before the 
	 * desired Sound.
	 */
	nextItem(obj: Sound): Sound;
	/** Returns any Sound in the collection. */
	anyItem(): Sound;
	/** Returns every Sound in the collection. */
	everyItem(): Sound;
	/**
	 * Generates a string which, if executed, will return the 
	 * Sound.
	 */
	toSource(): string;
	/**
	 * Returns the Sound with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Sound;
}

/**
 * A behavior object.
 * @class
 */
export declare class Behavior {
	/** The name of the Behavior. */
	readonly name: string;
	/** The unique ID of the Behavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Behavior (a Button, CheckBox, ComboBox, 
	 * ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/** The index of the Behavior within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Behavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Behavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Behavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of behavior objects.
 * @class
 */
export declare class Behaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Behavior. */
	count(): number;
	/**
	 * Returns the Behavior with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Behavior;
	/**
	 * Returns the Behavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Behavior;
	/**
	 * Returns the Behavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Behavior;
	/**
	 * Returns the Behaviors within the specified range.
	 * @param {any} _from - The Behavior, index, or name at the 
	 * beginning of the range. Can accept: Behavior, Long Integer 
	 * or String.
	 * @param {any} to - The Behavior, index, or name at the end of 
	 * the range. Can accept: Behavior, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Behavior;
	/** Returns the first Behavior in the collection. */
	firstItem(): Behavior;
	/** Returns the last Behavior in the collection. */
	lastItem(): Behavior;
	/** Returns the middle Behavior in the collection. */
	middleItem(): Behavior;
	/**
	 * Returns the Behavior with the index previous to the 
	 * specified index.
	 * @param {Behavior} obj - The index of the Behavior that 
	 * follows the desired Behavior.
	 */
	previousItem(obj: Behavior): Behavior;
	/**
	 * Returns the Behavior whose index follows the specified 
	 * Behavior in the collection.
	 * @param {Behavior} obj - The Behavior whose index comes 
	 * before the desired Behavior.
	 */
	nextItem(obj: Behavior): Behavior;
	/** Returns any Behavior in the collection. */
	anyItem(): Behavior;
	/** Returns every Behavior in the collection. */
	everyItem(): Behavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * Behavior.
	 */
	toSource(): string;
	/**
	 * Returns the Behavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Behavior;
}

/**
 * A behavior object that jumps to the first page of the 
 * document.
 * @class
 * @extends Behavior
 */
export declare class GotoFirstPageBehavior extends Behavior {
	/** The name of the GotoFirstPageBehavior. */
	readonly name: string;
	/** The unique ID of the GotoFirstPageBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GotoFirstPageBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the GotoFirstPageBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The zoom setting. */
	zoomSetting: GoToZoomOptions;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoFirstPageBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoFirstPageBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoFirstPageBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto first page behavior objects.
 * @class
 */
export declare class GotoFirstPageBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the 
	 * GotoFirstPageBehavior.
	 */
	count(): number;
	/**
	 * Creates a new GotoFirstPageBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoFirstPageBehavior (Optional)
	 */
	add(withProperties: Object): GotoFirstPageBehavior;
	/**
	 * Returns the GotoFirstPageBehavior with the specified index 
	 * or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoFirstPageBehavior;
	/**
	 * Returns the GotoFirstPageBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoFirstPageBehavior;
	/**
	 * Returns the GotoFirstPageBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoFirstPageBehavior;
	/**
	 * Returns the GotoFirstPageBehaviors within the specified 
	 * range.
	 * @param {any} _from - The GotoFirstPageBehavior, index, or 
	 * name at the beginning of the range. Can accept: 
	 * GotoFirstPageBehavior, Long Integer or String.
	 * @param {any} to - The GotoFirstPageBehavior, index, or name 
	 * at the end of the range. Can accept: GotoFirstPageBehavior, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoFirstPageBehavior;
	/** Returns the first GotoFirstPageBehavior in the collection. */
	firstItem(): GotoFirstPageBehavior;
	/** Returns the last GotoFirstPageBehavior in the collection. */
	lastItem(): GotoFirstPageBehavior;
	/** Returns the middle GotoFirstPageBehavior in the collection. */
	middleItem(): GotoFirstPageBehavior;
	/**
	 * Returns the GotoFirstPageBehavior with the index previous to 
	 * the specified index.
	 * @param {GotoFirstPageBehavior} obj - The index of the 
	 * GotoFirstPageBehavior that follows the desired 
	 * GotoFirstPageBehavior.
	 */
	previousItem(obj: GotoFirstPageBehavior): GotoFirstPageBehavior;
	/**
	 * Returns the GotoFirstPageBehavior whose index follows the 
	 * specified GotoFirstPageBehavior in the collection.
	 * @param {GotoFirstPageBehavior} obj - The 
	 * GotoFirstPageBehavior whose index comes before the desired 
	 * GotoFirstPageBehavior.
	 */
	nextItem(obj: GotoFirstPageBehavior): GotoFirstPageBehavior;
	/** Returns any GotoFirstPageBehavior in the collection. */
	anyItem(): GotoFirstPageBehavior;
	/** Returns every GotoFirstPageBehavior in the collection. */
	everyItem(): GotoFirstPageBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoFirstPageBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoFirstPageBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoFirstPageBehavior;
}

/**
 * A behavior object that jumps to the last page of the 
 * document.
 * @class
 * @extends Behavior
 */
export declare class GotoLastPageBehavior extends Behavior {
	/** The name of the GotoLastPageBehavior. */
	readonly name: string;
	/** The unique ID of the GotoLastPageBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GotoLastPageBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the GotoLastPageBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The zoom setting. */
	zoomSetting: GoToZoomOptions;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoLastPageBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoLastPageBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoLastPageBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto last page behavior objects.
 * @class
 */
export declare class GotoLastPageBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the GotoLastPageBehavior.
	 */
	count(): number;
	/**
	 * Creates a new GotoLastPageBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoLastPageBehavior (Optional)
	 */
	add(withProperties: Object): GotoLastPageBehavior;
	/**
	 * Returns the GotoLastPageBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoLastPageBehavior;
	/**
	 * Returns the GotoLastPageBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoLastPageBehavior;
	/**
	 * Returns the GotoLastPageBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoLastPageBehavior;
	/**
	 * Returns the GotoLastPageBehaviors within the specified 
	 * range.
	 * @param {any} _from - The GotoLastPageBehavior, index, or 
	 * name at the beginning of the range. Can accept: 
	 * GotoLastPageBehavior, Long Integer or String.
	 * @param {any} to - The GotoLastPageBehavior, index, or name 
	 * at the end of the range. Can accept: GotoLastPageBehavior, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoLastPageBehavior;
	/** Returns the first GotoLastPageBehavior in the collection. */
	firstItem(): GotoLastPageBehavior;
	/** Returns the last GotoLastPageBehavior in the collection. */
	lastItem(): GotoLastPageBehavior;
	/** Returns the middle GotoLastPageBehavior in the collection. */
	middleItem(): GotoLastPageBehavior;
	/**
	 * Returns the GotoLastPageBehavior with the index previous to 
	 * the specified index.
	 * @param {GotoLastPageBehavior} obj - The index of the 
	 * GotoLastPageBehavior that follows the desired 
	 * GotoLastPageBehavior.
	 */
	previousItem(obj: GotoLastPageBehavior): GotoLastPageBehavior;
	/**
	 * Returns the GotoLastPageBehavior whose index follows the 
	 * specified GotoLastPageBehavior in the collection.
	 * @param {GotoLastPageBehavior} obj - The GotoLastPageBehavior 
	 * whose index comes before the desired GotoLastPageBehavior.
	 */
	nextItem(obj: GotoLastPageBehavior): GotoLastPageBehavior;
	/** Returns any GotoLastPageBehavior in the collection. */
	anyItem(): GotoLastPageBehavior;
	/** Returns every GotoLastPageBehavior in the collection. */
	everyItem(): GotoLastPageBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoLastPageBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoLastPageBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoLastPageBehavior;
}

/**
 * A behavior object that jumps to the next page in the 
 * document.
 * @class
 * @extends Behavior
 */
export declare class GotoNextPageBehavior extends Behavior {
	/** The name of the GotoNextPageBehavior. */
	readonly name: string;
	/** The unique ID of the GotoNextPageBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GotoNextPageBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the GotoNextPageBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The zoom setting. */
	zoomSetting: GoToZoomOptions;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoNextPageBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoNextPageBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoNextPageBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto next page behavior objects.
 * @class
 */
export declare class GotoNextPageBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the GotoNextPageBehavior.
	 */
	count(): number;
	/**
	 * Creates a new GotoNextPageBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoNextPageBehavior (Optional)
	 */
	add(withProperties: Object): GotoNextPageBehavior;
	/**
	 * Returns the GotoNextPageBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoNextPageBehavior;
	/**
	 * Returns the GotoNextPageBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoNextPageBehavior;
	/**
	 * Returns the GotoNextPageBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoNextPageBehavior;
	/**
	 * Returns the GotoNextPageBehaviors within the specified 
	 * range.
	 * @param {any} _from - The GotoNextPageBehavior, index, or 
	 * name at the beginning of the range. Can accept: 
	 * GotoNextPageBehavior, Long Integer or String.
	 * @param {any} to - The GotoNextPageBehavior, index, or name 
	 * at the end of the range. Can accept: GotoNextPageBehavior, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoNextPageBehavior;
	/** Returns the first GotoNextPageBehavior in the collection. */
	firstItem(): GotoNextPageBehavior;
	/** Returns the last GotoNextPageBehavior in the collection. */
	lastItem(): GotoNextPageBehavior;
	/** Returns the middle GotoNextPageBehavior in the collection. */
	middleItem(): GotoNextPageBehavior;
	/**
	 * Returns the GotoNextPageBehavior with the index previous to 
	 * the specified index.
	 * @param {GotoNextPageBehavior} obj - The index of the 
	 * GotoNextPageBehavior that follows the desired 
	 * GotoNextPageBehavior.
	 */
	previousItem(obj: GotoNextPageBehavior): GotoNextPageBehavior;
	/**
	 * Returns the GotoNextPageBehavior whose index follows the 
	 * specified GotoNextPageBehavior in the collection.
	 * @param {GotoNextPageBehavior} obj - The GotoNextPageBehavior 
	 * whose index comes before the desired GotoNextPageBehavior.
	 */
	nextItem(obj: GotoNextPageBehavior): GotoNextPageBehavior;
	/** Returns any GotoNextPageBehavior in the collection. */
	anyItem(): GotoNextPageBehavior;
	/** Returns every GotoNextPageBehavior in the collection. */
	everyItem(): GotoNextPageBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoNextPageBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoNextPageBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoNextPageBehavior;
}

/**
 * A behavior object that jumps to the previous page in the 
 * document.
 * @class
 * @extends Behavior
 */
export declare class GotoPreviousPageBehavior extends Behavior {
	/** The name of the GotoPreviousPageBehavior. */
	readonly name: string;
	/** The unique ID of the GotoPreviousPageBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GotoPreviousPageBehavior (a Button, 
	 * CheckBox, ComboBox, ListBox, RadioButton, TextBox or 
	 * SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the GotoPreviousPageBehavior within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The zoom setting. */
	zoomSetting: GoToZoomOptions;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoPreviousPageBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoPreviousPageBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoPreviousPageBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto previous page behavior objects.
 * @class
 */
export declare class GotoPreviousPageBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the 
	 * GotoPreviousPageBehavior.
	 */
	count(): number;
	/**
	 * Creates a new GotoPreviousPageBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoPreviousPageBehavior (Optional)
	 */
	add(withProperties: Object): GotoPreviousPageBehavior;
	/**
	 * Returns the GotoPreviousPageBehavior with the specified 
	 * index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoPreviousPageBehavior;
	/**
	 * Returns the GotoPreviousPageBehavior with the specified 
	 * name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoPreviousPageBehavior;
	/**
	 * Returns the GotoPreviousPageBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoPreviousPageBehavior;
	/**
	 * Returns the GotoPreviousPageBehaviors within the specified 
	 * range.
	 * @param {any} _from - The GotoPreviousPageBehavior, index, or 
	 * name at the beginning of the range. Can accept: 
	 * GotoPreviousPageBehavior, Long Integer or String.
	 * @param {any} to - The GotoPreviousPageBehavior, index, or 
	 * name at the end of the range. Can accept: 
	 * GotoPreviousPageBehavior, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoPreviousPageBehavior;
	/**
	 * Returns the first GotoPreviousPageBehavior in the 
	 * collection.
	 */
	firstItem(): GotoPreviousPageBehavior;
	/**
	 * Returns the last GotoPreviousPageBehavior in the collection.
	 */
	lastItem(): GotoPreviousPageBehavior;
	/**
	 * Returns the middle GotoPreviousPageBehavior in the 
	 * collection.
	 */
	middleItem(): GotoPreviousPageBehavior;
	/**
	 * Returns the GotoPreviousPageBehavior with the index previous 
	 * to the specified index.
	 * @param {GotoPreviousPageBehavior} obj - The index of the 
	 * GotoPreviousPageBehavior that follows the desired 
	 * GotoPreviousPageBehavior.
	 */
	previousItem(obj: GotoPreviousPageBehavior): GotoPreviousPageBehavior;
	/**
	 * Returns the GotoPreviousPageBehavior whose index follows the 
	 * specified GotoPreviousPageBehavior in the collection.
	 * @param {GotoPreviousPageBehavior} obj - The 
	 * GotoPreviousPageBehavior whose index comes before the 
	 * desired GotoPreviousPageBehavior.
	 */
	nextItem(obj: GotoPreviousPageBehavior): GotoPreviousPageBehavior;
	/** Returns any GotoPreviousPageBehavior in the collection. */
	anyItem(): GotoPreviousPageBehavior;
	/** Returns every GotoPreviousPageBehavior in the collection. */
	everyItem(): GotoPreviousPageBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoPreviousPageBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoPreviousPageBehavior with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoPreviousPageBehavior;
}

/**
 * A behavior object that jumps to the next view.
 * @class
 * @extends Behavior
 */
export declare class GotoNextViewBehavior extends Behavior {
	/** The name of the GotoNextViewBehavior. */
	readonly name: string;
	/** The unique ID of the GotoNextViewBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GotoNextViewBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the GotoNextViewBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The zoom setting. */
	zoomSetting: GoToZoomOptions;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoNextViewBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoNextViewBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoNextViewBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto next view behavior objects.
 * @class
 */
export declare class GotoNextViewBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the GotoNextViewBehavior.
	 */
	count(): number;
	/**
	 * Creates a new GotoNextViewBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoNextViewBehavior (Optional)
	 */
	add(withProperties: Object): GotoNextViewBehavior;
	/**
	 * Returns the GotoNextViewBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoNextViewBehavior;
	/**
	 * Returns the GotoNextViewBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoNextViewBehavior;
	/**
	 * Returns the GotoNextViewBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoNextViewBehavior;
	/**
	 * Returns the GotoNextViewBehaviors within the specified 
	 * range.
	 * @param {any} _from - The GotoNextViewBehavior, index, or 
	 * name at the beginning of the range. Can accept: 
	 * GotoNextViewBehavior, Long Integer or String.
	 * @param {any} to - The GotoNextViewBehavior, index, or name 
	 * at the end of the range. Can accept: GotoNextViewBehavior, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoNextViewBehavior;
	/** Returns the first GotoNextViewBehavior in the collection. */
	firstItem(): GotoNextViewBehavior;
	/** Returns the last GotoNextViewBehavior in the collection. */
	lastItem(): GotoNextViewBehavior;
	/** Returns the middle GotoNextViewBehavior in the collection. */
	middleItem(): GotoNextViewBehavior;
	/**
	 * Returns the GotoNextViewBehavior with the index previous to 
	 * the specified index.
	 * @param {GotoNextViewBehavior} obj - The index of the 
	 * GotoNextViewBehavior that follows the desired 
	 * GotoNextViewBehavior.
	 */
	previousItem(obj: GotoNextViewBehavior): GotoNextViewBehavior;
	/**
	 * Returns the GotoNextViewBehavior whose index follows the 
	 * specified GotoNextViewBehavior in the collection.
	 * @param {GotoNextViewBehavior} obj - The GotoNextViewBehavior 
	 * whose index comes before the desired GotoNextViewBehavior.
	 */
	nextItem(obj: GotoNextViewBehavior): GotoNextViewBehavior;
	/** Returns any GotoNextViewBehavior in the collection. */
	anyItem(): GotoNextViewBehavior;
	/** Returns every GotoNextViewBehavior in the collection. */
	everyItem(): GotoNextViewBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoNextViewBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoNextViewBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoNextViewBehavior;
}

/**
 * A behavior object that jumps to the previous view.
 * @class
 * @extends Behavior
 */
export declare class GotoPreviousViewBehavior extends Behavior {
	/** The name of the GotoPreviousViewBehavior. */
	readonly name: string;
	/** The unique ID of the GotoPreviousViewBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GotoPreviousViewBehavior (a Button, 
	 * CheckBox, ComboBox, ListBox, RadioButton, TextBox or 
	 * SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the GotoPreviousViewBehavior within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The zoom setting. */
	zoomSetting: GoToZoomOptions;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoPreviousViewBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoPreviousViewBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoPreviousViewBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto previous view behavior objects.
 * @class
 */
export declare class GotoPreviousViewBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the 
	 * GotoPreviousViewBehavior.
	 */
	count(): number;
	/**
	 * Creates a new GotoPreviousViewBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoPreviousViewBehavior (Optional)
	 */
	add(withProperties: Object): GotoPreviousViewBehavior;
	/**
	 * Returns the GotoPreviousViewBehavior with the specified 
	 * index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoPreviousViewBehavior;
	/**
	 * Returns the GotoPreviousViewBehavior with the specified 
	 * name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoPreviousViewBehavior;
	/**
	 * Returns the GotoPreviousViewBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoPreviousViewBehavior;
	/**
	 * Returns the GotoPreviousViewBehaviors within the specified 
	 * range.
	 * @param {any} _from - The GotoPreviousViewBehavior, index, or 
	 * name at the beginning of the range. Can accept: 
	 * GotoPreviousViewBehavior, Long Integer or String.
	 * @param {any} to - The GotoPreviousViewBehavior, index, or 
	 * name at the end of the range. Can accept: 
	 * GotoPreviousViewBehavior, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoPreviousViewBehavior;
	/**
	 * Returns the first GotoPreviousViewBehavior in the 
	 * collection.
	 */
	firstItem(): GotoPreviousViewBehavior;
	/**
	 * Returns the last GotoPreviousViewBehavior in the collection.
	 */
	lastItem(): GotoPreviousViewBehavior;
	/**
	 * Returns the middle GotoPreviousViewBehavior in the 
	 * collection.
	 */
	middleItem(): GotoPreviousViewBehavior;
	/**
	 * Returns the GotoPreviousViewBehavior with the index previous 
	 * to the specified index.
	 * @param {GotoPreviousViewBehavior} obj - The index of the 
	 * GotoPreviousViewBehavior that follows the desired 
	 * GotoPreviousViewBehavior.
	 */
	previousItem(obj: GotoPreviousViewBehavior): GotoPreviousViewBehavior;
	/**
	 * Returns the GotoPreviousViewBehavior whose index follows the 
	 * specified GotoPreviousViewBehavior in the collection.
	 * @param {GotoPreviousViewBehavior} obj - The 
	 * GotoPreviousViewBehavior whose index comes before the 
	 * desired GotoPreviousViewBehavior.
	 */
	nextItem(obj: GotoPreviousViewBehavior): GotoPreviousViewBehavior;
	/** Returns any GotoPreviousViewBehavior in the collection. */
	anyItem(): GotoPreviousViewBehavior;
	/** Returns every GotoPreviousViewBehavior in the collection. */
	everyItem(): GotoPreviousViewBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoPreviousViewBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoPreviousViewBehavior with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoPreviousViewBehavior;
}

/**
 * A behavior object that jumps to a URL.
 * @class
 * @extends Behavior
 */
export declare class GotoURLBehavior extends Behavior {
	/** The name of the GotoURLBehavior. */
	readonly name: string;
	/** The unique ID of the GotoURLBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GotoURLBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the GotoURLBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The URL. */
	url: string;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoURLBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoURLBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoURLBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto URL behavior objects.
 * @class
 */
export declare class GotoURLBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the GotoURLBehavior. */
	count(): number;
	/**
	 * Creates a new GotoURLBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoURLBehavior (Optional)
	 */
	add(withProperties: Object): GotoURLBehavior;
	/**
	 * Returns the GotoURLBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoURLBehavior;
	/**
	 * Returns the GotoURLBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoURLBehavior;
	/**
	 * Returns the GotoURLBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoURLBehavior;
	/**
	 * Returns the GotoURLBehaviors within the specified range.
	 * @param {any} _from - The GotoURLBehavior, index, or name at 
	 * the beginning of the range. Can accept: GotoURLBehavior, 
	 * Long Integer or String.
	 * @param {any} to - The GotoURLBehavior, index, or name at the 
	 * end of the range. Can accept: GotoURLBehavior, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): GotoURLBehavior;
	/** Returns the first GotoURLBehavior in the collection. */
	firstItem(): GotoURLBehavior;
	/** Returns the last GotoURLBehavior in the collection. */
	lastItem(): GotoURLBehavior;
	/** Returns the middle GotoURLBehavior in the collection. */
	middleItem(): GotoURLBehavior;
	/**
	 * Returns the GotoURLBehavior with the index previous to the 
	 * specified index.
	 * @param {GotoURLBehavior} obj - The index of the 
	 * GotoURLBehavior that follows the desired GotoURLBehavior.
	 */
	previousItem(obj: GotoURLBehavior): GotoURLBehavior;
	/**
	 * Returns the GotoURLBehavior whose index follows the 
	 * specified GotoURLBehavior in the collection.
	 * @param {GotoURLBehavior} obj - The GotoURLBehavior whose 
	 * index comes before the desired GotoURLBehavior.
	 */
	nextItem(obj: GotoURLBehavior): GotoURLBehavior;
	/** Returns any GotoURLBehavior in the collection. */
	anyItem(): GotoURLBehavior;
	/** Returns every GotoURLBehavior in the collection. */
	everyItem(): GotoURLBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoURLBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoURLBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoURLBehavior;
}

/**
 * A movie behavior object.
 * @class
 * @extends Behavior
 */
export declare class MovieBehavior extends Behavior {
	/** The name of the MovieBehavior. */
	readonly name: string;
	/** The unique ID of the MovieBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MovieBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the MovieBehavior within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The movie page item. */
	movieItem: Movie;
	/**
	 * The id of the navigation point to play from. This property 
	 * is ignored for all operations other than Play From 
	 * Navigation Point.
	 */
	navigationPointID: number;
	/** The playback mode. */
	operation: MoviePlayOperations;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the MovieBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * MovieBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MovieBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of movie behavior objects.
 * @class
 */
export declare class MovieBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the MovieBehavior. */
	count(): number;
	/**
	 * Creates a new MovieBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MovieBehavior (Optional)
	 */
	add(withProperties: Object): MovieBehavior;
	/**
	 * Returns the MovieBehavior with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MovieBehavior;
	/**
	 * Returns the MovieBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): MovieBehavior;
	/**
	 * Returns the MovieBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MovieBehavior;
	/**
	 * Returns the MovieBehaviors within the specified range.
	 * @param {any} _from - The MovieBehavior, index, or name at 
	 * the beginning of the range. Can accept: MovieBehavior, Long 
	 * Integer or String.
	 * @param {any} to - The MovieBehavior, index, or name at the 
	 * end of the range. Can accept: MovieBehavior, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): MovieBehavior;
	/** Returns the first MovieBehavior in the collection. */
	firstItem(): MovieBehavior;
	/** Returns the last MovieBehavior in the collection. */
	lastItem(): MovieBehavior;
	/** Returns the middle MovieBehavior in the collection. */
	middleItem(): MovieBehavior;
	/**
	 * Returns the MovieBehavior with the index previous to the 
	 * specified index.
	 * @param {MovieBehavior} obj - The index of the MovieBehavior 
	 * that follows the desired MovieBehavior.
	 */
	previousItem(obj: MovieBehavior): MovieBehavior;
	/**
	 * Returns the MovieBehavior whose index follows the specified 
	 * MovieBehavior in the collection.
	 * @param {MovieBehavior} obj - The MovieBehavior whose index 
	 * comes before the desired MovieBehavior.
	 */
	nextItem(obj: MovieBehavior): MovieBehavior;
	/** Returns any MovieBehavior in the collection. */
	anyItem(): MovieBehavior;
	/** Returns every MovieBehavior in the collection. */
	everyItem(): MovieBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * MovieBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the MovieBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MovieBehavior;
}

/**
 * A show/hide fields behavior object.
 * @class
 * @extends Behavior
 */
export declare class ShowHideFieldsBehavior extends Behavior {
	/** The name of the ShowHideFieldsBehavior. */
	readonly name: string;
	/** The unique ID of the ShowHideFieldsBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ShowHideFieldsBehavior (a Button, 
	 * CheckBox, ComboBox, ListBox, RadioButton, TextBox or 
	 * SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the ShowHideFieldsBehavior within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The hidden interactive objects. Can return: Array of 
	 * Buttons, CheckBoxes, ComboBoxes, ListBoxes, RadioButtons, 
	 * TextBoxes or SignatureFields.
	 */
	fieldsToHide: any;
	/**
	 * The visible interactive objects. Can return: Array of 
	 * Buttons, CheckBoxes, ComboBoxes, ListBoxes, RadioButtons, 
	 * TextBoxes or SignatureFields.
	 */
	fieldsToShow: any;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the ShowHideFieldsBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ShowHideFieldsBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ShowHideFieldsBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of show/hide fields behavior objects.
 * @class
 */
export declare class ShowHideFieldsBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the 
	 * ShowHideFieldsBehavior.
	 */
	count(): number;
	/**
	 * Creates a new ShowHideFieldsBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ShowHideFieldsBehavior (Optional)
	 */
	add(withProperties: Object): ShowHideFieldsBehavior;
	/**
	 * Returns the ShowHideFieldsBehavior with the specified index 
	 * or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ShowHideFieldsBehavior;
	/**
	 * Returns the ShowHideFieldsBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ShowHideFieldsBehavior;
	/**
	 * Returns the ShowHideFieldsBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ShowHideFieldsBehavior;
	/**
	 * Returns the ShowHideFieldsBehaviors within the specified 
	 * range.
	 * @param {any} _from - The ShowHideFieldsBehavior, index, or 
	 * name at the beginning of the range. Can accept: 
	 * ShowHideFieldsBehavior, Long Integer or String.
	 * @param {any} to - The ShowHideFieldsBehavior, index, or name 
	 * at the end of the range. Can accept: ShowHideFieldsBehavior, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): ShowHideFieldsBehavior;
	/** Returns the first ShowHideFieldsBehavior in the collection. */
	firstItem(): ShowHideFieldsBehavior;
	/** Returns the last ShowHideFieldsBehavior in the collection. */
	lastItem(): ShowHideFieldsBehavior;
	/**
	 * Returns the middle ShowHideFieldsBehavior in the collection.
	 */
	middleItem(): ShowHideFieldsBehavior;
	/**
	 * Returns the ShowHideFieldsBehavior with the index previous 
	 * to the specified index.
	 * @param {ShowHideFieldsBehavior} obj - The index of the 
	 * ShowHideFieldsBehavior that follows the desired 
	 * ShowHideFieldsBehavior.
	 */
	previousItem(obj: ShowHideFieldsBehavior): ShowHideFieldsBehavior;
	/**
	 * Returns the ShowHideFieldsBehavior whose index follows the 
	 * specified ShowHideFieldsBehavior in the collection.
	 * @param {ShowHideFieldsBehavior} obj - The 
	 * ShowHideFieldsBehavior whose index comes before the desired 
	 * ShowHideFieldsBehavior.
	 */
	nextItem(obj: ShowHideFieldsBehavior): ShowHideFieldsBehavior;
	/** Returns any ShowHideFieldsBehavior in the collection. */
	anyItem(): ShowHideFieldsBehavior;
	/** Returns every ShowHideFieldsBehavior in the collection. */
	everyItem(): ShowHideFieldsBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * ShowHideFieldsBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the ShowHideFieldsBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ShowHideFieldsBehavior;
}

/**
 * A animation behavior.
 * @class
 * @extends Behavior
 */
export declare class AnimationBehavior extends Behavior {
	/** The name of the AnimationBehavior. */
	readonly name: string;
	/** The unique ID of the AnimationBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the AnimationBehavior (a Button). */
	readonly parent: Button;
	/**
	 * The index of the AnimationBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The animation page item. */
	animatedPageItem: PageItem;
	/** The playback mode. */
	operation: AnimationPlayOperations;
	/**
	 * If true, will automatically play the animation in reverse on 
	 * roll off of the rollover event.
	 */
	autoReverseOnRollOff: boolean;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the AnimationBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * AnimationBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): AnimationBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of animation behaviors.
 * @class
 */
export declare class AnimationBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the AnimationBehavior. */
	count(): number;
	/**
	 * Creates a new AnimationBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new AnimationBehavior (Optional)
	 */
	add(withProperties: Object): AnimationBehavior;
	/**
	 * Returns the AnimationBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): AnimationBehavior;
	/**
	 * Returns the AnimationBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): AnimationBehavior;
	/**
	 * Returns the AnimationBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): AnimationBehavior;
	/**
	 * Returns the AnimationBehaviors within the specified range.
	 * @param {any} _from - The AnimationBehavior, index, or name 
	 * at the beginning of the range. Can accept: 
	 * AnimationBehavior, Long Integer or String.
	 * @param {any} to - The AnimationBehavior, index, or name at 
	 * the end of the range. Can accept: AnimationBehavior, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): AnimationBehavior;
	/** Returns the first AnimationBehavior in the collection. */
	firstItem(): AnimationBehavior;
	/** Returns the last AnimationBehavior in the collection. */
	lastItem(): AnimationBehavior;
	/** Returns the middle AnimationBehavior in the collection. */
	middleItem(): AnimationBehavior;
	/**
	 * Returns the AnimationBehavior with the index previous to the 
	 * specified index.
	 * @param {AnimationBehavior} obj - The index of the 
	 * AnimationBehavior that follows the desired 
	 * AnimationBehavior.
	 */
	previousItem(obj: AnimationBehavior): AnimationBehavior;
	/**
	 * Returns the AnimationBehavior whose index follows the 
	 * specified AnimationBehavior in the collection.
	 * @param {AnimationBehavior} obj - The AnimationBehavior whose 
	 * index comes before the desired AnimationBehavior.
	 */
	nextItem(obj: AnimationBehavior): AnimationBehavior;
	/** Returns any AnimationBehavior in the collection. */
	anyItem(): AnimationBehavior;
	/** Returns every AnimationBehavior in the collection. */
	everyItem(): AnimationBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * AnimationBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the AnimationBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: AnimationBehavior;
}

/**
 * An open file behavior object.
 * @class
 * @extends Behavior
 */
export declare class OpenFileBehavior extends Behavior {
	/** The name of the OpenFileBehavior. */
	readonly name: string;
	/** The unique ID of the OpenFileBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the OpenFileBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the OpenFileBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The file path (colon delimited on the Mac OS). Can also 
	 * accept: File.
	 */
	filePath: string;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the OpenFileBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * OpenFileBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): OpenFileBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of open file behavior objects.
 * @class
 */
export declare class OpenFileBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the OpenFileBehavior. */
	count(): number;
	/**
	 * Creates a new OpenFileBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new OpenFileBehavior (Optional)
	 */
	add(withProperties: Object): OpenFileBehavior;
	/**
	 * Returns the OpenFileBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): OpenFileBehavior;
	/**
	 * Returns the OpenFileBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): OpenFileBehavior;
	/**
	 * Returns the OpenFileBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): OpenFileBehavior;
	/**
	 * Returns the OpenFileBehaviors within the specified range.
	 * @param {any} _from - The OpenFileBehavior, index, or name at 
	 * the beginning of the range. Can accept: OpenFileBehavior, 
	 * Long Integer or String.
	 * @param {any} to - The OpenFileBehavior, index, or name at 
	 * the end of the range. Can accept: OpenFileBehavior, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): OpenFileBehavior;
	/** Returns the first OpenFileBehavior in the collection. */
	firstItem(): OpenFileBehavior;
	/** Returns the last OpenFileBehavior in the collection. */
	lastItem(): OpenFileBehavior;
	/** Returns the middle OpenFileBehavior in the collection. */
	middleItem(): OpenFileBehavior;
	/**
	 * Returns the OpenFileBehavior with the index previous to the 
	 * specified index.
	 * @param {OpenFileBehavior} obj - The index of the 
	 * OpenFileBehavior that follows the desired OpenFileBehavior.
	 */
	previousItem(obj: OpenFileBehavior): OpenFileBehavior;
	/**
	 * Returns the OpenFileBehavior whose index follows the 
	 * specified OpenFileBehavior in the collection.
	 * @param {OpenFileBehavior} obj - The OpenFileBehavior whose 
	 * index comes before the desired OpenFileBehavior.
	 */
	nextItem(obj: OpenFileBehavior): OpenFileBehavior;
	/** Returns any OpenFileBehavior in the collection. */
	anyItem(): OpenFileBehavior;
	/** Returns every OpenFileBehavior in the collection. */
	everyItem(): OpenFileBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * OpenFileBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the OpenFileBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: OpenFileBehavior;
}

/**
 * A goto next state behavior.
 * @class
 * @extends Behavior
 */
export declare class GotoNextStateBehavior extends Behavior {
	/** The name of the GotoNextStateBehavior. */
	readonly name: string;
	/** The unique ID of the GotoNextStateBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the GotoNextStateBehavior (a Button). */
	readonly parent: Button;
	/**
	 * The index of the GotoNextStateBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The associated multi-state object page item. */
	associatedMultiStateObject: MultiStateObject;
	/** If true, will loop to the next or previous state. */
	loopsToNextOrPrevious: boolean;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoNextStateBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoNextStateBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoNextStateBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto next state behaviors.
 * @class
 */
export declare class GotoNextStateBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the 
	 * GotoNextStateBehavior.
	 */
	count(): number;
	/**
	 * Creates a new GotoNextStateBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoNextStateBehavior (Optional)
	 */
	add(withProperties: Object): GotoNextStateBehavior;
	/**
	 * Returns the GotoNextStateBehavior with the specified index 
	 * or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoNextStateBehavior;
	/**
	 * Returns the GotoNextStateBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoNextStateBehavior;
	/**
	 * Returns the GotoNextStateBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoNextStateBehavior;
	/**
	 * Returns the GotoNextStateBehaviors within the specified 
	 * range.
	 * @param {any} _from - The GotoNextStateBehavior, index, or 
	 * name at the beginning of the range. Can accept: 
	 * GotoNextStateBehavior, Long Integer or String.
	 * @param {any} to - The GotoNextStateBehavior, index, or name 
	 * at the end of the range. Can accept: GotoNextStateBehavior, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoNextStateBehavior;
	/** Returns the first GotoNextStateBehavior in the collection. */
	firstItem(): GotoNextStateBehavior;
	/** Returns the last GotoNextStateBehavior in the collection. */
	lastItem(): GotoNextStateBehavior;
	/** Returns the middle GotoNextStateBehavior in the collection. */
	middleItem(): GotoNextStateBehavior;
	/**
	 * Returns the GotoNextStateBehavior with the index previous to 
	 * the specified index.
	 * @param {GotoNextStateBehavior} obj - The index of the 
	 * GotoNextStateBehavior that follows the desired 
	 * GotoNextStateBehavior.
	 */
	previousItem(obj: GotoNextStateBehavior): GotoNextStateBehavior;
	/**
	 * Returns the GotoNextStateBehavior whose index follows the 
	 * specified GotoNextStateBehavior in the collection.
	 * @param {GotoNextStateBehavior} obj - The 
	 * GotoNextStateBehavior whose index comes before the desired 
	 * GotoNextStateBehavior.
	 */
	nextItem(obj: GotoNextStateBehavior): GotoNextStateBehavior;
	/** Returns any GotoNextStateBehavior in the collection. */
	anyItem(): GotoNextStateBehavior;
	/** Returns every GotoNextStateBehavior in the collection. */
	everyItem(): GotoNextStateBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoNextStateBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoNextStateBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoNextStateBehavior;
}

/**
 * A goto previous state behavior.
 * @class
 * @extends Behavior
 */
export declare class GotoPreviousStateBehavior extends Behavior {
	/** The name of the GotoPreviousStateBehavior. */
	readonly name: string;
	/** The unique ID of the GotoPreviousStateBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the GotoPreviousStateBehavior (a Button). */
	readonly parent: Button;
	/**
	 * The index of the GotoPreviousStateBehavior within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The associated multi-state object page item. */
	associatedMultiStateObject: MultiStateObject;
	/** If true, will loop to the next or previous state. */
	loopsToNextOrPrevious: boolean;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoPreviousStateBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoPreviousStateBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoPreviousStateBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto previous state behaviors.
 * @class
 */
export declare class GotoPreviousStateBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the 
	 * GotoPreviousStateBehavior.
	 */
	count(): number;
	/**
	 * Creates a new GotoPreviousStateBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoPreviousStateBehavior (Optional)
	 */
	add(withProperties: Object): GotoPreviousStateBehavior;
	/**
	 * Returns the GotoPreviousStateBehavior with the specified 
	 * index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoPreviousStateBehavior;
	/**
	 * Returns the GotoPreviousStateBehavior with the specified 
	 * name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoPreviousStateBehavior;
	/**
	 * Returns the GotoPreviousStateBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoPreviousStateBehavior;
	/**
	 * Returns the GotoPreviousStateBehaviors within the specified 
	 * range.
	 * @param {any} _from - The GotoPreviousStateBehavior, index, 
	 * or name at the beginning of the range. Can accept: 
	 * GotoPreviousStateBehavior, Long Integer or String.
	 * @param {any} to - The GotoPreviousStateBehavior, index, or 
	 * name at the end of the range. Can accept: 
	 * GotoPreviousStateBehavior, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoPreviousStateBehavior;
	/**
	 * Returns the first GotoPreviousStateBehavior in the 
	 * collection.
	 */
	firstItem(): GotoPreviousStateBehavior;
	/**
	 * Returns the last GotoPreviousStateBehavior in the 
	 * collection.
	 */
	lastItem(): GotoPreviousStateBehavior;
	/**
	 * Returns the middle GotoPreviousStateBehavior in the 
	 * collection.
	 */
	middleItem(): GotoPreviousStateBehavior;
	/**
	 * Returns the GotoPreviousStateBehavior with the index 
	 * previous to the specified index.
	 * @param {GotoPreviousStateBehavior} obj - The index of the 
	 * GotoPreviousStateBehavior that follows the desired 
	 * GotoPreviousStateBehavior.
	 */
	previousItem(obj: GotoPreviousStateBehavior): GotoPreviousStateBehavior;
	/**
	 * Returns the GotoPreviousStateBehavior whose index follows 
	 * the specified GotoPreviousStateBehavior in the collection.
	 * @param {GotoPreviousStateBehavior} obj - The 
	 * GotoPreviousStateBehavior whose index comes before the 
	 * desired GotoPreviousStateBehavior.
	 */
	nextItem(obj: GotoPreviousStateBehavior): GotoPreviousStateBehavior;
	/** Returns any GotoPreviousStateBehavior in the collection. */
	anyItem(): GotoPreviousStateBehavior;
	/** Returns every GotoPreviousStateBehavior in the collection. */
	everyItem(): GotoPreviousStateBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoPreviousStateBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoPreviousStateBehavior with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoPreviousStateBehavior;
}

/**
 * A goto state behavior.
 * @class
 * @extends Behavior
 */
export declare class GotoStateBehavior extends Behavior {
	/** The name of the GotoStateBehavior. */
	readonly name: string;
	/** The unique ID of the GotoStateBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the GotoStateBehavior (a Button). */
	readonly parent: Button;
	/**
	 * The index of the GotoStateBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The associated multi-state object page item. */
	associatedMultiStateObject: MultiStateObject;
	/** The name of the state in the associated multi-state object. */
	stateName: string;
	/**
	 * If true, will automatically go back to the prior state on 
	 * roll off of the rollover event.
	 */
	goBackOnRollOff: boolean;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoStateBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoStateBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoStateBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto state behaviors.
 * @class
 */
export declare class GotoStateBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the GotoStateBehavior. */
	count(): number;
	/**
	 * Creates a new GotoStateBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoStateBehavior (Optional)
	 */
	add(withProperties: Object): GotoStateBehavior;
	/**
	 * Returns the GotoStateBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoStateBehavior;
	/**
	 * Returns the GotoStateBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoStateBehavior;
	/**
	 * Returns the GotoStateBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoStateBehavior;
	/**
	 * Returns the GotoStateBehaviors within the specified range.
	 * @param {any} _from - The GotoStateBehavior, index, or name 
	 * at the beginning of the range. Can accept: 
	 * GotoStateBehavior, Long Integer or String.
	 * @param {any} to - The GotoStateBehavior, index, or name at 
	 * the end of the range. Can accept: GotoStateBehavior, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoStateBehavior;
	/** Returns the first GotoStateBehavior in the collection. */
	firstItem(): GotoStateBehavior;
	/** Returns the last GotoStateBehavior in the collection. */
	lastItem(): GotoStateBehavior;
	/** Returns the middle GotoStateBehavior in the collection. */
	middleItem(): GotoStateBehavior;
	/**
	 * Returns the GotoStateBehavior with the index previous to the 
	 * specified index.
	 * @param {GotoStateBehavior} obj - The index of the 
	 * GotoStateBehavior that follows the desired 
	 * GotoStateBehavior.
	 */
	previousItem(obj: GotoStateBehavior): GotoStateBehavior;
	/**
	 * Returns the GotoStateBehavior whose index follows the 
	 * specified GotoStateBehavior in the collection.
	 * @param {GotoStateBehavior} obj - The GotoStateBehavior whose 
	 * index comes before the desired GotoStateBehavior.
	 */
	nextItem(obj: GotoStateBehavior): GotoStateBehavior;
	/** Returns any GotoStateBehavior in the collection. */
	anyItem(): GotoStateBehavior;
	/** Returns every GotoStateBehavior in the collection. */
	everyItem(): GotoStateBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoStateBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoStateBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoStateBehavior;
}

/**
 * A view zoom behavior object.
 * @class
 * @extends Behavior
 */
export declare class ViewZoomBehavior extends Behavior {
	/** The name of the ViewZoomBehavior. */
	readonly name: string;
	/** The unique ID of the ViewZoomBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ViewZoomBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the ViewZoomBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The view zoom style. */
	viewZoomStyle: ViewZoomStyle;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the ViewZoomBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ViewZoomBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ViewZoomBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of view zoom behavior objects.
 * @class
 */
export declare class ViewZoomBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the ViewZoomBehavior. */
	count(): number;
	/**
	 * Creates a new ViewZoomBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ViewZoomBehavior (Optional)
	 */
	add(withProperties: Object): ViewZoomBehavior;
	/**
	 * Returns the ViewZoomBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ViewZoomBehavior;
	/**
	 * Returns the ViewZoomBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ViewZoomBehavior;
	/**
	 * Returns the ViewZoomBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ViewZoomBehavior;
	/**
	 * Returns the ViewZoomBehaviors within the specified range.
	 * @param {any} _from - The ViewZoomBehavior, index, or name at 
	 * the beginning of the range. Can accept: ViewZoomBehavior, 
	 * Long Integer or String.
	 * @param {any} to - The ViewZoomBehavior, index, or name at 
	 * the end of the range. Can accept: ViewZoomBehavior, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): ViewZoomBehavior;
	/** Returns the first ViewZoomBehavior in the collection. */
	firstItem(): ViewZoomBehavior;
	/** Returns the last ViewZoomBehavior in the collection. */
	lastItem(): ViewZoomBehavior;
	/** Returns the middle ViewZoomBehavior in the collection. */
	middleItem(): ViewZoomBehavior;
	/**
	 * Returns the ViewZoomBehavior with the index previous to the 
	 * specified index.
	 * @param {ViewZoomBehavior} obj - The index of the 
	 * ViewZoomBehavior that follows the desired ViewZoomBehavior.
	 */
	previousItem(obj: ViewZoomBehavior): ViewZoomBehavior;
	/**
	 * Returns the ViewZoomBehavior whose index follows the 
	 * specified ViewZoomBehavior in the collection.
	 * @param {ViewZoomBehavior} obj - The ViewZoomBehavior whose 
	 * index comes before the desired ViewZoomBehavior.
	 */
	nextItem(obj: ViewZoomBehavior): ViewZoomBehavior;
	/** Returns any ViewZoomBehavior in the collection. */
	anyItem(): ViewZoomBehavior;
	/** Returns every ViewZoomBehavior in the collection. */
	everyItem(): ViewZoomBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * ViewZoomBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the ViewZoomBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ViewZoomBehavior;
}

/**
 * A sound behavior object.
 * @class
 * @extends Behavior
 */
export declare class SoundBehavior extends Behavior {
	/** The name of the SoundBehavior. */
	readonly name: string;
	/** The unique ID of the SoundBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the SoundBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the SoundBehavior within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The sound page item. */
	soundItem: Sound;
	/** The playback mode. */
	operation: PlayOperations;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the SoundBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * SoundBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): SoundBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of sound behavior objects.
 * @class
 */
export declare class SoundBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the SoundBehavior. */
	count(): number;
	/**
	 * Creates a new SoundBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new SoundBehavior (Optional)
	 */
	add(withProperties: Object): SoundBehavior;
	/**
	 * Returns the SoundBehavior with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): SoundBehavior;
	/**
	 * Returns the SoundBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): SoundBehavior;
	/**
	 * Returns the SoundBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): SoundBehavior;
	/**
	 * Returns the SoundBehaviors within the specified range.
	 * @param {any} _from - The SoundBehavior, index, or name at 
	 * the beginning of the range. Can accept: SoundBehavior, Long 
	 * Integer or String.
	 * @param {any} to - The SoundBehavior, index, or name at the 
	 * end of the range. Can accept: SoundBehavior, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): SoundBehavior;
	/** Returns the first SoundBehavior in the collection. */
	firstItem(): SoundBehavior;
	/** Returns the last SoundBehavior in the collection. */
	lastItem(): SoundBehavior;
	/** Returns the middle SoundBehavior in the collection. */
	middleItem(): SoundBehavior;
	/**
	 * Returns the SoundBehavior with the index previous to the 
	 * specified index.
	 * @param {SoundBehavior} obj - The index of the SoundBehavior 
	 * that follows the desired SoundBehavior.
	 */
	previousItem(obj: SoundBehavior): SoundBehavior;
	/**
	 * Returns the SoundBehavior whose index follows the specified 
	 * SoundBehavior in the collection.
	 * @param {SoundBehavior} obj - The SoundBehavior whose index 
	 * comes before the desired SoundBehavior.
	 */
	nextItem(obj: SoundBehavior): SoundBehavior;
	/** Returns any SoundBehavior in the collection. */
	anyItem(): SoundBehavior;
	/** Returns every SoundBehavior in the collection. */
	everyItem(): SoundBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * SoundBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the SoundBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: SoundBehavior;
}

/**
 * A behavior object that jumps to an anchor.
 * @class
 * @extends Behavior
 */
export declare class GotoAnchorBehavior extends Behavior {
	/** The anchor name. */
	readonly anchorName: string;
	/** The name of the GotoAnchorBehavior. */
	readonly name: string;
	/** The unique ID of the GotoAnchorBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GotoAnchorBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the GotoAnchorBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The anchor item, specified as a bookmark or a hyperlink text 
	 * or page destination. Can return: Bookmark, 
	 * HyperlinkTextDestination or HyperlinkPageDestination.
	 */
	anchorItem: any;
	/** The zoom setting. */
	zoomSetting: GoToZoomOptions;
	/**
	 * The file path (colon delimited on the Mac OS). Can also 
	 * accept: File.
	 */
	filePath: string;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoAnchorBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoAnchorBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoAnchorBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of goto anchor behavior objects.
 * @class
 */
export declare class GotoAnchorBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the GotoAnchorBehavior. */
	count(): number;
	/**
	 * Creates a new GotoAnchorBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoAnchorBehavior (Optional)
	 */
	add(withProperties: Object): GotoAnchorBehavior;
	/**
	 * Returns the GotoAnchorBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoAnchorBehavior;
	/**
	 * Returns the GotoAnchorBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoAnchorBehavior;
	/**
	 * Returns the GotoAnchorBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoAnchorBehavior;
	/**
	 * Returns the GotoAnchorBehaviors within the specified range.
	 * @param {any} _from - The GotoAnchorBehavior, index, or name 
	 * at the beginning of the range. Can accept: 
	 * GotoAnchorBehavior, Long Integer or String.
	 * @param {any} to - The GotoAnchorBehavior, index, or name at 
	 * the end of the range. Can accept: GotoAnchorBehavior, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoAnchorBehavior;
	/** Returns the first GotoAnchorBehavior in the collection. */
	firstItem(): GotoAnchorBehavior;
	/** Returns the last GotoAnchorBehavior in the collection. */
	lastItem(): GotoAnchorBehavior;
	/** Returns the middle GotoAnchorBehavior in the collection. */
	middleItem(): GotoAnchorBehavior;
	/**
	 * Returns the GotoAnchorBehavior with the index previous to 
	 * the specified index.
	 * @param {GotoAnchorBehavior} obj - The index of the 
	 * GotoAnchorBehavior that follows the desired 
	 * GotoAnchorBehavior.
	 */
	previousItem(obj: GotoAnchorBehavior): GotoAnchorBehavior;
	/**
	 * Returns the GotoAnchorBehavior whose index follows the 
	 * specified GotoAnchorBehavior in the collection.
	 * @param {GotoAnchorBehavior} obj - The GotoAnchorBehavior 
	 * whose index comes before the desired GotoAnchorBehavior.
	 */
	nextItem(obj: GotoAnchorBehavior): GotoAnchorBehavior;
	/** Returns any GotoAnchorBehavior in the collection. */
	anyItem(): GotoAnchorBehavior;
	/** Returns every GotoAnchorBehavior in the collection. */
	everyItem(): GotoAnchorBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoAnchorBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoAnchorBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoAnchorBehavior;
}

/**
 * A behavior object that jumps to a specific page of the 
 * document.
 * @class
 * @extends Behavior
 */
export declare class GotoPageBehavior extends Behavior {
	/** The name of the GotoPageBehavior. */
	readonly name: string;
	/** The unique ID of the GotoPageBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the GotoPageBehavior (a Button). */
	readonly parent: Button;
	/**
	 * The index of the GotoPageBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The zoom setting. */
	zoomSetting: GoToZoomOptions;
	/**
	 * The page number to go to expressed as an index where 1 is 
	 * the first page.
	 */
	pageNumber: number;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the GotoPageBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoPageBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GotoPageBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of go to page behavior objects.
 * @class
 */
export declare class GotoPageBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the GotoPageBehavior. */
	count(): number;
	/**
	 * Creates a new GotoPageBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GotoPageBehavior (Optional)
	 */
	add(withProperties: Object): GotoPageBehavior;
	/**
	 * Returns the GotoPageBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GotoPageBehavior;
	/**
	 * Returns the GotoPageBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GotoPageBehavior;
	/**
	 * Returns the GotoPageBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GotoPageBehavior;
	/**
	 * Returns the GotoPageBehaviors within the specified range.
	 * @param {any} _from - The GotoPageBehavior, index, or name at 
	 * the beginning of the range. Can accept: GotoPageBehavior, 
	 * Long Integer or String.
	 * @param {any} to - The GotoPageBehavior, index, or name at 
	 * the end of the range. Can accept: GotoPageBehavior, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): GotoPageBehavior;
	/** Returns the first GotoPageBehavior in the collection. */
	firstItem(): GotoPageBehavior;
	/** Returns the last GotoPageBehavior in the collection. */
	lastItem(): GotoPageBehavior;
	/** Returns the middle GotoPageBehavior in the collection. */
	middleItem(): GotoPageBehavior;
	/**
	 * Returns the GotoPageBehavior with the index previous to the 
	 * specified index.
	 * @param {GotoPageBehavior} obj - The index of the 
	 * GotoPageBehavior that follows the desired GotoPageBehavior.
	 */
	previousItem(obj: GotoPageBehavior): GotoPageBehavior;
	/**
	 * Returns the GotoPageBehavior whose index follows the 
	 * specified GotoPageBehavior in the collection.
	 * @param {GotoPageBehavior} obj - The GotoPageBehavior whose 
	 * index comes before the desired GotoPageBehavior.
	 */
	nextItem(obj: GotoPageBehavior): GotoPageBehavior;
	/** Returns any GotoPageBehavior in the collection. */
	anyItem(): GotoPageBehavior;
	/** Returns every GotoPageBehavior in the collection. */
	everyItem(): GotoPageBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * GotoPageBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the GotoPageBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GotoPageBehavior;
}

/**
 * A behavior object that clears the form fields in the 
 * document.
 * @class
 * @extends Behavior
 */
export declare class ClearFormBehavior extends Behavior {
	/** The name of the ClearFormBehavior. */
	readonly name: string;
	/** The unique ID of the ClearFormBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ClearFormBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the ClearFormBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the ClearFormBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ClearFormBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ClearFormBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of clear form behavior objects.
 * @class
 */
export declare class ClearFormBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the ClearFormBehavior. */
	count(): number;
	/**
	 * Creates a new ClearFormBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ClearFormBehavior (Optional)
	 */
	add(withProperties: Object): ClearFormBehavior;
	/**
	 * Returns the ClearFormBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ClearFormBehavior;
	/**
	 * Returns the ClearFormBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ClearFormBehavior;
	/**
	 * Returns the ClearFormBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ClearFormBehavior;
	/**
	 * Returns the ClearFormBehaviors within the specified range.
	 * @param {any} _from - The ClearFormBehavior, index, or name 
	 * at the beginning of the range. Can accept: 
	 * ClearFormBehavior, Long Integer or String.
	 * @param {any} to - The ClearFormBehavior, index, or name at 
	 * the end of the range. Can accept: ClearFormBehavior, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): ClearFormBehavior;
	/** Returns the first ClearFormBehavior in the collection. */
	firstItem(): ClearFormBehavior;
	/** Returns the last ClearFormBehavior in the collection. */
	lastItem(): ClearFormBehavior;
	/** Returns the middle ClearFormBehavior in the collection. */
	middleItem(): ClearFormBehavior;
	/**
	 * Returns the ClearFormBehavior with the index previous to the 
	 * specified index.
	 * @param {ClearFormBehavior} obj - The index of the 
	 * ClearFormBehavior that follows the desired 
	 * ClearFormBehavior.
	 */
	previousItem(obj: ClearFormBehavior): ClearFormBehavior;
	/**
	 * Returns the ClearFormBehavior whose index follows the 
	 * specified ClearFormBehavior in the collection.
	 * @param {ClearFormBehavior} obj - The ClearFormBehavior whose 
	 * index comes before the desired ClearFormBehavior.
	 */
	nextItem(obj: ClearFormBehavior): ClearFormBehavior;
	/** Returns any ClearFormBehavior in the collection. */
	anyItem(): ClearFormBehavior;
	/** Returns every ClearFormBehavior in the collection. */
	everyItem(): ClearFormBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * ClearFormBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the ClearFormBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ClearFormBehavior;
}

/**
 * A behavior object that triggers print for the document.
 * @class
 * @extends Behavior
 */
export declare class PrintFormBehavior extends Behavior {
	/** The name of the PrintFormBehavior. */
	readonly name: string;
	/** The unique ID of the PrintFormBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PrintFormBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the PrintFormBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the PrintFormBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * PrintFormBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PrintFormBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of print form behavior objects.
 * @class
 */
export declare class PrintFormBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the PrintFormBehavior. */
	count(): number;
	/**
	 * Creates a new PrintFormBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PrintFormBehavior (Optional)
	 */
	add(withProperties: Object): PrintFormBehavior;
	/**
	 * Returns the PrintFormBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PrintFormBehavior;
	/**
	 * Returns the PrintFormBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PrintFormBehavior;
	/**
	 * Returns the PrintFormBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PrintFormBehavior;
	/**
	 * Returns the PrintFormBehaviors within the specified range.
	 * @param {any} _from - The PrintFormBehavior, index, or name 
	 * at the beginning of the range. Can accept: 
	 * PrintFormBehavior, Long Integer or String.
	 * @param {any} to - The PrintFormBehavior, index, or name at 
	 * the end of the range. Can accept: PrintFormBehavior, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): PrintFormBehavior;
	/** Returns the first PrintFormBehavior in the collection. */
	firstItem(): PrintFormBehavior;
	/** Returns the last PrintFormBehavior in the collection. */
	lastItem(): PrintFormBehavior;
	/** Returns the middle PrintFormBehavior in the collection. */
	middleItem(): PrintFormBehavior;
	/**
	 * Returns the PrintFormBehavior with the index previous to the 
	 * specified index.
	 * @param {PrintFormBehavior} obj - The index of the 
	 * PrintFormBehavior that follows the desired 
	 * PrintFormBehavior.
	 */
	previousItem(obj: PrintFormBehavior): PrintFormBehavior;
	/**
	 * Returns the PrintFormBehavior whose index follows the 
	 * specified PrintFormBehavior in the collection.
	 * @param {PrintFormBehavior} obj - The PrintFormBehavior whose 
	 * index comes before the desired PrintFormBehavior.
	 */
	nextItem(obj: PrintFormBehavior): PrintFormBehavior;
	/** Returns any PrintFormBehavior in the collection. */
	anyItem(): PrintFormBehavior;
	/** Returns every PrintFormBehavior in the collection. */
	everyItem(): PrintFormBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * PrintFormBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the PrintFormBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PrintFormBehavior;
}

/**
 * A behavior object that submits the document.
 * @class
 * @extends Behavior
 */
export declare class SubmitFormBehavior extends Behavior {
	/** The name of the SubmitFormBehavior. */
	readonly name: string;
	/** The unique ID of the SubmitFormBehavior. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the SubmitFormBehavior (a Button, CheckBox, 
	 * ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	readonly parent: any;
	/**
	 * The index of the SubmitFormBehavior within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The URL. */
	url: string;
	/** If true, the behavior is enabled. */
	enableBehavior: boolean;
	/** The event which triggers the behavior. */
	behaviorEvent: BehaviorEvents;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the SubmitFormBehavior. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * SubmitFormBehavior.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): SubmitFormBehavior;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of submit form behavior objects.
 * @class
 */
export declare class SubmitFormBehaviors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the SubmitFormBehavior. */
	count(): number;
	/**
	 * Creates a new SubmitFormBehavior.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new SubmitFormBehavior (Optional)
	 */
	add(withProperties: Object): SubmitFormBehavior;
	/**
	 * Returns the SubmitFormBehavior with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): SubmitFormBehavior;
	/**
	 * Returns the SubmitFormBehavior with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): SubmitFormBehavior;
	/**
	 * Returns the SubmitFormBehavior with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): SubmitFormBehavior;
	/**
	 * Returns the SubmitFormBehaviors within the specified range.
	 * @param {any} _from - The SubmitFormBehavior, index, or name 
	 * at the beginning of the range. Can accept: 
	 * SubmitFormBehavior, Long Integer or String.
	 * @param {any} to - The SubmitFormBehavior, index, or name at 
	 * the end of the range. Can accept: SubmitFormBehavior, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): SubmitFormBehavior;
	/** Returns the first SubmitFormBehavior in the collection. */
	firstItem(): SubmitFormBehavior;
	/** Returns the last SubmitFormBehavior in the collection. */
	lastItem(): SubmitFormBehavior;
	/** Returns the middle SubmitFormBehavior in the collection. */
	middleItem(): SubmitFormBehavior;
	/**
	 * Returns the SubmitFormBehavior with the index previous to 
	 * the specified index.
	 * @param {SubmitFormBehavior} obj - The index of the 
	 * SubmitFormBehavior that follows the desired 
	 * SubmitFormBehavior.
	 */
	previousItem(obj: SubmitFormBehavior): SubmitFormBehavior;
	/**
	 * Returns the SubmitFormBehavior whose index follows the 
	 * specified SubmitFormBehavior in the collection.
	 * @param {SubmitFormBehavior} obj - The SubmitFormBehavior 
	 * whose index comes before the desired SubmitFormBehavior.
	 */
	nextItem(obj: SubmitFormBehavior): SubmitFormBehavior;
	/** Returns any SubmitFormBehavior in the collection. */
	anyItem(): SubmitFormBehavior;
	/** Returns every SubmitFormBehavior in the collection. */
	everyItem(): SubmitFormBehavior;
	/**
	 * Generates a string which, if executed, will return the 
	 * SubmitFormBehavior.
	 */
	toSource(): string;
	/**
	 * Returns the SubmitFormBehavior with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: SubmitFormBehavior;
}

/**
 * Timing settings.
 * @class
 * @extends Preference
 */
export declare class TimingSetting extends Preference {
	/** Dynamic targets on the spread that are not assigned. */
	readonly unassignedDynamicTargets: Object;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TimingSetting (a PageItem, HtmlItem, 
	 * FormField, SignatureField, TextBox, RadioButton, ListBox, 
	 * ComboBox, CheckBox, MultiStateObject, Button, MediaItem, 
	 * Sound, Movie, EPSText, SplineItem, Polygon, GraphicLine, 
	 * Rectangle, Oval, Graphic, ImportedPage, PICT, WMF, PDF, EPS, 
	 * Image, Group, TextFrame, MasterSpread or Spread).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of timing lists. */
	readonly timingLists: TimingLists;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TimingSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TimingSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * a timing list.
 * @class
 */
export declare class TimingList {
	/** trigger event. */
	readonly triggerEvent: DynamicTriggerEvents;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TimingList (a TimingSetting). */
	readonly parent: TimingSetting;
	/** The index of the TimingList within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of timing data objects. */
	readonly timingGroups: TimingGroups;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the TimingList. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * TimingList.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TimingList;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of timing lists.
 * @class
 */
export declare class TimingLists {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the TimingList. */
	count(): number;
	/**
	 * Adds a new event-triggered timing list object.
	 * @param {DynamicTriggerEvents} triggerEvent - Trigger Event
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TimingList (Optional)
	 */
	add(triggerEvent: DynamicTriggerEvents, withProperties: Object): TimingList;
	/**
	 * Returns the TimingList with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TimingList;
	/**
	 * Returns the TimingLists within the specified range.
	 * @param {any} _from - The TimingList, index, or name at the 
	 * beginning of the range. Can accept: TimingList, Long Integer 
	 * or String.
	 * @param {any} to - The TimingList, index, or name at the end 
	 * of the range. Can accept: TimingList, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): TimingList;
	/** Returns the first TimingList in the collection. */
	firstItem(): TimingList;
	/** Returns the last TimingList in the collection. */
	lastItem(): TimingList;
	/** Returns the middle TimingList in the collection. */
	middleItem(): TimingList;
	/**
	 * Returns the TimingList with the index previous to the 
	 * specified index.
	 * @param {TimingList} obj - The index of the TimingList that 
	 * follows the desired TimingList.
	 */
	previousItem(obj: TimingList): TimingList;
	/**
	 * Returns the TimingList whose index follows the specified 
	 * TimingList in the collection.
	 * @param {TimingList} obj - The TimingList whose index comes 
	 * before the desired TimingList.
	 */
	nextItem(obj: TimingList): TimingList;
	/** Returns any TimingList in the collection. */
	anyItem(): TimingList;
	/** Returns every TimingList in the collection. */
	everyItem(): TimingList;
	/**
	 * Generates a string which, if executed, will return the 
	 * TimingList.
	 */
	toSource(): string;
	/**
	 * Returns the TimingList with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TimingList;
}

/**
 * a timing group.
 * @class
 */
export declare class TimingGroup {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TimingGroup (a TimingList). */
	readonly parent: TimingList;
	/** The index of the TimingGroup within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of timing target. */
	readonly timingTargets: TimingTargets;
	/** The placement of the timing group in the timing list. */
	placement: number;
	/** The number of times this timing group plays. */
	plays: number;
	/** Set to true if timing group loops. */
	playsLoop: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the TimingGroup. */
	remove(): void;
	/**
	 * Unlink all targets in the group into separate groups in this 
	 * timing list.
	 */
	unlink(): void;
	/**
	 * Moves the timing group or target to the specified location.
	 * @param {LocationOptions} to - The location in relation to 
	 * the reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. . 
	 * Can accept: TimingGroup, TimingTarget or TimingList. 
	 * (Optional)
	 */
	move(to: LocationOptions, reference: any): TimingGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * TimingGroup.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TimingGroup;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of timing data objects.
 * @class
 */
export declare class TimingGroups {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a new timing group.
	 * @param {any} dynamicTarget - A page item target that is an 
	 * animation, media, or mso. Can accept: PageItem, Graphic, 
	 * Behavior or MediaItem.
	 * @param {number} delaySeconds - The time delay in seconds for 
	 * a target. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TimingGroup (Optional)
	 */
	add(dynamicTarget: any, delaySeconds?: number, withProperties?: Object): TimingGroup;
	/** Displays the number of elements in the TimingGroup. */
	count(): number;
	/**
	 * Returns the TimingGroup with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TimingGroup;
	/**
	 * Returns the TimingGroups within the specified range.
	 * @param {any} _from - The TimingGroup, index, or name at the 
	 * beginning of the range. Can accept: TimingGroup, Long 
	 * Integer or String.
	 * @param {any} to - The TimingGroup, index, or name at the end 
	 * of the range. Can accept: TimingGroup, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): TimingGroup;
	/** Returns the first TimingGroup in the collection. */
	firstItem(): TimingGroup;
	/** Returns the last TimingGroup in the collection. */
	lastItem(): TimingGroup;
	/** Returns the middle TimingGroup in the collection. */
	middleItem(): TimingGroup;
	/**
	 * Returns the TimingGroup with the index previous to the 
	 * specified index.
	 * @param {TimingGroup} obj - The index of the TimingGroup that 
	 * follows the desired TimingGroup.
	 */
	previousItem(obj: TimingGroup): TimingGroup;
	/**
	 * Returns the TimingGroup whose index follows the specified 
	 * TimingGroup in the collection.
	 * @param {TimingGroup} obj - The TimingGroup whose index comes 
	 * before the desired TimingGroup.
	 */
	nextItem(obj: TimingGroup): TimingGroup;
	/** Returns any TimingGroup in the collection. */
	anyItem(): TimingGroup;
	/** Returns every TimingGroup in the collection. */
	everyItem(): TimingGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * TimingGroup.
	 */
	toSource(): string;
	/**
	 * Returns the TimingGroup with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TimingGroup;
}

/**
 * a timing target.
 * @class
 */
export declare class TimingTarget {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TimingTarget (a TimingGroup). */
	readonly parent: TimingGroup;
	/** The index of the TimingTarget within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A page item target that is an animation, media, or mso. Can 
	 * return: PageItem, Graphic, Behavior or MediaItem.
	 */
	dynamicTarget: any;
	/**
	 * The time delay in seconds for a single target or a group of 
	 * targets after the previoius group has finished.
	 */
	delaySeconds: number;
	/**
	 * Set to true if reversing animation on rolloff. Valid only 
	 * for self rolloff trigger event.
	 */
	reverseAnimation: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the TimingTarget. */
	remove(): void;
	/**
	 * Unlink target from this group and append to the end of this 
	 * timing list.
	 */
	unlink(): void;
	/**
	 * Moves the timing group or target to the specified location.
	 * @param {LocationOptions} to - The location in relation to 
	 * the reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. . 
	 * Can accept: TimingGroup, TimingTarget or TimingList. 
	 * (Optional)
	 */
	move(to: LocationOptions, reference: any): TimingTarget;
	/**
	 * Generates a string which, if executed, will return the 
	 * TimingTarget.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TimingTarget;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of timing target.
 * @class
 */
export declare class TimingTargets {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a new target item.
	 * @param {any} dynamicTarget - A page item target that is an 
	 * animation, media, or mso. Can accept: PageItem, Graphic, 
	 * Behavior or MediaItem.
	 * @param {number} delaySeconds - The time delay in seconds for 
	 * a target. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TimingTarget (Optional)
	 */
	add(dynamicTarget: any, delaySeconds?: number, withProperties?: Object): TimingTarget;
	/** Displays the number of elements in the TimingTarget. */
	count(): number;
	/**
	 * Returns the TimingTarget with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TimingTarget;
	/**
	 * Returns the TimingTargets within the specified range.
	 * @param {any} _from - The TimingTarget, index, or name at the 
	 * beginning of the range. Can accept: TimingTarget, Long 
	 * Integer or String.
	 * @param {any} to - The TimingTarget, index, or name at the 
	 * end of the range. Can accept: TimingTarget, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): TimingTarget;
	/** Returns the first TimingTarget in the collection. */
	firstItem(): TimingTarget;
	/** Returns the last TimingTarget in the collection. */
	lastItem(): TimingTarget;
	/** Returns the middle TimingTarget in the collection. */
	middleItem(): TimingTarget;
	/**
	 * Returns the TimingTarget with the index previous to the 
	 * specified index.
	 * @param {TimingTarget} obj - The index of the TimingTarget 
	 * that follows the desired TimingTarget.
	 */
	previousItem(obj: TimingTarget): TimingTarget;
	/**
	 * Returns the TimingTarget whose index follows the specified 
	 * TimingTarget in the collection.
	 * @param {TimingTarget} obj - The TimingTarget whose index 
	 * comes before the desired TimingTarget.
	 */
	nextItem(obj: TimingTarget): TimingTarget;
	/** Returns any TimingTarget in the collection. */
	anyItem(): TimingTarget;
	/** Returns every TimingTarget in the collection. */
	everyItem(): TimingTarget;
	/**
	 * Generates a string which, if executed, will return the 
	 * TimingTarget.
	 */
	toSource(): string;
	/**
	 * Returns the TimingTarget with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TimingTarget;
}

/**
 * A layer.
 * @class
 */
export declare class Layer {
	/** Lists all page items contained by the Layer. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Layer. */
	readonly allGraphics: Graphic;
	/** The unique ID of the Layer. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Layer (a Document). */
	readonly parent: Document;
	/** The index of the Layer within its containing object. */
	readonly index: number;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of guides. */
	readonly guides: Guides;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** The name of the Layer. */
	name: string;
	/** If true, the Layer is visible. */
	visible: boolean;
	/** If true, the Layer is locked. */
	locked: boolean;
	/**
	 * The color of the layer, specified either as an array of 
	 * three doubles, each in the range 0 to 255 and representing 
	 * R, G, and B values, or as a UI color. Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator.
	 */
	layerColor: any;
	/**
	 * If true, text wrap settings applied to objects on the layer 
	 * will not affect text on other layers when the layer is 
	 * hidden.
	 */
	ignoreWrap: boolean;
	/** If true, guides are visible on the layer. */
	showGuides: boolean;
	/** If true, the guide positions on the layer are locked. */
	lockGuides: boolean;
	/** If true, the layer will print. */
	printable: boolean;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Moves the Layer to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {Layer} reference - The reference object. Note: 
	 * Required when the to value specifies before or after. 
	 * (Optional)
	 */
	move(to: LocationOptions, reference: Layer): Layer;
	/** Deletes the Layer. */
	remove(): void;
	/** Duplicates the Layer. */
	duplicate(): Layer;
	/**
	 * Merges the layer with other layer(s).
	 * @param {Layer} _with - The layer(s) with which to merge.
	 */
	merge(_with: Layer): Layer;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Layer.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Layer;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of layers.
 * @class
 */
export declare class Layers {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Layer.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Layer (Optional)
	 */
	add(withProperties: Object): Layer;
	/** Displays the number of elements in the Layer. */
	count(): number;
	/**
	 * Returns the Layer with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Layer;
	/**
	 * Returns the Layer with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Layer;
	/**
	 * Returns the Layer with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Layer;
	/**
	 * Returns the Layers within the specified range.
	 * @param {any} _from - The Layer, index, or name at the 
	 * beginning of the range. Can accept: Layer, Long Integer or 
	 * String.
	 * @param {any} to - The Layer, index, or name at the end of 
	 * the range. Can accept: Layer, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Layer;
	/** Returns the first Layer in the collection. */
	firstItem(): Layer;
	/** Returns the last Layer in the collection. */
	lastItem(): Layer;
	/** Returns the middle Layer in the collection. */
	middleItem(): Layer;
	/**
	 * Returns the Layer with the index previous to the specified 
	 * index.
	 * @param {Layer} obj - The index of the Layer that follows the 
	 * desired Layer.
	 */
	previousItem(obj: Layer): Layer;
	/**
	 * Returns the Layer whose index follows the specified Layer in 
	 * the collection.
	 * @param {Layer} obj - The Layer whose index comes before the 
	 * desired Layer.
	 */
	nextItem(obj: Layer): Layer;
	/** Returns any Layer in the collection. */
	anyItem(): Layer;
	/** Returns every Layer in the collection. */
	everyItem(): Layer;
	/**
	 * Generates a string which, if executed, will return the 
	 * Layer.
	 */
	toSource(): string;
	/**
	 * Returns the Layer with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Layer;
}

/**
 * A spread.
 * @class
 */
export declare class Spread {
	/** Flattener preference settings. */
	readonly flattenerPreferences: FlattenerPreference;
	/** The index of the Spread within its containing object. */
	readonly index: number;
	/** Lists all page items contained by the Spread. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Spread. */
	readonly allGraphics: Graphic;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The unique ID of the Spread. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Spread (a Document). */
	readonly parent: Document;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of pages. */
	readonly pages: Pages;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of guides. */
	readonly guides: Guides;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/**
	 * The transparency flattener preferences override for the 
	 * spread.
	 */
	flattenerOverride: SpreadFlattenerLevel;
	/**
	 * If true, guarantees that when pages are added to a spread it 
	 * will contain a maximum of two pages. If false, allows pages 
	 * to be added or moved into existing spreads. For override 
	 * information, see preserve layout when shuffling.
	 */
	allowPageShuffle: boolean;
	/**
	 * If true, displays master page items on document pages in the 
	 * spread.
	 */
	showMasterItems: boolean;
	/**
	 * The master spread applied to the Spread. Can also accept: 
	 * NothingEnum enumerator.
	 */
	appliedMaster: MasterSpread;
	/** The IDML component name of the Spread. */
	idmlComponentName: string;
	/** The type of page transition. */
	pageTransitionType: PageTransitionTypeOptions;
	/** The direction of the page transition. */
	pageTransitionDirection: PageTransitionDirectionOptions;
	/** The duration of the page transition. */
	pageTransitionDuration: PageTransitionDurationOptions;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the Spread; this is an alias to the Spread's 
	 * label property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Places the XML element onto a page. If the place point is 
	 * above an existing page item, place the XML element into the 
	 * page item.
	 * @param {XMLElement} using - The XML element to place.
	 * @param {number|string} placePoint - The point at which to 
	 * place the object, specified in the format [x, y].
	 * @param {boolean} autoflowing - If true, autoflows placed 
	 * text. (Optional)
	 */
	placeXML(using: XMLElement, placePoint: number|string, autoflowing?: boolean): PageItem;
	/**
	 * Replaces the content of XML element with content imported 
	 * from a file.
	 * @param {string} using - The file path to the import file.
	 * @param {string} relativeBasePath - Base path used to resolve 
	 * relative paths. (Optional)
	 */
	setContent(using: string, relativeBasePath: string): PageItem;
	/**
	 * Moves the spread.
	 * @param {LocationOptions} to - The location of the spread 
	 * relative to the reference object or within the document.  
	 * (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Spread, Page or Document. (Optional)
	 */
	move(to?: LocationOptions, reference?: any): Spread;
	/** Deletes the Spread. */
	remove(): void;
	/**
	 * Duplicates the spread.
	 * @param {LocationOptions} to - The location of the spread 
	 * relative to the reference object or within the document. 
	 * (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required only when the to parameter specifies before or 
	 * after. Can accept: Spread, Document or MasterSpread. 
	 * (Optional)
	 */
	duplicate(to?: LocationOptions, reference?: any): any;
	/**
	 * Deprecated: Use contentPlace method. Original Description: 
	 * Create a linked story and place it into the target.
	 * @param {Story} parentStory - The story to place and link 
	 * from.
	 * @param {number|string} placePoint - The point at which to 
	 * place (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	placeAndLink(parentStory: Story, placePoint: number|string, destinationLayer: Layer, showingOptions?: boolean): Story;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {number|string} placePoint - The point at which to 
	 * place (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {boolean} autoflowing - Whether to autoflow placed 
	 * text (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, placePoint: number|string, destinationLayer: Layer, showingOptions?: boolean, autoflowing?: boolean, withProperties?: Object): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Spread in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Creates multiple guides on all pages of the spread.
	 * @param {number} numberOfRows - The number of rows to create 
	 * on each page. (Optional)
	 * @param {number} numberOfColumns - The number of columns to 
	 * create on each page.  (Optional)
	 * @param {number|string} rowGutter - The height of the gutter 
	 * between rows. (Optional)
	 * @param {number|string} columnGutter - The width of the 
	 * gutter between columns. (Optional)
	 * @param {any} guideColor - The color to make the guides, 
	 * specified either as an array of three doubles, each in the 
	 * range 0 to 255 and representing R, G, and B values, or as a 
	 * UI color. Can accept: Array of 3 Reals (0 - 255) or UIColors 
	 * enumerator. (Optional)
	 * @param {boolean} fitMargins - If true, the row height and 
	 * column width are calculated based on the space within the 
	 * page margins. If false, row height and column width are 
	 * calculated based on the full page. (Optional)
	 * @param {boolean} removeExisting - If true, removes existing 
	 * guides when creating new ones. (Optional)
	 * @param {Layer} layer - The layer on which to create the 
	 * guides. (Optional)
	 */
	createGuides(numberOfRows?: number, numberOfColumns?: number, rowGutter?: number|string, columnGutter?: number|string, guideColor?: any, fitMargins?: boolean, removeExisting?: boolean, layer?: Layer): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Duplicate an object and place it into the target.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {number|string} placePoint - The point at which to 
	 * place (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, placePoint?: number|string, destinationLayer?: Layer, showingOptions?: boolean): any;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Spread.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Spread;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of spreads.
 * @class
 */
export declare class Spreads {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Spread. */
	count(): number;
	/**
	 * Creates a new spread.
	 * @param {LocationOptions} at - The location of the spread 
	 * relative to the reference object or within the document.  
	 * (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter specifies before or after. 
	 * Can accept: Spread or Document. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Spread (Optional)
	 */
	add(at?: LocationOptions, reference?: any, withProperties?: Object): Spread;
	/**
	 * Returns the Spread with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Spread;
	/**
	 * Returns the Spread with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Spread;
	/**
	 * Returns the Spread with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Spread;
	/**
	 * Returns the Spreads within the specified range.
	 * @param {any} _from - The Spread, index, or name at the 
	 * beginning of the range. Can accept: Spread, Long Integer or 
	 * String.
	 * @param {any} to - The Spread, index, or name at the end of 
	 * the range. Can accept: Spread, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Spread;
	/** Returns the first Spread in the collection. */
	firstItem(): Spread;
	/** Returns the last Spread in the collection. */
	lastItem(): Spread;
	/** Returns the middle Spread in the collection. */
	middleItem(): Spread;
	/**
	 * Returns the Spread with the index previous to the specified 
	 * index.
	 * @param {Spread} obj - The index of the Spread that follows 
	 * the desired Spread.
	 */
	previousItem(obj: Spread): Spread;
	/**
	 * Returns the Spread whose index follows the specified Spread 
	 * in the collection.
	 * @param {Spread} obj - The Spread whose index comes before 
	 * the desired Spread.
	 */
	nextItem(obj: Spread): Spread;
	/** Returns any Spread in the collection. */
	anyItem(): Spread;
	/** Returns every Spread in the collection. */
	everyItem(): Spread;
	/**
	 * Generates a string which, if executed, will return the 
	 * Spread.
	 */
	toSource(): string;
	/**
	 * Returns the Spread with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Spread;
}

/**
 * A page.
 * @class
 */
export declare class Page {
	/** The alternate layout section to which the page belongs. */
	readonly appliedAlternateLayout: Section;
	/** Margin preference settings. */
	readonly marginPreferences: MarginPreference;
	/**
	 * The side of the binding spine on which to place the page 
	 * within the spread.
	 */
	readonly side: PageSideOptions;
	/** The name of the Page. */
	readonly name: string;
	/** The section to which the page belongs. */
	readonly appliedSection: Section;
	/** The index of the Page within its containing object. */
	readonly index: number;
	/** The sequential number of the page within the document. */
	readonly documentOffset: number;
	/** The bounds of the Page, in the format [y1, x1, y2, x2]. */
	readonly bounds: number|string;
	/**
	 * The items on a specified document page that originated on 
	 * the applied master page and have not been overridden or 
	 * detached. Can return: Array of PageItems, Guides, Graphics, 
	 * Movies or Sounds.
	 */
	readonly masterPageItems: any;
	/** Lists all page items contained by the Page. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Page. */
	readonly allGraphics: Graphic;
	/**
	 * Default grid properties. Note: Applies to named, layout, and 
	 * frame (story) grids.
	 */
	readonly gridData: GridDataInformation;
	/** The unique ID of the Page. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Page (a Spread or MasterSpread). */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of guides. */
	readonly guides: Guides;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** layout rule */
	layoutRule: LayoutRuleOptions;
	/** snapshot blending mode */
	snapshotBlendingMode: SnapshotBlendingModes;
	/** optional page for HTML5 pagination. Obsolete after CS6 */
	optionalPage: boolean;
	/**
	 * The trap preset applied to the page. Can also accept: 
	 * String.
	 */
	appliedTrapPreset: TrapPreset;
	/**
	 * The color label of the Page, specified either as  an array 
	 * of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Can 
	 * return: Array of 3 Reals (0 - 255) or UIColors enumerator or 
	 * PageColorOptions enumerator.
	 */
	pageColor: any;
	/**
	 * The master spread applied to the Page. Can also accept: 
	 * NothingEnum enumerator.
	 */
	appliedMaster: MasterSpread;
	/**
	 * The transform applied to the master page before it is 
	 * applied to Page.
	 */
	masterPageTransform: TransformationMatrix;
	/**
	 * The order in which the focus moves to different form fields 
	 * in the PDF when the tab key is pressed. Can return: Array of 
	 * Buttons, CheckBoxes, ComboBoxes, ListBoxes, RadioButtons, 
	 * TextBoxes or SignatureFields.
	 */
	tabOrder: any;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Places the XML element onto a page. If the place point is 
	 * above an existing page item, place the XML element into the 
	 * page item.
	 * @param {XMLElement} using - The XML element to place.
	 * @param {number|string} placePoint - The point at which to 
	 * place the object, specified in the format [x, y].
	 * @param {boolean} autoflowing - If true, autoflows placed 
	 * text. (Optional)
	 */
	placeXML(using: XMLElement, placePoint: number|string, autoflowing?: boolean): PageItem;
	/**
	 * Replaces the content of XML element with content imported 
	 * from a file.
	 * @param {string} using - The file path to the import file.
	 * @param {string} relativeBasePath - Base path used to resolve 
	 * relative paths. (Optional)
	 */
	setContent(using: string, relativeBasePath: string): PageItem;
	/**
	 * Create a snapshot of the layout for the current Page size 
	 * and shape.
	 */
	snapshotCurrentLayout(): void;
	/**
	 * Delete the snapshot of the layout for the current Page size 
	 * and shape.
	 */
	deleteLayoutSnapshot(): void;
	/** Delete all layout snapshots for this Page. */
	deleteAllLayoutSnapshots(): void;
	/**
	 * Moves the page.
	 * @param {LocationOptions} to - The new location of the page 
	 * relative to the reference object or within the document or 
	 * spread.  (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter value specifies before or 
	 * after. Can accept: Page or Spread. (Optional)
	 * @param {BindingOptions} binding - The location of the 
	 * binding spine in spreads. (Optional)
	 */
	move(to?: LocationOptions, reference?: any, binding?: BindingOptions): Page;
	/** Deletes the Page. */
	remove(): void;
	/**
	 * Duplicates the page.
	 * @param {LocationOptions} to - The location at which to place 
	 * the duplicate page relative to the reference object or 
	 * within the document or spread.  (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to value specifies before or after. Can 
	 * accept: Page or Spread. (Optional)
	 */
	duplicate(to?: LocationOptions, reference?: any): Page;
	/**
	 * Deprecated: Use contentPlace method. Original Description: 
	 * Create a linked story and place it into the target.
	 * @param {Story} parentStory - The story to place and link 
	 * from.
	 * @param {number|string} placePoint - The point at which to 
	 * place (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	placeAndLink(parentStory: Story, placePoint: number|string, destinationLayer: Layer, showingOptions?: boolean): Story;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {number|string} placePoint - The point at which to 
	 * place (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {boolean} autoflowing - Whether to autoflow placed 
	 * text (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, placePoint: number|string, destinationLayer: Layer, showingOptions?: boolean, autoflowing?: boolean, withProperties?: Object): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Page in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Duplicate an object and place it into the target.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {number|string} placePoint - The point at which to 
	 * place (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, placePoint?: number|string, destinationLayer?: Layer, showingOptions?: boolean): any;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the Page.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Page;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of pages.
 * @class
 */
export declare class Pages {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Page. */
	count(): number;
	/**
	 * Creates a new page.
	 * @param {LocationOptions} at - The location of the new page 
	 * relative to the reference object or within the document or 
	 * spread.  (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter value specifies before or 
	 * after. Can accept: Page, Spread, MasterSpread or Document. 
	 * (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Page (Optional)
	 */
	add(at?: LocationOptions, reference?: any, withProperties?: Object): Page;
	/**
	 * Returns the Page with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Page;
	/**
	 * Returns the Page with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Page;
	/**
	 * Returns the Page with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Page;
	/**
	 * Returns the Pages within the specified range.
	 * @param {any} _from - The Page, index, or name at the 
	 * beginning of the range. Can accept: Page, Long Integer or 
	 * String.
	 * @param {any} to - The Page, index, or name at the end of the 
	 * range. Can accept: Page, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Page;
	/** Returns the first Page in the collection. */
	firstItem(): Page;
	/** Returns the last Page in the collection. */
	lastItem(): Page;
	/** Returns the middle Page in the collection. */
	middleItem(): Page;
	/**
	 * Returns the Page with the index previous to the specified 
	 * index.
	 * @param {Page} obj - The index of the Page that follows the 
	 * desired Page.
	 */
	previousItem(obj: Page): Page;
	/**
	 * Returns the Page whose index follows the specified Page in 
	 * the collection.
	 * @param {Page} obj - The Page whose index comes before the 
	 * desired Page.
	 */
	nextItem(obj: Page): Page;
	/** Returns any Page in the collection. */
	anyItem(): Page;
	/** Returns every Page in the collection. */
	everyItem(): Page;
	/**
	 * Generates a string which, if executed, will return the Page.
	 */
	toSource(): string;
	/**
	 * Returns the Page with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Page;
}

/**
 * A master spread.
 * @class
 */
export declare class MasterSpread {
	/** The name of the MasterSpread. */
	readonly name: string;
	/** Lists all page items contained by the MasterSpread. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the MasterSpread. */
	readonly allGraphics: Graphic;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The unique ID of the MasterSpread. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the MasterSpread (a Document). */
	readonly parent: Document;
	/** The index of the MasterSpread within its containing object. */
	readonly index: number;
	/** A collection of pages. */
	readonly pages: Pages;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of guides. */
	readonly guides: Guides;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * The color label of the MasterSpread, specified either as  an 
	 * array of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Can 
	 * return: Array of 3 Reals (0 - 255) or UIColors enumerator or 
	 * PageColorOptions enumerator.
	 */
	pageColor: any;
	/** The prefix of the master spread name. */
	namePrefix: string;
	/** The name of the master spread. */
	baseName: string;
	/**
	 * If true, displays master page items on document pages in the 
	 * spread.
	 */
	showMasterItems: boolean;
	/**
	 * The master spread applied to the MasterSpread. Can also 
	 * accept: NothingEnum enumerator.
	 */
	appliedMaster: MasterSpread;
	/**
	 * The primary text frame through which text flows on the 
	 * MasterSpread. Must be a text frame or a type on a path 
	 * spline. Can also accept: NothingEnum enumerator.
	 */
	primaryTextFrame: PageItem;
	/** The IDML component name of the MasterSpread. */
	idmlComponentName: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Duplicates the spread.
	 * @param {LocationOptions} to - The location of the spread 
	 * relative to the reference object or within the document. 
	 * (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required only when the to parameter specifies before or 
	 * after. Can accept: MasterSpread, Document or MasterSpread. 
	 * (Optional)
	 */
	duplicate(to?: LocationOptions, reference?: any): any;
	/**
	 * Deprecated: Use contentPlace method. Original Description: 
	 * Create a linked story and place it into the target.
	 * @param {Story} parentStory - The story to place and link 
	 * from.
	 * @param {number|string} placePoint - The point at which to 
	 * place (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	placeAndLink(parentStory: Story, placePoint: number|string, destinationLayer: Layer, showingOptions?: boolean): Story;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {number|string} placePoint - The point at which to 
	 * place (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {boolean} autoflowing - Whether to autoflow placed 
	 * text (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, placePoint: number|string, destinationLayer: Layer, showingOptions?: boolean, autoflowing?: boolean, withProperties?: Object): any;
	/** Deletes the MasterSpread. */
	remove(): void;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the MasterSpread in relation to previously 
	 * selected objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Creates multiple guides on all pages of the spread.
	 * @param {number} numberOfRows - The number of rows to create 
	 * on each page. (Optional)
	 * @param {number} numberOfColumns - The number of columns to 
	 * create on each page.  (Optional)
	 * @param {number|string} rowGutter - The height of the gutter 
	 * between rows. (Optional)
	 * @param {number|string} columnGutter - The width of the 
	 * gutter between columns. (Optional)
	 * @param {any} guideColor - The color to make the guides, 
	 * specified either as an array of three doubles, each in the 
	 * range 0 to 255 and representing R, G, and B values, or as a 
	 * UI color. Can accept: Array of 3 Reals (0 - 255) or UIColors 
	 * enumerator. (Optional)
	 * @param {boolean} fitMargins - If true, the row height and 
	 * column width are calculated based on the space within the 
	 * page margins. If false, row height and column width are 
	 * calculated based on the full page. (Optional)
	 * @param {boolean} removeExisting - If true, removes existing 
	 * guides when creating new ones. (Optional)
	 * @param {Layer} layer - The layer on which to create the 
	 * guides. (Optional)
	 */
	createGuides(numberOfRows?: number, numberOfColumns?: number, rowGutter?: number|string, columnGutter?: number|string, guideColor?: any, fitMargins?: boolean, removeExisting?: boolean, layer?: Layer): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Duplicate an object and place it into the target.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {number|string} placePoint - The point at which to 
	 * place (Optional)
	 * @param {Layer} destinationLayer - The layer on which to 
	 * place (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, placePoint?: number|string, destinationLayer?: Layer, showingOptions?: boolean): any;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * MasterSpread.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MasterSpread;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of master spreads.
 * @class
 */
export declare class MasterSpreads {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new master spread.
	 * @param {number} pagesPerSpread - The number of pages to 
	 * include in the master spread. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MasterSpread (Optional)
	 */
	add(pagesPerSpread: number, withProperties: Object): MasterSpread;
	/** Displays the number of elements in the MasterSpread. */
	count(): number;
	/**
	 * Returns the MasterSpread with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MasterSpread;
	/**
	 * Returns the MasterSpread with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): MasterSpread;
	/**
	 * Returns the MasterSpread with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MasterSpread;
	/**
	 * Returns the MasterSpreads within the specified range.
	 * @param {any} _from - The MasterSpread, index, or name at the 
	 * beginning of the range. Can accept: MasterSpread, Long 
	 * Integer or String.
	 * @param {any} to - The MasterSpread, index, or name at the 
	 * end of the range. Can accept: MasterSpread, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): MasterSpread;
	/** Returns the first MasterSpread in the collection. */
	firstItem(): MasterSpread;
	/** Returns the last MasterSpread in the collection. */
	lastItem(): MasterSpread;
	/** Returns the middle MasterSpread in the collection. */
	middleItem(): MasterSpread;
	/**
	 * Returns the MasterSpread with the index previous to the 
	 * specified index.
	 * @param {MasterSpread} obj - The index of the MasterSpread 
	 * that follows the desired MasterSpread.
	 */
	previousItem(obj: MasterSpread): MasterSpread;
	/**
	 * Returns the MasterSpread whose index follows the specified 
	 * MasterSpread in the collection.
	 * @param {MasterSpread} obj - The MasterSpread whose index 
	 * comes before the desired MasterSpread.
	 */
	nextItem(obj: MasterSpread): MasterSpread;
	/** Returns any MasterSpread in the collection. */
	anyItem(): MasterSpread;
	/** Returns every MasterSpread in the collection. */
	everyItem(): MasterSpread;
	/**
	 * Generates a string which, if executed, will return the 
	 * MasterSpread.
	 */
	toSource(): string;
	/**
	 * Returns the MasterSpread with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MasterSpread;
}

/**
 * PDF attributes.
 * @class
 * @extends Preference
 */
export declare class PDFAttribute extends Preference {
	/** The page number of the PDF document page to place. */
	readonly pageNumber: number;
	/** The type of cropping to apply. */
	readonly pdfCrop: PDFCrop;
	/** If true, the background of the PDF is transparent. */
	readonly transparentBackground: boolean;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PDFAttribute (a PDF or ImportedPage). */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PDFAttribute.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PDFAttribute;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * An item on a page, including rectangles, ellipses, graphic 
 * lines, polygons, groups, text frames, and buttons.
 * @class
 */
export declare class PageItem {
	/**
	 * Dispatched before a PageItem is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a PageItem is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** The XML element associated with the PageItem. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the PageItem. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the PageItem. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the PageItem. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the PageItem. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the PageItem. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PageItem (a XMLElement, ComboBox, ListBox, 
	 * TextBox, SignatureField, Spread, MasterSpread, Polygon, 
	 * GraphicLine, Rectangle, Oval, SplineItem, Group, State, 
	 * Cell, Character, Sound, PlaceGun, Movie or Snippet).
	 */
	readonly parent: any;
	/** The index of the PageItem within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the PageItem excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the PageItem including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the PageItem. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the PageItem's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the PageItem's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the PageItem's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the PageItem. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the PageItem. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the PageItem. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the PageItem, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the PageItem.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * PageItem. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the PageItem, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the PageItem.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * PageItem. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the PageItem's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the PageItem. */
	strokeAlignment: StrokeAlignment;
	/** If true, the PageItem does not print. */
	nonprinting: boolean;
	/** The layer that the PageItem is on. */
	itemLayer: Layer;
	/** If true, the PageItem is locked. */
	locked: boolean;
	/** Display performance options for the PageItem. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the PageItem. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the PageItem. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the PageItem. */
	horizontalScale: number;
	/** The vertical scaling applied to the PageItem. */
	verticalScale: number;
	/**
	 * The rotation angle of the PageItem relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the PageItem relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the PageItem relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the PageItem relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the PageItem. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the PageItem has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the PageItem was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the PageItem is visible. */
	visible: boolean;
	/** The name of the PageItem. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the PageItem. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the PageItem. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the PageItem.
	 * @param {Flip} given - The axis around which to flip the 
	 * PageItem.
	 * @param {any} around - The point around which to flip the 
	 * PageItem. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the PageItem at the specified location or offset.
	 * @param {any} to - The location of the new PageItem, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new PageItem from the original PageItem's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the PageItem to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the PageItem,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the PageItem relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * PageItem's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * PageItem that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Converts the PageItem to a different shape.
	 * @param {ConvertShapeOptions} given - The PageItem's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the PageItem. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the PageItem using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the PageItem using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the PageItem using the last transformation 
	 * performed on any PageItem. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the PageItem using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PageItem. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PageItem. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PageItem. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PageItem. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PageItem. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the PageItem in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PageItem (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * PageItem.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PageItem;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The page items collection, which can be used to process all 
 * page items in a container (such as a document, page, or 
 * group), regardless of type.
 * @class
 */
export declare class PageItems {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the PageItem. */
	count(): number;
	/**
	 * Returns the PageItem with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PageItem;
	/**
	 * Returns the PageItem with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PageItem;
	/**
	 * Returns the PageItem with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PageItem;
	/**
	 * Returns the PageItems within the specified range.
	 * @param {any} _from - The PageItem, index, or name at the 
	 * beginning of the range. Can accept: PageItem, Long Integer 
	 * or String.
	 * @param {any} to - The PageItem, index, or name at the end of 
	 * the range. Can accept: PageItem, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): PageItem;
	/** Returns the first PageItem in the collection. */
	firstItem(): PageItem;
	/** Returns the last PageItem in the collection. */
	lastItem(): PageItem;
	/** Returns the middle PageItem in the collection. */
	middleItem(): PageItem;
	/**
	 * Returns the PageItem with the index previous to the 
	 * specified index.
	 * @param {PageItem} obj - The index of the PageItem that 
	 * follows the desired PageItem.
	 */
	previousItem(obj: PageItem): PageItem;
	/**
	 * Returns the PageItem whose index follows the specified 
	 * PageItem in the collection.
	 * @param {PageItem} obj - The PageItem whose index comes 
	 * before the desired PageItem.
	 */
	nextItem(obj: PageItem): PageItem;
	/** Returns any PageItem in the collection. */
	anyItem(): PageItem;
	/** Returns every PageItem in the collection. */
	everyItem(): PageItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * PageItem.
	 */
	toSource(): string;
	/**
	 * Returns the PageItem with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PageItem;
}

/**
 * An ellipse.
 * @class
 * @extends SplineItem
 */
export declare class Oval extends SplineItem {
	/**
	 * Dispatched before a Oval is placed. This event bubbles. This 
	 * event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Oval is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the Oval. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the Oval. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Export options for InCopy INCX document format. */
	readonly incopyExportOptions: InCopyExportOption;
	/**
	 * The frame fitting option to apply to placed or pasted 
	 * content. Can be applied to a frame, object style, or 
	 * document or to the application.
	 */
	readonly frameFittingOptions: FrameFittingOption;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/** Export options for the object */
	readonly objectExportOptions: ObjectExportOption;
	/** The lock state. */
	readonly lockState: LockStateValues;
	/** The XML element associated with the Oval. */
	readonly associatedXMLElement: XMLItem;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the Oval. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Oval. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the Oval. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Oval (a ComboBox, ListBox, TextBox, 
	 * SignatureField, Spread, MasterSpread, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, Group, State, Cell, Character, 
	 * PlaceGun or Snippet).
	 */
	readonly parent: any;
	/** The index of the Oval within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of sound clips. */
	readonly sounds: Sounds;
	/** The media items collection. */
	readonly mediaItems: MediaItems;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of text paths. */
	readonly textPaths: TextPaths;
	/** A collection of movies. */
	readonly movies: Movies;
	/** A collection of embedded HTML page items. */
	readonly htmlItems: HtmlItems;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** Imported InDesign pages. */
	readonly importedPages: ImportedPages;
	/** Title for this InCopy story. */
	storyTitle: string;
	/** The type of content that a frame can contain. */
	contentType: ContentType;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the Oval excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the Oval including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Oval. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the Oval's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the Oval's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the Oval's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the Oval. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the Oval. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Oval. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Oval, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the Oval.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * Oval. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the Oval, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the Oval.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * Oval. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the Oval's stroke color overprints any underlying 
	 * objects. If false, the stroke color knocks out the  
	 * underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the Oval. */
	strokeAlignment: StrokeAlignment;
	/** If true, the Oval does not print. */
	nonprinting: boolean;
	/** The layer that the Oval is on. */
	itemLayer: Layer;
	/** If true, the Oval is locked. */
	locked: boolean;
	/** Display performance options for the Oval. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the Oval. (Range: -360 to 360) */
	rotationAngle: number;
	/** The skewing angle applied to the Oval. (Range: -360 to 360) */
	shearAngle: number;
	/** The horizontal scaling applied to the Oval. */
	horizontalScale: number;
	/** The vertical scaling applied to the Oval. */
	verticalScale: number;
	/**
	 * The rotation angle of the Oval relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the Oval relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the Oval relative to its containing 
	 * object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the Oval relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the Oval. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the Oval has been flipped independently of 
	 * its parent object and, if yes, the direction in which the 
	 * Oval was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the Oval is visible. */
	visible: boolean;
	/** The name of the Oval. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the Oval. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Removes the frame fittings options and resets it to the 
	 * initial state.
	 */
	clearFrameFittingOptions(): void;
	/**
	 * Brings the Oval to the front of its layer or in front of a 
	 * particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the Oval to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the Oval forward one level in its layer. */
	bringForward(): void;
	/** Sends the Oval back one level in its layer. */
	sendBackward(): void;
	/**
	 * Creates a compound path by combining the path(s) of the Oval 
	 * with the paths of other objects.
	 * @param {PageItem} _with - The other objects whose paths to 
	 * include in the new compound path.
	 */
	makeCompoundPath(_with: PageItem): PageItem;
	/** Releases a compound path. */
	releaseCompoundPath(): PageItem;
	/**
	 * Creates a new page item by intersecting the Oval with other 
	 * objects. Returns an error if the objects do not intersect.
	 * @param {PageItem} _with - The object(s) with which to 
	 * intersect.
	 */
	intersectPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by combining the Oval with other 
	 * objects. Deletes the objects if they do not intersect.
	 * @param {PageItem} _with - The object(s) to add.
	 */
	addPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by subtracting the overlapping areas 
	 * of the Oval and other objects.
	 * @param {PageItem} _with - The object(s) to subtract.
	 */
	subtractPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by reverse subtracting the 
	 * overlapping areas of the Oval and other objects.
	 * @param {PageItem} _with - The object(s) to reverse subtract.
	 */
	minusBack(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by excluding the overlapping areas 
	 * of the Oval and other objects.
	 * @param {PageItem} _with - The object(s) to exclude.
	 */
	excludeOverlapPath(_with: PageItem): PageItem;
	/**
	 * Converts the Oval to a different shape.
	 * @param {ConvertShapeOptions} given - The Oval's new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/** Checks out the story. */
	checkOut(): boolean;
	/**
	 * Checks in the story or stories.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	checkIn(versionComments: string, forceSave?: boolean): boolean;
	/**
	 * Reverts the document to its state at the last save 
	 * operation.
	 */
	revert(): boolean;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the Oval. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the Oval.
	 * @param {Flip} given - The axis around which to flip the 
	 * Oval.
	 * @param {any} around - The point around which to flip the 
	 * Oval. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the Oval at the specified location or offset.
	 * @param {any} to - The location of the new Oval, specified in 
	 * coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new Oval from the original Oval's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the Oval to a new location. Note: Either the 'to' or 
	 * 'by' parameter is required; if both parameters are defined, 
	 * only the to value is used.
	 * @param {any} to - The new location of the Oval,in the format 
	 * (x, y). Can accept: Array of 2 Units, Spread, Page or Layer. 
	 * (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the Oval relative to its current position, in 
	 * the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * Oval's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * Oval that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the Oval. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the Oval using the last transformation performed 
	 * on any object. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the Oval using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the Oval using the last transformation performed 
	 * on any Oval. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the Oval using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Oval. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Oval. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Oval. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Oval. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Oval. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Oval in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Oval (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the Oval.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Oval;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of ellipses.
 * @class
 */
export declare class Ovals {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Oval
	 * @param {Layer} layer - The layer on which to create the 
	 * Oval. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the Oval relative to the reference object or within 
	 * the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Oval (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): Oval;
	/** Displays the number of elements in the Oval. */
	count(): number;
	/**
	 * Returns the Oval with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Oval;
	/**
	 * Returns the Oval with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Oval;
	/**
	 * Returns the Oval with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Oval;
	/**
	 * Returns the Ovals within the specified range.
	 * @param {any} _from - The Oval, index, or name at the 
	 * beginning of the range. Can accept: Oval, Long Integer or 
	 * String.
	 * @param {any} to - The Oval, index, or name at the end of the 
	 * range. Can accept: Oval, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Oval;
	/** Returns the first Oval in the collection. */
	firstItem(): Oval;
	/** Returns the last Oval in the collection. */
	lastItem(): Oval;
	/** Returns the middle Oval in the collection. */
	middleItem(): Oval;
	/**
	 * Returns the Oval with the index previous to the specified 
	 * index.
	 * @param {Oval} obj - The index of the Oval that follows the 
	 * desired Oval.
	 */
	previousItem(obj: Oval): Oval;
	/**
	 * Returns the Oval whose index follows the specified Oval in 
	 * the collection.
	 * @param {Oval} obj - The Oval whose index comes before the 
	 * desired Oval.
	 */
	nextItem(obj: Oval): Oval;
	/** Returns any Oval in the collection. */
	anyItem(): Oval;
	/** Returns every Oval in the collection. */
	everyItem(): Oval;
	/**
	 * Generates a string which, if executed, will return the Oval.
	 */
	toSource(): string;
	/**
	 * Returns the Oval with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Oval;
}

/**
 * A rectangle.
 * @class
 * @extends SplineItem
 */
export declare class Rectangle extends SplineItem {
	/**
	 * Dispatched before a Rectangle is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Rectangle is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the Rectangle.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the Rectangle. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Export options for InCopy INCX document format. */
	readonly incopyExportOptions: InCopyExportOption;
	/**
	 * The frame fitting option to apply to placed or pasted 
	 * content. Can be applied to a frame, object style, or 
	 * document or to the application.
	 */
	readonly frameFittingOptions: FrameFittingOption;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/** Export options for the object */
	readonly objectExportOptions: ObjectExportOption;
	/** The lock state. */
	readonly lockState: LockStateValues;
	/** The XML element associated with the Rectangle. */
	readonly associatedXMLElement: XMLItem;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the Rectangle. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Rectangle. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the Rectangle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Rectangle (a ComboBox, ListBox, TextBox, 
	 * SignatureField, Spread, MasterSpread, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, Group, State, Cell, Character, 
	 * PlaceGun or Snippet).
	 */
	readonly parent: any;
	/** The index of the Rectangle within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of sound clips. */
	readonly sounds: Sounds;
	/** The media items collection. */
	readonly mediaItems: MediaItems;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of text paths. */
	readonly textPaths: TextPaths;
	/** A collection of movies. */
	readonly movies: Movies;
	/** A collection of embedded HTML page items. */
	readonly htmlItems: HtmlItems;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** Imported InDesign pages. */
	readonly importedPages: ImportedPages;
	/** Title for this InCopy story. */
	storyTitle: string;
	/** The type of content that a frame can contain. */
	contentType: ContentType;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the Rectangle excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the Rectangle including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Rectangle. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the Rectangle's fill color. 
	 * (To specify a tint percent, use a number in the range of 0 
	 * to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the Rectangle's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the Rectangle's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the Rectangle. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the Rectangle. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Rectangle. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Rectangle, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the Rectangle.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * Rectangle. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the Rectangle, in the format [x, 
	 * y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the Rectangle.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * Rectangle. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the Rectangle's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the Rectangle. */
	strokeAlignment: StrokeAlignment;
	/** If true, the Rectangle does not print. */
	nonprinting: boolean;
	/** The layer that the Rectangle is on. */
	itemLayer: Layer;
	/** If true, the Rectangle is locked. */
	locked: boolean;
	/** Display performance options for the Rectangle. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the Rectangle. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the Rectangle. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the Rectangle. */
	horizontalScale: number;
	/** The vertical scaling applied to the Rectangle. */
	verticalScale: number;
	/**
	 * The rotation angle of the Rectangle relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the Rectangle relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the Rectangle relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the Rectangle relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the Rectangle. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the Rectangle has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the Rectangle was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the Rectangle is visible. */
	visible: boolean;
	/** The name of the Rectangle. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the Rectangle. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Removes the frame fittings options and resets it to the 
	 * initial state.
	 */
	clearFrameFittingOptions(): void;
	/**
	 * Brings the Rectangle to the front of its layer or in front 
	 * of a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the Rectangle to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the Rectangle forward one level in its layer. */
	bringForward(): void;
	/** Sends the Rectangle back one level in its layer. */
	sendBackward(): void;
	/**
	 * Creates a compound path by combining the path(s) of the 
	 * Rectangle with the paths of other objects.
	 * @param {PageItem} _with - The other objects whose paths to 
	 * include in the new compound path.
	 */
	makeCompoundPath(_with: PageItem): PageItem;
	/** Releases a compound path. */
	releaseCompoundPath(): PageItem;
	/**
	 * Creates a new page item by intersecting the Rectangle with 
	 * other objects. Returns an error if the objects do not 
	 * intersect.
	 * @param {PageItem} _with - The object(s) with which to 
	 * intersect.
	 */
	intersectPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by combining the Rectangle with 
	 * other objects. Deletes the objects if they do not intersect.
	 * @param {PageItem} _with - The object(s) to add.
	 */
	addPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by subtracting the overlapping areas 
	 * of the Rectangle and other objects.
	 * @param {PageItem} _with - The object(s) to subtract.
	 */
	subtractPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by reverse subtracting the 
	 * overlapping areas of the Rectangle and other objects.
	 * @param {PageItem} _with - The object(s) to reverse subtract.
	 */
	minusBack(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by excluding the overlapping areas 
	 * of the Rectangle and other objects.
	 * @param {PageItem} _with - The object(s) to exclude.
	 */
	excludeOverlapPath(_with: PageItem): PageItem;
	/**
	 * Converts the Rectangle to a different shape.
	 * @param {ConvertShapeOptions} given - The Rectangle's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/** Checks out the story. */
	checkOut(): boolean;
	/**
	 * Checks in the story or stories.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	checkIn(versionComments: string, forceSave?: boolean): boolean;
	/**
	 * Reverts the document to its state at the last save 
	 * operation.
	 */
	revert(): boolean;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the Rectangle. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the Rectangle.
	 * @param {Flip} given - The axis around which to flip the 
	 * Rectangle.
	 * @param {any} around - The point around which to flip the 
	 * Rectangle. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the Rectangle at the specified location or 
	 * offset.
	 * @param {any} to - The location of the new Rectangle, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new Rectangle from the original Rectangle's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the Rectangle to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the Rectangle,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the Rectangle relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * Rectangle's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * Rectangle that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the Rectangle. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the Rectangle using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the Rectangle using the last sequence of 
	 * transform operations performed on any single object or 
	 * performed at the same time on any group of objects. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the Rectangle using the last transformation 
	 * performed on any Rectangle. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the Rectangle using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Rectangle. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Rectangle. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Rectangle. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Rectangle. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Rectangle. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Rectangle in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Rectangle (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Rectangle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Rectangle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of rectangles.
 * @class
 */
export declare class Rectangles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Rectangle
	 * @param {Layer} layer - The layer on which to create the 
	 * Rectangle. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the Rectangle relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Rectangle (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): Rectangle;
	/** Displays the number of elements in the Rectangle. */
	count(): number;
	/**
	 * Returns the Rectangle with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Rectangle;
	/**
	 * Returns the Rectangle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Rectangle;
	/**
	 * Returns the Rectangle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Rectangle;
	/**
	 * Returns the Rectangles within the specified range.
	 * @param {any} _from - The Rectangle, index, or name at the 
	 * beginning of the range. Can accept: Rectangle, Long Integer 
	 * or String.
	 * @param {any} to - The Rectangle, index, or name at the end 
	 * of the range. Can accept: Rectangle, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Rectangle;
	/** Returns the first Rectangle in the collection. */
	firstItem(): Rectangle;
	/** Returns the last Rectangle in the collection. */
	lastItem(): Rectangle;
	/** Returns the middle Rectangle in the collection. */
	middleItem(): Rectangle;
	/**
	 * Returns the Rectangle with the index previous to the 
	 * specified index.
	 * @param {Rectangle} obj - The index of the Rectangle that 
	 * follows the desired Rectangle.
	 */
	previousItem(obj: Rectangle): Rectangle;
	/**
	 * Returns the Rectangle whose index follows the specified 
	 * Rectangle in the collection.
	 * @param {Rectangle} obj - The Rectangle whose index comes 
	 * before the desired Rectangle.
	 */
	nextItem(obj: Rectangle): Rectangle;
	/** Returns any Rectangle in the collection. */
	anyItem(): Rectangle;
	/** Returns every Rectangle in the collection. */
	everyItem(): Rectangle;
	/**
	 * Generates a string which, if executed, will return the 
	 * Rectangle.
	 */
	toSource(): string;
	/**
	 * Returns the Rectangle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Rectangle;
}

/**
 * A straight line consisting of two points.
 * @class
 * @extends SplineItem
 */
export declare class GraphicLine extends SplineItem {
	/**
	 * Dispatched before a GraphicLine is placed. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a GraphicLine is placed. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the 
	 * GraphicLine.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the GraphicLine. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/** Export options for the object */
	readonly objectExportOptions: ObjectExportOption;
	/** The lock state. */
	readonly lockState: LockStateValues;
	/** The XML element associated with the GraphicLine. */
	readonly associatedXMLElement: XMLItem;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the GraphicLine. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the GraphicLine. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the GraphicLine. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GraphicLine (a ComboBox, ListBox, TextBox, 
	 * SignatureField, Spread, MasterSpread, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, Group, State, Cell, Character, 
	 * PlaceGun or Snippet).
	 */
	readonly parent: any;
	/** The index of the GraphicLine within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of sound clips. */
	readonly sounds: Sounds;
	/** The media items collection. */
	readonly mediaItems: MediaItems;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of text paths. */
	readonly textPaths: TextPaths;
	/** A collection of movies. */
	readonly movies: Movies;
	/** A collection of embedded HTML page items. */
	readonly htmlItems: HtmlItems;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** Imported InDesign pages. */
	readonly importedPages: ImportedPages;
	/** The type of content that a frame can contain. */
	contentType: ContentType;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the GraphicLine excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the GraphicLine including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the GraphicLine. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the GraphicLine's fill color. 
	 * (To specify a tint percent, use a number in the range of 0 
	 * to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the GraphicLine's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/**
	 * The weight (in points) to apply to the GraphicLine's stroke.
	 */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the GraphicLine. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the GraphicLine. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the GraphicLine. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the GraphicLine, in the format [x, 
	 * y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the GraphicLine.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * GraphicLine. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the GraphicLine, in the format [x, 
	 * y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the GraphicLine.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * GraphicLine. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the GraphicLine's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the GraphicLine. */
	strokeAlignment: StrokeAlignment;
	/** If true, the GraphicLine does not print. */
	nonprinting: boolean;
	/** The layer that the GraphicLine is on. */
	itemLayer: Layer;
	/** If true, the GraphicLine is locked. */
	locked: boolean;
	/** Display performance options for the GraphicLine. */
	localDisplaySetting: DisplaySettingOptions;
	/**
	 * The rotatation angle of the GraphicLine. (Range: -360 to 
	 * 360)
	 */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the GraphicLine. (Range: -360 
	 * to 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the GraphicLine. */
	horizontalScale: number;
	/** The vertical scaling applied to the GraphicLine. */
	verticalScale: number;
	/**
	 * The rotation angle of the GraphicLine relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the GraphicLine relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the GraphicLine relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the GraphicLine relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the GraphicLine. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the GraphicLine has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the GraphicLine was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the GraphicLine is visible. */
	visible: boolean;
	/** The name of the GraphicLine. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the GraphicLine. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Brings the GraphicLine to the front of its layer or in front 
	 * of a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the GraphicLine to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the GraphicLine forward one level in its layer. */
	bringForward(): void;
	/** Sends the GraphicLine back one level in its layer. */
	sendBackward(): void;
	/**
	 * Creates a compound path by combining the path(s) of the 
	 * GraphicLine with the paths of other objects.
	 * @param {PageItem} _with - The other objects whose paths to 
	 * include in the new compound path.
	 */
	makeCompoundPath(_with: PageItem): PageItem;
	/** Releases a compound path. */
	releaseCompoundPath(): PageItem;
	/**
	 * Creates a new page item by intersecting the GraphicLine with 
	 * other objects. Returns an error if the objects do not 
	 * intersect.
	 * @param {PageItem} _with - The object(s) with which to 
	 * intersect.
	 */
	intersectPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by combining the GraphicLine with 
	 * other objects. Deletes the objects if they do not intersect.
	 * @param {PageItem} _with - The object(s) to add.
	 */
	addPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by subtracting the overlapping areas 
	 * of the GraphicLine and other objects.
	 * @param {PageItem} _with - The object(s) to subtract.
	 */
	subtractPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by reverse subtracting the 
	 * overlapping areas of the GraphicLine and other objects.
	 * @param {PageItem} _with - The object(s) to reverse subtract.
	 */
	minusBack(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by excluding the overlapping areas 
	 * of the GraphicLine and other objects.
	 * @param {PageItem} _with - The object(s) to exclude.
	 */
	excludeOverlapPath(_with: PageItem): PageItem;
	/**
	 * Converts the GraphicLine to a different shape.
	 * @param {ConvertShapeOptions} given - The GraphicLine's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/** Checks out the story. */
	checkOut(): boolean;
	/**
	 * Checks in the story or stories.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	checkIn(versionComments: string, forceSave?: boolean): boolean;
	/**
	 * Reverts the document to its state at the last save 
	 * operation.
	 */
	revert(): boolean;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the GraphicLine. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the GraphicLine.
	 * @param {Flip} given - The axis around which to flip the 
	 * GraphicLine.
	 * @param {any} around - The point around which to flip the 
	 * GraphicLine. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the GraphicLine at the specified location or 
	 * offset.
	 * @param {any} to - The location of the new GraphicLine, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new GraphicLine from the original GraphicLine's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the GraphicLine to a new location. Note: Either the 
	 * 'to' or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the GraphicLine,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the GraphicLine relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * GraphicLine's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * GraphicLine that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the GraphicLine. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the GraphicLine using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the GraphicLine using the last sequence of 
	 * transform operations performed on any single object or 
	 * performed at the same time on any group of objects. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the GraphicLine using the last transformation 
	 * performed on any GraphicLine. Transformations include 
	 * moving, rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the GraphicLine using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new GraphicLine. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new GraphicLine. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new GraphicLine. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new GraphicLine. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new GraphicLine. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the GraphicLine in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GraphicLine (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * GraphicLine.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GraphicLine;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of graphic lines.
 * @class
 */
export declare class GraphicLines {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new GraphicLine
	 * @param {Layer} layer - The layer on which to create the 
	 * GraphicLine. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the GraphicLine relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new GraphicLine (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): GraphicLine;
	/** Displays the number of elements in the GraphicLine. */
	count(): number;
	/**
	 * Returns the GraphicLine with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GraphicLine;
	/**
	 * Returns the GraphicLine with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GraphicLine;
	/**
	 * Returns the GraphicLine with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GraphicLine;
	/**
	 * Returns the GraphicLines within the specified range.
	 * @param {any} _from - The GraphicLine, index, or name at the 
	 * beginning of the range. Can accept: GraphicLine, Long 
	 * Integer or String.
	 * @param {any} to - The GraphicLine, index, or name at the end 
	 * of the range. Can accept: GraphicLine, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): GraphicLine;
	/** Returns the first GraphicLine in the collection. */
	firstItem(): GraphicLine;
	/** Returns the last GraphicLine in the collection. */
	lastItem(): GraphicLine;
	/** Returns the middle GraphicLine in the collection. */
	middleItem(): GraphicLine;
	/**
	 * Returns the GraphicLine with the index previous to the 
	 * specified index.
	 * @param {GraphicLine} obj - The index of the GraphicLine that 
	 * follows the desired GraphicLine.
	 */
	previousItem(obj: GraphicLine): GraphicLine;
	/**
	 * Returns the GraphicLine whose index follows the specified 
	 * GraphicLine in the collection.
	 * @param {GraphicLine} obj - The GraphicLine whose index comes 
	 * before the desired GraphicLine.
	 */
	nextItem(obj: GraphicLine): GraphicLine;
	/** Returns any GraphicLine in the collection. */
	anyItem(): GraphicLine;
	/** Returns every GraphicLine in the collection. */
	everyItem(): GraphicLine;
	/**
	 * Generates a string which, if executed, will return the 
	 * GraphicLine.
	 */
	toSource(): string;
	/**
	 * Returns the GraphicLine with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GraphicLine;
}

/**
 * A polygon. Any shape that is not a rectangle, ellipse, or 
 * graphic line. When you add a polygon, InDesign creates a 
 * regular polygon based on the current polygon preferences 
 * settings.
 * @class
 * @extends SplineItem
 */
export declare class Polygon extends SplineItem {
	/**
	 * Dispatched before a Polygon is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Polygon is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the Polygon. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the Polygon. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Export options for InCopy INCX document format. */
	readonly incopyExportOptions: InCopyExportOption;
	/**
	 * The frame fitting option to apply to placed or pasted 
	 * content. Can be applied to a frame, object style, or 
	 * document or to the application.
	 */
	readonly frameFittingOptions: FrameFittingOption;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/** Export options for the object */
	readonly objectExportOptions: ObjectExportOption;
	/** The lock state. */
	readonly lockState: LockStateValues;
	/** The XML element associated with the Polygon. */
	readonly associatedXMLElement: XMLItem;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the Polygon. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Polygon. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the Polygon. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Polygon (a ComboBox, ListBox, TextBox, 
	 * SignatureField, Spread, MasterSpread, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, Group, State, Cell, Character, 
	 * PlaceGun or Snippet).
	 */
	readonly parent: any;
	/** The index of the Polygon within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of sound clips. */
	readonly sounds: Sounds;
	/** The media items collection. */
	readonly mediaItems: MediaItems;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of text paths. */
	readonly textPaths: TextPaths;
	/** A collection of movies. */
	readonly movies: Movies;
	/** A collection of embedded HTML page items. */
	readonly htmlItems: HtmlItems;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** Imported InDesign pages. */
	readonly importedPages: ImportedPages;
	/** Title for this InCopy story. */
	storyTitle: string;
	/** The type of content that a frame can contain. */
	contentType: ContentType;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the Polygon excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the Polygon including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Polygon. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the Polygon's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the Polygon's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the Polygon's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the Polygon. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the Polygon. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Polygon. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Polygon, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the Polygon.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * Polygon. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the Polygon, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the Polygon.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * Polygon. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the Polygon's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the Polygon. */
	strokeAlignment: StrokeAlignment;
	/** If true, the Polygon does not print. */
	nonprinting: boolean;
	/** The layer that the Polygon is on. */
	itemLayer: Layer;
	/** If true, the Polygon is locked. */
	locked: boolean;
	/** Display performance options for the Polygon. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the Polygon. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the Polygon. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the Polygon. */
	horizontalScale: number;
	/** The vertical scaling applied to the Polygon. */
	verticalScale: number;
	/**
	 * The rotation angle of the Polygon relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the Polygon relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the Polygon relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the Polygon relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the Polygon. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the Polygon has been flipped independently 
	 * of its parent object and, if yes, the direction in which the 
	 * Polygon was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the Polygon is visible. */
	visible: boolean;
	/** The name of the Polygon. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the Polygon. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Removes the frame fittings options and resets it to the 
	 * initial state.
	 */
	clearFrameFittingOptions(): void;
	/**
	 * Brings the Polygon to the front of its layer or in front of 
	 * a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the Polygon to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the Polygon forward one level in its layer. */
	bringForward(): void;
	/** Sends the Polygon back one level in its layer. */
	sendBackward(): void;
	/**
	 * Creates a compound path by combining the path(s) of the 
	 * Polygon with the paths of other objects.
	 * @param {PageItem} _with - The other objects whose paths to 
	 * include in the new compound path.
	 */
	makeCompoundPath(_with: PageItem): PageItem;
	/** Releases a compound path. */
	releaseCompoundPath(): PageItem;
	/**
	 * Creates a new page item by intersecting the Polygon with 
	 * other objects. Returns an error if the objects do not 
	 * intersect.
	 * @param {PageItem} _with - The object(s) with which to 
	 * intersect.
	 */
	intersectPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by combining the Polygon with other 
	 * objects. Deletes the objects if they do not intersect.
	 * @param {PageItem} _with - The object(s) to add.
	 */
	addPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by subtracting the overlapping areas 
	 * of the Polygon and other objects.
	 * @param {PageItem} _with - The object(s) to subtract.
	 */
	subtractPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by reverse subtracting the 
	 * overlapping areas of the Polygon and other objects.
	 * @param {PageItem} _with - The object(s) to reverse subtract.
	 */
	minusBack(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by excluding the overlapping areas 
	 * of the Polygon and other objects.
	 * @param {PageItem} _with - The object(s) to exclude.
	 */
	excludeOverlapPath(_with: PageItem): PageItem;
	/**
	 * Converts the Polygon to a different shape.
	 * @param {ConvertShapeOptions} given - The Polygon's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/** Checks out the story. */
	checkOut(): boolean;
	/**
	 * Checks in the story or stories.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	checkIn(versionComments: string, forceSave?: boolean): boolean;
	/**
	 * Reverts the document to its state at the last save 
	 * operation.
	 */
	revert(): boolean;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the Polygon. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the Polygon.
	 * @param {Flip} given - The axis around which to flip the 
	 * Polygon.
	 * @param {any} around - The point around which to flip the 
	 * Polygon. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the Polygon at the specified location or offset.
	 * @param {any} to - The location of the new Polygon, specified 
	 * in coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new Polygon from the original Polygon's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the Polygon to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the Polygon,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the Polygon relative to its current position, 
	 * in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * Polygon's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * Polygon that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the Polygon. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the Polygon using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the Polygon using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the Polygon using the last transformation 
	 * performed on any Polygon. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the Polygon using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Polygon. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Polygon. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Polygon. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Polygon. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Polygon. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Polygon in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Polygon (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Polygon.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Polygon;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of polygons.
 * @class
 */
export declare class Polygons {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Polygon.
	 * @param {Layer} layer - The layer on which to create the 
	 * Polygon. (Optional)
	 * @param {number} numberOfSides - The number of sides to give 
	 * the Polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * applied to the Polygon. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the Polygon relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Polygon (Optional)
	 */
	add(layer: Layer, numberOfSides: number, insetPercentage: number, at?: LocationOptions, reference?: any, withProperties?: Object): Polygon;
	/** Displays the number of elements in the Polygon. */
	count(): number;
	/**
	 * Returns the Polygon with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Polygon;
	/**
	 * Returns the Polygon with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Polygon;
	/**
	 * Returns the Polygon with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Polygon;
	/**
	 * Returns the Polygons within the specified range.
	 * @param {any} _from - The Polygon, index, or name at the 
	 * beginning of the range. Can accept: Polygon, Long Integer or 
	 * String.
	 * @param {any} to - The Polygon, index, or name at the end of 
	 * the range. Can accept: Polygon, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Polygon;
	/** Returns the first Polygon in the collection. */
	firstItem(): Polygon;
	/** Returns the last Polygon in the collection. */
	lastItem(): Polygon;
	/** Returns the middle Polygon in the collection. */
	middleItem(): Polygon;
	/**
	 * Returns the Polygon with the index previous to the specified 
	 * index.
	 * @param {Polygon} obj - The index of the Polygon that follows 
	 * the desired Polygon.
	 */
	previousItem(obj: Polygon): Polygon;
	/**
	 * Returns the Polygon whose index follows the specified 
	 * Polygon in the collection.
	 * @param {Polygon} obj - The Polygon whose index comes before 
	 * the desired Polygon.
	 */
	nextItem(obj: Polygon): Polygon;
	/** Returns any Polygon in the collection. */
	anyItem(): Polygon;
	/** Returns every Polygon in the collection. */
	everyItem(): Polygon;
	/**
	 * Generates a string which, if executed, will return the 
	 * Polygon.
	 */
	toSource(): string;
	/**
	 * Returns the Polygon with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Polygon;
}

/**
 * A group.
 * @class
 * @extends PageItem
 */
export declare class Group extends PageItem {
	/**
	 * Dispatched before a Group is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Group is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the Group. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the Group. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Export options for the object */
	readonly objectExportOptions: ObjectExportOption;
	/** The XML element associated with the Group. */
	readonly associatedXMLElement: XMLItem;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the Group. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Group. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the Group. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Group (a PlaceGun, ComboBox, ListBox, 
	 * TextBox, SignatureField, Spread, MasterSpread, SplineItem, 
	 * Polygon, GraphicLine, Rectangle, Oval, Group, State, 
	 * Character or Snippet).
	 */
	readonly parent: any;
	/** The index of the Group within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/**
	 * A collection of group items that are also part of an 
	 * article.
	 */
	readonly articleChildren: ArticleChildren;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the Group excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the Group including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Group. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the Group's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the Group's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the Group's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the Group. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the Group. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Group. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Group, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the Group.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * Group. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the Group, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the Group.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * Group. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the Group's stroke color overprints any underlying 
	 * objects. If false, the stroke color knocks out the  
	 * underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the Group. */
	strokeAlignment: StrokeAlignment;
	/** If true, the Group does not print. */
	nonprinting: boolean;
	/** The layer that the Group is on. */
	itemLayer: Layer;
	/** If true, the Group is locked. */
	locked: boolean;
	/** Display performance options for the Group. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the Group. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the Group. (Range: -360 to 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the Group. */
	horizontalScale: number;
	/** The vertical scaling applied to the Group. */
	verticalScale: number;
	/**
	 * The rotation angle of the Group relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the Group relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the Group relative to its containing 
	 * object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the Group relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the Group. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the Group has been flipped independently 
	 * of its parent object and, if yes, the direction in which the 
	 * Group was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the Group is visible. */
	visible: boolean;
	/** The name of the Group. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the Group. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/** Ungroups the group. */
	ungroup(): void;
	/**
	 * Brings the Group to the front of its layer or in front of a 
	 * particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the Group to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the Group forward one level in its layer. */
	bringForward(): void;
	/** Sends the Group back one level in its layer. */
	sendBackward(): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the Group. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the Group.
	 * @param {Flip} given - The axis around which to flip the 
	 * Group.
	 * @param {any} around - The point around which to flip the 
	 * Group. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the Group at the specified location or offset.
	 * @param {any} to - The location of the new Group, specified 
	 * in coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new Group from the original Group's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the Group to a new location. Note: Either the 'to' or 
	 * 'by' parameter is required; if both parameters are defined, 
	 * only the to value is used.
	 * @param {any} to - The new location of the Group,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the Group relative to its current position, 
	 * in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * Group's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * Group that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Converts the Group to a different shape.
	 * @param {ConvertShapeOptions} given - The Group's new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the Group. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the Group using the last transformation performed 
	 * on any object. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the Group using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the Group using the last transformation performed 
	 * on any Group. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the Group using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Group. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Group. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Group. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Group. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Group. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Group in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Group (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Group.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Group;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of groups.
 * @class
 */
export declare class Groups {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Group. */
	count(): number;
	/**
	 * Creates a new Group.
	 * @param {PageItem} groupItems - The objects to group.
	 * @param {Layer} layer - The layer on which to create the 
	 * Group. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the Group relative to the reference object or within 
	 * the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Group (Optional)
	 */
	add(groupItems: PageItem, layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): Group;
	/**
	 * Returns the Group with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Group;
	/**
	 * Returns the Group with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Group;
	/**
	 * Returns the Group with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Group;
	/**
	 * Returns the Groups within the specified range.
	 * @param {any} _from - The Group, index, or name at the 
	 * beginning of the range. Can accept: Group, Long Integer or 
	 * String.
	 * @param {any} to - The Group, index, or name at the end of 
	 * the range. Can accept: Group, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Group;
	/** Returns the first Group in the collection. */
	firstItem(): Group;
	/** Returns the last Group in the collection. */
	lastItem(): Group;
	/** Returns the middle Group in the collection. */
	middleItem(): Group;
	/**
	 * Returns the Group with the index previous to the specified 
	 * index.
	 * @param {Group} obj - The index of the Group that follows the 
	 * desired Group.
	 */
	previousItem(obj: Group): Group;
	/**
	 * Returns the Group whose index follows the specified Group in 
	 * the collection.
	 * @param {Group} obj - The Group whose index comes before the 
	 * desired Group.
	 */
	nextItem(obj: Group): Group;
	/** Returns any Group in the collection. */
	anyItem(): Group;
	/** Returns every Group in the collection. */
	everyItem(): Group;
	/**
	 * Generates a string which, if executed, will return the 
	 * Group.
	 */
	toSource(): string;
	/**
	 * Returns the Group with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Group;
}

/**
 * An imported bitmap image in any bitmap file format 
 * (including TIFF, JPEG, or GIF).
 * @class
 * @extends Graphic
 */
export declare class Image extends Graphic {
	/**
	 * Dispatched before a Image is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Image is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the Image. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the Image. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Clipping path settings. */
	readonly clippingPath: ClippingPathSettings;
	/**
	 * The image I/O preference properties that define preferences 
	 * for importing images.
	 */
	readonly imageIOPreferences: ImageIOPreference;
	/** Graphic layer option settings. */
	readonly graphicLayerOptions: GraphicLayerOption;
	/** The color space. */
	readonly space: string;
	/** The native resolution of a placed graphic. */
	readonly actualPpi: number;
	/** The resolution of a graphic after it has been resized. */
	readonly effectivePpi: number;
	/** A list of valid RGB profiles. */
	readonly profileList: string;
	/** The XML element associated with the Image. */
	readonly associatedXMLElement: XMLItem;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** The type of the image. */
	readonly imageTypeName: string;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Lists all page items contained by the Image. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Image. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the Image. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Image (a XMLElement, Sound, PlaceGun, 
	 * Movie, TextBox, SignatureField, ComboBox, ListBox, 
	 * SplineItem, Polygon, GraphicLine, Rectangle, Oval, State or 
	 * Snippet).
	 */
	readonly parent: any;
	/** The index of the Image within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Image. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the Image's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the Image's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** If true, the Image does not print. */
	nonprinting: boolean;
	/**
	 * The color profile. Can return: Profile enumerator or String.
	 */
	profile: any;
	/** The rendering intent override applied to the image. */
	imageRenderingIntent: RenderingIntent;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The bounds of the Image excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the Image including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/** Display performance options for the Image. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the Image. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the Image. (Range: -360 to 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the Image. */
	horizontalScale: number;
	/** The vertical scaling applied to the Image. */
	verticalScale: number;
	/**
	 * The rotation angle of the Image relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the Image relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the Image relative to its containing 
	 * object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the Image relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the Image. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the Image has been flipped independently 
	 * of its parent object and, if yes, the direction in which the 
	 * Image was flipped.
	 */
	absoluteFlip: Flip;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/** The weight (in points) to apply to the Image's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the Image. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the Image. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Image. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Image, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the Image.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * Image. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the Image, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the Image.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * Image. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the Image's stroke color overprints any underlying 
	 * objects. If false, the stroke color knocks out the  
	 * underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the Image. */
	strokeAlignment: StrokeAlignment;
	/** The layer that the Image is on. */
	itemLayer: Layer;
	/** If true, the Image is locked. */
	locked: boolean;
	/** If true, the Image is visible. */
	visible: boolean;
	/** The name of the Image. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the Image. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Image (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Exports the Image for the web.
	 * @param {File} to - The full path name of the exported file.
	 */
	exportForWeb(to: File): string;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the Image. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the Image.
	 * @param {Flip} given - The axis around which to flip the 
	 * Image.
	 * @param {any} around - The point around which to flip the 
	 * Image. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the Image at the specified location or offset.
	 * @param {any} to - The location of the new Image, specified 
	 * in coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new Image from the original Image's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the Image to a new location. Note: Either the 'to' or 
	 * 'by' parameter is required; if both parameters are defined, 
	 * only the to value is used.
	 * @param {any} to - The new location of the Image,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the Image relative to its current position, 
	 * in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * Image's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * Image that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the Image using the last transformation performed 
	 * on any object. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the Image using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the Image using the last transformation performed 
	 * on any Image. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the Image using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Image. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Image. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Image. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Image. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Image. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Converts the Image to a different shape.
	 * @param {ConvertShapeOptions} given - The Image's new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the Image. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Image in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Image.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Image;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of bitmap images in any bitmap file format 
 * (including TIFF, JPEG, or GIF).
 * @class
 */
export declare class Images {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Image. */
	count(): number;
	/**
	 * Returns the Image with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Image;
	/**
	 * Returns the Image with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Image;
	/**
	 * Returns the Image with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Image;
	/**
	 * Returns the Images within the specified range.
	 * @param {any} _from - The Image, index, or name at the 
	 * beginning of the range. Can accept: Image, Long Integer or 
	 * String.
	 * @param {any} to - The Image, index, or name at the end of 
	 * the range. Can accept: Image, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Image;
	/** Returns the first Image in the collection. */
	firstItem(): Image;
	/** Returns the last Image in the collection. */
	lastItem(): Image;
	/** Returns the middle Image in the collection. */
	middleItem(): Image;
	/**
	 * Returns the Image with the index previous to the specified 
	 * index.
	 * @param {Image} obj - The index of the Image that follows the 
	 * desired Image.
	 */
	previousItem(obj: Image): Image;
	/**
	 * Returns the Image whose index follows the specified Image in 
	 * the collection.
	 * @param {Image} obj - The Image whose index comes before the 
	 * desired Image.
	 */
	nextItem(obj: Image): Image;
	/** Returns any Image in the collection. */
	anyItem(): Image;
	/** Returns every Image in the collection. */
	everyItem(): Image;
	/**
	 * Generates a string which, if executed, will return the 
	 * Image.
	 */
	toSource(): string;
	/**
	 * Returns the Image with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Image;
}

/**
 * A placed EPS file.
 * @class
 * @extends Graphic
 */
export declare class EPS extends Graphic {
	/**
	 * Dispatched before a EPS is placed. This event bubbles. This 
	 * event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a EPS is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the EPS. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the EPS. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Clipping path settings. */
	readonly clippingPath: ClippingPathSettings;
	/** The color space. */
	readonly space: string;
	/** The native resolution of a placed graphic. */
	readonly actualPpi: number;
	/** The resolution of a graphic after it has been resized. */
	readonly effectivePpi: number;
	/** The XML element associated with the EPS. */
	readonly associatedXMLElement: XMLItem;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** The type of the image. */
	readonly imageTypeName: string;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Lists all page items contained by the EPS. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the EPS. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the EPS. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the EPS (a XMLElement, PlaceGun, TextBox, 
	 * SignatureField, ComboBox, ListBox, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, State or Snippet).
	 */
	readonly parent: any;
	/** The index of the EPS within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the EPS does not print. */
	nonprinting: boolean;
	/**
	 * The color profile policy for grayscale content in a placed 
	 * vector.
	 */
	grayVectorPolicy: PlacedVectorProfilePolicy;
	/**
	 * The color profile policy for RGB content in a placed vector.
	 */
	rgbVectorPolicy: PlacedVectorProfilePolicy;
	/**
	 * The color profile policy for CMYK content in a placed 
	 * vector.
	 */
	cmykVectorPolicy: PlacedVectorProfilePolicy;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The bounds of the EPS excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the EPS including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/** Display performance options for the EPS. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the EPS. (Range: -360 to 360) */
	rotationAngle: number;
	/** The skewing angle applied to the EPS. (Range: -360 to 360) */
	shearAngle: number;
	/** The horizontal scaling applied to the EPS. */
	horizontalScale: number;
	/** The vertical scaling applied to the EPS. */
	verticalScale: number;
	/**
	 * The rotation angle of the EPS relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the EPS relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the EPS relative to its containing 
	 * object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the EPS relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the EPS. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the EPS has been flipped independently of 
	 * its parent object and, if yes, the direction in which the 
	 * EPS was flipped.
	 */
	absoluteFlip: Flip;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the EPS. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the EPS's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the EPS's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the EPS's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the EPS. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the EPS. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the EPS. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the EPS, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the EPS.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * EPS. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the EPS, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the EPS.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * EPS. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the EPS's stroke color overprints any underlying 
	 * objects. If false, the stroke color knocks out the  
	 * underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the EPS. */
	strokeAlignment: StrokeAlignment;
	/** The layer that the EPS is on. */
	itemLayer: Layer;
	/** If true, the EPS is locked. */
	locked: boolean;
	/** If true, the EPS is visible. */
	visible: boolean;
	/** The name of the EPS. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the EPS. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new EPS (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Exports the EPS for the web.
	 * @param {File} to - The full path name of the exported file.
	 */
	exportForWeb(to: File): string;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the EPS. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the EPS.
	 * @param {Flip} given - The axis around which to flip the EPS.
	 * @param {any} around - The point around which to flip the 
	 * EPS. Can accept: Array of 2 Units or AnchorPoint enumerator. 
	 * (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the EPS at the specified location or offset.
	 * @param {any} to - The location of the new EPS, specified in 
	 * coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new EPS from the original EPS's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the EPS to a new location. Note: Either the 'to' or 
	 * 'by' parameter is required; if both parameters are defined, 
	 * only the to value is used.
	 * @param {any} to - The new location of the EPS,in the format 
	 * (x, y). Can accept: Array of 2 Units, Spread, Page or Layer. 
	 * (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the EPS relative to its current position, in 
	 * the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * EPS's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the EPS 
	 * that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the EPS using the last transformation performed 
	 * on any object. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the EPS using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the EPS using the last transformation performed 
	 * on any EPS. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the EPS using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new EPS. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new EPS. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new EPS. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new EPS. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new EPS. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Converts the EPS to a different shape.
	 * @param {ConvertShapeOptions} given - The EPS's new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the EPS. Transformations include 
	 * rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the EPS in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/** Generates a string which, if executed, will return the EPS. */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): EPS;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of EPS files.
 * @class
 */
export declare class EPSs {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the EPS. */
	count(): number;
	/**
	 * Returns the EPS with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): EPS;
	/**
	 * Returns the EPS with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): EPS;
	/**
	 * Returns the EPS with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): EPS;
	/**
	 * Returns the EPSs within the specified range.
	 * @param {any} _from - The EPS, index, or name at the 
	 * beginning of the range. Can accept: EPS, Long Integer or 
	 * String.
	 * @param {any} to - The EPS, index, or name at the end of the 
	 * range. Can accept: EPS, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): EPS;
	/** Returns the first EPS in the collection. */
	firstItem(): EPS;
	/** Returns the last EPS in the collection. */
	lastItem(): EPS;
	/** Returns the middle EPS in the collection. */
	middleItem(): EPS;
	/**
	 * Returns the EPS with the index previous to the specified 
	 * index.
	 * @param {EPS} obj - The index of the EPS that follows the 
	 * desired EPS.
	 */
	previousItem(obj: EPS): EPS;
	/**
	 * Returns the EPS whose index follows the specified EPS in the 
	 * collection.
	 * @param {EPS} obj - The EPS whose index comes before the 
	 * desired EPS.
	 */
	nextItem(obj: EPS): EPS;
	/** Returns any EPS in the collection. */
	anyItem(): EPS;
	/** Returns every EPS in the collection. */
	everyItem(): EPS;
	/** Generates a string which, if executed, will return the EPS. */
	toSource(): string;
	/**
	 * Returns the EPS with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: EPS;
}

/**
 * A placed PDF file.
 * @class
 * @extends Graphic
 */
export declare class PDF extends Graphic {
	/**
	 * Dispatched before a PDF is placed. This event bubbles. This 
	 * event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a PDF is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the PDF. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the PDF. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** PDF attribute settings. */
	readonly pdfAttributes: PDFAttribute;
	/** Clipping path settings. */
	readonly clippingPath: ClippingPathSettings;
	/** Graphic layer option settings. */
	readonly graphicLayerOptions: GraphicLayerOption;
	/** The XML element associated with the PDF. */
	readonly associatedXMLElement: XMLItem;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** The type of the image. */
	readonly imageTypeName: string;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Lists all page items contained by the PDF. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the PDF. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the PDF. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PDF (a XMLElement, PlaceGun, TextBox, 
	 * SignatureField, ComboBox, ListBox, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, State or Snippet).
	 */
	readonly parent: any;
	/** The index of the PDF within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the PDF does not print. */
	nonprinting: boolean;
	/**
	 * The color profile policy for grayscale content in a placed 
	 * vector.
	 */
	grayVectorPolicy: PlacedVectorProfilePolicy;
	/**
	 * The color profile policy for RGB content in a placed vector.
	 */
	rgbVectorPolicy: PlacedVectorProfilePolicy;
	/**
	 * The color profile policy for CMYK content in a placed 
	 * vector.
	 */
	cmykVectorPolicy: PlacedVectorProfilePolicy;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The bounds of the PDF excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the PDF including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/** Display performance options for the PDF. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the PDF. (Range: -360 to 360) */
	rotationAngle: number;
	/** The skewing angle applied to the PDF. (Range: -360 to 360) */
	shearAngle: number;
	/** The horizontal scaling applied to the PDF. */
	horizontalScale: number;
	/** The vertical scaling applied to the PDF. */
	verticalScale: number;
	/**
	 * The rotation angle of the PDF relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the PDF relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the PDF relative to its containing 
	 * object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the PDF relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the PDF. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the PDF has been flipped independently of 
	 * its parent object and, if yes, the direction in which the 
	 * PDF was flipped.
	 */
	absoluteFlip: Flip;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the PDF. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the PDF's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the PDF's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the PDF's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the PDF. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the PDF. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the PDF. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the PDF, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the PDF.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * PDF. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the PDF, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the PDF.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * PDF. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the PDF's stroke color overprints any underlying 
	 * objects. If false, the stroke color knocks out the  
	 * underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the PDF. */
	strokeAlignment: StrokeAlignment;
	/** The layer that the PDF is on. */
	itemLayer: Layer;
	/** If true, the PDF is locked. */
	locked: boolean;
	/** If true, the PDF is visible. */
	visible: boolean;
	/** The name of the PDF. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the PDF. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PDF (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Exports the PDF for the web.
	 * @param {File} to - The full path name of the exported file.
	 */
	exportForWeb(to: File): string;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the PDF. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the PDF.
	 * @param {Flip} given - The axis around which to flip the PDF.
	 * @param {any} around - The point around which to flip the 
	 * PDF. Can accept: Array of 2 Units or AnchorPoint enumerator. 
	 * (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the PDF at the specified location or offset.
	 * @param {any} to - The location of the new PDF, specified in 
	 * coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new PDF from the original PDF's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the PDF to a new location. Note: Either the 'to' or 
	 * 'by' parameter is required; if both parameters are defined, 
	 * only the to value is used.
	 * @param {any} to - The new location of the PDF,in the format 
	 * (x, y). Can accept: Array of 2 Units, Spread, Page or Layer. 
	 * (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the PDF relative to its current position, in 
	 * the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * PDF's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the PDF 
	 * that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the PDF using the last transformation performed 
	 * on any object. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the PDF using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the PDF using the last transformation performed 
	 * on any PDF. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the PDF using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PDF. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PDF. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PDF. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PDF. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PDF. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Converts the PDF to a different shape.
	 * @param {ConvertShapeOptions} given - The PDF's new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the PDF. Transformations include 
	 * rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the PDF in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/** Generates a string which, if executed, will return the PDF. */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PDF;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of PDF files.
 * @class
 */
export declare class PDFs {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the PDF. */
	count(): number;
	/**
	 * Returns the PDF with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PDF;
	/**
	 * Returns the PDF with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PDF;
	/**
	 * Returns the PDF with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PDF;
	/**
	 * Returns the PDFs within the specified range.
	 * @param {any} _from - The PDF, index, or name at the 
	 * beginning of the range. Can accept: PDF, Long Integer or 
	 * String.
	 * @param {any} to - The PDF, index, or name at the end of the 
	 * range. Can accept: PDF, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): PDF;
	/** Returns the first PDF in the collection. */
	firstItem(): PDF;
	/** Returns the last PDF in the collection. */
	lastItem(): PDF;
	/** Returns the middle PDF in the collection. */
	middleItem(): PDF;
	/**
	 * Returns the PDF with the index previous to the specified 
	 * index.
	 * @param {PDF} obj - The index of the PDF that follows the 
	 * desired PDF.
	 */
	previousItem(obj: PDF): PDF;
	/**
	 * Returns the PDF whose index follows the specified PDF in the 
	 * collection.
	 * @param {PDF} obj - The PDF whose index comes before the 
	 * desired PDF.
	 */
	nextItem(obj: PDF): PDF;
	/** Returns any PDF in the collection. */
	anyItem(): PDF;
	/** Returns every PDF in the collection. */
	everyItem(): PDF;
	/** Generates a string which, if executed, will return the PDF. */
	toSource(): string;
	/**
	 * Returns the PDF with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PDF;
}

/**
 * A placed WMF graphic.
 * @class
 * @extends Graphic
 */
export declare class WMF extends Graphic {
	/**
	 * Dispatched before a WMF is placed. This event bubbles. This 
	 * event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a WMF is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the WMF. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the WMF. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Clipping path settings. */
	readonly clippingPath: ClippingPathSettings;
	/** The XML element associated with the WMF. */
	readonly associatedXMLElement: XMLItem;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** The type of the image. */
	readonly imageTypeName: string;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Lists all page items contained by the WMF. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the WMF. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the WMF. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the WMF (a XMLElement, PlaceGun, TextBox, 
	 * SignatureField, ComboBox, ListBox, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, State or Snippet).
	 */
	readonly parent: any;
	/** The index of the WMF within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the WMF does not print. */
	nonprinting: boolean;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The bounds of the WMF excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the WMF including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/** Display performance options for the WMF. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the WMF. (Range: -360 to 360) */
	rotationAngle: number;
	/** The skewing angle applied to the WMF. (Range: -360 to 360) */
	shearAngle: number;
	/** The horizontal scaling applied to the WMF. */
	horizontalScale: number;
	/** The vertical scaling applied to the WMF. */
	verticalScale: number;
	/**
	 * The rotation angle of the WMF relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the WMF relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the WMF relative to its containing 
	 * object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the WMF relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the WMF. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the WMF has been flipped independently of 
	 * its parent object and, if yes, the direction in which the 
	 * WMF was flipped.
	 */
	absoluteFlip: Flip;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the WMF. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the WMF's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the WMF's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the WMF's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the WMF. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the WMF. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the WMF. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the WMF, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the WMF.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * WMF. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the WMF, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the WMF.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * WMF. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the WMF's stroke color overprints any underlying 
	 * objects. If false, the stroke color knocks out the  
	 * underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the WMF. */
	strokeAlignment: StrokeAlignment;
	/** The layer that the WMF is on. */
	itemLayer: Layer;
	/** If true, the WMF is locked. */
	locked: boolean;
	/** If true, the WMF is visible. */
	visible: boolean;
	/** The name of the WMF. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the WMF. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new WMF (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Exports the WMF for the web.
	 * @param {File} to - The full path name of the exported file.
	 */
	exportForWeb(to: File): string;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the WMF. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the WMF.
	 * @param {Flip} given - The axis around which to flip the WMF.
	 * @param {any} around - The point around which to flip the 
	 * WMF. Can accept: Array of 2 Units or AnchorPoint enumerator. 
	 * (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the WMF at the specified location or offset.
	 * @param {any} to - The location of the new WMF, specified in 
	 * coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new WMF from the original WMF's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the WMF to a new location. Note: Either the 'to' or 
	 * 'by' parameter is required; if both parameters are defined, 
	 * only the to value is used.
	 * @param {any} to - The new location of the WMF,in the format 
	 * (x, y). Can accept: Array of 2 Units, Spread, Page or Layer. 
	 * (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the WMF relative to its current position, in 
	 * the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * WMF's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the WMF 
	 * that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the WMF using the last transformation performed 
	 * on any object. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the WMF using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the WMF using the last transformation performed 
	 * on any WMF. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the WMF using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new WMF. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new WMF. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new WMF. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new WMF. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new WMF. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Converts the WMF to a different shape.
	 * @param {ConvertShapeOptions} given - The WMF's new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the WMF. Transformations include 
	 * rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the WMF in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/** Generates a string which, if executed, will return the WMF. */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): WMF;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of WMF graphics.
 * @class
 */
export declare class WMFs {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the WMF. */
	count(): number;
	/**
	 * Returns the WMF with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): WMF;
	/**
	 * Returns the WMF with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): WMF;
	/**
	 * Returns the WMF with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): WMF;
	/**
	 * Returns the WMFs within the specified range.
	 * @param {any} _from - The WMF, index, or name at the 
	 * beginning of the range. Can accept: WMF, Long Integer or 
	 * String.
	 * @param {any} to - The WMF, index, or name at the end of the 
	 * range. Can accept: WMF, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): WMF;
	/** Returns the first WMF in the collection. */
	firstItem(): WMF;
	/** Returns the last WMF in the collection. */
	lastItem(): WMF;
	/** Returns the middle WMF in the collection. */
	middleItem(): WMF;
	/**
	 * Returns the WMF with the index previous to the specified 
	 * index.
	 * @param {WMF} obj - The index of the WMF that follows the 
	 * desired WMF.
	 */
	previousItem(obj: WMF): WMF;
	/**
	 * Returns the WMF whose index follows the specified WMF in the 
	 * collection.
	 * @param {WMF} obj - The WMF whose index comes before the 
	 * desired WMF.
	 */
	nextItem(obj: WMF): WMF;
	/** Returns any WMF in the collection. */
	anyItem(): WMF;
	/** Returns every WMF in the collection. */
	everyItem(): WMF;
	/** Generates a string which, if executed, will return the WMF. */
	toSource(): string;
	/**
	 * Returns the WMF with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: WMF;
}

/**
 * A placed PICT graphic.
 * @class
 * @extends Graphic
 */
export declare class PICT extends Graphic {
	/**
	 * Dispatched before a PICT is placed. This event bubbles. This 
	 * event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a PICT is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the PICT. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the PICT. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Clipping path settings. */
	readonly clippingPath: ClippingPathSettings;
	/** The XML element associated with the PICT. */
	readonly associatedXMLElement: XMLItem;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** The type of the image. */
	readonly imageTypeName: string;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Lists all page items contained by the PICT. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the PICT. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the PICT. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PICT (a XMLElement, PlaceGun, TextBox, 
	 * SignatureField, ComboBox, ListBox, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, State or Snippet).
	 */
	readonly parent: any;
	/** The index of the PICT within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the PICT does not print. */
	nonprinting: boolean;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The bounds of the PICT excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the PICT including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/** Display performance options for the PICT. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the PICT. (Range: -360 to 360) */
	rotationAngle: number;
	/** The skewing angle applied to the PICT. (Range: -360 to 360) */
	shearAngle: number;
	/** The horizontal scaling applied to the PICT. */
	horizontalScale: number;
	/** The vertical scaling applied to the PICT. */
	verticalScale: number;
	/**
	 * The rotation angle of the PICT relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the PICT relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the PICT relative to its containing 
	 * object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the PICT relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the PICT. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the PICT has been flipped independently of 
	 * its parent object and, if yes, the direction in which the 
	 * PICT was flipped.
	 */
	absoluteFlip: Flip;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the PICT. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the PICT's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the PICT's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the PICT's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the PICT. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the PICT. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the PICT. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the PICT, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the PICT.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * PICT. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the PICT, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the PICT.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * PICT. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the PICT's stroke color overprints any underlying 
	 * objects. If false, the stroke color knocks out the  
	 * underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the PICT. */
	strokeAlignment: StrokeAlignment;
	/** The layer that the PICT is on. */
	itemLayer: Layer;
	/** If true, the PICT is locked. */
	locked: boolean;
	/** If true, the PICT is visible. */
	visible: boolean;
	/** The name of the PICT. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the PICT. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PICT (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Exports the PICT for the web.
	 * @param {File} to - The full path name of the exported file.
	 */
	exportForWeb(to: File): string;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the PICT. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the PICT.
	 * @param {Flip} given - The axis around which to flip the 
	 * PICT.
	 * @param {any} around - The point around which to flip the 
	 * PICT. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the PICT at the specified location or offset.
	 * @param {any} to - The location of the new PICT, specified in 
	 * coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new PICT from the original PICT's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the PICT to a new location. Note: Either the 'to' or 
	 * 'by' parameter is required; if both parameters are defined, 
	 * only the to value is used.
	 * @param {any} to - The new location of the PICT,in the format 
	 * (x, y). Can accept: Array of 2 Units, Spread, Page or Layer. 
	 * (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the PICT relative to its current position, in 
	 * the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * PICT's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * PICT that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the PICT using the last transformation performed 
	 * on any object. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the PICT using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the PICT using the last transformation performed 
	 * on any PICT. Transformations include moving, rotating, 
	 * shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the PICT using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PICT. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PICT. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PICT. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PICT. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new PICT. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Converts the PICT to a different shape.
	 * @param {ConvertShapeOptions} given - The PICT's new shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the PICT. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the PICT in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the PICT.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PICT;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of PICT graphics.
 * @class
 */
export declare class PICTs {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the PICT. */
	count(): number;
	/**
	 * Returns the PICT with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PICT;
	/**
	 * Returns the PICT with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PICT;
	/**
	 * Returns the PICT with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PICT;
	/**
	 * Returns the PICTs within the specified range.
	 * @param {any} _from - The PICT, index, or name at the 
	 * beginning of the range. Can accept: PICT, Long Integer or 
	 * String.
	 * @param {any} to - The PICT, index, or name at the end of the 
	 * range. Can accept: PICT, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): PICT;
	/** Returns the first PICT in the collection. */
	firstItem(): PICT;
	/** Returns the last PICT in the collection. */
	lastItem(): PICT;
	/** Returns the middle PICT in the collection. */
	middleItem(): PICT;
	/**
	 * Returns the PICT with the index previous to the specified 
	 * index.
	 * @param {PICT} obj - The index of the PICT that follows the 
	 * desired PICT.
	 */
	previousItem(obj: PICT): PICT;
	/**
	 * Returns the PICT whose index follows the specified PICT in 
	 * the collection.
	 * @param {PICT} obj - The PICT whose index comes before the 
	 * desired PICT.
	 */
	nextItem(obj: PICT): PICT;
	/** Returns any PICT in the collection. */
	anyItem(): PICT;
	/** Returns every PICT in the collection. */
	everyItem(): PICT;
	/**
	 * Generates a string which, if executed, will return the PICT.
	 */
	toSource(): string;
	/**
	 * Returns the PICT with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PICT;
}

/**
 * An imported graphic in any graphic file format (including 
 * vector, metafile, and bitmap formats).
 * @class
 * @extends PageItem
 */
export declare class Graphic extends PageItem {
	/**
	 * Dispatched before a Graphic is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Graphic is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** The XML element associated with the Graphic. */
	readonly associatedXMLElement: XMLItem;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** The type of the image. */
	readonly imageTypeName: string;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the Graphic. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the Graphic. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Lists all page items contained by the Graphic. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Graphic. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the Graphic. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Graphic (a XMLElement, Sound, PlaceGun, 
	 * Movie, TextBox, SignatureField, ComboBox, ListBox, Polygon, 
	 * GraphicLine, Rectangle, Oval, SplineItem, State or Snippet).
	 */
	readonly parent: any;
	/** The index of the Graphic within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The bounds of the Graphic excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the Graphic including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/** Display performance options for the Graphic. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the Graphic. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the Graphic. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the Graphic. */
	horizontalScale: number;
	/** The vertical scaling applied to the Graphic. */
	verticalScale: number;
	/**
	 * The rotation angle of the Graphic relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the Graphic relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the Graphic relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the Graphic relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the Graphic. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the Graphic has been flipped independently 
	 * of its parent object and, if yes, the direction in which the 
	 * Graphic was flipped.
	 */
	absoluteFlip: Flip;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Graphic. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the Graphic's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the Graphic's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the Graphic's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the Graphic. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the Graphic. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Graphic. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Graphic, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the Graphic.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * Graphic. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the Graphic, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the Graphic.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * Graphic. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the Graphic's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the Graphic. */
	strokeAlignment: StrokeAlignment;
	/** If true, the Graphic does not print. */
	nonprinting: boolean;
	/** The layer that the Graphic is on. */
	itemLayer: Layer;
	/** If true, the Graphic is locked. */
	locked: boolean;
	/** If true, the Graphic is visible. */
	visible: boolean;
	/** The name of the Graphic. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the Graphic. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Exports the Graphic for the web.
	 * @param {File} to - The full path name of the exported file.
	 */
	exportForWeb(to: File): string;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the Graphic. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the Graphic.
	 * @param {Flip} given - The axis around which to flip the 
	 * Graphic.
	 * @param {any} around - The point around which to flip the 
	 * Graphic. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the Graphic at the specified location or offset.
	 * @param {any} to - The location of the new Graphic, specified 
	 * in coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new Graphic from the original Graphic's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the Graphic to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the Graphic,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the Graphic relative to its current position, 
	 * in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * Graphic's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * Graphic that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the Graphic using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the Graphic using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the Graphic using the last transformation 
	 * performed on any Graphic. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the Graphic using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Graphic. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Graphic. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Graphic. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Graphic. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Graphic. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Converts the Graphic to a different shape.
	 * @param {ConvertShapeOptions} given - The Graphic's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the Graphic. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Graphic in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Graphic (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Graphic.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Graphic;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of imported graphics in any graphic file format 
 * (vector, metafile, or bitmap).
 * @class
 */
export declare class Graphics {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Graphic. */
	count(): number;
	/**
	 * Returns the Graphic with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Graphic;
	/**
	 * Returns the Graphic with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Graphic;
	/**
	 * Returns the Graphic with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Graphic;
	/**
	 * Returns the Graphics within the specified range.
	 * @param {any} _from - The Graphic, index, or name at the 
	 * beginning of the range. Can accept: Graphic, Long Integer or 
	 * String.
	 * @param {any} to - The Graphic, index, or name at the end of 
	 * the range. Can accept: Graphic, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Graphic;
	/** Returns the first Graphic in the collection. */
	firstItem(): Graphic;
	/** Returns the last Graphic in the collection. */
	lastItem(): Graphic;
	/** Returns the middle Graphic in the collection. */
	middleItem(): Graphic;
	/**
	 * Returns the Graphic with the index previous to the specified 
	 * index.
	 * @param {Graphic} obj - The index of the Graphic that follows 
	 * the desired Graphic.
	 */
	previousItem(obj: Graphic): Graphic;
	/**
	 * Returns the Graphic whose index follows the specified 
	 * Graphic in the collection.
	 * @param {Graphic} obj - The Graphic whose index comes before 
	 * the desired Graphic.
	 */
	nextItem(obj: Graphic): Graphic;
	/** Returns any Graphic in the collection. */
	anyItem(): Graphic;
	/** Returns every Graphic in the collection. */
	everyItem(): Graphic;
	/**
	 * Generates a string which, if executed, will return the 
	 * Graphic.
	 */
	toSource(): string;
	/**
	 * Returns the Graphic with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Graphic;
}

/**
 * A transformation matrix.
 * @class
 */
export declare class TransformationMatrix {
	/** The name of the TransformationMatrix. */
	readonly name: string;
	/** The values of the transformation matrix. */
	readonly matrixValues: number;
	/** The horizontal scale factor of the transformation matrix. */
	readonly horizontalScaleFactor: number;
	/** The vertical scale factor of the transformation matrix. */
	readonly verticalScaleFactor: number;
	/** The shear angle of the transformation matrix. */
	readonly clockwiseShearAngle: number;
	/** The rotation angle of the transformation matrix. */
	readonly counterclockwiseRotationAngle: number;
	/** The horizontal translation of the transformation matrix. */
	readonly horizontalTranslation: number;
	/** The vertical translation of the transformation matrix. */
	readonly verticalTranslation: number;
	/**
	 * The mapping the transformation matrix performs on the unit 
	 * triangle. Can return: Array of Array of 2 Arrays of 2 Reals.
	 */
	readonly matrixMapping: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TransformationMatrix (a Application). */
	readonly parent: Application;
	/**
	 * The index of the TransformationMatrix within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Scale the transformation matrix.
	 * @param {number} horizontallyBy - The horizontal scale factor 
	 * (Optional)
	 * @param {number} verticallyBy - The vertical scale factor 
	 * (Optional)
	 */
	scaleMatrix(horizontallyBy: number, verticallyBy: number): TransformationMatrix;
	/**
	 * Shear the transformation matrix.
	 * @param {number} byAngle - The horizontal shear angle 
	 * (Optional)
	 * @param {number} bySlope - The horizontal shear slope 
	 * (Optional)
	 */
	shearMatrix(byAngle: number, bySlope: number): TransformationMatrix;
	/**
	 * Rotate the transformation matrix.
	 * @param {number} byAngle - The counterclockwise rotation 
	 * angle (Optional)
	 * @param {number} byCosine - The cosine of the desired 
	 * rotation (Optional)
	 * @param {number} bySine - The sine of the desired rotation 
	 * (Optional)
	 */
	rotateMatrix(byAngle: number, byCosine: number, bySine: number): TransformationMatrix;
	/**
	 * Translate the transformation matrix.
	 * @param {number} horizontallyBy - The horizontal translation 
	 * distance (Optional)
	 * @param {number} verticallyBy - The vertical translation 
	 * distance (Optional)
	 */
	translateMatrix(horizontallyBy: number, verticallyBy: number): TransformationMatrix;
	/**
	 * Multiply the transformation matrix by another.
	 * @param {TransformationMatrix} withMatrix - The right hand 
	 * matrix factor
	 */
	catenateMatrix(withMatrix: TransformationMatrix): TransformationMatrix;
	/** Invert the transformation matrix. */
	invertMatrix(): TransformationMatrix;
	/**
	 * Multiply the point by the matrix.
	 * @param {number} point - The point to transform
	 */
	changeCoordinates(point: number): number;
	/**
	 * Generates a string which, if executed, will return the 
	 * TransformationMatrix.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TransformationMatrix;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of transformation matrices.
 * @class
 */
export declare class TransformationMatrices {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Create a new TransformationMatrix.
	 * @param {number} horizontalScaleFactor - The horizontal scale 
	 * factor of the transformation matrix (Optional)
	 * @param {number} verticalScaleFactor - The vertical scale 
	 * factor of the transformation matrix (Optional)
	 * @param {number} clockwiseShearAngle - The shear angle of the 
	 * transformation matrix (Optional)
	 * @param {number} counterclockwiseRotationAngle - The rotation 
	 * angle of the transformation matrix (Optional)
	 * @param {number} horizontalTranslation - The horizontal 
	 * translation of the transformation matrix (Optional)
	 * @param {number} verticalTranslation - The vertical 
	 * translation of the transformation matrix (Optional)
	 * @param {number} matrixValues - The values of the 
	 * transformation matrix (Optional)
	 * @param {any} matrixMapping - The mapping the transformation 
	 * matrix performs on the unit triangle. Can accept: Array of 
	 * Array of 2 Arrays of 2 Reals. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TransformationMatrix (Optional)
	 */
	add(horizontalScaleFactor: number, verticalScaleFactor: number, clockwiseShearAngle: number, counterclockwiseRotationAngle: number, horizontalTranslation: number, verticalTranslation: number, matrixValues: number, matrixMapping: any, withProperties: Object): TransformationMatrix;
	/**
	 * Displays the number of elements in the TransformationMatrix.
	 */
	count(): number;
	/**
	 * Returns the TransformationMatrix with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TransformationMatrix;
	/**
	 * Returns the TransformationMatrix with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TransformationMatrix;
	/**
	 * Returns the TransformationMatrices within the specified 
	 * range.
	 * @param {any} _from - The TransformationMatrix, index, or 
	 * name at the beginning of the range. Can accept: 
	 * TransformationMatrix, Long Integer or String.
	 * @param {any} to - The TransformationMatrix, index, or name 
	 * at the end of the range. Can accept: TransformationMatrix, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): TransformationMatrix;
	/** Returns the first TransformationMatrix in the collection. */
	firstItem(): TransformationMatrix;
	/** Returns the last TransformationMatrix in the collection. */
	lastItem(): TransformationMatrix;
	/** Returns the middle TransformationMatrix in the collection. */
	middleItem(): TransformationMatrix;
	/**
	 * Returns the TransformationMatrix with the index previous to 
	 * the specified index.
	 * @param {TransformationMatrix} obj - The index of the 
	 * TransformationMatrix that follows the desired 
	 * TransformationMatrix.
	 */
	previousItem(obj: TransformationMatrix): TransformationMatrix;
	/**
	 * Returns the TransformationMatrix whose index follows the 
	 * specified TransformationMatrix in the collection.
	 * @param {TransformationMatrix} obj - The TransformationMatrix 
	 * whose index comes before the desired TransformationMatrix.
	 */
	nextItem(obj: TransformationMatrix): TransformationMatrix;
	/** Returns any TransformationMatrix in the collection. */
	anyItem(): TransformationMatrix;
	/** Returns every TransformationMatrix in the collection. */
	everyItem(): TransformationMatrix;
	/**
	 * Generates a string which, if executed, will return the 
	 * TransformationMatrix.
	 */
	toSource(): string;
	/**
	 * Returns the TransformationMatrix with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TransformationMatrix;
}

/**
 * Options for fitting placed or pasted content in a frame.
 * @class
 * @extends Preference
 */
export declare class FrameFittingOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FrameFittingOption (a ObjectStyle, Oval, 
	 * Rectangle, Polygon, Application or Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, the last saved fitting options will be applied to 
	 * the contents of a frame when it is resized.
	 */
	autoFit: boolean;
	/**
	 * The amount in measurement units to crop the left edge of a 
	 * graphic.
	 */
	leftCrop: number|string;
	/**
	 * The amount in measurement units to crop the top edge of a 
	 * graphic.
	 */
	topCrop: number|string;
	/**
	 * The amount in measurement units to crop the right edge of a 
	 * graphic.
	 */
	rightCrop: number|string;
	/**
	 * The amount in measurement units to crop the bottom edge of a 
	 * graphic.
	 */
	bottomCrop: number|string;
	/**
	 * The frame fitting option to apply to placed or pasted 
	 * content if the frame is empty. Can be applied to a frame, 
	 * object style, or document or to the application.
	 */
	fittingOnEmptyFrame: EmptyFrameFittingOptions;
	/**
	 * The point with which to align the image empty when fitting 
	 * in a frame. For information, see frame fitting options.
	 */
	fittingAlignment: AnchorPoint;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FrameFittingOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FrameFittingOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A guide.
 * @class
 */
export declare class Guide {
	/**
	 * Dispatched after a Guide is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The unique ID of the Guide. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Guide (a Spread or MasterSpread). */
	readonly parent: any;
	/** The index of the Guide within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The color of the guide, specified either as an array of 
	 * three doubles, each in the range 0 to 255 and representing 
	 * R, G, and B values, or as a UI color. Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator.
	 */
	guideColor: any;
	/** The orientation of the guide. */
	orientation: HorizontalOrVertical;
	/**
	 * The location at which to place the guide relative to the 
	 * current ruler zero point.
	 */
	location: number|string;
	/**
	 * If true, horizontal orientation guides stop at the edges of 
	 * the specified page. If false, the guides extends across the 
	 * width of the spread and into the pasteboard area.
	 */
	fitToPage: boolean;
	/**
	 * The view magnification as a percentage below which guides 
	 * are no longer displayed. (Range: 5.0 to 4000.0)
	 */
	viewThreshold: number;
	/** If true, the Guide is locked. */
	locked: boolean;
	/** The layer that the Guide is on. */
	itemLayer: Layer;
	/** The type of the guide. */
	guideType: GuideTypeOptions;
	/** The zone of the guide. */
	guideZone: number|string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the Guide; this is an alias to the Guide's label 
	 * property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the Guide. */
	remove(): void;
	/**
	 * Moves the guide to a new location. Note: Either the to or 
	 * the by parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {number|string} to - The new location of the guide, 
	 * in the format [x, y]. (Optional)
	 * @param {number|string} by - The amount to move the guide 
	 * relative to its current position, in the format [x, y]. 
	 * (Optional)
	 */
	move(to: number|string, by: number|string): void;
	/** Duplicates the Guide. */
	duplicate(): Guide;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Guide in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Guide.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Guide;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of guides.
 * @class
 */
export declare class Guides {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new guide.
	 * @param {Layer} layer - The layer on which to create the 
	 * guide. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Guide (Optional)
	 */
	add(layer: Layer, withProperties: Object): Guide;
	/** Displays the number of elements in the Guide. */
	count(): number;
	/**
	 * Returns the Guide with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Guide;
	/**
	 * Returns the Guide with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Guide;
	/**
	 * Returns the Guide with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Guide;
	/**
	 * Returns the Guides within the specified range.
	 * @param {any} _from - The Guide, index, or name at the 
	 * beginning of the range. Can accept: Guide, Long Integer or 
	 * String.
	 * @param {any} to - The Guide, index, or name at the end of 
	 * the range. Can accept: Guide, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Guide;
	/** Returns the first Guide in the collection. */
	firstItem(): Guide;
	/** Returns the last Guide in the collection. */
	lastItem(): Guide;
	/** Returns the middle Guide in the collection. */
	middleItem(): Guide;
	/**
	 * Returns the Guide with the index previous to the specified 
	 * index.
	 * @param {Guide} obj - The index of the Guide that follows the 
	 * desired Guide.
	 */
	previousItem(obj: Guide): Guide;
	/**
	 * Returns the Guide whose index follows the specified Guide in 
	 * the collection.
	 * @param {Guide} obj - The Guide whose index comes before the 
	 * desired Guide.
	 */
	nextItem(obj: Guide): Guide;
	/** Returns any Guide in the collection. */
	anyItem(): Guide;
	/** Returns every Guide in the collection. */
	everyItem(): Guide;
	/**
	 * Generates a string which, if executed, will return the 
	 * Guide.
	 */
	toSource(): string;
	/**
	 * Returns the Guide with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Guide;
}

/**
 * Text wrap preferences.
 * @class
 * @extends Preference
 */
export declare class TextWrapPreference extends Preference {
	/**
	 * The contour of the text wrap. Valid only when when text wrap 
	 * type is contour.
	 */
	readonly contourOptions: ContourOption;
	/**
	 * If true, the text wrap path has been explicitly modified by 
	 * the user.
	 */
	readonly userModifiedWrap: boolean;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextWrapPreference (a PageItem, HtmlItem, 
	 * FormField, SignatureField, TextBox, RadioButton, ListBox, 
	 * ComboBox, CheckBox, MultiStateObject, Button, MediaItem, 
	 * Sound, Movie, EPSText, SplineItem, Polygon, GraphicLine, 
	 * Rectangle, Oval, Graphic, ImportedPage, PICT, WMF, PDF, EPS, 
	 * Image, Group, TextFrame, Application, Document or 
	 * ObjectStyle).
	 */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The minimum space between text and the edges of the wrapped 
	 * object. The format for defining text wrap offset values 
	 * depends on the text wrap type. If text wrap type is jump 
	 * object text wrap, specify 2 values in the format [top, 
	 * bottom]. If text wrap type is next column text wrap or 
	 * contour, specify a single value. For bounding box text wrap, 
	 * specify 4 values in the format in the format [top, left, 
	 * bottom, right]. . Can return: Unit, Array of Units or 
	 * NothingEnum enumerator.
	 */
	textWrapOffset: any;
	/** If true, inverts the text wrap. */
	inverse: boolean;
	/**
	 * If true, text wraps on the master spread apply to that 
	 * spread only, and not to any pages the master spread has been 
	 * applied to.
	 */
	applyToMasterPageOnly: boolean;
	/** Text wrap side options. */
	textWrapSide: TextWrapSideOptions;
	/** The text wrap mode. */
	textWrapMode: TextWrapModes;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextWrapPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextWrapPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A contour option.
 * @class
 * @extends Preference
 */
export declare class ContourOption extends Preference {
	/** A list of the clipping paths stored in the graphic. */
	readonly photoshopPathNames: string;
	/** A list of the alpha channels stored in the graphic. */
	readonly alphaChannelPathNames: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ContourOption (a TextWrapPreference). */
	readonly parent: TextWrapPreference;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The contour type. */
	contourType: ContourOptionsTypes;
	/**
	 * If true, creates interior clipping paths within the 
	 * surrounding clipping path. Note: Valid only when clipping 
	 * type is alpha channel or detect edges.
	 */
	includeInsideEdges: boolean;
	/**
	 * The alpha channel or Photoshop path to use for the contour 
	 * option. Valid only when the contour options is photoshop 
	 * path or alpha channel.
	 */
	contourPathName: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ContourOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ContourOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A section.
 * @class
 */
export declare class Section {
	/** The number of pages in the section. */
	readonly length: number;
	/** The number of pages in the alternate layout section. */
	readonly alternateLayoutLength: number;
	/** The unique ID of the Section. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Section (a Document). */
	readonly parent: Document;
	/** The index of the Section within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The alternate layout name for a set of pages. */
	alternateLayout: string;
	/** The name of the Section. */
	name: string;
	/**
	 * The page number style. Can return: PageNumberStyle 
	 * enumerator or String.
	 */
	pageNumberStyle: any;
	/**
	 * If true, continues page numbers sequentially from the 
	 * previous section.
	 */
	continueNumbering: boolean;
	/**
	 * If true, places the specified prefix before page numbers on 
	 * all pages in the section.
	 */
	includeSectionPrefix: boolean;
	/**
	 * The page number assigned to the first page in the section. 
	 * Note: Valid only when continue numbering is false.
	 */
	pageNumberStart: number;
	/** The section marker. */
	marker: string;
	/** The start page for the section. */
	pageStart: Page;
	/**
	 * The prefix to place before page numbers on pages in the 
	 * section. May include up to 8 characters. Note: Valid only 
	 * when include section prefix is true.
	 */
	sectionPrefix: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Section. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Section.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Section;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of sections.
 * @class
 */
export declare class Sections {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Section. */
	count(): number;
	/**
	 * Creates a new section.
	 * @param {Page} reference - The page on which the section 
	 * begins. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Section (Optional)
	 */
	add(reference: Page, withProperties: Object): Section;
	/**
	 * Returns the Section with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Section;
	/**
	 * Returns the Section with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Section;
	/**
	 * Returns the Section with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Section;
	/**
	 * Returns the Sections within the specified range.
	 * @param {any} _from - The Section, index, or name at the 
	 * beginning of the range. Can accept: Section, Long Integer or 
	 * String.
	 * @param {any} to - The Section, index, or name at the end of 
	 * the range. Can accept: Section, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Section;
	/** Returns the first Section in the collection. */
	firstItem(): Section;
	/** Returns the last Section in the collection. */
	lastItem(): Section;
	/** Returns the middle Section in the collection. */
	middleItem(): Section;
	/**
	 * Returns the Section with the index previous to the specified 
	 * index.
	 * @param {Section} obj - The index of the Section that follows 
	 * the desired Section.
	 */
	previousItem(obj: Section): Section;
	/**
	 * Returns the Section whose index follows the specified 
	 * Section in the collection.
	 * @param {Section} obj - The Section whose index comes before 
	 * the desired Section.
	 */
	nextItem(obj: Section): Section;
	/** Returns any Section in the collection. */
	anyItem(): Section;
	/** Returns every Section in the collection. */
	everyItem(): Section;
	/**
	 * Generates a string which, if executed, will return the 
	 * Section.
	 */
	toSource(): string;
	/**
	 * Returns the Section with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Section;
}

/**
 * A path.
 * @class
 */
export declare class Path {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Path (a SplineItem, Polygon, GraphicLine, 
	 * Rectangle, Oval, TextFrame, MediaItem, Sound, Movie, Button, 
	 * MultiStateObject, ClippingPathSettings or 
	 * TextWrapPreference).
	 */
	readonly parent: any;
	/** The index of the Path within its containing object. */
	readonly index: number;
	/** A collection of path points. */
	readonly pathPoints: PathPoints;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The path type. */
	pathType: PathType;
	/**
	 * A list of the coordinates of all of the path points on the 
	 * path, including anchor points and left- and right-direction 
	 * points. When creating a path using this property, supply 
	 * either a list of anchor point coordinates ([[x1, y1], [x2, 
	 * y2], ...]) or a list of anchor point, left-direction point, 
	 * and right-direction point coordinates ([[[x1, y1], [x2, y2], 
	 * [x3, y3]], [[x4, y4], [x5, y5], [x6, y6]], ...]). Note: 
	 * Providing only anchor points results in a path on which all 
	 * of the path points are connected with straight line 
	 * segments; supplying the positions of left- and 
	 * right-direction points specifies curved line segments. Can 
	 * return: Array of Arrays of 2 Units.
	 */
	entirePath: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Path. */
	remove(): void;
	/** Reverses the path. */
	reverse(): void;
	/**
	 * Generates a string which, if executed, will return the Path.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Path;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of paths.
 * @class
 */
export declare class Paths {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Path.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Path (Optional)
	 */
	add(withProperties: Object): Path;
	/** Displays the number of elements in the Path. */
	count(): number;
	/**
	 * Returns the Path with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Path;
	/**
	 * Returns the Paths within the specified range.
	 * @param {any} _from - The Path, index, or name at the 
	 * beginning of the range. Can accept: Path, Long Integer or 
	 * String.
	 * @param {any} to - The Path, index, or name at the end of the 
	 * range. Can accept: Path, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Path;
	/** Returns the first Path in the collection. */
	firstItem(): Path;
	/** Returns the last Path in the collection. */
	lastItem(): Path;
	/** Returns the middle Path in the collection. */
	middleItem(): Path;
	/**
	 * Returns the Path with the index previous to the specified 
	 * index.
	 * @param {Path} obj - The index of the Path that follows the 
	 * desired Path.
	 */
	previousItem(obj: Path): Path;
	/**
	 * Returns the Path whose index follows the specified Path in 
	 * the collection.
	 * @param {Path} obj - The Path whose index comes before the 
	 * desired Path.
	 */
	nextItem(obj: Path): Path;
	/** Returns any Path in the collection. */
	anyItem(): Path;
	/** Returns every Path in the collection. */
	everyItem(): Path;
	/**
	 * Generates a string which, if executed, will return the Path.
	 */
	toSource(): string;
	/**
	 * Returns the Path with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Path;
}

/**
 * A path point of a path.
 * @class
 */
export declare class PathPoint {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PathPoint (a Path). */
	readonly parent: Path;
	/** The index of the PathPoint within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The path point type. */
	pointType: PointType;
	/**
	 * The location of the path point on the page, in the format 
	 * [x, y].
	 */
	anchor: number|string;
	/**
	 * The left-direction point, which controls the curve of the 
	 * line segment preceding the path point on the path, in the 
	 * format [x, y].
	 */
	leftDirection: number|string;
	/**
	 * The right-direction point, which controls the curve of the 
	 * line segment following the path point on the path, in the 
	 * format [x, y].
	 */
	rightDirection: number|string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the PathPoint. */
	remove(): void;
	/**
	 * Join this path point to another path point. The two points 
	 * must be end points and their paths combined into a single 
	 * path on a single page item.
	 * @param {PathPoint} reference - The reference object. The 
	 * path point to join to
	 * @param {JoinOptions} given - The join option to use. 
	 * (Optional)
	 */
	join(reference: PathPoint, given: JoinOptions): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * PathPoint.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PathPoint;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of path points.
 * @class
 */
export declare class PathPoints {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new PathPoint.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PathPoint (Optional)
	 */
	add(withProperties: Object): PathPoint;
	/** Displays the number of elements in the PathPoint. */
	count(): number;
	/**
	 * Returns the PathPoint with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PathPoint;
	/**
	 * Returns the PathPoints within the specified range.
	 * @param {any} _from - The PathPoint, index, or name at the 
	 * beginning of the range. Can accept: PathPoint, Long Integer 
	 * or String.
	 * @param {any} to - The PathPoint, index, or name at the end 
	 * of the range. Can accept: PathPoint, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): PathPoint;
	/** Returns the first PathPoint in the collection. */
	firstItem(): PathPoint;
	/** Returns the last PathPoint in the collection. */
	lastItem(): PathPoint;
	/** Returns the middle PathPoint in the collection. */
	middleItem(): PathPoint;
	/**
	 * Returns the PathPoint with the index previous to the 
	 * specified index.
	 * @param {PathPoint} obj - The index of the PathPoint that 
	 * follows the desired PathPoint.
	 */
	previousItem(obj: PathPoint): PathPoint;
	/**
	 * Returns the PathPoint whose index follows the specified 
	 * PathPoint in the collection.
	 * @param {PathPoint} obj - The PathPoint whose index comes 
	 * before the desired PathPoint.
	 */
	nextItem(obj: PathPoint): PathPoint;
	/** Returns any PathPoint in the collection. */
	anyItem(): PathPoint;
	/** Returns every PathPoint in the collection. */
	everyItem(): PathPoint;
	/**
	 * Generates a string which, if executed, will return the 
	 * PathPoint.
	 */
	toSource(): string;
	/**
	 * Returns the PathPoint with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PathPoint;
}

/**
 * A path-based page item, such as a rectangle, oval, polygon, 
 * or graphic line.
 * @class
 * @extends PageItem
 */
export declare class SplineItem extends PageItem {
	/**
	 * Dispatched before a SplineItem is placed. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a SplineItem is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/** Export options for the object */
	readonly objectExportOptions: ObjectExportOption;
	/** The lock state. */
	readonly lockState: LockStateValues;
	/** The XML element associated with the SplineItem. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the 
	 * SplineItem.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the SplineItem. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the SplineItem. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the SplineItem. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the SplineItem. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the SplineItem (a ComboBox, ListBox, TextBox, 
	 * SignatureField, Spread, MasterSpread, Polygon, GraphicLine, 
	 * Rectangle, Oval, SplineItem, Group, State, Cell, Character, 
	 * PlaceGun or Snippet).
	 */
	readonly parent: any;
	/** The index of the SplineItem within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of sound clips. */
	readonly sounds: Sounds;
	/** The media items collection. */
	readonly mediaItems: MediaItems;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of text paths. */
	readonly textPaths: TextPaths;
	/** A collection of movies. */
	readonly movies: Movies;
	/** A collection of embedded HTML page items. */
	readonly htmlItems: HtmlItems;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** Imported InDesign pages. */
	readonly importedPages: ImportedPages;
	/** The type of content that a frame can contain. */
	contentType: ContentType;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the SplineItem excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the SplineItem including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the SplineItem. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the SplineItem's fill color. 
	 * (To specify a tint percent, use a number in the range of 0 
	 * to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the SplineItem's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the SplineItem's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the SplineItem. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the SplineItem. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the SplineItem. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the SplineItem, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the SplineItem.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * SplineItem. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the SplineItem, in the format [x, 
	 * y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the SplineItem.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * SplineItem. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the SplineItem's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the SplineItem. */
	strokeAlignment: StrokeAlignment;
	/** If true, the SplineItem does not print. */
	nonprinting: boolean;
	/** The layer that the SplineItem is on. */
	itemLayer: Layer;
	/** If true, the SplineItem is locked. */
	locked: boolean;
	/** Display performance options for the SplineItem. */
	localDisplaySetting: DisplaySettingOptions;
	/**
	 * The rotatation angle of the SplineItem. (Range: -360 to 360)
	 */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the SplineItem. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the SplineItem. */
	horizontalScale: number;
	/** The vertical scaling applied to the SplineItem. */
	verticalScale: number;
	/**
	 * The rotation angle of the SplineItem relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the SplineItem relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the SplineItem relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the SplineItem relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the SplineItem. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the SplineItem has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the SplineItem was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the SplineItem is visible. */
	visible: boolean;
	/** The name of the SplineItem. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the SplineItem. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Brings the SplineItem to the front of its layer or in front 
	 * of a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the SplineItem to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the SplineItem forward one level in its layer. */
	bringForward(): void;
	/** Sends the SplineItem back one level in its layer. */
	sendBackward(): void;
	/**
	 * Creates a compound path by combining the path(s) of the 
	 * SplineItem with the paths of other objects.
	 * @param {PageItem} _with - The other objects whose paths to 
	 * include in the new compound path.
	 */
	makeCompoundPath(_with: PageItem): PageItem;
	/** Releases a compound path. */
	releaseCompoundPath(): PageItem;
	/**
	 * Creates a new page item by intersecting the SplineItem with 
	 * other objects. Returns an error if the objects do not 
	 * intersect.
	 * @param {PageItem} _with - The object(s) with which to 
	 * intersect.
	 */
	intersectPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by combining the SplineItem with 
	 * other objects. Deletes the objects if they do not intersect.
	 * @param {PageItem} _with - The object(s) to add.
	 */
	addPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by subtracting the overlapping areas 
	 * of the SplineItem and other objects.
	 * @param {PageItem} _with - The object(s) to subtract.
	 */
	subtractPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by reverse subtracting the 
	 * overlapping areas of the SplineItem and other objects.
	 * @param {PageItem} _with - The object(s) to reverse subtract.
	 */
	minusBack(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by excluding the overlapping areas 
	 * of the SplineItem and other objects.
	 * @param {PageItem} _with - The object(s) to exclude.
	 */
	excludeOverlapPath(_with: PageItem): PageItem;
	/**
	 * Converts the SplineItem to a different shape.
	 * @param {ConvertShapeOptions} given - The SplineItem's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/** Checks out the story. */
	checkOut(): boolean;
	/**
	 * Checks in the story or stories.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	checkIn(versionComments: string, forceSave?: boolean): boolean;
	/**
	 * Reverts the document to its state at the last save 
	 * operation.
	 */
	revert(): boolean;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the SplineItem. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the SplineItem.
	 * @param {Flip} given - The axis around which to flip the 
	 * SplineItem.
	 * @param {any} around - The point around which to flip the 
	 * SplineItem. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the SplineItem at the specified location or 
	 * offset.
	 * @param {any} to - The location of the new SplineItem, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new SplineItem from the original SplineItem's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the SplineItem to a new location. Note: Either the 
	 * 'to' or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the SplineItem,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the SplineItem relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * SplineItem's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * SplineItem that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the SplineItem. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the SplineItem using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the SplineItem using the last sequence of 
	 * transform operations performed on any single object or 
	 * performed at the same time on any group of objects. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the SplineItem using the last transformation 
	 * performed on any SplineItem. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the SplineItem using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new SplineItem. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new SplineItem. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new SplineItem. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new SplineItem. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new SplineItem. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the SplineItem in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new SplineItem (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * SplineItem.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): SplineItem;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The spline items collection.
 * @class
 */
export declare class SplineItems {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the SplineItem. */
	count(): number;
	/**
	 * Returns the SplineItem with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): SplineItem;
	/**
	 * Returns the SplineItem with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): SplineItem;
	/**
	 * Returns the SplineItem with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): SplineItem;
	/**
	 * Returns the SplineItems within the specified range.
	 * @param {any} _from - The SplineItem, index, or name at the 
	 * beginning of the range. Can accept: SplineItem, Long Integer 
	 * or String.
	 * @param {any} to - The SplineItem, index, or name at the end 
	 * of the range. Can accept: SplineItem, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): SplineItem;
	/** Returns the first SplineItem in the collection. */
	firstItem(): SplineItem;
	/** Returns the last SplineItem in the collection. */
	lastItem(): SplineItem;
	/** Returns the middle SplineItem in the collection. */
	middleItem(): SplineItem;
	/**
	 * Returns the SplineItem with the index previous to the 
	 * specified index.
	 * @param {SplineItem} obj - The index of the SplineItem that 
	 * follows the desired SplineItem.
	 */
	previousItem(obj: SplineItem): SplineItem;
	/**
	 * Returns the SplineItem whose index follows the specified 
	 * SplineItem in the collection.
	 * @param {SplineItem} obj - The SplineItem whose index comes 
	 * before the desired SplineItem.
	 */
	nextItem(obj: SplineItem): SplineItem;
	/** Returns any SplineItem in the collection. */
	anyItem(): SplineItem;
	/** Returns every SplineItem in the collection. */
	everyItem(): SplineItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * SplineItem.
	 */
	toSource(): string;
	/**
	 * Returns the SplineItem with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: SplineItem;
}

/**
 * EPSText.
 * @class
 * @extends PageItem
 */
export declare class EPSText extends PageItem {
	/**
	 * Dispatched before a EPSText is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a EPSText is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/** The XML element associated with the EPSText. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the EPSText. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the EPSText. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the EPSText. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the EPSText. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the EPSText. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the EPSText (a PlaceGun, ComboBox, ListBox, 
	 * TextBox, SignatureField, Spread, MasterSpread, SplineItem, 
	 * Polygon, GraphicLine, Rectangle, Oval, Group, State, 
	 * Character or Snippet).
	 */
	readonly parent: any;
	/** The index of the EPSText within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of text paths. */
	readonly textPaths: TextPaths;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the EPSText excluding the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the EPSText including the stroke width, in the 
	 * format [y1, x1, y2, x2], which give the coordinates of the 
	 * top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the EPSText. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the EPSText's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the EPSText's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the EPSText's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the EPSText. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the EPSText. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the EPSText. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the EPSText, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the EPSText.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * EPSText. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the EPSText, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the EPSText.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * EPSText. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the EPSText's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the EPSText. */
	strokeAlignment: StrokeAlignment;
	/** If true, the EPSText does not print. */
	nonprinting: boolean;
	/** The layer that the EPSText is on. */
	itemLayer: Layer;
	/** If true, the EPSText is locked. */
	locked: boolean;
	/** Display performance options for the EPSText. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the EPSText. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the EPSText. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the EPSText. */
	horizontalScale: number;
	/** The vertical scaling applied to the EPSText. */
	verticalScale: number;
	/**
	 * The rotation angle of the EPSText relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the EPSText relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the EPSText relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the EPSText relative to its containing 
	 * object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the EPSText. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the EPSText has been flipped independently 
	 * of its parent object and, if yes, the direction in which the 
	 * EPSText was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the EPSText is visible. */
	visible: boolean;
	/** The name of the EPSText. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the EPSText. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Brings the EPSText to the front of its layer or in front of 
	 * a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the EPSText to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the EPSText forward one level in its layer. */
	bringForward(): void;
	/** Sends the EPSText back one level in its layer. */
	sendBackward(): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the EPSText. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the EPSText.
	 * @param {Flip} given - The axis around which to flip the 
	 * EPSText.
	 * @param {any} around - The point around which to flip the 
	 * EPSText. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the EPSText at the specified location or offset.
	 * @param {any} to - The location of the new EPSText, specified 
	 * in coordinates in the format [x, y]. Can accept: Array of 2 
	 * Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new EPSText from the original EPSText's position. (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the EPSText to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the EPSText,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the EPSText relative to its current position, 
	 * in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * EPSText's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * EPSText that are not defined in the object style. (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Converts the EPSText to a different shape.
	 * @param {ConvertShapeOptions} given - The EPSText's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the EPSText. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the EPSText using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the EPSText using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the EPSText using the last transformation 
	 * performed on any EPSText. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the EPSText using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new EPSText. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new EPSText. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new EPSText. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new EPSText. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new EPSText. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the EPSText in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new EPSText (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * EPSText.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): EPSText;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * EPSTexts
 * @class
 */
export declare class EPSTexts {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the EPSText. */
	count(): number;
	/**
	 * Returns the EPSText with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): EPSText;
	/**
	 * Returns the EPSText with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): EPSText;
	/**
	 * Returns the EPSText with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): EPSText;
	/**
	 * Returns the EPSTexts within the specified range.
	 * @param {any} _from - The EPSText, index, or name at the 
	 * beginning of the range. Can accept: EPSText, Long Integer or 
	 * String.
	 * @param {any} to - The EPSText, index, or name at the end of 
	 * the range. Can accept: EPSText, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): EPSText;
	/** Returns the first EPSText in the collection. */
	firstItem(): EPSText;
	/** Returns the last EPSText in the collection. */
	lastItem(): EPSText;
	/** Returns the middle EPSText in the collection. */
	middleItem(): EPSText;
	/**
	 * Returns the EPSText with the index previous to the specified 
	 * index.
	 * @param {EPSText} obj - The index of the EPSText that follows 
	 * the desired EPSText.
	 */
	previousItem(obj: EPSText): EPSText;
	/**
	 * Returns the EPSText whose index follows the specified 
	 * EPSText in the collection.
	 * @param {EPSText} obj - The EPSText whose index comes before 
	 * the desired EPSText.
	 */
	nextItem(obj: EPSText): EPSText;
	/** Returns any EPSText in the collection. */
	anyItem(): EPSText;
	/** Returns every EPSText in the collection. */
	everyItem(): EPSText;
	/**
	 * Generates a string which, if executed, will return the 
	 * EPSText.
	 */
	toSource(): string;
	/**
	 * Returns the EPSText with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: EPSText;
}

/**
 * An imported InDesign page.
 * @class
 * @extends Graphic
 */
export declare class ImportedPage extends Graphic {
	/**
	 * Dispatched before a ImportedPage is placed. This event 
	 * bubbles. This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a ImportedPage is placed. This event 
	 * bubbles. This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the 
	 * ImportedPage.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the ImportedPage. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * Which page of the InDesign document should be imported. Read 
	 * only for page items.
	 */
	readonly pageNumber: number;
	/**
	 * Specifies the cropping of the imported InDesign page. Read 
	 * only for page items.
	 */
	readonly importedPageCrop: ImportedPageCropOptions;
	/** Graphic layer option settings. */
	readonly graphicLayerOptions: GraphicLayerOption;
	/** Clipping path settings. */
	readonly clippingPath: ClippingPathSettings;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** PDF attribute settings. */
	readonly pdfAttributes: PDFAttribute;
	/** The XML element associated with the ImportedPage. */
	readonly associatedXMLElement: XMLItem;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** The type of the image. */
	readonly imageTypeName: string;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/** Lists all page items contained by the ImportedPage. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the ImportedPage. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the ImportedPage. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ImportedPage (a PlaceGun, SplineItem, 
	 * Polygon, GraphicLine, Rectangle or Oval).
	 */
	readonly parent: any;
	/** The index of the ImportedPage within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the ImportedPage does not print. */
	nonprinting: boolean;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The bounds of the ImportedPage excluding the stroke width, 
	 * in the format [y1, x1, y2, x2], which give the coordinates 
	 * of the top-left and bottom-right corners of the bounding 
	 * box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the ImportedPage including the stroke width, 
	 * in the format [y1, x1, y2, x2], which give the coordinates 
	 * of the top-left and bottom-right corners of the bounding 
	 * box.
	 */
	visibleBounds: number|string;
	/** Display performance options for the ImportedPage. */
	localDisplaySetting: DisplaySettingOptions;
	/**
	 * The rotatation angle of the ImportedPage. (Range: -360 to 
	 * 360)
	 */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the ImportedPage. (Range: -360 
	 * to 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the ImportedPage. */
	horizontalScale: number;
	/** The vertical scaling applied to the ImportedPage. */
	verticalScale: number;
	/**
	 * The rotation angle of the ImportedPage relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the ImportedPage relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the ImportedPage relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the ImportedPage relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the ImportedPage. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the ImportedPage has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the ImportedPage was flipped.
	 */
	absoluteFlip: Flip;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the ImportedPage. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the ImportedPage's fill color. 
	 * (To specify a tint percent, use a number in the range of 0 
	 * to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the ImportedPage's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/**
	 * The weight (in points) to apply to the ImportedPage's 
	 * stroke.
	 */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the ImportedPage. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the ImportedPage. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the ImportedPage. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the ImportedPage, in the format [x, 
	 * y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the ImportedPage.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * ImportedPage. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the ImportedPage, in the format [x, 
	 * y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the ImportedPage.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * ImportedPage. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the ImportedPage's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the ImportedPage. */
	strokeAlignment: StrokeAlignment;
	/** The layer that the ImportedPage is on. */
	itemLayer: Layer;
	/** If true, the ImportedPage is locked. */
	locked: boolean;
	/** If true, the ImportedPage is visible. */
	visible: boolean;
	/** The name of the ImportedPage. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the ImportedPage. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Exports the ImportedPage for the web.
	 * @param {File} to - The full path name of the exported file.
	 */
	exportForWeb(to: File): string;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the ImportedPage. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the ImportedPage.
	 * @param {Flip} given - The axis around which to flip the 
	 * ImportedPage.
	 * @param {any} around - The point around which to flip the 
	 * ImportedPage. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the ImportedPage at the specified location or 
	 * offset.
	 * @param {any} to - The location of the new ImportedPage, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new ImportedPage from the original ImportedPage's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the ImportedPage to a new location. Note: Either the 
	 * 'to' or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the ImportedPage,in 
	 * the format (x, y). Can accept: Array of 2 Units, Spread, 
	 * Page or Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the ImportedPage relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * ImportedPage's existing attributes before applying the 
	 * style. (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * ImportedPage that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the ImportedPage using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the ImportedPage using the last sequence of 
	 * transform operations performed on any single object or 
	 * performed at the same time on any group of objects. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the ImportedPage using the last transformation 
	 * performed on any ImportedPage. Transformations include 
	 * moving, rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the ImportedPage using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ImportedPage. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ImportedPage. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ImportedPage. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ImportedPage. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new ImportedPage. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Converts the ImportedPage to a different shape.
	 * @param {ConvertShapeOptions} given - The ImportedPage's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the ImportedPage. 
	 * Transformations include rotation, scaling, flipping, 
	 * fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the ImportedPage in relation to previously 
	 * selected objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ImportedPage (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ImportedPage.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ImportedPage;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Imported InDesign pages.
 * @class
 */
export declare class ImportedPages {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the ImportedPage. */
	count(): number;
	/**
	 * Creates a new ImportedPage.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ImportedPage (Optional)
	 */
	add(withProperties: Object): ImportedPage;
	/**
	 * Returns the ImportedPage with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ImportedPage;
	/**
	 * Returns the ImportedPage with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ImportedPage;
	/**
	 * Returns the ImportedPage with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ImportedPage;
	/**
	 * Returns the ImportedPages within the specified range.
	 * @param {any} _from - The ImportedPage, index, or name at the 
	 * beginning of the range. Can accept: ImportedPage, Long 
	 * Integer or String.
	 * @param {any} to - The ImportedPage, index, or name at the 
	 * end of the range. Can accept: ImportedPage, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): ImportedPage;
	/** Returns the first ImportedPage in the collection. */
	firstItem(): ImportedPage;
	/** Returns the last ImportedPage in the collection. */
	lastItem(): ImportedPage;
	/** Returns the middle ImportedPage in the collection. */
	middleItem(): ImportedPage;
	/**
	 * Returns the ImportedPage with the index previous to the 
	 * specified index.
	 * @param {ImportedPage} obj - The index of the ImportedPage 
	 * that follows the desired ImportedPage.
	 */
	previousItem(obj: ImportedPage): ImportedPage;
	/**
	 * Returns the ImportedPage whose index follows the specified 
	 * ImportedPage in the collection.
	 * @param {ImportedPage} obj - The ImportedPage whose index 
	 * comes before the desired ImportedPage.
	 */
	nextItem(obj: ImportedPage): ImportedPage;
	/** Returns any ImportedPage in the collection. */
	anyItem(): ImportedPage;
	/** Returns every ImportedPage in the collection. */
	everyItem(): ImportedPage;
	/**
	 * Generates a string which, if executed, will return the 
	 * ImportedPage.
	 */
	toSource(): string;
	/**
	 * Returns the ImportedPage with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ImportedPage;
}

/**
 * An sound or movie page item.
 * @class
 * @extends PageItem
 */
export declare class MediaItem extends PageItem {
	/**
	 * Dispatched when the value of a property changes on this 
	 * MediaItem. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_ATTRIBUTE_CHANGED: string;
	/**
	 * Dispatched before a MediaItem is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a MediaItem is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** The XML element associated with the MediaItem. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the MediaItem.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the MediaItem. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the MediaItem. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the MediaItem. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the MediaItem. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MediaItem (a Polygon, GraphicLine, 
	 * Rectangle, Oval or SplineItem).
	 */
	readonly parent: any;
	/** The index of the MediaItem within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the MediaItem excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the MediaItem including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the MediaItem. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the MediaItem's fill color. 
	 * (To specify a tint percent, use a number in the range of 0 
	 * to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the MediaItem's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the MediaItem's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the MediaItem. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the MediaItem. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the MediaItem. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the MediaItem, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the MediaItem.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * MediaItem. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the MediaItem, in the format [x, 
	 * y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the MediaItem.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * MediaItem. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the MediaItem's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the MediaItem. */
	strokeAlignment: StrokeAlignment;
	/** If true, the MediaItem does not print. */
	nonprinting: boolean;
	/** The layer that the MediaItem is on. */
	itemLayer: Layer;
	/** If true, the MediaItem is locked. */
	locked: boolean;
	/** Display performance options for the MediaItem. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the MediaItem. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the MediaItem. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the MediaItem. */
	horizontalScale: number;
	/** The vertical scaling applied to the MediaItem. */
	verticalScale: number;
	/**
	 * The rotation angle of the MediaItem relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the MediaItem relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the MediaItem relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the MediaItem relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the MediaItem. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the MediaItem has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the MediaItem was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the MediaItem is visible. */
	visible: boolean;
	/** The name of the MediaItem. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the MediaItem. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Converts the MediaItem to a different shape.
	 * @param {ConvertShapeOptions} given - The MediaItem's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the MediaItem. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the MediaItem.
	 * @param {Flip} given - The axis around which to flip the 
	 * MediaItem.
	 * @param {any} around - The point around which to flip the 
	 * MediaItem. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the MediaItem at the specified location or 
	 * offset.
	 * @param {any} to - The location of the new MediaItem, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new MediaItem from the original MediaItem's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the MediaItem to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the MediaItem,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the MediaItem relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * MediaItem's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * MediaItem that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the MediaItem. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the MediaItem using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the MediaItem using the last sequence of 
	 * transform operations performed on any single object or 
	 * performed at the same time on any group of objects. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the MediaItem using the last transformation 
	 * performed on any MediaItem. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the MediaItem using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new MediaItem. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new MediaItem. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new MediaItem. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new MediaItem. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new MediaItem. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the MediaItem in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MediaItem (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * MediaItem.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MediaItem;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The media items collection.
 * @class
 */
export declare class MediaItems {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the MediaItem. */
	count(): number;
	/**
	 * Returns the MediaItem with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MediaItem;
	/**
	 * Returns the MediaItem with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): MediaItem;
	/**
	 * Returns the MediaItem with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MediaItem;
	/**
	 * Returns the MediaItems within the specified range.
	 * @param {any} _from - The MediaItem, index, or name at the 
	 * beginning of the range. Can accept: MediaItem, Long Integer 
	 * or String.
	 * @param {any} to - The MediaItem, index, or name at the end 
	 * of the range. Can accept: MediaItem, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): MediaItem;
	/** Returns the first MediaItem in the collection. */
	firstItem(): MediaItem;
	/** Returns the last MediaItem in the collection. */
	lastItem(): MediaItem;
	/** Returns the middle MediaItem in the collection. */
	middleItem(): MediaItem;
	/**
	 * Returns the MediaItem with the index previous to the 
	 * specified index.
	 * @param {MediaItem} obj - The index of the MediaItem that 
	 * follows the desired MediaItem.
	 */
	previousItem(obj: MediaItem): MediaItem;
	/**
	 * Returns the MediaItem whose index follows the specified 
	 * MediaItem in the collection.
	 * @param {MediaItem} obj - The MediaItem whose index comes 
	 * before the desired MediaItem.
	 */
	nextItem(obj: MediaItem): MediaItem;
	/** Returns any MediaItem in the collection. */
	anyItem(): MediaItem;
	/** Returns every MediaItem in the collection. */
	everyItem(): MediaItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * MediaItem.
	 */
	toSource(): string;
	/**
	 * Returns the MediaItem with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MediaItem;
}

/**
 * An IDML snippet.
 * @class
 */
export declare class Snippet {
	/**
	 * Dispatched before a Snippet is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/** The unique ID of the Snippet. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Snippet (a PlaceGun). */
	readonly parent: PlaceGun;
	/** The index of the Snippet within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of groups. */
	readonly groups: Groups;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the Snippet; this is an alias to the Snippet's 
	 * label property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Snippet. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Snippet.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Snippet;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of IDML snippets.
 * @class
 */
export declare class Snippets {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Snippet. */
	count(): number;
	/**
	 * Returns the Snippet with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Snippet;
	/**
	 * Returns the Snippet with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Snippet;
	/**
	 * Returns the Snippet with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Snippet;
	/**
	 * Returns the Snippets within the specified range.
	 * @param {any} _from - The Snippet, index, or name at the 
	 * beginning of the range. Can accept: Snippet, Long Integer or 
	 * String.
	 * @param {any} to - The Snippet, index, or name at the end of 
	 * the range. Can accept: Snippet, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Snippet;
	/** Returns the first Snippet in the collection. */
	firstItem(): Snippet;
	/** Returns the last Snippet in the collection. */
	lastItem(): Snippet;
	/** Returns the middle Snippet in the collection. */
	middleItem(): Snippet;
	/**
	 * Returns the Snippet with the index previous to the specified 
	 * index.
	 * @param {Snippet} obj - The index of the Snippet that follows 
	 * the desired Snippet.
	 */
	previousItem(obj: Snippet): Snippet;
	/**
	 * Returns the Snippet whose index follows the specified 
	 * Snippet in the collection.
	 * @param {Snippet} obj - The Snippet whose index comes before 
	 * the desired Snippet.
	 */
	nextItem(obj: Snippet): Snippet;
	/** Returns any Snippet in the collection. */
	anyItem(): Snippet;
	/** Returns every Snippet in the collection. */
	everyItem(): Snippet;
	/**
	 * Generates a string which, if executed, will return the 
	 * Snippet.
	 */
	toSource(): string;
	/**
	 * Returns the Snippet with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Snippet;
}

/**
 * A Motion preset Object.
 * @class
 */
export declare class MotionPreset {
	/** The unique ID of the MotionPreset. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the MotionPreset (a Application or Document). */
	readonly parent: any;
	/** The index of the MotionPreset within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the MotionPreset. */
	name: string;
	/** Motion preset raw data */
	contents: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the MotionPreset. */
	remove(): void;
	/**
	 * Save a copy of this motion preset to a InDesign motion 
	 * preset file.
	 * @param {File} to - The Flash motion preset file to export 
	 * to.
	 */
	saveACopy(to: File): void;
	/**
	 * Duplicates the motion preset.
	 * @param {string} name - The name for the duplicated motion 
	 * preset. (Optional)
	 */
	duplicate(name: string): MotionPreset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * MotionPreset.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MotionPreset;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of Motion presets.
 * @class
 */
export declare class MotionPresets {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new MotionPreset.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MotionPreset (Optional)
	 */
	add(withProperties: Object): MotionPreset;
	/** Displays the number of elements in the MotionPreset. */
	count(): number;
	/**
	 * Returns the MotionPreset with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MotionPreset;
	/**
	 * Returns the MotionPreset with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): MotionPreset;
	/**
	 * Returns the MotionPreset with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MotionPreset;
	/**
	 * Returns the MotionPresets within the specified range.
	 * @param {any} _from - The MotionPreset, index, or name at the 
	 * beginning of the range. Can accept: MotionPreset, Long 
	 * Integer or String.
	 * @param {any} to - The MotionPreset, index, or name at the 
	 * end of the range. Can accept: MotionPreset, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): MotionPreset;
	/** Returns the first MotionPreset in the collection. */
	firstItem(): MotionPreset;
	/** Returns the last MotionPreset in the collection. */
	lastItem(): MotionPreset;
	/** Returns the middle MotionPreset in the collection. */
	middleItem(): MotionPreset;
	/**
	 * Returns the MotionPreset with the index previous to the 
	 * specified index.
	 * @param {MotionPreset} obj - The index of the MotionPreset 
	 * that follows the desired MotionPreset.
	 */
	previousItem(obj: MotionPreset): MotionPreset;
	/**
	 * Returns the MotionPreset whose index follows the specified 
	 * MotionPreset in the collection.
	 * @param {MotionPreset} obj - The MotionPreset whose index 
	 * comes before the desired MotionPreset.
	 */
	nextItem(obj: MotionPreset): MotionPreset;
	/** Returns any MotionPreset in the collection. */
	anyItem(): MotionPreset;
	/** Returns every MotionPreset in the collection. */
	everyItem(): MotionPreset;
	/**
	 * Generates a string which, if executed, will return the 
	 * MotionPreset.
	 */
	toSource(): string;
	/**
	 * Returns the MotionPreset with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MotionPreset;
}

/**
 * An article
 * @class
 */
export declare class Article {
	/** The unique ID of the Article. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Article (a Document). */
	readonly parent: Document;
	/** The index of the Article within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of article members. */
	readonly articleMembers: ArticleMembers;
	/** The name of the Article. */
	name: string;
	/** The export status of the Article */
	articleExportStatus: boolean;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Article. */
	remove(): void;
	/**
	 * Moves the Article to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {Article} reference - The reference object. Note: 
	 * Required when the to value specifies before or after. 
	 * (Optional)
	 */
	move(to: LocationOptions, reference: Article): Article;
	/** Populates the article with all page items in the document. */
	addDocumentContent(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Article.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Article;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of articles.
 * @class
 */
export declare class Articles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Article
	 * @param {string} name - The article name (Optional)
	 * @param {boolean} articleExportStatus - The article's export 
	 * status (Optional)
	 * @param {LocationOptions} at - The location relative to the 
	 * reference object or within the containing object. (Optional)
	 * @param {Article} reference - The reference object. Note: 
	 * Required when the to value specifies before or after. 
	 * (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Article (Optional)
	 */
	add(name: string, articleExportStatus: boolean, at?: LocationOptions, reference?: Article, withProperties?: Object): Article;
	/** Displays the number of elements in the Article. */
	count(): number;
	/**
	 * Returns the Article with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Article;
	/**
	 * Returns the Article with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Article;
	/**
	 * Returns the Article with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Article;
	/**
	 * Returns the Articles within the specified range.
	 * @param {any} _from - The Article, index, or name at the 
	 * beginning of the range. Can accept: Article, Long Integer or 
	 * String.
	 * @param {any} to - The Article, index, or name at the end of 
	 * the range. Can accept: Article, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Article;
	/** Returns the first Article in the collection. */
	firstItem(): Article;
	/** Returns the last Article in the collection. */
	lastItem(): Article;
	/** Returns the middle Article in the collection. */
	middleItem(): Article;
	/**
	 * Returns the Article with the index previous to the specified 
	 * index.
	 * @param {Article} obj - The index of the Article that follows 
	 * the desired Article.
	 */
	previousItem(obj: Article): Article;
	/**
	 * Returns the Article whose index follows the specified 
	 * Article in the collection.
	 * @param {Article} obj - The Article whose index comes before 
	 * the desired Article.
	 */
	nextItem(obj: Article): Article;
	/** Returns any Article in the collection. */
	anyItem(): Article;
	/** Returns every Article in the collection. */
	everyItem(): Article;
	/**
	 * Generates a string which, if executed, will return the 
	 * Article.
	 */
	toSource(): string;
	/**
	 * Returns the Article with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Article;
}

/**
 * An article member.
 * @class
 */
export declare class ArticleMember {
	/** The underlying page item */
	readonly itemRef: PageItem;
	/** The unique ID of the ArticleMember. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ArticleMember (a Article). */
	readonly parent: Article;
	/**
	 * The index of the ArticleMember within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the ArticleMember. */
	remove(): void;
	/**
	 * Moves the ArticleMember to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {ArticleMember} reference - The reference object. 
	 * Note: Required when the to value specifies before or after. 
	 * (Optional)
	 */
	move(to: LocationOptions, reference: ArticleMember): ArticleMember;
	/**
	 * Generates a string which, if executed, will return the 
	 * ArticleMember.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ArticleMember;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of article members.
 * @class
 */
export declare class ArticleMembers {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a new member.
	 * @param {PageItem} itemRef - page item to be added to article
	 * @param {LocationOptions} at - The location relative to the 
	 * reference object or within the containing object. (Optional)
	 * @param {ArticleMember} reference - The reference object. 
	 * Note: Required when the to value specifies before or after. 
	 * (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ArticleMember (Optional)
	 */
	add(itemRef: PageItem, at?: LocationOptions, reference?: ArticleMember, withProperties?: Object): ArticleMember;
	/** Displays the number of elements in the ArticleMember. */
	count(): number;
	/**
	 * Returns the ArticleMember with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ArticleMember;
	/**
	 * Returns the ArticleMember with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ArticleMember;
	/**
	 * Returns the ArticleMembers within the specified range.
	 * @param {any} _from - The ArticleMember, index, or name at 
	 * the beginning of the range. Can accept: ArticleMember, Long 
	 * Integer or String.
	 * @param {any} to - The ArticleMember, index, or name at the 
	 * end of the range. Can accept: ArticleMember, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): ArticleMember;
	/** Returns the first ArticleMember in the collection. */
	firstItem(): ArticleMember;
	/** Returns the last ArticleMember in the collection. */
	lastItem(): ArticleMember;
	/** Returns the middle ArticleMember in the collection. */
	middleItem(): ArticleMember;
	/**
	 * Returns the ArticleMember with the index previous to the 
	 * specified index.
	 * @param {ArticleMember} obj - The index of the ArticleMember 
	 * that follows the desired ArticleMember.
	 */
	previousItem(obj: ArticleMember): ArticleMember;
	/**
	 * Returns the ArticleMember whose index follows the specified 
	 * ArticleMember in the collection.
	 * @param {ArticleMember} obj - The ArticleMember whose index 
	 * comes before the desired ArticleMember.
	 */
	nextItem(obj: ArticleMember): ArticleMember;
	/** Returns any ArticleMember in the collection. */
	anyItem(): ArticleMember;
	/** Returns every ArticleMember in the collection. */
	everyItem(): ArticleMember;
	/**
	 * Generates a string which, if executed, will return the 
	 * ArticleMember.
	 */
	toSource(): string;
	/**
	 * Returns the ArticleMember with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ArticleMember;
}

/**
 * Member of a group that is part of an article.
 * @class
 */
export declare class ArticleChild {
	/** The underlying page item */
	readonly itemRef: PageItem;
	/** The unique ID of the ArticleChild. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ArticleChild (a Group). */
	readonly parent: Group;
	/** The index of the ArticleChild within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Moves the ArticleChild to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {ArticleChild} reference - The reference object. 
	 * Note: Required when the to value specifies before or after. 
	 * (Optional)
	 */
	move(to: LocationOptions, reference: ArticleChild): ArticleChild;
	/**
	 * Generates a string which, if executed, will return the 
	 * ArticleChild.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ArticleChild;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of group items that are also part of an 
 * article.
 * @class
 */
export declare class ArticleChildren {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the ArticleChild. */
	count(): number;
	/**
	 * Returns the ArticleChild with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ArticleChild;
	/**
	 * Returns the ArticleChild with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ArticleChild;
	/**
	 * Returns the ArticleChildren within the specified range.
	 * @param {any} _from - The ArticleChild, index, or name at the 
	 * beginning of the range. Can accept: ArticleChild, Long 
	 * Integer or String.
	 * @param {any} to - The ArticleChild, index, or name at the 
	 * end of the range. Can accept: ArticleChild, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): ArticleChild;
	/** Returns the first ArticleChild in the collection. */
	firstItem(): ArticleChild;
	/** Returns the last ArticleChild in the collection. */
	lastItem(): ArticleChild;
	/** Returns the middle ArticleChild in the collection. */
	middleItem(): ArticleChild;
	/**
	 * Returns the ArticleChild with the index previous to the 
	 * specified index.
	 * @param {ArticleChild} obj - The index of the ArticleChild 
	 * that follows the desired ArticleChild.
	 */
	previousItem(obj: ArticleChild): ArticleChild;
	/**
	 * Returns the ArticleChild whose index follows the specified 
	 * ArticleChild in the collection.
	 * @param {ArticleChild} obj - The ArticleChild whose index 
	 * comes before the desired ArticleChild.
	 */
	nextItem(obj: ArticleChild): ArticleChild;
	/** Returns any ArticleChild in the collection. */
	anyItem(): ArticleChild;
	/** Returns every ArticleChild in the collection. */
	everyItem(): ArticleChild;
	/**
	 * Generates a string which, if executed, will return the 
	 * ArticleChild.
	 */
	toSource(): string;
	/**
	 * Returns the ArticleChild with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ArticleChild;
}

/**
 * Embedded HTML.
 * @class
 * @extends PageItem
 */
export declare class HtmlItem extends PageItem {
	/**
	 * Dispatched before a HtmlItem is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a HtmlItem is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** The XML element associated with the HtmlItem. */
	readonly associatedXMLElement: XMLItem;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/** Transparency settings for the fill applied to the HtmlItem. */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the HtmlItem. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the HtmlItem. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the HtmlItem. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the HtmlItem. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the HtmlItem (a SplineItem, Polygon, 
	 * GraphicLine, Rectangle or Oval).
	 */
	readonly parent: any;
	/** The index of the HtmlItem within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The embedded HTML text */
	htmlContent: string;
	/**
	 * Is this HTML able to adapt its width and height based on 
	 * changes to the parent div or does it have fixed dimensions?
	 */
	fixedDimensions: boolean;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The bounds of the HtmlItem excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the HtmlItem including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the HtmlItem. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the HtmlItem's fill color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the HtmlItem's fill color overprints any underlying 
	 * objects. If false, the fill color knocks out the underlying 
	 * colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the HtmlItem's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the HtmlItem. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the HtmlItem. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the HtmlItem. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the HtmlItem, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the HtmlItem.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * HtmlItem. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the HtmlItem, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the HtmlItem.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * HtmlItem. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the HtmlItem's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the HtmlItem. */
	strokeAlignment: StrokeAlignment;
	/** If true, the HtmlItem does not print. */
	nonprinting: boolean;
	/** The layer that the HtmlItem is on. */
	itemLayer: Layer;
	/** If true, the HtmlItem is locked. */
	locked: boolean;
	/** Display performance options for the HtmlItem. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the HtmlItem. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the HtmlItem. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the HtmlItem. */
	horizontalScale: number;
	/** The vertical scaling applied to the HtmlItem. */
	verticalScale: number;
	/**
	 * The rotation angle of the HtmlItem relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the HtmlItem relative to its containing 
	 * object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the HtmlItem relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the HtmlItem relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the HtmlItem. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the HtmlItem has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the HtmlItem was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the HtmlItem is visible. */
	visible: boolean;
	/** The name of the HtmlItem. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the HtmlItem. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the HtmlItem. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the HtmlItem.
	 * @param {Flip} given - The axis around which to flip the 
	 * HtmlItem.
	 * @param {any} around - The point around which to flip the 
	 * HtmlItem. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the HtmlItem at the specified location or offset.
	 * @param {any} to - The location of the new HtmlItem, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new HtmlItem from the original HtmlItem's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the HtmlItem to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the HtmlItem,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the HtmlItem relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * HtmlItem's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * HtmlItem that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Converts the HtmlItem to a different shape.
	 * @param {ConvertShapeOptions} given - The HtmlItem's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Clears transformations from the HtmlItem. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the HtmlItem using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the HtmlItem using the last sequence of transform 
	 * operations performed on any single object or performed at 
	 * the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the HtmlItem using the last transformation 
	 * performed on any HtmlItem. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the HtmlItem using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new HtmlItem. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new HtmlItem. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new HtmlItem. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new HtmlItem. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new HtmlItem. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the HtmlItem in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new HtmlItem (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * HtmlItem.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HtmlItem;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of embedded HTML page items.
 * @class
 */
export declare class HtmlItems {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new HtmlItem
	 * @param {Layer} layer - The layer on which to create the 
	 * HtmlItem. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the HtmlItem relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new HtmlItem (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): HtmlItem;
	/** Displays the number of elements in the HtmlItem. */
	count(): number;
	/**
	 * Returns the HtmlItem with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): HtmlItem;
	/**
	 * Returns the HtmlItem with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): HtmlItem;
	/**
	 * Returns the HtmlItem with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): HtmlItem;
	/**
	 * Returns the HtmlItems within the specified range.
	 * @param {any} _from - The HtmlItem, index, or name at the 
	 * beginning of the range. Can accept: HtmlItem, Long Integer 
	 * or String.
	 * @param {any} to - The HtmlItem, index, or name at the end of 
	 * the range. Can accept: HtmlItem, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): HtmlItem;
	/** Returns the first HtmlItem in the collection. */
	firstItem(): HtmlItem;
	/** Returns the last HtmlItem in the collection. */
	lastItem(): HtmlItem;
	/** Returns the middle HtmlItem in the collection. */
	middleItem(): HtmlItem;
	/**
	 * Returns the HtmlItem with the index previous to the 
	 * specified index.
	 * @param {HtmlItem} obj - The index of the HtmlItem that 
	 * follows the desired HtmlItem.
	 */
	previousItem(obj: HtmlItem): HtmlItem;
	/**
	 * Returns the HtmlItem whose index follows the specified 
	 * HtmlItem in the collection.
	 * @param {HtmlItem} obj - The HtmlItem whose index comes 
	 * before the desired HtmlItem.
	 */
	nextItem(obj: HtmlItem): HtmlItem;
	/** Returns any HtmlItem in the collection. */
	anyItem(): HtmlItem;
	/** Returns every HtmlItem in the collection. */
	everyItem(): HtmlItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * HtmlItem.
	 */
	toSource(): string;
	/**
	 * Returns the HtmlItem with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: HtmlItem;
}

/**
 * An object library.
 * @class
 */
export declare class Library {
	/** The name of the Library. */
	readonly name: string;
	/**
	 * The full path to the Library, including the name of the 
	 * Library.
	 */
	readonly fullName: File;
	/** The full path to the file. */
	readonly filePath: File;
	/** The associated panel. */
	readonly associatedPanel: Panel;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Library (a Application). */
	readonly parent: Application;
	/** The index of the Library within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of object library assets. */
	readonly assets: Assets;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Closes the Library. */
	close(): void;
	/**
	 * Stores the specified object in the library.
	 * @param {any} using - The page item(s) to store. Can accept: 
	 * Array of PageItems, Movies, Sounds, Graphics or XMLElements.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Library (Optional)
	 */
	store(using: any, withProperties: Object): Asset;
	/**
	 * Generates a string which, if executed, will return the 
	 * Library.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Library;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of object libraries.
 * @class
 */
export declare class Libraries {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new object libary.
	 * @param {File} fullName - The library's path and file name.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Library (Optional)
	 */
	add(fullName: File, withProperties: Object): Library;
	/** Displays the number of elements in the Library. */
	count(): number;
	/**
	 * Returns the Library with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Library;
	/**
	 * Returns the Library with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Library;
	/**
	 * Returns the Libraries within the specified range.
	 * @param {any} _from - The Library, index, or name at the 
	 * beginning of the range. Can accept: Library, Long Integer or 
	 * String.
	 * @param {any} to - The Library, index, or name at the end of 
	 * the range. Can accept: Library, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Library;
	/** Returns the first Library in the collection. */
	firstItem(): Library;
	/** Returns the last Library in the collection. */
	lastItem(): Library;
	/** Returns the middle Library in the collection. */
	middleItem(): Library;
	/**
	 * Returns the Library with the index previous to the specified 
	 * index.
	 * @param {Library} obj - The index of the Library that follows 
	 * the desired Library.
	 */
	previousItem(obj: Library): Library;
	/**
	 * Returns the Library whose index follows the specified 
	 * Library in the collection.
	 * @param {Library} obj - The Library whose index comes before 
	 * the desired Library.
	 */
	nextItem(obj: Library): Library;
	/** Returns any Library in the collection. */
	anyItem(): Library;
	/** Returns every Library in the collection. */
	everyItem(): Library;
	/**
	 * Generates a string which, if executed, will return the 
	 * Library.
	 */
	toSource(): string;
	/**
	 * Returns the Library with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Library;
}

/**
 * An object library asset.
 * @class
 */
export declare class Asset {
	/** The date and time the Asset was created. */
	readonly date: Date;
	/** The unique ID of the Asset. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Asset (a Library). */
	readonly parent: Library;
	/** The index of the Asset within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the Asset. */
	name: string;
	/** The description of the Asset. */
	description: string;
	/** The type of object library asset. */
	assetType: AssetType;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Asset. */
	remove(): void;
	/**
	 * Places the asset in the specified document or text.
	 * @param {any} on - The document or text object in which to 
	 * place the asset. Can accept: Document or Text.
	 */
	placeAsset(on: any): any;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Asset in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Asset.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Asset;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of object library assets.
 * @class
 */
export declare class Assets {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Asset. */
	count(): number;
	/**
	 * Returns the Asset with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Asset;
	/**
	 * Returns the Asset with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Asset;
	/**
	 * Returns the Asset with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Asset;
	/**
	 * Returns the Assets within the specified range.
	 * @param {any} _from - The Asset, index, or name at the 
	 * beginning of the range. Can accept: Asset, Long Integer or 
	 * String.
	 * @param {any} to - The Asset, index, or name at the end of 
	 * the range. Can accept: Asset, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Asset;
	/** Returns the first Asset in the collection. */
	firstItem(): Asset;
	/** Returns the last Asset in the collection. */
	lastItem(): Asset;
	/** Returns the middle Asset in the collection. */
	middleItem(): Asset;
	/**
	 * Returns the Asset with the index previous to the specified 
	 * index.
	 * @param {Asset} obj - The index of the Asset that follows the 
	 * desired Asset.
	 */
	previousItem(obj: Asset): Asset;
	/**
	 * Returns the Asset whose index follows the specified Asset in 
	 * the collection.
	 * @param {Asset} obj - The Asset whose index comes before the 
	 * desired Asset.
	 */
	nextItem(obj: Asset): Asset;
	/** Returns any Asset in the collection. */
	anyItem(): Asset;
	/** Returns every Asset in the collection. */
	everyItem(): Asset;
	/**
	 * Generates a string which, if executed, will return the 
	 * Asset.
	 */
	toSource(): string;
	/**
	 * Returns the Asset with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Asset;
}

/**
 * A link to a placed file.
 * @class
 */
export declare class Link {
	/**
	 * Dispatched after a Link is created. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_NEW: string;
	/**
	 * Dispatched before a Link is deleted. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_DELETE: string;
	/**
	 * Dispatched after a Link is deleted. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_DELETE: string;
	/**
	 * Dispatched before a Link is updated. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_UPDATE: string;
	/**
	 * Dispatched after a Link is updated. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_UPDATE: string;
	/**
	 * Dispatched before a Link is embedded. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_EMBED: string;
	/**
	 * Dispatched after a Link is embedded. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_EMBED: string;
	/**
	 * Dispatched before a Link is unembedded. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_UNEMBED: string;
	/**
	 * Dispatched after a Link is unembedded. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_UNEMBED: string;
	/**
	 * Dispatched before a Link is relocated from one object to 
	 * another. This event bubbles. This event is cancelable.
	 */
	readonly BEFORE_MOVE: string;
	/**
	 * Dispatched after a Link is relocated from one object to 
	 * another. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_MOVE: string;
	/**
	 * Dispatched when the value of a property changes on this 
	 * Link. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_ATTRIBUTE_CHANGED: string;
	/** The Version Cue version state of the file. */
	readonly versionState: VersionState;
	/** The Version Cue editing state of the file. */
	readonly editingState: EditingState;
	/** XMP data for the link source file. */
	readonly linkXmp: LinkMetadata;
	/** The index of the link in the links collection. */
	readonly index: number;
	/**
	 * The linked object. Can return: Story, Graphic, Movie or 
	 * Sound.
	 */
	readonly parent: any;
	/** The asset URL of the linked object. */
	readonly assetURL: string;
	/** The asset ID of the linked object. */
	readonly assetID: string;
	/**
	 * If true, indicates the linked object has been edited in the 
	 * current document but the source file has not been updated.
	 */
	readonly edited: boolean;
	/** The name of the Link. */
	readonly name: string;
	/**
	 * If true, indicates a link to a full-resolution version of 
	 * the source file is needed. If false, indicates the object is 
	 * embedded.
	 */
	readonly needed: boolean;
	/** The status of the link. */
	readonly status: LinkStatus;
	/** The file type of the linked object. */
	readonly linkType: string;
	/** The date and time the Link was created. */
	readonly date: Date;
	/** The size of the Link file. */
	readonly size: number;
	/**
	 * The file path (colon delimited on the Mac OS). Can also 
	 * accept: File.
	 */
	readonly filePath: string;
	/** The unique ID of the Link. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of links. */
	readonly links: Links;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Check in to Version Cue.
	 * @param {string} versionComments - The comment for this 
	 * version (Optional)
	 * @param {boolean} forceSave - Forcibly save a version 
	 * (Optional)
	 */
	checkIn(versionComments: string, forceSave?: boolean): void;
	/**
	 * Points the link to a new source file.
	 * @param {any} to - The full path name of the new source file. 
	 * Can accept: File or String.
	 */
	relink(to: any): void;
	/** Embeds the source file in the document. */
	unlink(): void;
	/** Updates the link if the source file has been changed. */
	update(): Link;
	/**
	 * Unembeds the source file. If no folder is specified, creates 
	 * a link to the original source file; if a folder is 
	 * specified, copies the file to the folder and creates a link 
	 * to the copied file.
	 * @param {File} to - The folder to which to copy the 
	 * unembedded file. (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	unembed(to: File, versionComments: string, forceSave?: boolean): void;
	/**
	 * Opens the source file of the link in the default editor for 
	 * the source file type.
	 */
	editOriginal(): void;
	/** Selects the link. */
	show(): void;
	/**
	 * Opens the file system to the folder that contains the source 
	 * file of the link, and selects the file.
	 */
	revealInSystem(): void;
	/** Opens Adobe Bridge and selects the source file of the link. */
	revealInBridge(): void;
	/**
	 * Copies the link file to the specified location.
	 * @param {File} to - The file or folder to which to copy the 
	 * file.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	copyLink(to: File, versionComments: string, forceSave?: boolean): void;
	/**
	 * Opens the source file of the link in InDesign for 
	 * SharedContent links.
	 */
	goToSource(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the Link.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Link;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of links.
 * @class
 */
export declare class Links {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Link. */
	count(): number;
	/**
	 * Returns the Link with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Link;
	/**
	 * Returns the Link with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Link;
	/**
	 * Returns the Link with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Link;
	/**
	 * Returns the Links within the specified range.
	 * @param {any} _from - The Link, index, or name at the 
	 * beginning of the range. Can accept: Link, Long Integer or 
	 * String.
	 * @param {any} to - The Link, index, or name at the end of the 
	 * range. Can accept: Link, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Link;
	/** Returns the first Link in the collection. */
	firstItem(): Link;
	/** Returns the last Link in the collection. */
	lastItem(): Link;
	/** Returns the middle Link in the collection. */
	middleItem(): Link;
	/**
	 * Returns the Link with the index previous to the specified 
	 * index.
	 * @param {Link} obj - The index of the Link that follows the 
	 * desired Link.
	 */
	previousItem(obj: Link): Link;
	/**
	 * Returns the Link whose index follows the specified Link in 
	 * the collection.
	 * @param {Link} obj - The Link whose index comes before the 
	 * desired Link.
	 */
	nextItem(obj: Link): Link;
	/** Returns any Link in the collection. */
	anyItem(): Link;
	/** Returns every Link in the collection. */
	everyItem(): Link;
	/**
	 * Generates a string which, if executed, will return the Link.
	 */
	toSource(): string;
	/**
	 * Returns the Link with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Link;
}

/**
 * MetaData properties for the link source file.
 * @class
 * @extends Preference
 */
export declare class LinkMetadata extends Preference {
	/** The author of the document. */
	readonly author: string;
	/** The description of the LinkMetadata. */
	readonly description: string;
	/** The job name. */
	readonly jobName: string;
	/** The copyright status of the document. */
	readonly copyrightStatus: CopyrightStatus;
	/** The text to use as a copyright notice. */
	readonly copyrightNotice: string;
	/**
	 * The URL of the file that contains the linked copyright 
	 * statement.
	 */
	readonly copyrightInfoURL: string;
	/** The list of keywords associated with the document. */
	readonly keywords: string;
	/**
	 * The location of the document on the asset management server.
	 */
	readonly serverURL: string;
	/** The most recent modification date of the document. */
	readonly modificationDate: Date;
	/** The creation date of the document. */
	readonly creationDate: Date;
	/** The title of the document. */
	readonly documentTitle: string;
	/** The name of the application used to create the document. */
	readonly creator: string;
	/** The format of the document. */
	readonly format: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the LinkMetadata (a Link). */
	readonly parent: Link;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Gets the XMP property value associated with the specified 
	 * path.
	 * @param {string} namespace - The namespace of the property.
	 * @param {string} path - The specified path.
	 */
	getProperty(namespace: string, path: string): string;
	/**
	 * Counts the number of items in the container.
	 * @param {string} namespace - The namespace of the container.
	 * @param {string} path - The path to the container.
	 */
	countContainer(namespace: string, path: string): number;
	/**
	 * Generates a string which, if executed, will return the 
	 * LinkMetadata.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): LinkMetadata;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * An object style.
 * @class
 */
export declare class ObjectStyle {
	/** Export options for the object */
	readonly objectExportOptions: ObjectExportOption;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the 
	 * ObjectStyle.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the ObjectStyle. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** The object effects enabling settings. */
	readonly objectEffectsEnablingSettings: ObjectStyleObjectEffectsCategorySettings;
	/** The stroke effects enabling settings. */
	readonly strokeEffectsEnablingSettings: ObjectStyleStrokeEffectsCategorySettings;
	/** The fill effects enabling settings. */
	readonly fillEffectsEnablingSettings: ObjectStyleFillEffectsCategorySettings;
	/** The content effects enabling settings. */
	readonly contentEffectsEnablingSettings: ObjectStyleContentEffectsCategorySettings;
	/** The unique ID of the ObjectStyle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ObjectStyle (a Document, Application or 
	 * ObjectStyleGroup).
	 */
	readonly parent: any;
	/** The index of the ObjectStyle within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of object style export tag maps. */
	readonly objectStyleExportTagMaps: ObjectStyleExportTagMaps;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** Emit CSS */
	emitCss: boolean;
	/**
	 * If true, the object style will apply auto-sizing text frame 
	 * options.
	 */
	enableTextFrameAutoSizingOptions: boolean;
	/** If true, the object style will apply an epub tag and class. */
	enableExportTagging: boolean;
	/**
	 * If true, the object style will apply alt text export 
	 * options.
	 */
	enableObjectExportAltTextOptions: boolean;
	/**
	 * If true, the object style will apply tagged pdf export 
	 * options.
	 */
	enableObjectExportTaggedPdfOptions: boolean;
	/** If true, the object style will apply epub export options. */
	enableObjectExportEpubOptions: boolean;
	/**
	 * The style that this style is based on. Can return: 
	 * ObjectStyle or String.
	 */
	basedOn: any;
	/** The name of the ObjectStyle. */
	name: string;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * If true, applies paragraph styles using Next Paragraph Style 
	 * settings, beginning with the Next Paragraph Style defined in 
	 * the paragraph style associated with the object style (if 
	 * any).
	 */
	applyNextParagraphStyle: boolean;
	/** If true, the object style will apply a fill. */
	enableFill: boolean;
	/** If true, the object style will apply a stroke. */
	enableStroke: boolean;
	/** If true, the object style will apply a paragraph style. */
	enableParagraphStyle: boolean;
	/**
	 * If true, the object style will apply general text frame 
	 * options.
	 */
	enableTextFrameGeneralOptions: boolean;
	/**
	 * If true, the object style will apply baseline text frame 
	 * options.
	 */
	enableTextFrameBaselineOptions: boolean;
	/** If true, the object style will apply story options. */
	enableStoryOptions: boolean;
	/**
	 * If true, the object style will apply text wrap, contour, and 
	 * non-printing settings.
	 */
	enableTextWrapAndOthers: boolean;
	/**
	 * If true, the object style will apply an anchored object 
	 * setting.
	 */
	enableAnchoredObjectOptions: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the ObjectStyle. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the ObjectStyle's fill color. 
	 * (To specify a tint percent, use a number in the range of 0 
	 * to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the ObjectStyle's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/**
	 * The weight (in points) to apply to the ObjectStyle's stroke.
	 */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the ObjectStyle. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the ObjectStyle. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * If true, the ObjectStyle's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the ObjectStyle. */
	strokeAlignment: StrokeAlignment;
	/** If true, the ObjectStyle does not print. */
	nonprinting: boolean;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * ObjectStyle. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * ObjectStyle. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/** Text frame preference settings. */
	textFramePreferences: TextFramePreference;
	/** Baseline frame grid option settings. */
	baselineFrameGridOptions: BaselineFrameGridOption;
	/** Anchored object settings. */
	anchoredObjectSettings: AnchoredObjectSetting;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	textWrapPreferences: TextWrapPreference;
	/** Story preference settings. */
	storyPreferences: StoryPreference;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/**
	 * The frame fitting option to apply to placed or pasted 
	 * content. Can be applied to a frame, object style, or 
	 * document or to the application.
	 */
	frameFittingOptions: FrameFittingOption;
	/** If true, the object style will apply frame fitting options. */
	enableFrameFittingOptions: boolean;
	/**
	 * If true, the object style will apply stroke options and 
	 * corner options.
	 */
	enableStrokeAndCornerOptions: boolean;
	/** The arrowhead alignment applied to the ObjectStyle. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/**
	 * Enable the text frame footnote options category of object 
	 * style
	 */
	enableTextFrameFootnoteOptions: boolean;
	/** Text frame footnote options settings. */
	textFrameFootnoteOptions: TextFrameFootnoteOptionsObject;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the ObjectStyle. */
	duplicate(): ObjectStyle;
	/**
	 * Moves the ObjectStyle to the specified location.
	 * @param {LocationOptions} to - The new location relative to 
	 * the reference object or within the container object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter is before or after. Can 
	 * accept: ObjectStyle, ObjectStyleGroup, Document or 
	 * Application. (Optional)
	 */
	move(to: LocationOptions, reference: any): ObjectStyle;
	/**
	 * Deletes the style.
	 * @param {ObjectStyle} replacingWith - The style to apply in 
	 * place of the deleted style. (Optional)
	 */
	remove(replacingWith: ObjectStyle): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ObjectStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of object styles.
 * @class
 */
export declare class ObjectStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new ObjectStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ObjectStyle (Optional)
	 */
	add(withProperties: Object): ObjectStyle;
	/** Displays the number of elements in the ObjectStyle. */
	count(): number;
	/**
	 * Returns the ObjectStyle with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ObjectStyle;
	/**
	 * Returns the ObjectStyle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ObjectStyle;
	/**
	 * Returns the ObjectStyle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ObjectStyle;
	/**
	 * Returns the ObjectStyles within the specified range.
	 * @param {any} _from - The ObjectStyle, index, or name at the 
	 * beginning of the range. Can accept: ObjectStyle, Long 
	 * Integer or String.
	 * @param {any} to - The ObjectStyle, index, or name at the end 
	 * of the range. Can accept: ObjectStyle, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): ObjectStyle;
	/** Returns the first ObjectStyle in the collection. */
	firstItem(): ObjectStyle;
	/** Returns the last ObjectStyle in the collection. */
	lastItem(): ObjectStyle;
	/** Returns the middle ObjectStyle in the collection. */
	middleItem(): ObjectStyle;
	/**
	 * Returns the ObjectStyle with the index previous to the 
	 * specified index.
	 * @param {ObjectStyle} obj - The index of the ObjectStyle that 
	 * follows the desired ObjectStyle.
	 */
	previousItem(obj: ObjectStyle): ObjectStyle;
	/**
	 * Returns the ObjectStyle whose index follows the specified 
	 * ObjectStyle in the collection.
	 * @param {ObjectStyle} obj - The ObjectStyle whose index comes 
	 * before the desired ObjectStyle.
	 */
	nextItem(obj: ObjectStyle): ObjectStyle;
	/** Returns any ObjectStyle in the collection. */
	anyItem(): ObjectStyle;
	/** Returns every ObjectStyle in the collection. */
	everyItem(): ObjectStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectStyle.
	 */
	toSource(): string;
	/**
	 * Returns the ObjectStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ObjectStyle;
}

/**
 * A mapping object that maps an object export type to an 
 * export tag.
 * @class
 */
export declare class ObjectStyleExportTagMap {
	/** The type of export. */
	readonly exportType: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ObjectStyleExportTagMap (a ObjectStyle). */
	readonly parent: ObjectStyle;
	/**
	 * The index of the ObjectStyleExportTagMap within its 
	 * containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The tag to map. */
	exportTag: string;
	/** The class to map. */
	exportClass: string;
	/** The attributes to map. */
	exportAttributes: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the ObjectStyleExportTagMap. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectStyleExportTagMap.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ObjectStyleExportTagMap;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of object style export tag maps.
 * @class
 */
export declare class ObjectStyleExportTagMaps {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Create a new mapping
	 * @param {string} exportType - The type of export.
	 * @param {string} exportTag - The tag to map.
	 * @param {string} exportClass - The class to map.
	 * @param {string} exportAttributes - The attributes to map.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ObjectStyleExportTagMap (Optional)
	 */
	add(exportType: string, exportTag: string, exportClass: string, exportAttributes: string, withProperties: Object): ObjectStyleExportTagMap;
	/**
	 * Displays the number of elements in the 
	 * ObjectStyleExportTagMap.
	 */
	count(): number;
	/**
	 * Returns the ObjectStyleExportTagMap with the specified index 
	 * or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ObjectStyleExportTagMap;
	/**
	 * Returns the ObjectStyleExportTagMaps within the specified 
	 * range.
	 * @param {any} _from - The ObjectStyleExportTagMap, index, or 
	 * name at the beginning of the range. Can accept: 
	 * ObjectStyleExportTagMap, Long Integer or String.
	 * @param {any} to - The ObjectStyleExportTagMap, index, or 
	 * name at the end of the range. Can accept: 
	 * ObjectStyleExportTagMap, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): ObjectStyleExportTagMap;
	/**
	 * Returns the first ObjectStyleExportTagMap in the collection.
	 */
	firstItem(): ObjectStyleExportTagMap;
	/** Returns the last ObjectStyleExportTagMap in the collection. */
	lastItem(): ObjectStyleExportTagMap;
	/**
	 * Returns the middle ObjectStyleExportTagMap in the 
	 * collection.
	 */
	middleItem(): ObjectStyleExportTagMap;
	/**
	 * Returns the ObjectStyleExportTagMap with the index previous 
	 * to the specified index.
	 * @param {ObjectStyleExportTagMap} obj - The index of the 
	 * ObjectStyleExportTagMap that follows the desired 
	 * ObjectStyleExportTagMap.
	 */
	previousItem(obj: ObjectStyleExportTagMap): ObjectStyleExportTagMap;
	/**
	 * Returns the ObjectStyleExportTagMap whose index follows the 
	 * specified ObjectStyleExportTagMap in the collection.
	 * @param {ObjectStyleExportTagMap} obj - The 
	 * ObjectStyleExportTagMap whose index comes before the desired 
	 * ObjectStyleExportTagMap.
	 */
	nextItem(obj: ObjectStyleExportTagMap): ObjectStyleExportTagMap;
	/** Returns any ObjectStyleExportTagMap in the collection. */
	anyItem(): ObjectStyleExportTagMap;
	/** Returns every ObjectStyleExportTagMap in the collection. */
	everyItem(): ObjectStyleExportTagMap;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectStyleExportTagMap.
	 */
	toSource(): string;
	/**
	 * Returns the ObjectStyleExportTagMap with the specified 
	 * index.
	 * @param {number} index - The index.
	 */
	[index: number]: ObjectStyleExportTagMap;
}

/**
 * Story preferences.
 * @class
 * @extends Preference
 */
export declare class StoryPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the StoryPreference (a XmlStory, Application, 
	 * Document, Story or ObjectStyle).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, adjust the position of characters at the edges of 
	 * the frame to provide a better appearance.
	 */
	opticalMarginAlignment: boolean;
	/**
	 * The point size used as the basis for calculating optical 
	 * margin alignment. (Range: 0.1 to 1296)
	 */
	opticalMarginSize: number|string;
	/** The direction of the story. */
	storyDirection: StoryDirectionOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * StoryPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): StoryPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Text frame preferences.
 * @class
 * @extends Preference
 */
export declare class TextFramePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextFramePreference (a Application, 
	 * Document, TextFrame or ObjectStyle).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The number of columns in the text frame. Note: Depending on 
	 * the value of use fixed column width, the number of columns 
	 * can change automatically when the text frame size changes.
	 */
	textColumnCount: number;
	/** The space between columns in the text frame. */
	textColumnGutter: number|string;
	/** The column width of the columns in the text frame. */
	textColumnFixedWidth: number|string;
	/**
	 * If true, maintains column width when the text frame is 
	 * resized. If false, causes columns to resize when the text 
	 * frame is resized. Note: When true, resizing the frame can 
	 * change the number of columns in the frame.
	 */
	useFixedColumnWidth: boolean;
	/**
	 * The amount to offset text from the edges of the text frame, 
	 * specified either as a single value applied uniformly to all 
	 * sides of the text frame or as an array of 4 values in the 
	 * format [top inset, left inset, bottom inset, right inset]. 
	 * Can return: Unit (0 - 8640 points) or Array of 4 Units (0 - 
	 * 8640 points).
	 */
	insetSpacing: any;
	/**
	 * The distance between the baseline of the text and the top 
	 * inset of the text frame or cell.
	 */
	firstBaselineOffset: FirstBaseline;
	/**
	 * The minimum distance between the baseline of the text and 
	 * the top inset of the text frame or cell.
	 */
	minimumFirstBaselineOffset: number|string;
	/** The vertical alignment of the text content. */
	verticalJustification: VerticalJustification;
	/**
	 * The maximum amount of vertical space between two paragraphs. 
	 * Note: Valid only when vertical justification is justified; 
	 * the specified amount is applied in addition to the space 
	 * before or space after values defined for the paragraph.
	 */
	verticalThreshold: number|string;
	/**
	 * If true, ignores text wrap settings for drawn or placed 
	 * objects in the text frame.
	 */
	ignoreWrap: boolean;
	/**
	 * If true, maintains column width between a min and max range 
	 * when the text frame is resized. If false, causes columns to 
	 * resize when the text frame is resized. Note: When true, 
	 * resizing the frame can change the number of columns in the 
	 * frame.
	 */
	useFlexibleColumnWidth: boolean;
	/**
	 * The maximum column width of the columns in the text frame. 
	 * Use 0 to indicate no upper limit.
	 */
	textColumnMaxWidth: number|string;
	/**
	 * Auto-sizing type of text frame. Based on type, reference 
	 * value is automatically adjusted. For example, for height 
	 * only type, top-left reference point becomes top-center. 
	 * Recommended to change auto-sizing type, after setting other 
	 * auto-sizing attributes
	 */
	autoSizingType: AutoSizingTypeEnum;
	/**
	 * The reference point for auto sizing of text frame. Reference 
	 * point is automatically adjusted to the suitable value 
	 * depending on the auto-sizing type value. As an example, top 
	 * left reference point becomes top center for height only 
	 * dimension
	 */
	autoSizingReferencePoint: AutoSizingReferenceEnum;
	/**
	 * If true, minimum height value is used during the auto-sizing 
	 * of text frame.
	 */
	useMinimumHeightForAutoSizing: boolean;
	/** The minimum height for auto-sizing of the text frame. */
	minimumHeightForAutoSizing: number|string;
	/**
	 * If true, minimum width value is used during the auto-sizing 
	 * of text frame.
	 */
	useMinimumWidthForAutoSizing: boolean;
	/** The minimum width for auto-sizing of the text frame. */
	minimumWidthForAutoSizing: number|string;
	/** If true, line-breaks are not introduced after auto sizing. */
	useNoLineBreaksForAutoSizing: boolean;
	/** Vertically justify balanced across all columns. */
	verticalBalanceColumns: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextFramePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextFramePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Text preferences.
 * @class
 * @extends Preference
 */
export declare class TextPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, converts straight quotes to typographic quotes. */
	typographersQuotes: boolean;
	/**
	 * If true, highlights hyphenation and justification rule 
	 * violations in the text.
	 */
	highlightHjViolations: boolean;
	/** If true, highlights paragraphs that violate keep options. */
	highlightKeeps: boolean;
	/** If true, highlights substituted glyphs. */
	highlightSubstitutedGlyphs: boolean;
	/** If true, highlights custom kerned or tracked characters. */
	highlightCustomSpacing: boolean;
	/** If true, highlights missing fonts. */
	highlightSubstitutedFonts: boolean;
	/** If true, automatically selects the correct optical size. */
	useOpticalSize: boolean;
	/**
	 * If true, applies the leading changes made to a text range to 
	 * the entire paragraph. If false, applies leading changes only 
	 * to the text range.
	 */
	useParagraphLeading: boolean;
	/**
	 * The size of superscript characters, specified as a 
	 * percentage of the font size. (Range: 0 to 200)
	 */
	superscriptSize: number;
	/**
	 * The position of superscript characters, specified as a 
	 * percentage of the regular leading. (Range: -500 to 500)
	 */
	superscriptPosition: number;
	/**
	 * The size of subscript characters, specified as a percentage 
	 * of the font size. (Range: 0 to 200)
	 */
	subscriptSize: number;
	/**
	 * The position of subscript characters, specified as a 
	 * percentage of the regular leading. (Range: -500 to 500)
	 */
	subscriptPosition: number;
	/**
	 * The size of text formatted as small caps, specified as a 
	 * percentage of the font size. (Range: 1 to 200)
	 */
	smallCap: number;
	/**
	 * The amount that leading increases each time the user presses 
	 * the option/alt-up arrow keys or decreases each time the user 
	 * presses the option/alt-down arrow keys. (Range: .001 to 100)
	 */
	leadingKeyIncrement: number|string;
	/**
	 * The amount that the baseline shift increases each time the 
	 * user presses the option/alt-shift-up arrow keys or decreases 
	 * each time the user presses the option/alt-shift-down arrow 
	 * keys. (Range: .001 to 100)
	 */
	baselineShiftKeyIncrement: number|string;
	/**
	 * The amount the kerning value per 1000 ems increases each 
	 * time the user presses of the option/alt-right arrow keys or 
	 * decreases each time the user presses the option/alt-left 
	 * arrow keys. (Range: 1 to 100)
	 */
	kerningKeyIncrement: number;
	/** If true, shows hidden characters. */
	showInvisibles: boolean;
	/** If true, justifies text around text wrap objects. */
	justifyTextWraps: boolean;
	/**
	 * If true, moves wrapped text to the next available leading 
	 * increment below the text wrap objects (skip by leading).
	 */
	abutTextToTextWrap: boolean;
	/**
	 * If true, text wrap does not affect text on layers above the 
	 * layer that contains the text wrap object. If false, text 
	 * wrap affects text on all visible layers.
	 */
	zOrderTextWrap: boolean;
	/**
	 * If true, links placed text files and spreadsheet files. If 
	 * false, embeds the files.
	 */
	linkTextFilesWhenImporting: boolean;
	/** If true, uses on-screen highlighting to identify kinsoku. */
	highlightKinsoku: boolean;
	/**
	 * If true, Japanese composer treats quotes as half width and 
	 * rotates them in vertical.
	 */
	quoteCharactersRotatedInVertical: boolean;
	/**
	 * If true, reverses X and Y scaling on Roman characters in 
	 * vertical text.
	 */
	useNewVerticalScaling: boolean;
	/**
	 * If true, uses the glyph CID to get the mojikumi class of the 
	 * character.
	 */
	useCidMojikumi: boolean;
	/**
	 * If true, highlights character and paragraph styles with 
	 * colored backgrounds.
	 */
	enableStylePreviewMode: boolean;
	/**
	 * If true, enable automatic adding and deleting of pages in 
	 * response to text reflow.
	 */
	smartTextReflow: boolean;
	/**
	 * Specifies where to insert new pages in response to overset 
	 * text.
	 */
	addPages: AddPageOptions;
	/**
	 * Restrict the adding of pages during smart text reflow to 
	 * overridden master text frames.
	 */
	limitToMasterTextFrames: boolean;
	/**
	 * Preserve left-hand and right-and pages when facing pages are 
	 * enabled during smart text reflow.
	 */
	preserveFacingPageSpreads: boolean;
	/**
	 * Enable auto-deletion of pages containing empty threaded text 
	 * frames.
	 */
	deleteEmptyPages: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Text defaults.
 * @class
 * @extends Preference
 */
export declare class TextDefault extends Preference {
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TextDefault (a Application or Document). */
	readonly parent: any;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/**
	 * The font applied to the TextDefault, specified as either a 
	 * font object or the name of font family. Can return: Font or 
	 * String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the TextDefault. */
	horizontalScale: number;
	/** The vertical scaling applied to the TextDefault. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the TextDefault. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * TextDefault. (To specify a tint percentage, use a number in 
	 * the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * TextDefault. (To specify a tint percentage, use a number in 
	 * the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the TextDefault. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the TextDefault. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** The named grid in use. */
	appliedNamedGrid: NamedGrid;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextDefault.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextDefault;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Document preferences.
 * @class
 * @extends Preference
 */
export declare class DocumentPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the DocumentPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The height of the page. */
	pageHeight: number|string;
	/** The width of the page. */
	pageWidth: number|string;
	/** The page orientation. */
	pageOrientation: PageOrientation;
	/**
	 * The color of the column guides, specified either as an array 
	 * of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values,, or as a UI color. Can 
	 * return: Array of 3 Reals (0 - 255) or UIColors enumerator.
	 */
	columnGuideColor: any;
	/**
	 * The color of the margin guides, specified either as an array 
	 * of three doubles, each in the range 0 to 255, representing 
	 * R, G, and B values, or as a UI color. Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator.
	 */
	marginGuideColor: any;
	/**
	 * If true, the document A-master has primary text frames when 
	 * a new document is created.
	 */
	createPrimaryTextFrame: boolean;
	/** The number of pages in the document. (Range: 1 to 9999) */
	pagesPerDocument: number;
	/** If true, the document has facing pages. */
	facingPages: boolean;
	/** The amount to offset the top document bleed. */
	documentBleedTopOffset: number|string;
	/**
	 * The amount to offset the bottom document bleed. Note: To set 
	 * the bleed bottom offset, document bleed uniform size must be 
	 * false.
	 */
	documentBleedBottomOffset: number|string;
	/**
	 * The amount to offset the inside or left document bleed. 
	 * Note: To set the bleed inside or left offset, document bleed 
	 * uniform size must be false.
	 */
	documentBleedInsideOrLeftOffset: number|string;
	/**
	 * The amount to offset the outside or right document bleed. 
	 * Note: To set the bleed outside or right offset, document 
	 * bleed uniform size must be false.
	 */
	documentBleedOutsideOrRightOffset: number|string;
	/**
	 * If true, uses the document bleed top offset value for bleed 
	 * offset measurements on all sides of the document. The 
	 * default setting is true.
	 */
	documentBleedUniformSize: boolean;
	/** The amount to offset the top slug. */
	slugTopOffset: number|string;
	/**
	 * The amount to offset the bottom slug. Note: To set the slug 
	 * bottom offset, document slug uniform size must be false.
	 */
	slugBottomOffset: number|string;
	/**
	 * The amount to offset the inside or left slug. Note: To set 
	 * the slug inside or left offset, document slug uniform size 
	 * must be false.
	 */
	slugInsideOrLeftOffset: number|string;
	/**
	 * The amount to offset the outside or right slug. Note: To set 
	 * the slug right or outside offset, document slug uniform size 
	 * must be false.
	 */
	slugRightOrOutsideOffset: number|string;
	/**
	 * If true, uses the slug top offset value for slug 
	 * measurements on all sides of the document. The default value 
	 * is false.
	 */
	documentSlugUniformSize: boolean;
	/**
	 * If true, preserves the layout of spreads that contained more 
	 * than two pages when allow page shuffle was turned on. If 
	 * false, changes multi-page spreads to two-page spreads if the 
	 * spreads were created or changed since allow page shuffle was 
	 * turned on.
	 */
	preserveLayoutWhenShuffling: boolean;
	/**
	 * If true, guarantees that when pages are added to a spread it 
	 * will contain a maximum of two pages. If false, allows pages 
	 * to be added or moved into existing spreads. For override 
	 * information, see preserve layout when shuffling.
	 */
	allowPageShuffle: boolean;
	/** If true, overprints black when saving the document. */
	overprintBlack: boolean;
	/** If true, locks column guides. */
	columnGuideLocked: boolean;
	/**
	 * The starting page number for a document. This is the same as 
	 * the starting page number for the first section of a 
	 * document. Default value is 1.
	 */
	startPageNumber: number;
	/** The intent for a document. */
	intent: DocumentIntentOptions;
	/** The placement of the page binding. */
	pageBinding: PageBindingOptions;
	/** The direction of text in the column. */
	columnDirection: HorizontalOrVertical;
	/** The size of the page. */
	pageSize: string;
	/**
	 * If true, causes UI-based snippet import to use original 
	 * location for page items.
	 */
	snippetImportUsesOriginalLocation: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DocumentPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DocumentPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Grid preferences.
 * @class
 * @extends Preference
 */
export declare class GridPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GridPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, displays the document grid. */
	documentGridShown: boolean;
	/**
	 * If true, an object snaps to the nearest grid line when the 
	 * object is created, moved, or resized.
	 */
	documentGridSnapto: boolean;
	/**
	 * The amount of space between major horizontal lines in the 
	 * document grid.
	 */
	horizontalGridlineDivision: number|string;
	/**
	 * The amount of space between major vertical lines in the 
	 * document grid.
	 */
	verticalGridlineDivision: number|string;
	/**
	 * The number of rows into which to subdivide the space between 
	 * horizontal document grid lines.
	 */
	horizontalGridSubdivision: number;
	/**
	 * The number of columns into which to subdivide the space 
	 * between vertical document grid lines.
	 */
	verticalGridSubdivision: number;
	/**
	 * The color of the document grid, specified either as an array 
	 * of three doubles, each in the range 0 to 255, representing 
	 * R, G, and B values, or as a UI color. Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator.
	 */
	gridColor: any;
	/**
	 * If true, places grids behind all other objects on the 
	 * spread.
	 */
	gridsInBack: boolean;
	/** If true, displays the baseline grid. */
	baselineGridShown: boolean;
	/** The amount to offset the baseline grid from the zero point. */
	baselineStart: number|string;
	/** The amount of space between baseline grid lines. */
	baselineDivision: number|string;
	/**
	 * The magnification (as a percentage) less than which ruler 
	 * guides do not appear. (Range: 5 to 4000)
	 */
	baselineViewThreshold: number;
	/**
	 * The color of the baseline grid, specified either as an array 
	 * of three doubles, each in the range 0 to 255, representing 
	 * R, G, and B values, or as a UI color. . Can return: Array of 
	 * 3 Reals (0 - 255) or UIColors enumerator.
	 */
	baselineColor: any;
	/** The zero point for the baseline grid offset. */
	baselineGridRelativeOption: BaselineGridRelativeOption;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GridPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GridPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Guide preferences.
 * @class
 * @extends Preference
 */
export declare class GuidePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GuidePreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, places guides behind all other objects on the 
	 * spread.
	 */
	guidesInBack: boolean;
	/** If true, displays the guides. */
	guidesShown: boolean;
	/** If true, guides cannot be moved, added, or deleted. */
	guidesLocked: boolean;
	/**
	 * If true, an object within the specified range snaps to the 
	 * nearest guide when the object is created, moved, or resized. 
	 * For range information, see guide snapto zone.
	 */
	guidesSnapto: boolean;
	/**
	 * The magnification (as a percentage) less than which ruler 
	 * guides do not appear. (Range: 5 to 4000)
	 */
	rulerGuidesViewThreshold: number;
	/**
	 * The color of the guide, specified either as an array of 
	 * three doubles, each in the range 0 to 255 and representing 
	 * R, G, and B values, or as a UI color. . Can return: Array of 
	 * 3 Reals (0 - 255) or UIColors enumerator.
	 */
	rulerGuidesColor: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GuidePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GuidePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Margin preferences.
 * @class
 * @extends Preference
 */
export declare class MarginPreference extends Preference {
	/**
	 * If false, columns are evenly spaced. If true, columns can 
	 * have custom widths.
	 */
	readonly customColumns: boolean;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MarginPreference (a Application, Document 
	 * or Page).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The number of columns to place on the page. */
	columnCount: number;
	/** The distance between columns. */
	columnGutter: number|string;
	/** The top edge of the MarginPreference. */
	top: number|string;
	/** The bottom edge of the MarginPreference. */
	bottom: number|string;
	/** The left edge of the MarginPreference. */
	left: number|string;
	/** The right edge of the MarginPreference. */
	right: number|string;
	/** The direction of text in the column. */
	columnDirection: HorizontalOrVertical;
	/**
	 * The distance that each column guide is placed from the left 
	 * margin, formatted as an array in the format [guide1, guide2, 
	 * guide3].
	 */
	columnsPositions: number|string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * MarginPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MarginPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Pasteboard preferences.
 * @class
 * @extends Preference
 */
export declare class PasteboardPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PasteboardPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The minimum horizontal and vertical pasteboard margins. A 
	 * horizontal margin of -1 means one document page width
	 */
	pasteboardMargins: number|string;
	/**
	 * The color of the preview background, specified either as an 
	 * array of three doubles, each in the range 0 to 255, 
	 * representing R, G, and B values, or as a UI color. Can 
	 * return: Array of 3 Reals (0 - 255) or UIColors enumerator.
	 */
	previewBackgroundColor: any;
	/**
	 * The color of bleed guides, specified either as an array of 
	 * three doubles, each in the range 0 to 255, representing R, 
	 * G, and B values, or as a UI color. Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator.
	 */
	bleedGuideColor: any;
	/**
	 * The color of slug guides, specified either as an array of 
	 * three doubles, each in the range 0 to 255, representing R, 
	 * G, and B values, or as a UI color. Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator.
	 */
	slugGuideColor: any;
	/**
	 * If true, match the Preview Background color to Theme Color, 
	 * else use the color-value specified in Preview Background 
	 * color drop down.
	 */
	matchPreviewBackgroundToThemeColor: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PasteboardPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PasteboardPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * View preferences.
 * @class
 * @extends Preference
 */
export declare class ViewPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ViewPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The number of points per inch, typically 72. (Range: 60 to 
	 * 80)
	 */
	pointsPerInch: number;
	/**
	 * The distance (in points) between major tick marks on the 
	 * horizontal ruler. (Range: 4 to 256) Valid only when 
	 * horizontal measurement units is custom.
	 */
	horizontalCustomPoints: number;
	/**
	 * The distance (in points) between major tick marks on the 
	 * vertical ruler. (Range: 4 to 256) Valid only when vertical 
	 * measurement units is custom.
	 */
	verticalCustomPoints: number;
	/** The measurement unit for stroke measurements. */
	strokeMeasurementUnits: MeasurementUnits;
	/**
	 * The range (in pixels) within which an object snaps to 
	 * guides. (Range: 1 to 36) Note: Snapping occurs only when 
	 * guides are shown.
	 */
	guideSnaptoZone: number;
	/**
	 * The distance to move a specified object when an arrow key is 
	 * pressed. (Range depends on the measurement unit. For points: 
	 * 0.001 to 100; picas: 0p0.001 to 8p4; mm: 0 to 35.278; cm: 0 
	 * to 3.5278; inches: 0 to 1.3889; ciceros: 0c0.001 to 7c9.839)
	 */
	cursorKeyIncrement: number|string;
	/**
	 * The measurement unit for the horizontal ruler and other 
	 * horizontally-measured spaces such as grid columns, 
	 * horizontal offsets, column gutters, or others.
	 */
	horizontalMeasurementUnits: MeasurementUnits;
	/**
	 * The measurement unit for the vertical ruler and other 
	 * vertically-measured spaces such as grid rows, vertical 
	 * offsets, row heights, or others.
	 */
	verticalMeasurementUnits: MeasurementUnits;
	/**
	 * The default zero point at the intersection of the vertical 
	 * and horizontal rulers and the scope of the horizontal ruler.
	 */
	rulerOrigin: RulerOrigin;
	/** If true, displays the horizontal and vertical rulers. */
	showRulers: boolean;
	/**
	 * If true, displays borders of unselected frames and the 
	 * diagonal lines in empty unselected frames.
	 */
	showFrameEdges: boolean;
	/** The measurement units for typography. */
	typographicMeasurementUnits: MeasurementUnits;
	/** The measurement unit for text size measurements. */
	textSizeMeasurementUnits: MeasurementUnits;
	/** The measurement unit for the print dialog. */
	printDialogMeasurementUnits: MeasurementUnits;
	/** If true, notes are displayed. */
	showNotes: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ViewPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ViewPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A preset that contains all of the new document settings.
 * @class
 */
export declare class DocumentPreset {
	/** The unique ID of the DocumentPreset. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DocumentPreset (a Application). */
	readonly parent: Application;
	/**
	 * The index of the DocumentPreset within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the DocumentPreset. */
	name: string;
	/** The number of pages in the document. (Range: 1 to 9999) */
	pagesPerDocument: number;
	/** If true, the document has facing pages. */
	facingPages: boolean;
	/** The height of the page. */
	pageHeight: number|string;
	/** The width of the page. */
	pageWidth: number|string;
	/** The page orientation. */
	pageOrientation: PageOrientation;
	/** The number of columns to place on the page. */
	columnCount: number;
	/** The distance between columns. */
	columnGutter: number|string;
	/** The top edge of the DocumentPreset. */
	top: number|string;
	/** The bottom edge of the DocumentPreset. */
	bottom: number|string;
	/** The left edge of the DocumentPreset. */
	left: number|string;
	/** The right edge of the DocumentPreset. */
	right: number|string;
	/**
	 * The amount to offset the inside or left document bleed. 
	 * Note: To set the bleed inside or left offset, document bleed 
	 * uniform size must be false.
	 */
	documentBleedInsideOrLeftOffset: number|string;
	/** The amount to offset the top document bleed. */
	documentBleedTopOffset: number|string;
	/**
	 * The amount to offset the outside or right document bleed. 
	 * Note: To set the bleed outside or right offset, document 
	 * bleed uniform size must be false.
	 */
	documentBleedOutsideOrRightOffset: number|string;
	/**
	 * The amount to offset the bottom document bleed. Note: To set 
	 * the bleed bottom offset, document bleed uniform size must be 
	 * false.
	 */
	documentBleedBottomOffset: number|string;
	/**
	 * The amount to offset the inside or left slug. Note: To set 
	 * the slug inside or left offset, document slug uniform size 
	 * must be false.
	 */
	slugInsideOrLeftOffset: number|string;
	/** The amount to offset the top slug. */
	slugTopOffset: number|string;
	/**
	 * The amount to offset the outside or right slug. Note: To set 
	 * the slug right or outside offset, document slug uniform size 
	 * must be false.
	 */
	slugRightOrOutsideOffset: number|string;
	/**
	 * The amount to offset the bottom slug. Note: To set the slug 
	 * bottom offset, document slug uniform size must be false.
	 */
	slugBottomOffset: number|string;
	/**
	 * If true, the document A-master has primary text frames when 
	 * a new document is created.
	 */
	createPrimaryTextFrame: boolean;
	/**
	 * The starting page number for a document. This is the same as 
	 * the starting page number for the first section of a 
	 * document. Default value is 1.
	 */
	startPageNumber: number;
	/** The intent for a document. */
	intent: DocumentIntentOptions;
	/**
	 * If true, uses the document bleed top offset value for bleed 
	 * offset measurements on all sides of the document. The 
	 * default setting is true.
	 */
	documentBleedUniformSize: boolean;
	/**
	 * If true, uses the slug top offset value for slug 
	 * measurements on all sides of the document. The default value 
	 * is false.
	 */
	documentSlugUniformSize: boolean;
	/** The size of the page. */
	pageSize: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the DocumentPreset. */
	remove(): void;
	/** Duplicates the DocumentPreset. */
	duplicate(): DocumentPreset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * DocumentPreset.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DocumentPreset;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of document presets.
 * @class
 */
export declare class DocumentPresets {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new DocumentPreset.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new DocumentPreset (Optional)
	 */
	add(withProperties: Object): DocumentPreset;
	/** Displays the number of elements in the DocumentPreset. */
	count(): number;
	/**
	 * Returns the DocumentPreset with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DocumentPreset;
	/**
	 * Returns the DocumentPreset with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): DocumentPreset;
	/**
	 * Returns the DocumentPreset with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): DocumentPreset;
	/**
	 * Returns the DocumentPresets within the specified range.
	 * @param {any} _from - The DocumentPreset, index, or name at 
	 * the beginning of the range. Can accept: DocumentPreset, Long 
	 * Integer or String.
	 * @param {any} to - The DocumentPreset, index, or name at the 
	 * end of the range. Can accept: DocumentPreset, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): DocumentPreset;
	/** Returns the first DocumentPreset in the collection. */
	firstItem(): DocumentPreset;
	/** Returns the last DocumentPreset in the collection. */
	lastItem(): DocumentPreset;
	/** Returns the middle DocumentPreset in the collection. */
	middleItem(): DocumentPreset;
	/**
	 * Returns the DocumentPreset with the index previous to the 
	 * specified index.
	 * @param {DocumentPreset} obj - The index of the 
	 * DocumentPreset that follows the desired DocumentPreset.
	 */
	previousItem(obj: DocumentPreset): DocumentPreset;
	/**
	 * Returns the DocumentPreset whose index follows the specified 
	 * DocumentPreset in the collection.
	 * @param {DocumentPreset} obj - The DocumentPreset whose index 
	 * comes before the desired DocumentPreset.
	 */
	nextItem(obj: DocumentPreset): DocumentPreset;
	/** Returns any DocumentPreset in the collection. */
	anyItem(): DocumentPreset;
	/** Returns every DocumentPreset in the collection. */
	everyItem(): DocumentPreset;
	/**
	 * Generates a string which, if executed, will return the 
	 * DocumentPreset.
	 */
	toSource(): string;
	/**
	 * Returns the DocumentPreset with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: DocumentPreset;
}

/**
 * Print preferences.
 * @class
 * @extends Preference
 */
export declare class PrintPreference extends Preference {
	/** If true, doing pdf passthrough. */
	readonly pdfPassthrough: boolean;
	/** Available printers. */
	readonly printerList: string;
	/** Available PPDs. */
	readonly ppdList: string;
	/** A list of the available paper sizes. */
	readonly paperSizeList: string;
	/**
	 * Lists the ink screenings available in the PPD. Note: Valid 
	 * only when color output is separations or in rip separations.
	 */
	readonly screeningList: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PrintPreference (a Book or Document). */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The current printer. Can return: Printer enumerator or 
	 * String.
	 */
	printer: any;
	/**
	 * The PPD, specified as a PPD name or an enumeration. Can 
	 * return: PPDValues enumerator or String.
	 */
	ppd: any;
	/**
	 * The PostScript file to print to. Note: Valid only when the 
	 * current printer is defined as postscript file.
	 */
	printFile: File;
	/**
	 * The number of copies to print. Note: Not valid when printer 
	 * is PostScript File.
	 */
	copies: number;
	/** If true, collate printed copies. */
	collating: boolean;
	/** If true, prints pages in reverse order. */
	reverseOrder: boolean;
	/** The sequence of pages to print. */
	sequence: Sequences;
	/**
	 * If true, prints each spread with all spread pages on a 
	 * single sheet. If false, prints spread pages as separate 
	 * pages.
	 */
	printSpreads: boolean;
	/** If true, prints master pages. */
	printMasterPages: boolean;
	/**
	 * If true, prints non-printing objects. Note: Valid only when 
	 * trapping is off.
	 */
	printNonprinting: boolean;
	/**
	 * If true, prints blank pages. Note: Valid only when trapping 
	 * is off.
	 */
	printBlankPages: boolean;
	/**
	 * If true, prints visible guides and baseline grids. Note: 
	 * Valid only when trapping is off.
	 */
	printGuidesGrids: boolean;
	/**
	 * The paper size, specified as either a string or an 
	 * enumeration. For information on paper size names, see paper 
	 * size list. Can return: PaperSizes enumerator or String.
	 */
	paperSize: any;
	/**
	 * The paper height. Note: Valid only when paper size is custom 
	 * or scale mode is scale width height. Can return: PaperSize 
	 * enumerator or Unit.
	 */
	paperHeight: any;
	/**
	 * The paper width. Note: Valid only when paper size is custom 
	 * or scale mode is scale width height. Can return: PaperSize 
	 * enumerator or Unit.
	 */
	paperWidth: any;
	/**
	 * The amount of space to offset the page from the left edge of 
	 * the imageable area.
	 */
	paperOffset: number|string;
	/** The space between document pages on the printing medium. */
	paperGap: number|string;
	/** If true, uses transverse orientation. */
	paperTransverse: boolean;
	/** The orientation of the printed page. */
	printPageOrientation: PrintPageOrientation;
	/**
	 * The position of the page on the printing medium. Note: Valid 
	 * only when tile is false.
	 */
	pagePosition: PagePositions;
	/**
	 * The policy for scaling the page. Note: Valid only when 
	 * printing from Layout view.
	 */
	scaleMode: ScaleModes;
	/**
	 * The amount (as a percentage)  that the page width is scaled 
	 * during printing. (Range: 0 to 1000) Note: Valid only when 
	 * scale mode is scale width height.
	 */
	scaleWidth: number;
	/**
	 * The amount (as a percentage) that the page height is scaled 
	 * during printing. (Range: 0 to 1000) Note: Valid only when 
	 * scale mode is scale width height.
	 */
	scaleHeight: number;
	/**
	 * If true, constrains the proportions of the scaling; uses the 
	 * most recent value for either scale width or scale height to 
	 * define both values. Note: Valid only when scale mode is 
	 * scale width height.
	 */
	scaleProportional: boolean;
	/**
	 * If true, prints thumbnails. Note: Valid only when trapping 
	 * is off and tile is false.
	 */
	thumbnails: boolean;
	/** The number of thumbnails per page. */
	thumbnailsPerPage: ThumbsPerPage;
	/** If true, tiles pages. */
	tile: boolean;
	/** The tiling type. Note: Valid only when tiling is true. */
	tilingType: TilingTypes;
	/**
	 * The amount of tiling overlap. Note: Valid only when tiling 
	 * is true and tiling type is not manual.
	 */
	tilingOverlap: number;
	/**
	 * If true, prints all printer marks. If false, prints 
	 * specified printer marks.
	 */
	allPrinterMarks: boolean;
	/**
	 * Prints crop marks that define where the page should be 
	 * trimmed.
	 */
	cropMarks: boolean;
	/** If true, print bleed marks. */
	bleedMarks: boolean;
	/**
	 * If true, prints small targets outside the page area for 
	 * aligning color separations.
	 */
	registrationMarks: boolean;
	/**
	 * If true, add small squares of color representing the CMYK 
	 * inks and tints of gray in 10% increments.
	 */
	colorBars: boolean;
	/**
	 * If true, prints the filename, page number, current date and 
	 * time, and color separation name.
	 */
	pageInformationMarks: boolean;
	/**
	 * The type of printer marks, either an enum value or the name 
	 * of a custom marks file. Can return: MarkTypes enumerator or 
	 * String.
	 */
	markType: any;
	/** The stroke weight (in points) for printer marks. */
	markLineWeight: MarkLineWeight;
	/**
	 * The distance to offset the page marks from the edge of the 
	 * page.
	 */
	markOffset: number|string;
	/** If true, uses the bleed area set for the document. */
	useDocumentBleedToPrint: boolean;
	/**
	 * The height of the bleed area at the top of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedTop: number|string;
	/**
	 * The height of the bleed area at the bottom of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number|string;
	/**
	 * The width of the bleed area at the inside of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedInside: number|string;
	/**
	 * The width of the bleed area at the outside of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number|string;
	/** If true, includes the slug area in the printed document. */
	includeSlugToPrint: boolean;
	/**
	 * The color output mode for composites. Note: Not valid when a 
	 * device-independent PPD is specified.
	 */
	colorOutput: ColorOutputModes;
	/**
	 * If true, prints all text as black unless text has the color 
	 * None or Paper or a color value that equals white. If false, 
	 * prints colored text, such as blue hyperlinks, in halftone 
	 * patterns. Note: Valid only when trapping is off.
	 */
	textAsBlack: boolean;
	/** The type of trapping. */
	trapping: Trapping;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/** If true, prints the document as a negative. */
	negative: boolean;
	/**
	 * The ink screening settings for composite gray output in 
	 * PostScript or PDF format. . Can return: Screeening 
	 * enumerator or String.
	 */
	screening: any;
	/**
	 * The screen angle to use when printing composites. (Range: 0 
	 * to 360) Note: Valid only for PostScript or PDF files that 
	 * use custom screening.
	 */
	compositeAngle: number;
	/**
	 * The screen frequency to use when printing composites. 
	 * (Range: 1 to 500) Note: Valid only for PostScript or PDF 
	 * files that use custom screening.
	 */
	compositeFrequency: number;
	/**
	 * If true, simulates the effects of overprinting spot inks 
	 * with different neutral density values by converting spot 
	 * colors to process colors for printing. Note: Not valid when 
	 * the color output mode is defined to leave color profiles 
	 * unchanged.
	 */
	simulateOverprint: boolean;
	/**
	 * If true, prints the cyan ink. Note: Valid only when trapping 
	 * is off.
	 */
	printCyan: boolean;
	/** The angle override for cyan ink. (Range: 0 to 360) */
	cyanAngle: number;
	/** The frequency override for cyan ink. (Range: 1 to 500) */
	cyanFrequency: number;
	/**
	 * If true, prints the magenta ink. Note: Valid only when 
	 * trapping is off.
	 */
	printMagenta: boolean;
	/** The angle override for magenta ink. (Range: 0 to 360) */
	magentaAngle: number;
	/** The frequency override for magenta ink. (Range: 1 to 500) */
	magentaFrequency: number;
	/**
	 * If true, prints the yellow ink. Note: Valid only when 
	 * trapping is off.
	 */
	printYellow: boolean;
	/** The angle override for yellow ink. (Range: 0 to 360) */
	yellowAngle: number;
	/** The frequency override for yellow ink. (Range: 1 to 500) */
	yellowFrequency: number;
	/**
	 * If true, prints the black ink. Note: Valid only when 
	 * trapping is off.
	 */
	printBlack: boolean;
	/** The angle override for black ink. (Range: 0 to 360) */
	blackAngle: number;
	/** The frequency override for black ink. (Range: 1 to 500) */
	blackFrequency: number;
	/** The image data sent to the printer or file. */
	sendImageData: ImageDataTypes;
	/** Controls how fonts are downloaded to the printer. */
	fontDownloading: FontDownloading;
	/**
	 * If true, downloads all fonts listed in the selected PPD. 
	 * Valid only when font downloading is complete or subset.
	 */
	downloadPPDFonts: boolean;
	/** The PostScript level of the printer. */
	postscriptLevel: PostScriptLevels;
	/** The format in which to send image data to the printer. */
	dataFormat: DataFormat;
	/**
	 * The source of the color management system. Note: Valid only 
	 * when use color management is true.
	 */
	sourceSpace: SourceSpaces;
	/**
	 * The color profile. Can return: Profile enumerator or String.
	 */
	profile: any;
	/**
	 * The color-rendering dictionary (CRD), specified as a CRD 
	 * name or an enumeration value. Note: Valid only when use 
	 * color management is true. Can return: 
	 * ColorRenderingDictionary enumerator or String.
	 */
	crd: any;
	/**
	 * The rendering intent. Note: Valid only when use color 
	 * management is true.
	 */
	intent: RenderingIntent;
	/**
	 * If true, prints graphics that are either OPI comments stored 
	 * in imported EPS files or linked using OPI comments. For 
	 * information on linking files using OPI comments, see omit 
	 * EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean;
	/** If true, replaces EPS images with OPI links. */
	omitEPS: boolean;
	/** If true, replaces PDF images with OPI links. */
	omitPDF: boolean;
	/** If true, replaces bitmap images with OPI links. */
	omitBitmaps: boolean;
	/** The name of the transparency flattener preset. */
	flattenerPresetName: string;
	/** If true, ignores flattener spread overrides. */
	ignoreSpreadOverrides: boolean;
	/**
	 * The pages to print, specified either as an enumeration or a 
	 * string. To specify a range, separate page numbers in the 
	 * string with a hyphen (-). To specify separate pages, 
	 * separate page numbers in the string with a comma (,). Can 
	 * return: PageRange enumerator or String.
	 */
	pageRange: any;
	/**
	 * If true, forces all bleed area settings to be the same, 
	 * using the most recent bleed measurement setting. If false, 
	 * allows bleed top, bleed bottom, bleed inside, and bleed 
	 * outside to have different measurements.
	 */
	bleedChain: boolean;
	/** If true, preserves uncalibrated color numbers. */
	preserveColorNumbers: boolean;
	/** If true, uses bitmap printing. */
	bitmapPrinting: boolean;
	/**
	 * The resolution for bitmap printing. (Range: 72 to 1200) 
	 * Note: Valid when bitmap printing is true.
	 */
	bitmapResolution: number;
	/** The layers to print. */
	printLayers: PrintLayerOptions;
	/**
	 * The current printer preset type. Can return: 
	 * PrinterPresetTypes enumerator or PrinterPreset.
	 */
	activePrinterPreset: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PrintPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PrintPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Print booklet options.
 * @class
 * @extends Preference
 */
export declare class PrintBookletOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PrintBookletOption (a Document). */
	readonly parent: Document;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The pages to print, specified either as an enumeration or a 
	 * string. To specify a range, separate page numbers in the 
	 * string with a hyphen (-). To specify separate pages, 
	 * separate page numbers in the string with a comma (,). Can 
	 * return: PageRange enumerator or String.
	 */
	pageRange: any;
	/** The type of booklet. */
	bookletType: BookletTypeOptions;
	/** The amount of space between pages. */
	spaceBetweenPages: number|string;
	/** The amount of bleed between pages. */
	bleedBetweenPages: number|string;
	/**
	 * The amount of creep (binding adjustment based on paper 
	 * thickness) to add.
	 */
	creep: number|string;
	/** The signature size of booklet (for perfect binding). */
	signatureSize: SignatureSizeOptions;
	/** Top margin of the printed booklet. */
	topMargin: number|string;
	/** Bottom margin of the printed booklet. */
	bottomMargin: number|string;
	/** Left margin of the printed booklet. */
	leftMargin: number|string;
	/** Right margin of the printed booklet. */
	rightMargin: number|string;
	/**
	 * If true, automatically adjust margins to fit the specified 
	 * printer's marks and bleed area.
	 */
	autoAdjustMargins: boolean;
	/** If true, make all margins equal to the top margin. */
	marginsUniformSize: boolean;
	/** If true, print blank spreads. */
	printBlankPrinterSpreads: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PrintBookletOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PrintBookletOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Print booklet preferences.
 * @class
 * @extends Preference
 */
export declare class PrintBookletPrintPreference extends Preference {
	/** If true, doing pdf passthrough. */
	readonly pdfPassthrough: boolean;
	/** Available printers. */
	readonly printerList: string;
	/** Available PPDs. */
	readonly ppdList: string;
	/** A list of the available paper sizes. */
	readonly paperSizeList: string;
	/**
	 * Lists the ink screenings available in the PPD. Note: Valid 
	 * only when color output is separations or in rip separations.
	 */
	readonly screeningList: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PrintBookletPrintPreference (a Document). */
	readonly parent: Document;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The current printer. Can return: Printer enumerator or 
	 * String.
	 */
	printer: any;
	/**
	 * The PPD, specified as a PPD name or an enumeration. Can 
	 * return: PPDValues enumerator or String.
	 */
	ppd: any;
	/**
	 * The PostScript file to print to. Note: Valid only when the 
	 * current printer is defined as postscript file.
	 */
	printFile: File;
	/**
	 * The number of copies to print. Note: Not valid when printer 
	 * is PostScript File.
	 */
	copies: number;
	/** If true, collate printed copies. */
	collating: boolean;
	/** If true, prints pages in reverse order. */
	reverseOrder: boolean;
	/**
	 * If true, prints non-printing objects. Note: Valid only when 
	 * trapping is off.
	 */
	printNonprinting: boolean;
	/**
	 * If true, prints blank pages. Note: Valid only when trapping 
	 * is off.
	 */
	printBlankPages: boolean;
	/**
	 * If true, prints visible guides and baseline grids. Note: 
	 * Valid only when trapping is off.
	 */
	printGuidesGrids: boolean;
	/**
	 * The paper size, specified as either a string or an 
	 * enumeration. For information on paper size names, see paper 
	 * size list. Can return: PaperSizes enumerator or String.
	 */
	paperSize: any;
	/**
	 * The paper height. Note: Valid only when paper size is custom 
	 * or scale mode is scale width height. Can return: PaperSize 
	 * enumerator or Unit.
	 */
	paperHeight: any;
	/**
	 * The paper width. Note: Valid only when paper size is custom 
	 * or scale mode is scale width height. Can return: PaperSize 
	 * enumerator or Unit.
	 */
	paperWidth: any;
	/**
	 * The amount of space to offset the page from the left edge of 
	 * the imageable area.
	 */
	paperOffset: number|string;
	/** The space between document pages on the printing medium. */
	paperGap: number|string;
	/** If true, uses transverse orientation. */
	paperTransverse: boolean;
	/** The orientation of the printed page. */
	printPageOrientation: PrintPageOrientation;
	/**
	 * The position of the page on the printing medium. Note: Valid 
	 * only when tile is false.
	 */
	pagePosition: PagePositions;
	/**
	 * The policy for scaling the page. Note: Valid only when 
	 * printing from Layout view.
	 */
	scaleMode: ScaleModes;
	/**
	 * The amount (as a percentage)  that the page width is scaled 
	 * during printing. (Range: 0 to 1000) Note: Valid only when 
	 * scale mode is scale width height.
	 */
	scaleWidth: number;
	/**
	 * The amount (as a percentage) that the page height is scaled 
	 * during printing. (Range: 0 to 1000) Note: Valid only when 
	 * scale mode is scale width height.
	 */
	scaleHeight: number;
	/**
	 * If true, constrains the proportions of the scaling; uses the 
	 * most recent value for either scale width or scale height to 
	 * define both values. Note: Valid only when scale mode is 
	 * scale width height.
	 */
	scaleProportional: boolean;
	/** The layers to print. */
	printLayers: PrintLayerOptions;
	/**
	 * If true, prints all printer marks. If false, prints 
	 * specified printer marks.
	 */
	allPrinterMarks: boolean;
	/**
	 * Prints crop marks that define where the page should be 
	 * trimmed.
	 */
	cropMarks: boolean;
	/** If true, print bleed marks. */
	bleedMarks: boolean;
	/**
	 * If true, prints small targets outside the page area for 
	 * aligning color separations.
	 */
	registrationMarks: boolean;
	/**
	 * If true, add small squares of color representing the CMYK 
	 * inks and tints of gray in 10% increments.
	 */
	colorBars: boolean;
	/**
	 * If true, prints the filename, page number, current date and 
	 * time, and color separation name.
	 */
	pageInformationMarks: boolean;
	/**
	 * The type of printer marks, either an enum value or the name 
	 * of a custom marks file. Can return: MarkTypes enumerator or 
	 * String.
	 */
	markType: any;
	/** The stroke weight (in points) for printer marks. */
	markLineWeight: MarkLineWeight;
	/**
	 * The distance to offset the page marks from the edge of the 
	 * page.
	 */
	markOffset: number|string;
	/** If true, uses the bleed area set for the document. */
	useDocumentBleedToPrint: boolean;
	/**
	 * The height of the bleed area at the top of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedTop: number|string;
	/**
	 * The height of the bleed area at the bottom of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number|string;
	/**
	 * The width of the bleed area at the inside of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedInside: number|string;
	/**
	 * The width of the bleed area at the outside of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number|string;
	/**
	 * If true, forces all bleed area settings to be the same, 
	 * using the most recent bleed measurement setting. If false, 
	 * allows bleed top, bleed bottom, bleed inside, and bleed 
	 * outside to have different measurements.
	 */
	bleedChain: boolean;
	/**
	 * The color output mode for composites. Note: Not valid when a 
	 * device-independent PPD is specified.
	 */
	colorOutput: ColorOutputModes;
	/**
	 * If true, prints all text as black unless text has the color 
	 * None or Paper or a color value that equals white. If false, 
	 * prints colored text, such as blue hyperlinks, in halftone 
	 * patterns. Note: Valid only when trapping is off.
	 */
	textAsBlack: boolean;
	/** The type of trapping. */
	trapping: Trapping;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/** If true, prints the document as a negative. */
	negative: boolean;
	/**
	 * The ink screening settings for composite gray output in 
	 * PostScript or PDF format. . Can return: Screeening 
	 * enumerator or String.
	 */
	screening: any;
	/**
	 * The screen angle to use when printing composites. (Range: 0 
	 * to 360) Note: Valid only for PostScript or PDF files that 
	 * use custom screening.
	 */
	compositeAngle: number;
	/**
	 * The screen frequency to use when printing composites. 
	 * (Range: 1 to 500) Note: Valid only for PostScript or PDF 
	 * files that use custom screening.
	 */
	compositeFrequency: number;
	/**
	 * If true, simulates the effects of overprinting spot inks 
	 * with different neutral density values by converting spot 
	 * colors to process colors for printing. Note: Not valid when 
	 * the color output mode is defined to leave color profiles 
	 * unchanged.
	 */
	simulateOverprint: boolean;
	/**
	 * If true, prints the cyan ink. Note: Valid only when trapping 
	 * is off.
	 */
	printCyan: boolean;
	/** The angle override for cyan ink. (Range: 0 to 360) */
	cyanAngle: number;
	/** The frequency override for cyan ink. (Range: 1 to 500) */
	cyanFrequency: number;
	/**
	 * If true, prints the magenta ink. Note: Valid only when 
	 * trapping is off.
	 */
	printMagenta: boolean;
	/** The angle override for magenta ink. (Range: 0 to 360) */
	magentaAngle: number;
	/** The frequency override for magenta ink. (Range: 1 to 500) */
	magentaFrequency: number;
	/**
	 * If true, prints the yellow ink. Note: Valid only when 
	 * trapping is off.
	 */
	printYellow: boolean;
	/** The angle override for yellow ink. (Range: 0 to 360) */
	yellowAngle: number;
	/** The frequency override for yellow ink. (Range: 1 to 500) */
	yellowFrequency: number;
	/**
	 * If true, prints the black ink. Note: Valid only when 
	 * trapping is off.
	 */
	printBlack: boolean;
	/** The angle override for black ink. (Range: 0 to 360) */
	blackAngle: number;
	/** The frequency override for black ink. (Range: 1 to 500) */
	blackFrequency: number;
	/** The image data sent to the printer or file. */
	sendImageData: ImageDataTypes;
	/** Controls how fonts are downloaded to the printer. */
	fontDownloading: FontDownloading;
	/**
	 * If true, downloads all fonts listed in the selected PPD. 
	 * Valid only when font downloading is complete or subset.
	 */
	downloadPPDFonts: boolean;
	/** The PostScript level of the printer. */
	postscriptLevel: PostScriptLevels;
	/** The format in which to send image data to the printer. */
	dataFormat: DataFormat;
	/**
	 * The source of the color management system. Note: Valid only 
	 * when use color management is true.
	 */
	sourceSpace: SourceSpaces;
	/**
	 * The color profile. Can return: Profile enumerator or String.
	 */
	profile: any;
	/**
	 * The color-rendering dictionary (CRD), specified as a CRD 
	 * name or an enumeration value. Note: Valid only when use 
	 * color management is true. Can return: 
	 * ColorRenderingDictionary enumerator or String.
	 */
	crd: any;
	/**
	 * The rendering intent. Note: Valid only when use color 
	 * management is true.
	 */
	intent: RenderingIntent;
	/** If true, preserves uncalibrated color numbers. */
	preserveColorNumbers: boolean;
	/**
	 * If true, prints graphics that are either OPI comments stored 
	 * in imported EPS files or linked using OPI comments. For 
	 * information on linking files using OPI comments, see omit 
	 * EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean;
	/** If true, replaces EPS images with OPI links. */
	omitEPS: boolean;
	/** If true, replaces PDF images with OPI links. */
	omitPDF: boolean;
	/** If true, replaces bitmap images with OPI links. */
	omitBitmaps: boolean;
	/** The name of the transparency flattener preset. */
	flattenerPresetName: string;
	/** If true, ignores flattener spread overrides. */
	ignoreSpreadOverrides: boolean;
	/** If true, uses bitmap printing. */
	bitmapPrinting: boolean;
	/**
	 * The resolution for bitmap printing. (Range: 72 to 1200) 
	 * Note: Valid when bitmap printing is true.
	 */
	bitmapResolution: number;
	/**
	 * The current printer preset type. Can return: 
	 * PrinterPresetTypes enumerator or PrinterPreset.
	 */
	activePrinterPreset: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PrintBookletPrintPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PrintBookletPrintPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * EPS export preferences.
 * @class
 * @extends Preference
 */
export declare class EPSExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the EPSExportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The height of the bleed area at the bottom of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number|string;
	/**
	 * The width of the bleed area at the inside of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedInside: number|string;
	/**
	 * The width of the bleed area at the outside of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number|string;
	/**
	 * The height of the bleed area at the top of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedTop: number|string;
	/** The color space for representing color in the exported EPS. */
	epsColor: EPSColorSpace;
	/** The format in which to send image data to the printer. */
	dataFormat: DataFormat;
	/** The transparency flattener preset to use. */
	appliedFlattenerPreset: FlattenerPreset;
	/** Controls how fonts are embedded in the exported EPS. */
	fontEmbedding: FontEmbedding;
	/** If true, ignores flattener spread overrides. */
	ignoreSpreadOverrides: boolean;
	/** If true, replaces bitmap images with OPI links. */
	omitBitmaps: boolean;
	/** If true, replaces EPS images with OPI links. */
	omitEPS: boolean;
	/** If true, replaces PDF images with OPI links. */
	omitPDF: boolean;
	/**
	 * If true, prints graphics that are either OPI comments stored 
	 * in imported EPS files or linked using OPI comments. For 
	 * information on linking files using OPI comments, see omit 
	 * EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean;
	/**
	 * The pages to print, specified either as an enumeration or a 
	 * string. To specify a range, separate page numbers in the 
	 * string with a hyphen (-). To specify separate pages, 
	 * separate page numbers in the string with a comma (,). Can 
	 * return: PageRange enumerator or String.
	 */
	pageRange: any;
	/**
	 * The file format of the preview image saved with the exported 
	 * EPS file.
	 */
	preview: PreviewTypes;
	/** The PostScript level of the printer. */
	postscriptLevel: PostScriptLevels;
	/**
	 * If true, exports facing pages as a single page that has the 
	 * width of the spread. If false, exports spread pages as 
	 * separate pages.
	 */
	epsSpreads: boolean;
	/** The image data to export to the EPS document. */
	imageData: EPSImageData;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * EPSExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): EPSExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Tool box tools
 * @class
 * @extends Preference
 */
export declare class ToolBox extends Preference {
	/**
	 * Dispatched when the value of a property changes on this 
	 * ToolBox. This event bubbles. This event is not cancelable.
	 */
	readonly AFTER_ATTRIBUTE_CHANGED: string;
	/** The currently active tool's name. */
	readonly currentToolName: string;
	/** The currently active tool's hint. */
	readonly currentToolHint: string;
	/** The currently active tool's icon resource file. */
	readonly currentToolIconFile: File;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ToolBox (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The currently active tool. */
	currentTool: UITools;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ToolBox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ToolBox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Image preferences.
 * @class
 * @extends Preference
 */
export declare class ImagePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ImagePreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, preserve image bounds when relinking. */
	preserveBounds: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ImagePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ImagePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Image I/O preferences.
 * @class
 * @extends Preference
 */
export declare class ImageIOPreference extends Preference {
	/**
	 * The image resolution in ppi, set when the graphic is 
	 * imported.
	 */
	readonly previewResolution: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ImageIOPreference (a Application or 
	 * Image).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, applies clipping paths defined in Photoshop to 
	 * placed images.
	 */
	applyPhotoshopClippingPath: boolean;
	/** If true, allows auto embedding. */
	allowAutoEmbedding: boolean;
	/** The name of the alpha channel. */
	alphaChannelName: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ImageIOPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ImageIOPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Clipping path settings.
 * @class
 * @extends Preference
 */
export declare class ClippingPathSettings extends Preference {
	/** A list of the clipping paths stored in the graphic. */
	readonly photoshopPathNames: string;
	/** A list of the alpha channels stored in the graphic. */
	readonly alphaChannelPathNames: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ClippingPathSettings (a Image, EPS, WMF, 
	 * PICT, PDF or ImportedPage).
	 */
	readonly parent: any;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The clipping path type. */
	clippingType: ClippingPathType;
	/** If true, inverts the clipping path. */
	invertPath: boolean;
	/**
	 * If true, creates interior clipping paths within the 
	 * surrounding clipping path. Note: Valid only when clipping 
	 * type is alpha channel or detect edges.
	 */
	includeInsideEdges: boolean;
	/**
	 * If true, truncates the clipping path at the edge of the 
	 * frame containing the graphic. Note: Valid only when clipping 
	 * type is alpha channel or detect edges.
	 */
	restrictToFrame: boolean;
	/**
	 * If true, uses the high-resolution version of the graphic to 
	 * create the clipping path. If false, calculates the clipping 
	 * path based on screen-display resolution. Note: Valid only 
	 * when clipping type is detect edges.
	 */
	useHighResolutionImage: boolean;
	/**
	 * The lowest value (darkest) pixel to allow in the image. All 
	 * pixels in the image whose values are greater than (lighter 
	 * than) the threshold value are clipped (obscured). (Range: 0 
	 * to 255) Note: Valid only when clipping type is detect edges 
	 * or alpha channel.
	 */
	threshold: number;
	/**
	 * Specifies how similar a pixel's intensity value can be to 
	 * the threshold value before the pixel is obscured by the 
	 * clipping path. (Range: 0 to 10) Note: Valid only when 
	 * clipping type is detect edges or alpha channel.
	 */
	tolerance: number;
	/**
	 * Shrinks the area enclosed by the clipping path by the 
	 * specified amount. (Range depends on the unit. For points: 
	 * -10000 to 10000; picas: -833p4 to 833p4; inches: -138.8889 
	 * to 138.8889; mm: -3527.778 to 3527.778; cm: -352.7778 to 
	 * 352.7778; ciceros: -781c11.889 to 781c11.889)
	 */
	insetFrame: number|string;
	/**
	 * The name of the Photoshop path or alpha channel to use as a 
	 * clipping path.
	 */
	appliedPathName: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Converts the clipping path to a frame. */
	convertToFrame(): PageItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * ClippingPathSettings.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ClippingPathSettings;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Graphic layer option.
 * @class
 * @extends Preference
 */
export declare class GraphicLayerOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GraphicLayerOption (a Image, PDF or 
	 * ImportedPage).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of graphic layers. */
	readonly graphicLayers: GraphicLayers;
	/**
	 * Options for updating a graphic link after the visibility 
	 * settings for the graphic layer have been modified in a 
	 * different application.
	 */
	updateLinkOption: UpdateLinkOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GraphicLayerOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GraphicLayerOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A layer in a PSD image or PDF file.
 * @class
 */
export declare class GraphicLayer {
	/** The name of the GraphicLayer. */
	readonly name: string;
	/**
	 * Returns the visibility setting set for the layer before the 
	 * graphic file was imported. Note: Must occur in the script 
	 * before overriding the visibility state with a current 
	 * visibility statement.
	 */
	readonly originalVisibility: boolean;
	/** If true, the layer is a separator layer. */
	readonly separatorLayer: boolean;
	/**
	 * If true, the layer is an adjustment layer. Note: Must occur 
	 * in the script before overriding the visibility state of the 
	 * layer with a current visibility statement.
	 */
	readonly adjustmentLayer: boolean;
	/**
	 * If true, layer effects have been applied to the layer. Note: 
	 * Must occur in the script before overriding the visibility 
	 * state of the layer with a current visibility statement.
	 */
	readonly fxLayer: boolean;
	/** If true, the GraphicLayer is locked. */
	readonly locked: boolean;
	/** If true, the layer is a section divider layer. */
	readonly sectionDividerLayer: boolean;
	/** If true, the layer has a view state. */
	readonly hasViewState: boolean;
	/** If true, the view state is on. */
	readonly viewState: boolean;
	/** If true, the layer has an export state. */
	readonly hasExportState: boolean;
	/** If true, the export state is on. */
	readonly exportState: boolean;
	/** If true, the layer has a print state. */
	readonly hasPrintState: boolean;
	/** If true, the print state is on. */
	readonly printState: boolean;
	/** The unique ID of the GraphicLayer. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GraphicLayer (a GraphicLayerOption or 
	 * GraphicLayer).
	 */
	readonly parent: any;
	/** The index of the GraphicLayer within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of graphic layers. */
	readonly graphicLayers: GraphicLayers;
	/** If true, the layer is visible in the document. */
	currentVisibility: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GraphicLayer.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GraphicLayer;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of graphic layers.
 * @class
 */
export declare class GraphicLayers {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the GraphicLayer. */
	count(): number;
	/**
	 * Returns the GraphicLayer with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): GraphicLayer;
	/**
	 * Returns the GraphicLayer with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): GraphicLayer;
	/**
	 * Returns the GraphicLayer with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): GraphicLayer;
	/**
	 * Returns the GraphicLayers within the specified range.
	 * @param {any} _from - The GraphicLayer, index, or name at the 
	 * beginning of the range. Can accept: GraphicLayer, Long 
	 * Integer or String.
	 * @param {any} to - The GraphicLayer, index, or name at the 
	 * end of the range. Can accept: GraphicLayer, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): GraphicLayer;
	/** Returns the first GraphicLayer in the collection. */
	firstItem(): GraphicLayer;
	/** Returns the last GraphicLayer in the collection. */
	lastItem(): GraphicLayer;
	/** Returns the middle GraphicLayer in the collection. */
	middleItem(): GraphicLayer;
	/**
	 * Returns the GraphicLayer with the index previous to the 
	 * specified index.
	 * @param {GraphicLayer} obj - The index of the GraphicLayer 
	 * that follows the desired GraphicLayer.
	 */
	previousItem(obj: GraphicLayer): GraphicLayer;
	/**
	 * Returns the GraphicLayer whose index follows the specified 
	 * GraphicLayer in the collection.
	 * @param {GraphicLayer} obj - The GraphicLayer whose index 
	 * comes before the desired GraphicLayer.
	 */
	nextItem(obj: GraphicLayer): GraphicLayer;
	/** Returns any GraphicLayer in the collection. */
	anyItem(): GraphicLayer;
	/** Returns every GraphicLayer in the collection. */
	everyItem(): GraphicLayer;
	/**
	 * Generates a string which, if executed, will return the 
	 * GraphicLayer.
	 */
	toSource(): string;
	/**
	 * Returns the GraphicLayer with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: GraphicLayer;
}

/**
 * Input method editor (IME) preferences.
 * @class
 * @extends Preference
 */
export declare class IMEPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the IMEPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, allows inline input for non-Latin text. */
	inlineInput: boolean;
	/** If true, use native digits for Arabic languages. */
	useNativeDigits: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * IMEPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): IMEPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * PDF export settings for the application object.
 * @class
 * @extends Preference
 */
export declare class PDFExportPreference extends Preference {
	/**
	 * Effective destination color profile. Can return: 
	 * PDFProfileSelector enumerator or String.
	 */
	readonly effectivePDFDestinationProfile: any;
	/** Effective PDF/X OC Registry. */
	readonly effectiveOCRegistry: string;
	/** Effective PDF/X output condition. */
	readonly effectiveOutputCondition: string;
	/**
	 * Effective PDF X color profile. Can return: 
	 * PDFProfileSelector enumerator or String.
	 */
	readonly effectivePDFXProfile: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PDFExportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The export PDF magnification options. */
	pdfMagnification: PdfMagnificationOptions;
	/** The export PDF page layout. */
	pdfPageLayout: PageLayoutOptions;
	/** Open PDF in full screen mode. */
	openInFullScreen: boolean;
	/** The export PDF display title. */
	pdfDisplayTitle: PdfDisplayTitleOptions;
	/**
	 * Sets the default document language in the exported PDF. The 
	 * correct ISO code of the language must be provided.
	 */
	defaultDocumentLanguage: string;
	/**
	 * The pages to print, specified either as an enumeration or a 
	 * string. To specify a range, separate page numbers in the 
	 * string with a hyphen (-). To specify separate pages, 
	 * separate page numbers in the string with a comma (,). Can 
	 * return: PageRange enumerator or String.
	 */
	pageRange: any;
	/** If true, activates security controls for the PDF document. */
	useSecurity: boolean;
	/**
	 * The password to enter when opening the PDF document. Valid 
	 * only when use security is true. Note: A script can set but 
	 * not get this value.
	 */
	openDocumentPassword: string;
	/**
	 * Changes the open document password to the specified string. 
	 * Valid only when use security is true. Note: A script can set 
	 * but not get this value.
	 */
	changeSecurityPassword: string;
	/**
	 * If true, users cannot print the PDF document. Valid only 
	 * when use security is true.
	 */
	disallowPrinting: boolean;
	/**
	 * If true, users cannot fill in forms, sign, extract pages, or 
	 * add comments in the PDF document. Valid only when use 
	 * security is true.
	 */
	disallowChanging: boolean;
	/**
	 * If true, users cannot copy and paste text, images, or other 
	 * content from the PDF document. Valid only when use security 
	 * is true.
	 */
	disallowCopying: boolean;
	/**
	 * If true, users cannot add or change notes, edit text, or 
	 * fill in form fields in the PDF document. Valid only when use 
	 * security is true.
	 */
	disallowNotes: boolean;
	/**
	 * If true, users cannot change form fields in the PDF 
	 * document. Valid only when use security is true.
	 */
	disallowFormFillIn: boolean;
	/**
	 * If true, users cannot extract content from the PDF document 
	 * using software tools for the visually impaired. Valid only 
	 * when use security is true.
	 */
	disallowExtractionForAccessibility: boolean;
	/**
	 * If true, users cannot insert, delete, or rotate pages in the 
	 * PDF document. Valid only when use security is true.
	 */
	disallowDocumentAssembly: boolean;
	/**
	 * If true, users cannot print high-resolution copies of the 
	 * PDF document. Valid only when use security is true.
	 */
	disallowHiResPrinting: boolean;
	/**
	 * If true and acrobat compatibility is Acrobat 6 or higher, 
	 * storage systems and search engines cannot access metadata 
	 * stored in the PDF document. If true and acrobat 
	 * compatibility is acrobat 5 or higher, users cannot copy and 
	 * extract content from the document. Valid only when use 
	 * security is true.
	 */
	disallowPlaintextMetadata: boolean;
	/** If true, automatically opens the PDF file after exporting. */
	viewPDF: boolean;
	/**
	 * Sets the threshold for embedding complete fonts based on how 
	 * many of the fonts' characters are used in the document. If 
	 * the percentage of characters used in the document for any 
	 * given font exceeds the specified value, the font is 
	 * completely embedded; otherwise, the font is subsetted. 
	 * (Range: 0 to 100) Notes: Embedding complete fonts increases 
	 * file size. To completely embed all fonts, use 0 (zero).
	 */
	subsetFontsBelow: number;
	/**
	 * The color space to use to represent color information in the 
	 * exported PDF document.
	 */
	pdfColorSpace: PDFColorSpace;
	/**
	 * The ICC Profiles to include in the exported PDF document. 
	 * Can also accept: Boolean.
	 */
	includeICCProfiles: ICCProfiles;
	/** If true, replaces EPS images with OPI links. */
	omitEPS: boolean;
	/** If true, replaces PDF images with OPI links. */
	omitPDF: boolean;
	/** If true, replaces bitmap images with OPI links. */
	omitBitmaps: boolean;
	/**
	 * If true, image data that falls outside the visible portion 
	 * of an image's frame is not exported to the PDF document.
	 */
	cropImagesToFrames: boolean;
	/**
	 * If true, generates thumbnail images for each page or spread.
	 */
	generateThumbnails: boolean;
	/**
	 * If true, optimizes the exported PDF document for faster 
	 * viewing in a web browser. Note: Compresses text and line 
	 * art, regardless of specified compression settings.
	 */
	optimizePDF: boolean;
	/**
	 * If true, creates a tagged PDF file. Note: If acrobat 
	 * compatibility is acrobat 6 or higher, tags are visible only 
	 * when the PDF is opened in Acrobat 6 or higher.
	 */
	includeStructure: boolean;
	/** The exported PDF document's Acrobat compatibility. */
	acrobatCompatibility: AcrobatCompatibility;
	/**
	 * If true, simulates the effects of overprinting spot inks 
	 * with different neutral density values by converting spot 
	 * colors to process colors for printing. Note: Not valid when 
	 * the color output mode is defined to leave color profiles 
	 * unchanged.
	 */
	simulateOverprint: boolean;
	/**
	 * The gamut of the final RGB or CMYK device. Can return: 
	 * PDFProfileSelector enumerator or String.
	 */
	pdfDestinationProfile: any;
	/**
	 * The PDF X color profile to use for the PDF document. . Can 
	 * return: PDFProfileSelector enumerator or String.
	 */
	pdfXProfile: any;
	/** If true, includes hyperlinks when exporting the document. */
	includeHyperlinks: boolean;
	/**
	 * If true, displays bookmarks and table of contents entries as 
	 * links in the bookmarks pane in the PDF document. If false, 
	 * no bookmarks are exported.
	 */
	includeBookmarks: boolean;
	/**
	 * If true, makes non-printing objects visible in the PDF 
	 * document.
	 */
	exportNonprintingObjects: boolean;
	/**
	 * If true, includes visible guides and baseline grids in the 
	 * PDF document.
	 */
	exportGuidesAndGrids: boolean;
	/**
	 * If true, saves each layer as an Acrobat layer within the PDF 
	 * document.
	 */
	exportLayers: boolean;
	/** The PDF/X standards compliance to test against. */
	standardsCompliance: PDFXStandards;
	/**
	 * The name of the intended printing condition. Valid only when 
	 * a PDF/X compliance standard has been defined for the 
	 * document. Not valid when PDF/X-3 is the compliance standard 
	 * or PDF export preset. For information on compliance 
	 * standards, see standards compliance and PDF X standards.
	 */
	outputCondition: string;
	/**
	 * The sampling option to apply to color bitmap images in the 
	 * PDF document.
	 */
	colorBitmapSampling: Sampling;
	/** The ppi of the resampled image. (Range: 9 to 2400) */
	colorBitmapSamplingDPI: number;
	/** The amount of bitmap compression to use. */
	colorBitmapCompression: BitmapCompression;
	/** The compression option to apply to color images. */
	colorBitmapQuality: CompressionQuality;
	/** The sampling option to apply to grayscale bitmap images. */
	grayscaleBitmapSampling: Sampling;
	/** The ppi of the resampled image. (Range: 9 to 2400) */
	grayscaleBitmapSamplingDPI: number;
	/**
	 * The bitmap compression option to apply to grayscale bitmap 
	 * images.
	 */
	grayscaleBitmapCompression: BitmapCompression;
	/** The compression option to apply to grayscale bitmap images. */
	grayscaleBitmapQuality: CompressionQuality;
	/** The sampling option to apply to monochrome bitmap images. */
	monochromeBitmapSampling: Sampling;
	/** The ppi of the resampled image. (Range: 9 to 2400) */
	monochromeBitmapSamplingDPI: number;
	/**
	 * The bitmap compression option to apply to monochrome bitmap 
	 * images.
	 */
	monochromeBitmapCompression: MonoBitmapCompression;
	/**
	 * If true, compresses text and line art using ZIP compression.
	 */
	compressTextAndLineArt: boolean;
	/**
	 * The minimum dpi at which color compression is applied. 
	 * (Range: 1 to 10 times the value specified for color bitmap 
	 * sampling DPI.)
	 */
	thresholdToCompressColor: number;
	/**
	 * The minimum dpi at which grayscale compression is applied. 
	 * (Range: 1 to 10 times the value specified for grayscale 
	 * bitmap sampling DPI.)
	 */
	thresholdToCompressGray: number;
	/**
	 * The minimum dpi at which monochrome compression is applied. 
	 * (Range: 1 to 10 times the value specified for monochrome 
	 * bitmap sampling DPI.)
	 */
	thresholdToCompressMonochrome: number;
	/**
	 * The tile size for color images. Valid only when color bitmap 
	 * compression is JPEG 2000. (Range: 128 to 2048)
	 */
	colorTileSize: number;
	/**
	 * The tile size for grayscale images. Valid only when 
	 * grayscale bitmap compression is JPEG 2000. (Range: 128 to 
	 * 2048)
	 */
	grayTileSize: number;
	/** The objects to compress in the PDF document. */
	compressionType: PDFCompressionType;
	/**
	 * If true, each spread in the exported document is combined 
	 * into a single page that has spread's original width.
	 */
	exportReaderSpreads: boolean;
	/** The offset from the edge of the page for page marks. */
	pageMarksOffset: number|string;
	/**
	 * Prints crop marks that define where the page should be 
	 * trimmed.
	 */
	cropMarks: boolean;
	/**
	 * If true, prints the filename, page number, current date and 
	 * time, and color separation name.
	 */
	pageInformationMarks: boolean;
	/** If true, print bleed marks. */
	bleedMarks: boolean;
	/**
	 * If true, add small squares of color representing the CMYK 
	 * inks and tints of gray in 10% increments.
	 */
	colorBars: boolean;
	/**
	 * If true, prints small targets outside the page area for 
	 * aligning color separations.
	 */
	registrationMarks: boolean;
	/** The stroke weight for printer's marks. */
	printerMarkWeight: PDFMarkWeight;
	/**
	 * The height of the bleed area at the top of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedTop: number|string;
	/**
	 * The width of the bleed area at the inside of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedInside: number|string;
	/**
	 * The height of the bleed area at the bottom of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number|string;
	/**
	 * The width of the bleed area at the outside of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number|string;
	/**
	 * The type of printer marks, either an enum value or the name 
	 * of a custom marks file. Can return: MarkTypes enumerator or 
	 * String.
	 */
	pdfMarkType: any;
	/**
	 * If true, uses the document's bleed settings in the PDF 
	 * document.
	 */
	useDocumentBleedWithPDF: boolean;
	/**
	 * If true, includes the document's slug area in the PDF 
	 * document.
	 */
	includeSlugWithPDF: boolean;
	/** If true, ignores flattener spread overrides. */
	ignoreSpreadOverrides: boolean;
	/** The transparency flattener preset to use. */
	appliedFlattenerPreset: FlattenerPreset;
	/**
	 * The name of the output condition. Valid only when a PDF/X 
	 * standard has been defined for the document.
	 */
	outputConditionName: string;
	/**
	 * The web address for the output condition registry. Not valid 
	 * when PDF/X-3 is the compliance standard or PDF export 
	 * preset.
	 */
	ocRegistry: string;
	/** How to draw interactive elements. */
	interactiveElementsOption: InteractiveElementsOptions;
	/** Which layers to export. */
	exportWhichLayers: ExportLayerOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PDFExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PDFExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * PDF export settings for the document object.
 * @class
 */
export declare class PDFExportPreset {
	/**
	 * The full path to the PDFExportPreset, including the name of 
	 * the PDFExportPreset.
	 */
	readonly fullName: File;
	/**
	 * Effective destination color profile. Can return: 
	 * PDFProfileSelector enumerator or String.
	 */
	readonly effectivePDFDestinationProfile: any;
	/** Effective PDF/X OC Registry. */
	readonly effectiveOCRegistry: string;
	/** Effective PDF/X output condition. */
	readonly effectiveOutputCondition: string;
	/**
	 * Effective PDF X color profile. Can return: 
	 * PDFProfileSelector enumerator or String.
	 */
	readonly effectivePDFXProfile: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PDFExportPreset (a Application). */
	readonly parent: Application;
	/**
	 * The index of the PDFExportPreset within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The export PDF magnification options. */
	pdfMagnification: PdfMagnificationOptions;
	/** The export PDF page layout. */
	pdfPageLayout: PageLayoutOptions;
	/** Open PDF in full screen mode. */
	openInFullScreen: boolean;
	/** The export PDF display title. */
	pdfDisplayTitle: PdfDisplayTitleOptions;
	/**
	 * Sets the default document language in the exported PDF. The 
	 * correct ISO code of the language must be provided.
	 */
	defaultDocumentLanguage: string;
	/** The name of the PDFExportPreset. */
	name: string;
	/**
	 * Sets the threshold for embedding complete fonts based on how 
	 * many of the fonts' characters are used in the document. If 
	 * the percentage of characters used in the document for any 
	 * given font exceeds the specified value, the font is 
	 * completely embedded; otherwise, the font is subsetted. 
	 * (Range: 0 to 100) Notes: Embedding complete fonts increases 
	 * file size. To completely embed all fonts, use 0 (zero).
	 */
	subsetFontsBelow: number;
	/**
	 * The color space to use to represent color information in the 
	 * exported PDF document.
	 */
	pdfColorSpace: PDFColorSpace;
	/**
	 * The ICC Profiles to include in the exported PDF document. 
	 * Can also accept: Boolean.
	 */
	includeICCProfiles: ICCProfiles;
	/** If true, replaces EPS images with OPI links. */
	omitEPS: boolean;
	/** If true, replaces PDF images with OPI links. */
	omitPDF: boolean;
	/** If true, replaces bitmap images with OPI links. */
	omitBitmaps: boolean;
	/**
	 * If true, image data that falls outside the visible portion 
	 * of an image's frame is not exported to the PDF document.
	 */
	cropImagesToFrames: boolean;
	/**
	 * If true, generates thumbnail images for each page or spread.
	 */
	generateThumbnails: boolean;
	/**
	 * If true, optimizes the exported PDF document for faster 
	 * viewing in a web browser. Note: Compresses text and line 
	 * art, regardless of specified compression settings.
	 */
	optimizePDF: boolean;
	/**
	 * If true, creates a tagged PDF file. Note: If acrobat 
	 * compatibility is acrobat 6 or higher, tags are visible only 
	 * when the PDF is opened in Acrobat 6 or higher.
	 */
	includeStructure: boolean;
	/** The exported PDF document's Acrobat compatibility. */
	acrobatCompatibility: AcrobatCompatibility;
	/**
	 * If true, simulates the effects of overprinting spot inks 
	 * with different neutral density values by converting spot 
	 * colors to process colors for printing. Note: Not valid when 
	 * the color output mode is defined to leave color profiles 
	 * unchanged.
	 */
	simulateOverprint: boolean;
	/**
	 * The gamut of the final RGB or CMYK device. Can return: 
	 * PDFProfileSelector enumerator or String.
	 */
	pdfDestinationProfile: any;
	/**
	 * The PDF X color profile to use for the PDF document. . Can 
	 * return: PDFProfileSelector enumerator or String.
	 */
	pdfXProfile: any;
	/** If true, includes hyperlinks when exporting the document. */
	includeHyperlinks: boolean;
	/**
	 * If true, displays bookmarks and table of contents entries as 
	 * links in the bookmarks pane in the PDF document. If false, 
	 * no bookmarks are exported.
	 */
	includeBookmarks: boolean;
	/**
	 * If true, makes non-printing objects visible in the PDF 
	 * document.
	 */
	exportNonprintingObjects: boolean;
	/**
	 * If true, includes visible guides and baseline grids in the 
	 * PDF document.
	 */
	exportGuidesAndGrids: boolean;
	/**
	 * If true, saves each layer as an Acrobat layer within the PDF 
	 * document.
	 */
	exportLayers: boolean;
	/** The PDF/X standards compliance to test against. */
	standardsCompliance: PDFXStandards;
	/**
	 * The name of the intended printing condition. Valid only when 
	 * a PDF/X compliance standard has been defined for the 
	 * document. Not valid when PDF/X-3 is the compliance standard 
	 * or PDF export preset. For information on compliance 
	 * standards, see standards compliance and PDF X standards.
	 */
	outputCondition: string;
	/**
	 * The sampling option to apply to color bitmap images in the 
	 * PDF document.
	 */
	colorBitmapSampling: Sampling;
	/** The ppi of the resampled image. (Range: 9 to 2400) */
	colorBitmapSamplingDPI: number;
	/** The amount of bitmap compression to use. */
	colorBitmapCompression: BitmapCompression;
	/** The compression option to apply to color images. */
	colorBitmapQuality: CompressionQuality;
	/** The sampling option to apply to grayscale bitmap images. */
	grayscaleBitmapSampling: Sampling;
	/** The ppi of the resampled image. (Range: 9 to 2400) */
	grayscaleBitmapSamplingDPI: number;
	/**
	 * The bitmap compression option to apply to grayscale bitmap 
	 * images.
	 */
	grayscaleBitmapCompression: BitmapCompression;
	/** The compression option to apply to grayscale bitmap images. */
	grayscaleBitmapQuality: CompressionQuality;
	/** The sampling option to apply to monochrome bitmap images. */
	monochromeBitmapSampling: Sampling;
	/** The ppi of the resampled image. (Range: 9 to 2400) */
	monochromeBitmapSamplingDPI: number;
	/**
	 * The bitmap compression option to apply to monochrome bitmap 
	 * images.
	 */
	monochromeBitmapCompression: MonoBitmapCompression;
	/**
	 * If true, compresses text and line art using ZIP compression.
	 */
	compressTextAndLineArt: boolean;
	/**
	 * The minimum dpi at which color compression is applied. 
	 * (Range: 1 to 10 times the value specified for color bitmap 
	 * sampling DPI.)
	 */
	thresholdToCompressColor: number;
	/**
	 * The minimum dpi at which grayscale compression is applied. 
	 * (Range: 1 to 10 times the value specified for grayscale 
	 * bitmap sampling DPI.)
	 */
	thresholdToCompressGray: number;
	/**
	 * The minimum dpi at which monochrome compression is applied. 
	 * (Range: 1 to 10 times the value specified for monochrome 
	 * bitmap sampling DPI.)
	 */
	thresholdToCompressMonochrome: number;
	/**
	 * The tile size for color images. Valid only when color bitmap 
	 * compression is JPEG 2000. (Range: 128 to 2048)
	 */
	colorTileSize: number;
	/**
	 * The tile size for grayscale images. Valid only when 
	 * grayscale bitmap compression is JPEG 2000. (Range: 128 to 
	 * 2048)
	 */
	grayTileSize: number;
	/** The objects to compress in the PDF document. */
	compressionType: PDFCompressionType;
	/**
	 * If true, each spread in the exported document is combined 
	 * into a single page that has spread's original width.
	 */
	exportReaderSpreads: boolean;
	/** The offset from the edge of the page for page marks. */
	pageMarksOffset: number|string;
	/**
	 * Prints crop marks that define where the page should be 
	 * trimmed.
	 */
	cropMarks: boolean;
	/**
	 * If true, prints the filename, page number, current date and 
	 * time, and color separation name.
	 */
	pageInformationMarks: boolean;
	/** If true, print bleed marks. */
	bleedMarks: boolean;
	/**
	 * If true, add small squares of color representing the CMYK 
	 * inks and tints of gray in 10% increments.
	 */
	colorBars: boolean;
	/**
	 * If true, prints small targets outside the page area for 
	 * aligning color separations.
	 */
	registrationMarks: boolean;
	/** The stroke weight for printer's marks. */
	printerMarkWeight: PDFMarkWeight;
	/**
	 * The height of the bleed area at the top of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedTop: number|string;
	/**
	 * The width of the bleed area at the inside of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedInside: number|string;
	/**
	 * The height of the bleed area at the bottom of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number|string;
	/**
	 * The width of the bleed area at the outside of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number|string;
	/**
	 * The type of printer marks, either an enum value or the name 
	 * of a custom marks file. Can return: MarkTypes enumerator or 
	 * String.
	 */
	pdfMarkType: any;
	/**
	 * If true, uses the document's bleed settings in the PDF 
	 * document.
	 */
	useDocumentBleedWithPDF: boolean;
	/**
	 * If true, includes the document's slug area in the PDF 
	 * document.
	 */
	includeSlugWithPDF: boolean;
	/** If true, ignores flattener spread overrides. */
	ignoreSpreadOverrides: boolean;
	/** The transparency flattener preset to use. */
	appliedFlattenerPreset: FlattenerPreset;
	/**
	 * The name of the output condition. Valid only when a PDF/X 
	 * standard has been defined for the document.
	 */
	outputConditionName: string;
	/**
	 * The web address for the output condition registry. Not valid 
	 * when PDF/X-3 is the compliance standard or PDF export 
	 * preset.
	 */
	ocRegistry: string;
	/** How to draw interactive elements. */
	interactiveElementsOption: InteractiveElementsOptions;
	/** Which layers to export. */
	exportWhichLayers: ExportLayerOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the PDFExportPreset. */
	remove(): void;
	/** Duplicates the PDFExportPreset. */
	duplicate(): PDFExportPreset;
	/**
	 * Generates a string which, if executed, will return the 
	 * PDFExportPreset.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PDFExportPreset;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of PDF export presets.
 * @class
 */
export declare class PDFExportPresets {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new PDFExportPreset.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PDFExportPreset (Optional)
	 */
	add(withProperties: Object): PDFExportPreset;
	/** Displays the number of elements in the PDFExportPreset. */
	count(): number;
	/**
	 * Returns the PDFExportPreset with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PDFExportPreset;
	/**
	 * Returns the PDFExportPreset with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PDFExportPreset;
	/**
	 * Returns the PDFExportPresets within the specified range.
	 * @param {any} _from - The PDFExportPreset, index, or name at 
	 * the beginning of the range. Can accept: PDFExportPreset, 
	 * Long Integer or String.
	 * @param {any} to - The PDFExportPreset, index, or name at the 
	 * end of the range. Can accept: PDFExportPreset, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): PDFExportPreset;
	/** Returns the first PDFExportPreset in the collection. */
	firstItem(): PDFExportPreset;
	/** Returns the last PDFExportPreset in the collection. */
	lastItem(): PDFExportPreset;
	/** Returns the middle PDFExportPreset in the collection. */
	middleItem(): PDFExportPreset;
	/**
	 * Returns the PDFExportPreset with the index previous to the 
	 * specified index.
	 * @param {PDFExportPreset} obj - The index of the 
	 * PDFExportPreset that follows the desired PDFExportPreset.
	 */
	previousItem(obj: PDFExportPreset): PDFExportPreset;
	/**
	 * Returns the PDFExportPreset whose index follows the 
	 * specified PDFExportPreset in the collection.
	 * @param {PDFExportPreset} obj - The PDFExportPreset whose 
	 * index comes before the desired PDFExportPreset.
	 */
	nextItem(obj: PDFExportPreset): PDFExportPreset;
	/** Returns any PDFExportPreset in the collection. */
	anyItem(): PDFExportPreset;
	/** Returns every PDFExportPreset in the collection. */
	everyItem(): PDFExportPreset;
	/**
	 * Generates a string which, if executed, will return the 
	 * PDFExportPreset.
	 */
	toSource(): string;
	/**
	 * Returns the PDFExportPreset with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PDFExportPreset;
}

/**
 * PDF place preferences.
 * @class
 * @extends Preference
 */
export declare class PDFPlacePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PDFPlacePreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The page number of the PDF document page to place. */
	pageNumber: number;
	/** The type of cropping to apply. */
	pdfCrop: PDFCrop;
	/** If true, the background of the PDF is transparent. */
	transparentBackground: boolean;
	/**
	 * The password to enter when opening the PDF document. Valid 
	 * only when use security is true. Note: A script can set but 
	 * not get this value.
	 */
	openDocumentPassword: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PDFPlacePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PDFPlacePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Interactive PDF export settings for the application object.
 * @class
 * @extends Preference
 */
export declare class InteractivePDFExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the InteractivePDFExportPreference (a 
	 * Application).
	 */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The export PDF display title. */
	pdfDisplayTitle: PdfDisplayTitleOptions;
	/**
	 * Sets the default document language in the exported PDF. The 
	 * correct ISO code of the language must be provided.
	 */
	defaultDocumentLanguage: string;
	/**
	 * The pages to print, specified either as an enumeration or a 
	 * string. To specify a range, separate page numbers in the 
	 * string with a hyphen (-). To specify separate pages, 
	 * separate page numbers in the string with a comma (,). Can 
	 * return: PageRange enumerator or String.
	 */
	pageRange: any;
	/**
	 * If true, each spread in the exported document is combined 
	 * into a single page that has spread's original width.
	 */
	exportReaderSpreads: boolean;
	/** If true, automatically opens the PDF file after exporting. */
	viewPDF: boolean;
	/**
	 * If true, generates thumbnail images for each page or spread.
	 */
	generateThumbnails: boolean;
	/**
	 * If true, saves each layer as an Acrobat layer within the PDF 
	 * document.
	 */
	exportLayers: boolean;
	/**
	 * If true, creates a tagged PDF file. Note: If acrobat 
	 * compatibility is acrobat 6 or higher, tags are visible only 
	 * when the PDF is opened in Acrobat 6 or higher.
	 */
	includeStructure: boolean;
	/** The export PDF magnification options. */
	pdfMagnification: PdfMagnificationOptions;
	/** The export PDF page layout. */
	pdfPageLayout: PageLayoutOptions;
	/** Open PDF in full screen mode. */
	openInFullScreen: boolean;
	/** Automatically flip pages in the exported PDF. */
	flipPages: boolean;
	/** The speed that the pages flip. */
	flipPagesSpeed: number;
	/** The name of the page transition to use for all pages. */
	pageTransitionOverride: PageTransitionOverrideOptions;
	/** How to draw interactive elements. */
	interactivePDFInteractiveElementsOption: InteractivePDFInteractiveElementsOptions;
	/** The PDF raster compression options. */
	pdfRasterCompression: PDFRasterCompressionOptions;
	/** The PDF JPEG quality options. */
	pdfJPEGQuality: PDFJPEGQualityOptions;
	/**
	 * The raster resolution. Can return: RasterResolutionOptions 
	 * enumerator or Long Integer (72 - 300).
	 */
	rasterResolution: any;
	/**
	 * Use tagged PDF structure for interactive elements tab order.
	 */
	usePDFStructureForTabOrder: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * InteractivePDFExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): InteractivePDFExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Tagged PDF preferences.
 * @class
 * @extends Preference
 */
export declare class TaggedPDFPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TaggedPDFPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Tagged PDF structure order preference. */
	structureOrder: TaggedPDFStructureOrderOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TaggedPDFPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TaggedPDFPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Text frame footnote options.
 * @class
 * @extends Preference
 */
export declare class TextFrameFootnoteOptionsObject extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextFrameFootnoteOptionsObject (a 
	 * Application, Document, TextFrame or ObjectStyle).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, enable overrides to document footnote options. */
	enableOverrides: boolean;
	/** If true, enable straddling footnotes. */
	spanFootnotesAcross: boolean;
	/** Minimum Spacing Before First Footnote */
	minimumSpacingOption: number|string;
	/** Space between footnotes. */
	spaceBetweenFootnotes: number|string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextFrameFootnoteOptionsObject.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextFrameFootnoteOptionsObject;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Default page item formatting properties.
 * @class
 * @extends Preference
 */
export declare class PageItemDefault extends Preference {
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the 
	 * PageItemDefault.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/**
	 * Transparency settings for the content of the 
	 * PageItemDefault.
	 */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PageItemDefault (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/**
	 * The default graphic object style applied to the 
	 * PageItemDefault. Can also accept: String.
	 */
	appliedGraphicObjectStyle: ObjectStyle;
	/**
	 * The default text object style applied to the 
	 * PageItemDefault. Can also accept: String.
	 */
	appliedTextObjectStyle: ObjectStyle;
	/**
	 * The default frame grid object style applied to the 
	 * PageItemDefault. Can also accept: String.
	 */
	appliedGridObjectStyle: ObjectStyle;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the PageItemDefault. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the PageItemDefault's fill 
	 * color. (To specify a tint percent, use a number in the range 
	 * of 0 to 100; to use the inherited or overridden value, use 
	 * -1.)
	 */
	fillTint: number;
	/**
	 * The weight (in points) to apply to the PageItemDefault's 
	 * stroke.
	 */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the PageItemDefault. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the PageItemDefault. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * PageItemDefault. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * PageItemDefault. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the PageItemDefault's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * If true, the PageItemDefault's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the PageItemDefault. */
	strokeAlignment: StrokeAlignment;
	/** If true, the PageItemDefault does not print. */
	nonprinting: boolean;
	/** The arrowhead alignment applied to the PageItemDefault. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * PageItemDefault's existing attributes before applying the 
	 * style. (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * PageItemDefault that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * PageItemDefault.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PageItemDefault;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Export options for the object
 * @class
 * @extends Preference
 */
export declare class ObjectExportOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ObjectExportOption (a ObjectStyle, 
	 * SplineItem, Polygon, GraphicLine, Rectangle, Oval, Group or 
	 * TextFrame).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The epub type as recommended by IDPF */
	epubType: string;
	/** size settings to be used for the object */
	sizeType: SizeTypeEnum;
	/** Custom size applied to the object */
	customSize: string;
	/** Preserve Appearance from Layout */
	preserveAppearanceFromLayout: PreserveAppearanceFromLayoutEnum;
	/** The source type of alternate text */
	altTextSourceType: SourceType;
	/** The source type of actual text */
	actualTextSourceType: SourceType;
	/** The custom alternate text entered by the user */
	customAltText: string;
	/** The custom actual text entered by the user */
	customActualText: string;
	/**
	 * The metadata property to use as source of alternate text. 
	 * Can return: Ordered array containing namespacePrefix:String, 
	 * propertyPath:String.
	 */
	altMetadataProperty: any;
	/**
	 * The metadata property to use as source of actual text. Can 
	 * return: Ordered array containing namespacePrefix:String, 
	 * propertyPath:String.
	 */
	actualMetadataProperty: any;
	/** The tag type of page item */
	applyTagType: TagType;
	/** Allows user to select the image format for conversion */
	imageConversionType: ImageFormat;
	/** The export resolution */
	imageExportResolution: ImageResolution;
	/**
	 * The color palette for GIF conversion. Note: Not valid when 
	 * image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;
	/**
	 * If true, generates interlaced GIFs. Note: Not valid  when 
	 * image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;
	/**
	 * The quality of converted JPEG images. Note: Not valid when 
	 * image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;
	/**
	 * The formatting method for converted JPEG images. Note: Not 
	 * valid  when image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;
	/** Alignment applied to images */
	imageAlignment: ImageAlignmentType;
	/** Space Before applied to images */
	imageSpaceBefore: number;
	/** Space After applied to images */
	imageSpaceAfter: number;
	/** If true, image page break settings will be used in objects */
	useImagePageBreak: boolean;
	/** Image page break settings to be used with objects */
	imagePageBreak: ImagePageBreakType;
	/** If true, custom layout is enabled for object */
	customLayout: boolean;
	/** Custom Layout settings to be used for object */
	customLayoutType: CustomLayoutTypeEnum;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Provides the alternate text for the object */
	altText(): string;
	/** Provides the actual text for the object */
	actualText(): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectExportOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ObjectExportOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Text editing preferences.
 * @class
 * @extends Preference
 */
export declare class TextEditingPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TextEditingPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, allows text to be dragged and dropped on a layout 
	 * page.
	 */
	dragAndDropTextInLayout: boolean;
	/**
	 * If true, allows text to be dragged and dropped in the story 
	 * editor or galley view.
	 */
	allowDragAndDropTextInStory: boolean;
	/**
	 * If true, a triple click selects a line of text. If false, a 
	 * triple click selects a paragraph.
	 */
	tripleClickSelectsLine: boolean;
	/**
	 * If true, automatically adjusts spacing among words and 
	 * between words and punctuation marks when cutting and pasting 
	 * text.
	 */
	smartCutAndPaste: boolean;
	/**
	 * If true, a single click (with the Type tool) converts 
	 * non-text frames to text frames.
	 */
	singleClickConvertsFramesToTextFrames: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextEditingPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextEditingPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Mojikumi UI preferences.
 * @class
 * @extends Preference
 */
export declare class MojikumiUiPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MojikumiUiPreference (a Document or 
	 * Application).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, uses half-width spacing for all characters. */
	lineEndAllOneHalfEm: boolean;
	/**
	 * If true, indents lines one space and uses line end uke one 
	 * half space.
	 */
	oneEmIndentLineEndUkeOneHalfEm: boolean;
	/**
	 * If true, indents lines one full or half space and uses line 
	 * end uke one half space.
	 */
	oneOrOneHalfEmIndentLineEndUkeOneHalfEm: boolean;
	/**
	 * If true, Uses full-witdh spacing for all characters except 
	 * the last character in the line, which uses either full- or 
	 * half-width spacing.
	 */
	oneOrOneHalfEmIndentLineEndAllOneEm: boolean;
	/**
	 * If true, indents lines one full space and uses full-width 
	 * spacing for all characters.
	 */
	oneEmIndentLineEndAllOneEm: boolean;
	/**
	 * If true, indents lines one full space and uses no float for 
	 * all characters.
	 */
	oneEmIndentLineEndAllNoFloat: boolean;
	/**
	 * If true, indents lines one full space and uses line end uke 
	 * no float.
	 */
	oneEmIndentLineEndUkeNoFloat: boolean;
	/**
	 * If true, indents lines one half space or one full space and 
	 * uses line end uke no float.
	 */
	oneOrOneHalfEmIndentLineEndUkeNoFloat: boolean;
	/**
	 * If true, indents lines one full space and uses half-width 
	 * spacing for all characters.
	 */
	oneEmIndentLineEndAllOneHalfEm: boolean;
	/** If true, uses full-width spacing for all characters. */
	lineEndAllOneEm: boolean;
	/** If true, uses line end uke no float. */
	lineEndUkeNoFloat: boolean;
	/**
	 * If true, indents lines one or one-half space and uses 
	 * full-width spacing for punctuation and for the last 
	 * character in the line.
	 */
	oneOrOneHalfEmIndentLineEndPeriodOneEm: boolean;
	/**
	 * If true, indents lines one space and uses full-width spacing 
	 * for punctuation and for the last character in the line.
	 */
	oneEmIndentLineEndPeriodOneEm: boolean;
	/**
	 * If true, uses full-width spacing for punctuation and for the 
	 * last character in the line.
	 */
	lineEndPeriodOneEm: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * MojikumiUiPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MojikumiUiPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Font locking preferences.
 * @class
 * @extends Preference
 */
export declare class FontLockingPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FontLockingPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, turns on missing glyph protection during typing. */
	fontInputLocking: boolean;
	/**
	 * If true, turns on missing glyph protection during font 
	 * change.
	 */
	fontChangeLocking: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FontLockingPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FontLockingPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * User dictionary preferences.
 * @class
 * @extends Preference
 */
export declare class DictionaryPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the DictionaryPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The hyphenation exception list to use when composing text. */
	composition: ComposeUsing;
	/**
	 * If true, merges the spelling and hyphenation exceptions 
	 * lists in the external user dictionary with the lists stored 
	 * within the document.
	 */
	mergeUserDictionary: boolean;
	/**
	 * If true, recomposes all stories when the compose using 
	 * settings are changed, or when words are added to or removed 
	 * from the user dictionary.
	 */
	recomposeWhenChanged: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DictionaryPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DictionaryPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Default settings to use when creating a polygon.
 * @class
 * @extends Preference
 */
export declare class PolygonPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PolygonPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The star inset percentage for the sides of a polygon. 
	 * (Range: 0 to 100)
	 */
	insetPercentage: number;
	/** The number of sides for a polygon. (Range: 3 to 100) */
	numberOfSides: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PolygonPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PolygonPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Spell-check preferences.
 * @class
 * @extends Preference
 */
export declare class SpellPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the SpellPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, underlines misspelled and repeated words, 
	 * uncapitalized proper nouns, and uncapitalized first words in 
	 * sentences. Note: Valid only when the corresponding 
	 * properties are true. For information, see check misspelled 
	 * words, check repeated words, check capitalized words, and 
	 * check capitalized sentences.
	 */
	dynamicSpellCheck: boolean;
	/**
	 * The underline color for misspelled words, specified either 
	 * as an array of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Note: 
	 * Valid only when both dynamic spell check and check 
	 * misspelled words are true. Can return: Array of 3 Reals (0 - 
	 * 255) or UIColors enumerator.
	 */
	misspelledWordColor: any;
	/**
	 * The underline color for repeated words, specified either as 
	 * an array of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Note: 
	 * Valid only when both dynamic spell check and check repeated 
	 * words are true. . Can return: Array of 3 Reals (0 - 255) or 
	 * UIColors enumerator.
	 */
	repeatedWordColor: any;
	/**
	 * The underline color for uncapitalized proper nouns, 
	 * specified either as an array of three doubles, each in the 
	 * range 0 to 255 and representing R, G, and B values, or as a 
	 * UI color. Note: Valid only when both dynamic spell check and 
	 * check capitalized words are true. . Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator.
	 */
	uncapitalizedWordColor: any;
	/**
	 * The underline color for the first word in sentences that do 
	 * not begin with a capital letter, specified either as an 
	 * array of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Note: 
	 * Valid when both dynamic spell check and check capitalized 
	 * sentences are true. Can return: Array of 3 Reals (0 - 255) 
	 * or UIColors enumerator.
	 */
	uncapitalizedSentenceColor: any;
	/** If true, checks for misspelled words. */
	checkMisspelledWords: boolean;
	/** If true, checks for repeated words. */
	checkRepeatedWords: boolean;
	/** If true, checks for uncapitalized proper nouns. */
	checkCapitalizedWords: boolean;
	/** If true, checks for uncapitalized first words in sentences. */
	checkCapitalizedSentences: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * SpellPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): SpellPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Auto-correct preferences.
 * @class
 * @extends Preference
 */
export declare class AutoCorrectPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the AutoCorrectPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, automatically corrects misspelled words listed in 
	 * the auto-correct table.
	 */
	autoCorrect: boolean;
	/**
	 * If true, automatically corrects capitalization errors listed 
	 * in the auto-correct table.
	 */
	autoCorrectCapitalizationErrors: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * AutoCorrectPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): AutoCorrectPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Smart Guide preferences.
 * @class
 * @extends Preference
 */
export declare class SmartGuidePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the SmartGuidePreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, smart guides are enabled. */
	enabled: boolean;
	/** If true, smart alignment to object edges is enabled. */
	alignToObjectEdges: boolean;
	/** If true, smart alignment to object centers is enabled. */
	alignToObjectCenter: boolean;
	/** If true, smart dimensions guides are enabled. */
	smartDimensions: boolean;
	/** If true, smart spacing guides are enabled. */
	smartSpacing: boolean;
	/**
	 * The color of the guide, specified either as an array of 
	 * three doubles, each in the range 0 to 255 and representing 
	 * R, G, and B values, or as a UI color. Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator.
	 */
	guideColor: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * SmartGuidePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): SmartGuidePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * EPS import preferences.
 * @class
 * @extends Preference
 */
export declare class EPSImportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the EPSImportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, reads OPI image links in the imported EPS file. If 
	 * false, preserves the OPI links but does not read them.
	 */
	opiComments: boolean;
	/** If true, applies clipping paths stored in the EPS file. */
	epsFrames: boolean;
	/** Indicates when to create preview images. */
	epsProxy: CreateProxy;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * EPSImportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): EPSImportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Placed InDesign page attribute.
 * @class
 * @extends Preference
 */
export declare class ImportedPageAttribute extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ImportedPageAttribute (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * Which page of the InDesign document should be imported. Read 
	 * only for page items.
	 */
	pageNumber: number;
	/**
	 * Specifies the cropping of the imported InDesign page. Read 
	 * only for page items.
	 */
	importedPageCrop: ImportedPageCropOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ImportedPageAttribute.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ImportedPageAttribute;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Stroke/fill proxy settings.
 * @class
 * @extends Preference
 */
export declare class StrokeFillProxySetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the StrokeFillProxySetting (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Which part of the stroke/fill proxy is currently active. */
	active: StrokeFillProxyOptions;
	/**
	 * Which target is affected by changes to the stroke/fill 
	 * proxy.
	 */
	target: StrokeFillTargetOptions;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the StrokeFillProxySetting. . Can also accept: 
	 * String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the StrokeFillProxySetting. Can also accept: 
	 * String.
	 */
	strokeColor: Swatch;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * StrokeFillProxySetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): StrokeFillProxySetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Layout adjustment preferences.
 * @class
 * @extends Preference
 */
export declare class LayoutAdjustmentPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the LayoutAdjustmentPreference (a Application 
	 * or Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, layout adjustment is enabled. */
	enableLayoutAdjustment: boolean;
	/** The range within which an object snaps to guides. */
	snapZone: number|string;
	/** If true, allows graphics to be resized. */
	allowGraphicsToResize: boolean;
	/** If true, allows ruler guides to move. */
	allowRulerGuidesToMove: boolean;
	/** If true, ignores ruler guide alignments. */
	ignoreRulerGuideAlignments: boolean;
	/** If true, ignores object or layer locks. */
	ignoreObjectOrLayerLocks: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * LayoutAdjustmentPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): LayoutAdjustmentPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A preferences object.
 * @class
 */
export declare class Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Preference (a Application, Document, 
	 * XmlStory, Spread, FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting, 
	 * FindChangeContentTransparencySetting, HtmlItem, 
	 * SignatureField, TextBox, RadioButton, ListBox, ComboBox, 
	 * CheckBox, MultiStateObject, Button, FormField, Sound, Movie, 
	 * MediaItem, EPSText, Polygon, GraphicLine, Rectangle, Oval, 
	 * SplineItem, ImportedPage, PICT, WMF, PDF, EPS, Image, 
	 * Graphic, Group, TextFrame, PageItem, PageItemDefault, 
	 * TransparencySetting, StrokeTransparencySetting, 
	 * FillTransparencySetting, ContentTransparencySetting, 
	 * FindObjectPreference, ChangeObjectPreference, Story, 
	 * TextVariable, TextWrapPreference, Page, Book, Link, 
	 * ObjectStyle, MasterSpread, NamedGrid, TextDefault, 
	 * ParagraphStyle, InsertionPoint, TextStyleRange, Paragraph, 
	 * TextColumn, Line, Word, Character, Text, FindTextPreference, 
	 * ChangeTextPreference, FindGrepPreference, 
	 * ChangeGrepPreference, FindTransliteratePreference, 
	 * ChangeTransliteratePreference or DataMerge).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * Preference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Preference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of preferences objects.
 * @class
 */
export declare class Preferences {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Preference. */
	count(): number;
	/**
	 * Returns the Preference with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Preference;
	/**
	 * Returns the Preferences within the specified range.
	 * @param {any} _from - The Preference, index, or name at the 
	 * beginning of the range. Can accept: Preference, Long Integer 
	 * or String.
	 * @param {any} to - The Preference, index, or name at the end 
	 * of the range. Can accept: Preference, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): Preference;
	/** Returns the first Preference in the collection. */
	firstItem(): Preference;
	/** Returns the last Preference in the collection. */
	lastItem(): Preference;
	/** Returns the middle Preference in the collection. */
	middleItem(): Preference;
	/**
	 * Returns the Preference with the index previous to the 
	 * specified index.
	 * @param {Preference} obj - The index of the Preference that 
	 * follows the desired Preference.
	 */
	previousItem(obj: Preference): Preference;
	/**
	 * Returns the Preference whose index follows the specified 
	 * Preference in the collection.
	 * @param {Preference} obj - The Preference whose index comes 
	 * before the desired Preference.
	 */
	nextItem(obj: Preference): Preference;
	/** Returns any Preference in the collection. */
	anyItem(): Preference;
	/** Returns every Preference in the collection. */
	everyItem(): Preference;
	/**
	 * Generates a string which, if executed, will return the 
	 * Preference.
	 */
	toSource(): string;
	/**
	 * Returns the Preference with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Preference;
}

/**
 * Scripting environment preferences.
 * @class
 * @extends Preference
 */
export declare class ScriptPreference extends Preference {
	/** The path to the Scripts folder for the application. */
	readonly scriptsFolder: File;
	/**
	 * A list of the scripts in the Scripts folder. Can return: 
	 * Array of Array of 2 Strings or Files.
	 */
	readonly scriptsList: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ScriptPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The version of the scripting environment. Can also accept: 
	 * Real.
	 */
	version: string;
	/**
	 * Controls the display of dialogs and alerts during script 
	 * processing.
	 */
	userInteractionLevel: UserInteractionLevels;
	/**
	 * The measurement unit used during script processing. Can 
	 * return: AutoEnum enumerator or MeasurementUnits enumerator.
	 */
	measurementUnit: any;
	/** If true, enables redraw during script execution. */
	enableRedraw: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ScriptPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ScriptPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Color management settings.
 * @class
 * @extends Preference
 */
export declare class ColorSetting extends Preference {
	/** The available color engines. */
	readonly engineList: string;
	/**
	 * A list of valid color management system settings 
	 * configurations.
	 */
	readonly cmsSettingsList: string;
	/** A list of valid CMYK color profiles. */
	readonly workingSpaceCMYKList: string;
	/** A list of valid RGB color profiles. */
	readonly workingSpaceRGBList: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ColorSetting (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The policy for handling colors in a CMYK color model, 
	 * including reading and embedding color profiles, resolving 
	 * mismatches between embedded color profiles and the working 
	 * space, and moving colors between documents.
	 */
	cmykPolicy: ColorSettingsPolicy;
	/** If true, enables color management. */
	enableColorManagement: boolean;
	/**
	 * The color management module (CMM) for mapping color space 
	 * gamuts between documents.
	 */
	engine: string;
	/**
	 * If true, displays a prompt when opening a file whose 
	 * embedded color profile does not match the current working 
	 * space. The prompt provides the option to override the 
	 * default mismatch behavior.
	 */
	mismatchAskWhenOpening: boolean;
	/**
	 * If true, displays a prompt when importing an object (via 
	 * pasting, drag-and-drop, or other similar methods) whose 
	 * colors do not match the current working space. The prompt 
	 * provides the option to override the default mismatch 
	 * behavior.
	 */
	mismatchAskWhenPasting: boolean;
	/**
	 * If true, displays a prompt when opening a file that does not 
	 * have an embedded color profile. The prompt provides the 
	 * option to assign a color profile.
	 */
	missingAskWhenOpening: boolean;
	/**
	 * The policy for handling colors in an RGB color model, 
	 * including reading and embedding color profiles, handling 
	 * mismatches between embedded color profiles and the working 
	 * space, and moving colors from one document to another.
	 */
	rgbPolicy: ColorSettingsPolicy;
	/**
	 * The current color management system settings configuration. 
	 * Note: For information on possible values, see CMS settings 
	 * list.
	 */
	cmsSettings: string;
	/** The file path of the CSF file to use. */
	cmsSettingsPath: File;
	/**
	 * If true, uses black point compensation to ensure that shadow 
	 * detail is preserved by simulating the full dynamic range of 
	 * the output device.
	 */
	useBPC: boolean;
	/** The current CMYK profile. */
	workingSpaceCMYK: string;
	/** The current RGB profile. */
	workingSpaceRGB: string;
	/** The default rendering intent. */
	intent: DefaultRenderingIntent;
	/**
	 * If true, uses LAB alternates for spot colors when available.
	 */
	accurateLABSpots: boolean;
	/**
	 * If true, uses idealized black for CMYK-to-RGB or 
	 * CMYK-to-Gray conversions to the screen.
	 */
	idealizedBlackToScreen: boolean;
	/**
	 * If true, uses idealized black for CMYK-to-RGB or 
	 * CMYK-to-Gray conversions to print or export.
	 */
	idealizedBlackToExport: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ColorSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ColorSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Find/change text options.
 * @class
 * @extends Preference
 */
export declare class FindChangeTextOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FindChangeTextOption (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, search in the backward direction. */
	searchBackwards: boolean;
	/** If true, includes locked stories in the find query. */
	includeLockedStoriesForFind: boolean;
	/** If true, includes locked layers in the find query. */
	includeLockedLayersForFind: boolean;
	/** If true, includes hidden layers in the find/change query. */
	includeHiddenLayers: boolean;
	/** If true, includes master pages in the find/change query. */
	includeMasterPages: boolean;
	/** If true, includes footnotes in the find/change query. */
	includeFootnotes: boolean;
	/**
	 * If true, finds only the complete find text string. If false, 
	 * also finds strings that contain the find text string.
	 */
	wholeWord: boolean;
	/**
	 * If true, finds strings whose use of case matches the find 
	 * text string. If false, finds strings that match the find 
	 * text string regardless of case.
	 */
	caseSensitive: boolean;
	/**
	 * If true, finds only text that matches the specified kana 
	 * type.
	 */
	kanaSensitive: boolean;
	/**
	 * If true, finds only text that matches the specified 
	 * character width.
	 */
	widthSensitive: boolean;
	/** If true, ignore kashidas in the find/change query. */
	ignoreKashidas: boolean;
	/** If true, ignore diacs in the find/change query. */
	ignoreDiacritics: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeTextOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeTextOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Find/change grep options.
 * @class
 * @extends Preference
 */
export declare class FindChangeGrepOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FindChangeGrepOption (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, search in the backward direction. */
	searchBackwards: boolean;
	/** If true, includes locked stories in the find query. */
	includeLockedStoriesForFind: boolean;
	/** If true, includes locked layers in the find query. */
	includeLockedLayersForFind: boolean;
	/** If true, includes hidden layers in the find/change query. */
	includeHiddenLayers: boolean;
	/** If true, includes master pages in the find/change query. */
	includeMasterPages: boolean;
	/** If true, includes footnotes in the find/change query. */
	includeFootnotes: boolean;
	/**
	 * If true, finds only text that matches the specified kana 
	 * type.
	 */
	kanaSensitive: boolean;
	/**
	 * If true, finds only text that matches the specified 
	 * character width.
	 */
	widthSensitive: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeGrepOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeGrepOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Find/change glyph options.
 * @class
 * @extends Preference
 */
export declare class FindChangeGlyphOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FindChangeGlyphOption (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, search in the backward direction. */
	searchBackwards: boolean;
	/** If true, includes locked stories in the find query. */
	includeLockedStoriesForFind: boolean;
	/** If true, includes locked layers in the find query. */
	includeLockedLayersForFind: boolean;
	/** If true, includes hidden layers in the find/change query. */
	includeHiddenLayers: boolean;
	/** If true, includes master pages in the find/change query. */
	includeMasterPages: boolean;
	/** If true, includes footnotes in the find/change query. */
	includeFootnotes: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeGlyphOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeGlyphOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Find/change object options.
 * @class
 * @extends Preference
 */
export declare class FindChangeObjectOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FindChangeObjectOption (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, includes locked stories in the find query. */
	includeLockedStoriesForFind: boolean;
	/** If true, includes locked layers in the find query. */
	includeLockedLayersForFind: boolean;
	/** If true, includes hidden layers in the find/change query. */
	includeHiddenLayers: boolean;
	/** If true, includes master pages in the find/change query. */
	includeMasterPages: boolean;
	/** If true, includes footnotes in the find/change query. */
	includeFootnotes: boolean;
	/** The object type. */
	objectType: ObjectTypes;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeObjectOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeObjectOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Find/change transliterate options.
 * @class
 * @extends Preference
 */
export declare class FindChangeTransliterateOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeTransliterateOption (a 
	 * Application).
	 */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, search in the backward direction. */
	searchBackwards: boolean;
	/**
	 * If true, finds only text that matches the specified kana 
	 * type.
	 */
	kanaSensitive: boolean;
	/**
	 * If true, finds only text that matches the specified 
	 * character width.
	 */
	widthSensitive: boolean;
	/** If true, includes locked stories in the find query. */
	includeLockedStoriesForFind: boolean;
	/** If true, includes locked layers in the find query. */
	includeLockedLayersForFind: boolean;
	/** If true, includes hidden layers in the find/change query. */
	includeHiddenLayers: boolean;
	/** If true, includes master pages in the find/change query. */
	includeMasterPages: boolean;
	/** If true, includes footnotes in the find/change query. */
	includeFootnotes: boolean;
	/**
	 * If true, finds only the complete find text string. If false, 
	 * also finds strings that contain the find text string.
	 */
	wholeWord: boolean;
	/**
	 * If true, finds strings whose use of case matches the find 
	 * text string. If false, finds strings that match the find 
	 * text string regardless of case.
	 */
	caseSensitive: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeTransliterateOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeTransliterateOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Find text preferences.
 * @class
 * @extends Preference
 */
export declare class FindTextPreference extends Preference {
	/**
	 * Numbering restart policies. Can return: 
	 * NumberingRestartPolicy or NothingEnum enumerator.
	 */
	readonly numberingRestartPolicies: any;
	/**
	 * Bullet character. Can return: Bullet or NothingEnum 
	 * enumerator.
	 */
	readonly bulletChar: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FindTextPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long. Can return: Real or NothingEnum enumerator.
	 */
	paragraphKashidaWidth: any;
	/**
	 * The FindTextPreference to find. Can return: String or 
	 * NothingEnum enumerator.
	 */
	findWhat: any;
	/**
	 * The character style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * CharacterStyle.
	 */
	appliedCharacterStyle: any;
	/**
	 * The paragraph style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * ParagraphStyle.
	 */
	appliedParagraphStyle: any;
	/**
	 * The amount to indent the first line. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	firstLineIndent: any;
	/**
	 * The width of the left indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	leftIndent: any;
	/**
	 * The width of the right indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	rightIndent: any;
	/**
	 * The height of the paragraph space above. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceBefore: any;
	/**
	 * The height of the paragraph space below. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceAfter: any;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean, BalanceLinesStyle enumerator or NothingEnum 
	 * enumerator.
	 */
	balanceRaggedLines: any;
	/**
	 * The paragraph alignment. Can return: Justification 
	 * enumerator or NothingEnum enumerator.
	 */
	justification: any;
	/**
	 * The alignment to use for lines that contain a single word. 
	 * Can return: SingleWordJustification enumerator or 
	 * NothingEnum enumerator.
	 */
	singleWordJustification: any;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	autoLeading: any;
	/**
	 * The number of lines to drop cap. Can return: Short Integer 
	 * (0 - 25) or NothingEnum enumerator.
	 */
	dropCapLines: any;
	/**
	 * The number of characters to drop cap. Can return: Short 
	 * Integer (0 - 150) or NothingEnum enumerator.
	 */
	dropCapCharacters: any;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	keepLinesTogether: any;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepAllLinesTogether: any;
	/**
	 * The minimum number of lines to keep with the next paragraph. 
	 * Can return: Short Integer (0 - 5) or NothingEnum enumerator.
	 */
	keepWithNext: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break. Can return: Short Integer (1 - 
	 * 50) or NothingEnum enumerator.
	 */
	keepFirstLines: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break. Can return: Short Integer (1 - 50) or 
	 * NothingEnum enumerator.
	 */
	keepLastLines: any;
	/**
	 * The location at which to start the paragraph. Can return: 
	 * StartParagraph enumerator or NothingEnum enumerator.
	 */
	startParagraph: any;
	/**
	 * The text composer to use to compose the text. Can return: 
	 * String or NothingEnum enumerator.
	 */
	composer: any;
	/**
	 * The amount to indent the last line in the paragraph. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	lastLineIndent: any;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	hyphenateLastWord: any;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	dropcapDetail: any;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated. Can return: Boolean or NothingEnum enumerator.
	 */
	hyphenateAcrossColumns: any;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepRuleAboveInFrame: any;
	/**
	 * If true, ignores optical edge alignment for the paragraph. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	ignoreEdgeAlignment: any;
	/**
	 * The font applied to the FindTextPreference, specified as 
	 * either a font object or the name of font family. Can return: 
	 * Font, String or NothingEnum enumerator.
	 */
	appliedFont: any;
	/**
	 * The name of the font style. Can return: String or 
	 * NothingEnum enumerator.
	 */
	fontStyle: any;
	/** The text size. Can return: Unit or NothingEnum enumerator. */
	pointSize: any;
	/**
	 * The leading applied to the text. Can return: Unit, Leading 
	 * enumerator or NothingEnum enumerator.
	 */
	leading: any;
	/**
	 * The type of pair kerning. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kerningMethod: any;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	tracking: any;
	/**
	 * The capitalization scheme. Can return: Capitalization 
	 * enumerator or NothingEnum enumerator.
	 */
	capitalization: any;
	/**
	 * The text position relative to the baseline. Can return: 
	 * Position enumerator or NothingEnum enumerator.
	 */
	position: any;
	/**
	 * If true, underlines the text. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	underline: any;
	/**
	 * If true, draws a strikethrough line through the text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThru: any;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	ligatures: any;
	/**
	 * If true, keeps the text on the same line. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	noBreak: any;
	/**
	 * The horizontal scaling applied to the FindTextPreference. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	horizontalScale: any;
	/**
	 * The vertical scaling applied to the FindTextPreference. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	verticalScale: any;
	/**
	 * The baseline shift applied to the text. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	baselineShift: any;
	/**
	 * The skew angle of the FindTextPreference. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	skew: any;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * FindTextPreference. (To specify a tint percentage, use a 
	 * number in the range of 0 to 100; to use the inherited or 
	 * overridden value, use -1.). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	fillTint: any;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * FindTextPreference. (To specify a tint percentage, use a 
	 * number in the range of 0 to 100; to use the inherited or 
	 * overridden value, use -1.). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strokeTint: any;
	/**
	 * The stroke weight applied to the characters of the text. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	strokeWeight: any;
	/**
	 * If true, the stroke of the characters will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	overprintStroke: any;
	/**
	 * If true, the fill color of the characters will overprint. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	overprintFill: any;
	/**
	 * The figure style in OpenType fonts. Can return: 
	 * OTFFigureStyle enumerator or NothingEnum enumerator.
	 */
	otfFigureStyle: any;
	/**
	 * If true, uses ordinals in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfOrdinal: any;
	/**
	 * If true, uses fractions in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfFraction: any;
	/**
	 * If true, uses discretionary ligatures in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfDiscretionaryLigature: any;
	/**
	 * If true, uses titling forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfTitling: any;
	/**
	 * If true, uses contextual alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfContextualAlternate: any;
	/**
	 * If true, uses swash forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSwash: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch, String or NothingEnum 
	 * enumerator.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100). Can return: Real or NothingEnum enumerator.
	 */
	underlineTint: any;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid. Can return: Real or NothingEnum enumerator.
	 */
	underlineGapTint: any;
	/**
	 * If true, the underline stroke color will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	underlineOverprint: any;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint. Can return: Boolean or NothingEnum enumerator.
	 */
	underlineGapOverprint: any;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline. Can return: Unit or NothingEnum enumerator.
	 */
	underlineOffset: any;
	/**
	 * The stroke weight of the underline stroke. Can return: Unit 
	 * or NothingEnum enumerator.
	 */
	underlineWeight: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch, 
	 * String or NothingEnum enumerator.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughTint: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughGapTint: any;
	/**
	 * If true, the strikethrough stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughOverprint: any;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid. Can return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughGapOverprint: any;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline. Can return: Unit or NothingEnum 
	 * enumerator.
	 */
	strikeThroughOffset: any;
	/**
	 * The stroke weight of the strikethrough stroke. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	strikeThroughWeight: any;
	/**
	 * If true, use a slashed zeroes in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSlashedZero: any;
	/**
	 * If true, use historical forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfHistorical: any;
	/**
	 * The stylistic sets to use in OpenType fonts. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	otfStylisticSets: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	gradientFillLength: any;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientFillAngle: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gradientStrokeLength: any;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientStrokeAngle: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientFillStart: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientStrokeStart: any;
	/**
	 * If true, uses mark positioning in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfMark: any;
	/**
	 * If true, uses localized forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfLocale: any;
	/**
	 * The OpenType positional form. Can return: PositionalForms 
	 * enumerator or NothingEnum enumerator.
	 */
	positionalForm: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a fill color, to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Swatch.
	 */
	fillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a stroke color, to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: Swatch.
	 */
	strokeColor: any;
	/**
	 * The language to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Language or 
	 * LanguageWithVendors.
	 */
	appliedLanguage: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em. . Can return: Real or 
	 * NothingEnum enumerator.
	 */
	kerningValue: any;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join. Can return: Real (0 - 1000) or NothingEnum enumerator.
	 */
	miterLimit: any;
	/**
	 * The stroke alignment applied to the text. Can return: 
	 * TextStrokeAlign enumerator or NothingEnum enumerator.
	 */
	strokeAlignment: any;
	/**
	 * The stroke join type applied to the characters of the text. 
	 * Can return: OutlineJoin enumerator or NothingEnum 
	 * enumerator.
	 */
	endJoin: any;
	/**
	 * The conditions to search for or change to. Specify the 
	 * "nothing" enum for "Any" or an empty list for 
	 * "[Unconditional]". Can return: Array of Strings or 
	 * NothingEnum enumerator. Can also accept: Array of 
	 * Conditions.
	 */
	appliedConditions: any;
	/**
	 * Paragraph direction. Can return: ParagraphDirectionOptions 
	 * enumerator or NothingEnum enumerator.
	 */
	paragraphDirection: any;
	/**
	 * Paragraph justification. Can return: 
	 * ParagraphJustificationOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	paragraphJustification: any;
	/**
	 * If true, use overlapping swash forms in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfOverlapSwash: any;
	/**
	 * If true, use stylistic alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfStylisticAlternate: any;
	/**
	 * If true, use alternate justification forms in OpenType 
	 * fonts. Can return: Boolean or NothingEnum enumerator.
	 */
	otfJustificationAlternate: any;
	/**
	 * If true, use stretched alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfStretchedAlternate: any;
	/**
	 * The direction of the character. Can return: 
	 * CharacterDirectionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	characterDirection: any;
	/**
	 * The keyboard direction of the character. Can return: 
	 * CharacterDirectionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	keyboardDirection: any;
	/**
	 * The digits type. Can return: DigitsTypeOptions enumerator or 
	 * NothingEnum enumerator.
	 */
	digitsType: any;
	/**
	 * Use of Kashidas for justification. Can return: 
	 * KashidasOptions enumerator or NothingEnum enumerator.
	 */
	kashidas: any;
	/**
	 * Position of diacriticical characters. Can return: 
	 * DiacriticPositionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	diacriticPosition: any;
	/**
	 * The x (horizontal) offset for diacritic adjustment. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	xOffsetDiacritic: any;
	/**
	 * The y (vertical) offset for diacritic adjustment. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	yOffsetDiacritic: any;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	keepWithPrevious: any;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40), 
	 * SpanColumnCountOptions enumerator or NothingEnum enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns. Can return: SpanColumnTypeOptions 
	 * enumerator or NothingEnum enumerator.
	 */
	spanColumnType: any;
	/**
	 * The inside gutter if the paragraph splits columns. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	splitColumnInsideGutter: any;
	/**
	 * The outside gutter if the paragraph splits columns. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	splitColumnOutsideGutter: any;
	/**
	 * The minimum space before a span or a split column. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	spanColumnMinSpaceBefore: any;
	/**
	 * The minimum space after a span or a split column. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	spanColumnMinSpaceAfter: any;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line. Can return: CharacterAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	characterAlignment: any;
	/**
	 * The amount of horizontal character compression. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	tsume: any;
	/**
	 * The amount of space before each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	leadingAki: any;
	/**
	 * The amount of space after each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	trailingAki: any;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	characterRotation: any;
	/**
	 * The number of grid squares in which to arrange the text. . 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	jidori: any;
	/**
	 * The amount (as a percentage) of shatai obliquing to apply. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	shataiMagnification: any;
	/**
	 * The shatai lens angle (in degrees). Can return: Real or 
	 * NothingEnum enumerator.
	 */
	shataiDegreeAngle: any;
	/**
	 * If true, applies shatai rotation. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustRotation: any;
	/**
	 * If true, adjusts shatai tsume. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustTsume: any;
	/**
	 * If true, makes the character horizontal in vertical text. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	tatechuyoko: any;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoXOffset: any;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoYOffset: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch, String 
	 * or NothingEnum enumerator.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenTint: any;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenStrokeTint: any;
	/**
	 * The stroke weight (in points) of kenten characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	kentenWeight: any;
	/**
	 * The method of overprinting the kenten fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintFill: any;
	/**
	 * The method of overprinting the kenten stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintStroke: any;
	/**
	 * The style of kenten characters. Can return: KentenCharacter 
	 * enumerator or NothingEnum enumerator.
	 */
	kentenKind: any;
	/**
	 * The distance between kenten characters and their parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	kentenPlacement: any;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters. . Can return: KentenAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	kentenAlignment: any;
	/**
	 * The kenten position relative to the parent character. Can 
	 * return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	kentenPosition: any;
	/**
	 * The font to use for kenten characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/**
	 * The size (in points) of kenten characters. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	kentenFontSize: any;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size. Can return: Real or NothingEnum enumerator.
	 */
	kentenXScale: any;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size. . Can return: Real or NothingEnum enumerator.
	 */
	kentenYScale: any;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kentenCustomCharacter: any;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom. . Can return: 
	 * KentenCharacterSet enumerator or NothingEnum enumerator.
	 */
	kentenCharacterSet: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100). Can return: Real or NothingEnum enumerator.
	 */
	rubyTint: any;
	/**
	 * The stroke weight (in points) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyWeight: any;
	/**
	 * The method of overprinting the ruby fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintFill: any;
	/**
	 * The method of overprinting the ruby stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintStroke: any;
	/**
	 * The stroke tint (as a percentage) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyStrokeTint: any;
	/**
	 * The font applied to ruby characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/**
	 * The size (in points) of ruby characters. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyFontSize: any;
	/**
	 * If true, uses OpenType Pro fonts for ruby. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyOpenTypePro: any;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyXScale: any;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rubyYScale: any;
	/**
	 * The ruby type. Can return: RubyTypes enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyType: any;
	/**
	 * The ruby alignment. Can return: RubyAlignments enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyAlignment: any;
	/**
	 * The position of ruby characters relative to the parent text. 
	 * Can return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyPosition: any;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyXOffset: any;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyYOffset: any;
	/**
	 * The ruby spacing relative to the parent text. . Can return: 
	 * RubyParentSpacing enumerator or NothingEnum enumerator.
	 */
	rubyParentSpacing: any;
	/**
	 * If true, auto aligns ruby. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	rubyAutoAlign: any;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyOverhang: any;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyAutoScaling: any;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyParentScalingPercent: any;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text. Can return: RubyOverhang enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyParentOverhangAmount: any;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby. Can return: Short Integer or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyDigits: any;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyIncludeRoman: any;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	rubyAutoTcyAutoScale: any;
	/**
	 * If true, turns on warichu. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	warichu: any;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	warichuSize: any;
	/**
	 * The number of lines of warichu within a single normal line. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuLines: any;
	/**
	 * The gap between lines of warichu characters. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	warichuLineSpacing: any;
	/**
	 * The warichu alignment. Can return: WarichuAlignment 
	 * enumerator or NothingEnum enumerator.
	 */
	warichuAlignment: any;
	/**
	 * The minimum number of characters allowed after a line break. 
	 * . Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsAfterBreak: any;
	/**
	 * The minimum number of characters allowed before a line 
	 * break. Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsBeforeBreak: any;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	otfProportionalMetrics: any;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical. . Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	otfHVKana: any;
	/**
	 * If true, applies italics to half-width alphanumerics. . Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfRomanItalics: any;
	/**
	 * If true, the line changes size when characters are scaled. . 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	scaleAffectsLineHeight: any;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids. Can return: Boolean or NothingEnum enumerator.
	 */
	cjkGridTracking: any;
	/**
	 * The glyph variant to substitute for standard glyphs. Can 
	 * return: AlternateGlyphForms enumerator or NothingEnum 
	 * enumerator.
	 */
	glyphForm: any;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph. Can return: Boolean or NothingEnum enumerator.
	 */
	paragraphGyoudori: any;
	/**
	 * The alignment to the frame grid or baseline grid. Can 
	 * return: GridAlignment enumerator or NothingEnum enumerator.
	 */
	gridAlignment: any;
	/**
	 * The manual gyoudori setting. Can return: Short Integer or 
	 * NothingEnum enumerator.
	 */
	gridGyoudori: any;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	autoTcy: any;
	/**
	 * If true, auto tcy includes Roman characters. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	autoTcyIncludeRoman: any;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator, String or 
	 * NothingEnum enumerator.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined. Can return: KinsokuType 
	 * enumerator or NothingEnum enumerator.
	 */
	kinsokuType: any;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect. Can return: 
	 * KinsokuHangTypes enumerator or NothingEnum enumerator.
	 */
	kinsokuHangType: any;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	bunriKinshi: any;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String, 
	 * MojikumiTableDefaults enumerator or NothingEnum enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rensuuji: any;
	/**
	 * If true, rotates Roman characters in vertical text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	rotateSingleByteCharacters: any;
	/**
	 * The point from which leading is measured from line to line. 
	 * Can return: LeadingModel enumerator or NothingEnum 
	 * enumerator.
	 */
	leadingModel: any;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	treatIdeographicSpaceAsSpace: any;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	allowArbitraryHyphenation: any;
	/**
	 * The text after string expression for bullets. Can return: 
	 * String or NothingEnum enumerator.
	 */
	bulletsTextAfter: any;
	/**
	 * The list to be part of. Can return: NumberingList, String or 
	 * NothingEnum enumerator.
	 */
	appliedNumberingList: any;
	/**
	 * The level of the paragraph. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	numberingLevel: any;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator, String or NothingEnum enumerator.
	 */
	numberingFormat: any;
	/**
	 * Continue the numbering at this level. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	numberingContinue: any;
	/**
	 * Determines starting number in a numbered list. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	numberingStartAt: any;
	/**
	 * If true, apply the numbering restart policy. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	numberingApplyRestartPolicy: any;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle, String or NothingEnum 
	 * enumerator.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle, String or NothingEnum enumerator.
	 */
	numberingCharacterStyle: any;
	/**
	 * The number string expression for numbering. Can return: 
	 * String or NothingEnum enumerator.
	 */
	numberingExpression: any;
	/**
	 * List type for bullets and numbering. Can return: ListType 
	 * enumerator or NothingEnum enumerator.
	 */
	bulletsAndNumberingListType: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindTextPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindTextPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Find grep preferences.
 * @class
 * @extends Preference
 */
export declare class FindGrepPreference extends Preference {
	/**
	 * Numbering restart policies. Can return: 
	 * NumberingRestartPolicy or NothingEnum enumerator.
	 */
	readonly numberingRestartPolicies: any;
	/**
	 * Bullet character. Can return: Bullet or NothingEnum 
	 * enumerator.
	 */
	readonly bulletChar: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FindGrepPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long. Can return: Real or NothingEnum enumerator.
	 */
	paragraphKashidaWidth: any;
	/**
	 * The FindGrepPreference to find. Can return: String or 
	 * NothingEnum enumerator.
	 */
	findWhat: any;
	/**
	 * The character style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * CharacterStyle.
	 */
	appliedCharacterStyle: any;
	/**
	 * The paragraph style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * ParagraphStyle.
	 */
	appliedParagraphStyle: any;
	/**
	 * The amount to indent the first line. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	firstLineIndent: any;
	/**
	 * The width of the left indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	leftIndent: any;
	/**
	 * The width of the right indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	rightIndent: any;
	/**
	 * The height of the paragraph space above. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceBefore: any;
	/**
	 * The height of the paragraph space below. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceAfter: any;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean, BalanceLinesStyle enumerator or NothingEnum 
	 * enumerator.
	 */
	balanceRaggedLines: any;
	/**
	 * The paragraph alignment. Can return: Justification 
	 * enumerator or NothingEnum enumerator.
	 */
	justification: any;
	/**
	 * The alignment to use for lines that contain a single word. 
	 * Can return: SingleWordJustification enumerator or 
	 * NothingEnum enumerator.
	 */
	singleWordJustification: any;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	autoLeading: any;
	/**
	 * The number of lines to drop cap. Can return: Short Integer 
	 * (0 - 25) or NothingEnum enumerator.
	 */
	dropCapLines: any;
	/**
	 * The number of characters to drop cap. Can return: Short 
	 * Integer (0 - 150) or NothingEnum enumerator.
	 */
	dropCapCharacters: any;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	keepLinesTogether: any;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepAllLinesTogether: any;
	/**
	 * The minimum number of lines to keep with the next paragraph. 
	 * Can return: Short Integer (0 - 5) or NothingEnum enumerator.
	 */
	keepWithNext: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break. Can return: Short Integer (1 - 
	 * 50) or NothingEnum enumerator.
	 */
	keepFirstLines: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break. Can return: Short Integer (1 - 50) or 
	 * NothingEnum enumerator.
	 */
	keepLastLines: any;
	/**
	 * The location at which to start the paragraph. Can return: 
	 * StartParagraph enumerator or NothingEnum enumerator.
	 */
	startParagraph: any;
	/**
	 * The text composer to use to compose the text. Can return: 
	 * String or NothingEnum enumerator.
	 */
	composer: any;
	/**
	 * The amount to indent the last line in the paragraph. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	lastLineIndent: any;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	hyphenateLastWord: any;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	dropcapDetail: any;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated. Can return: Boolean or NothingEnum enumerator.
	 */
	hyphenateAcrossColumns: any;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepRuleAboveInFrame: any;
	/**
	 * If true, ignores optical edge alignment for the paragraph. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	ignoreEdgeAlignment: any;
	/**
	 * The font applied to the FindGrepPreference, specified as 
	 * either a font object or the name of font family. Can return: 
	 * Font, String or NothingEnum enumerator.
	 */
	appliedFont: any;
	/**
	 * The name of the font style. Can return: String or 
	 * NothingEnum enumerator.
	 */
	fontStyle: any;
	/** The text size. Can return: Unit or NothingEnum enumerator. */
	pointSize: any;
	/**
	 * The leading applied to the text. Can return: Unit, Leading 
	 * enumerator or NothingEnum enumerator.
	 */
	leading: any;
	/**
	 * The type of pair kerning. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kerningMethod: any;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	tracking: any;
	/**
	 * The capitalization scheme. Can return: Capitalization 
	 * enumerator or NothingEnum enumerator.
	 */
	capitalization: any;
	/**
	 * The text position relative to the baseline. Can return: 
	 * Position enumerator or NothingEnum enumerator.
	 */
	position: any;
	/**
	 * If true, underlines the text. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	underline: any;
	/**
	 * If true, draws a strikethrough line through the text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThru: any;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	ligatures: any;
	/**
	 * If true, keeps the text on the same line. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	noBreak: any;
	/**
	 * The horizontal scaling applied to the FindGrepPreference. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	horizontalScale: any;
	/**
	 * The vertical scaling applied to the FindGrepPreference. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	verticalScale: any;
	/**
	 * The baseline shift applied to the text. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	baselineShift: any;
	/**
	 * The skew angle of the FindGrepPreference. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	skew: any;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * FindGrepPreference. (To specify a tint percentage, use a 
	 * number in the range of 0 to 100; to use the inherited or 
	 * overridden value, use -1.). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	fillTint: any;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * FindGrepPreference. (To specify a tint percentage, use a 
	 * number in the range of 0 to 100; to use the inherited or 
	 * overridden value, use -1.). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strokeTint: any;
	/**
	 * The stroke weight applied to the characters of the text. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	strokeWeight: any;
	/**
	 * If true, the stroke of the characters will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	overprintStroke: any;
	/**
	 * If true, the fill color of the characters will overprint. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	overprintFill: any;
	/**
	 * The figure style in OpenType fonts. Can return: 
	 * OTFFigureStyle enumerator or NothingEnum enumerator.
	 */
	otfFigureStyle: any;
	/**
	 * If true, uses ordinals in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfOrdinal: any;
	/**
	 * If true, uses fractions in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfFraction: any;
	/**
	 * If true, uses discretionary ligatures in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfDiscretionaryLigature: any;
	/**
	 * If true, uses titling forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfTitling: any;
	/**
	 * If true, uses contextual alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfContextualAlternate: any;
	/**
	 * If true, uses swash forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSwash: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch, String or NothingEnum 
	 * enumerator.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100). Can return: Real or NothingEnum enumerator.
	 */
	underlineTint: any;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid. Can return: Real or NothingEnum enumerator.
	 */
	underlineGapTint: any;
	/**
	 * If true, the underline stroke color will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	underlineOverprint: any;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint. Can return: Boolean or NothingEnum enumerator.
	 */
	underlineGapOverprint: any;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline. Can return: Unit or NothingEnum enumerator.
	 */
	underlineOffset: any;
	/**
	 * The stroke weight of the underline stroke. Can return: Unit 
	 * or NothingEnum enumerator.
	 */
	underlineWeight: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch, 
	 * String or NothingEnum enumerator.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughTint: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughGapTint: any;
	/**
	 * If true, the strikethrough stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughOverprint: any;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid. Can return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughGapOverprint: any;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline. Can return: Unit or NothingEnum 
	 * enumerator.
	 */
	strikeThroughOffset: any;
	/**
	 * The stroke weight of the strikethrough stroke. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	strikeThroughWeight: any;
	/**
	 * If true, use a slashed zeroes in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSlashedZero: any;
	/**
	 * If true, use historical forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfHistorical: any;
	/**
	 * The stylistic sets to use in OpenType fonts. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	otfStylisticSets: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	gradientFillLength: any;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientFillAngle: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gradientStrokeLength: any;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientStrokeAngle: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientFillStart: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientStrokeStart: any;
	/**
	 * If true, uses mark positioning in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfMark: any;
	/**
	 * If true, uses localized forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfLocale: any;
	/**
	 * The OpenType positional form. Can return: PositionalForms 
	 * enumerator or NothingEnum enumerator.
	 */
	positionalForm: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a fill color, to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Swatch.
	 */
	fillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a stroke color, to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: Swatch.
	 */
	strokeColor: any;
	/**
	 * The language to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Language or 
	 * LanguageWithVendors.
	 */
	appliedLanguage: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em. . Can return: Real or 
	 * NothingEnum enumerator.
	 */
	kerningValue: any;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join. Can return: Real (0 - 1000) or NothingEnum enumerator.
	 */
	miterLimit: any;
	/**
	 * The stroke alignment applied to the text. Can return: 
	 * TextStrokeAlign enumerator or NothingEnum enumerator.
	 */
	strokeAlignment: any;
	/**
	 * The stroke join type applied to the characters of the text. 
	 * Can return: OutlineJoin enumerator or NothingEnum 
	 * enumerator.
	 */
	endJoin: any;
	/**
	 * The conditions to search for or change to. Specify the 
	 * "nothing" enum for "Any" or an empty list for 
	 * "[Unconditional]". Can return: Array of Strings or 
	 * NothingEnum enumerator. Can also accept: Array of 
	 * Conditions.
	 */
	appliedConditions: any;
	/**
	 * Paragraph direction. Can return: ParagraphDirectionOptions 
	 * enumerator or NothingEnum enumerator.
	 */
	paragraphDirection: any;
	/**
	 * Paragraph justification. Can return: 
	 * ParagraphJustificationOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	paragraphJustification: any;
	/**
	 * If true, use overlapping swash forms in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfOverlapSwash: any;
	/**
	 * If true, use stylistic alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfStylisticAlternate: any;
	/**
	 * If true, use alternate justification forms in OpenType 
	 * fonts. Can return: Boolean or NothingEnum enumerator.
	 */
	otfJustificationAlternate: any;
	/**
	 * If true, use stretched alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfStretchedAlternate: any;
	/**
	 * The direction of the character. Can return: 
	 * CharacterDirectionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	characterDirection: any;
	/**
	 * The keyboard direction of the character. Can return: 
	 * CharacterDirectionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	keyboardDirection: any;
	/**
	 * The digits type. Can return: DigitsTypeOptions enumerator or 
	 * NothingEnum enumerator.
	 */
	digitsType: any;
	/**
	 * Use of Kashidas for justification. Can return: 
	 * KashidasOptions enumerator or NothingEnum enumerator.
	 */
	kashidas: any;
	/**
	 * Position of diacriticical characters. Can return: 
	 * DiacriticPositionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	diacriticPosition: any;
	/**
	 * The x (horizontal) offset for diacritic adjustment. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	xOffsetDiacritic: any;
	/**
	 * The y (vertical) offset for diacritic adjustment. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	yOffsetDiacritic: any;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	keepWithPrevious: any;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40), 
	 * SpanColumnCountOptions enumerator or NothingEnum enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns. Can return: SpanColumnTypeOptions 
	 * enumerator or NothingEnum enumerator.
	 */
	spanColumnType: any;
	/**
	 * The inside gutter if the paragraph splits columns. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	splitColumnInsideGutter: any;
	/**
	 * The outside gutter if the paragraph splits columns. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	splitColumnOutsideGutter: any;
	/**
	 * The minimum space before a span or a split column. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	spanColumnMinSpaceBefore: any;
	/**
	 * The minimum space after a span or a split column. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	spanColumnMinSpaceAfter: any;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line. Can return: CharacterAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	characterAlignment: any;
	/**
	 * The amount of horizontal character compression. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	tsume: any;
	/**
	 * The amount of space before each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	leadingAki: any;
	/**
	 * The amount of space after each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	trailingAki: any;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	characterRotation: any;
	/**
	 * The number of grid squares in which to arrange the text. . 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	jidori: any;
	/**
	 * The amount (as a percentage) of shatai obliquing to apply. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	shataiMagnification: any;
	/**
	 * The shatai lens angle (in degrees). Can return: Real or 
	 * NothingEnum enumerator.
	 */
	shataiDegreeAngle: any;
	/**
	 * If true, applies shatai rotation. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustRotation: any;
	/**
	 * If true, adjusts shatai tsume. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustTsume: any;
	/**
	 * If true, makes the character horizontal in vertical text. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	tatechuyoko: any;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoXOffset: any;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoYOffset: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch, String 
	 * or NothingEnum enumerator.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenTint: any;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenStrokeTint: any;
	/**
	 * The stroke weight (in points) of kenten characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	kentenWeight: any;
	/**
	 * The method of overprinting the kenten fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintFill: any;
	/**
	 * The method of overprinting the kenten stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintStroke: any;
	/**
	 * The style of kenten characters. Can return: KentenCharacter 
	 * enumerator or NothingEnum enumerator.
	 */
	kentenKind: any;
	/**
	 * The distance between kenten characters and their parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	kentenPlacement: any;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters. . Can return: KentenAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	kentenAlignment: any;
	/**
	 * The kenten position relative to the parent character. Can 
	 * return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	kentenPosition: any;
	/**
	 * The font to use for kenten characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/**
	 * The size (in points) of kenten characters. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	kentenFontSize: any;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size. Can return: Real or NothingEnum enumerator.
	 */
	kentenXScale: any;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size. . Can return: Real or NothingEnum enumerator.
	 */
	kentenYScale: any;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kentenCustomCharacter: any;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom. . Can return: 
	 * KentenCharacterSet enumerator or NothingEnum enumerator.
	 */
	kentenCharacterSet: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100). Can return: Real or NothingEnum enumerator.
	 */
	rubyTint: any;
	/**
	 * The stroke weight (in points) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyWeight: any;
	/**
	 * The method of overprinting the ruby fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintFill: any;
	/**
	 * The method of overprinting the ruby stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintStroke: any;
	/**
	 * The stroke tint (as a percentage) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyStrokeTint: any;
	/**
	 * The font applied to ruby characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/**
	 * The size (in points) of ruby characters. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyFontSize: any;
	/**
	 * If true, uses OpenType Pro fonts for ruby. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyOpenTypePro: any;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyXScale: any;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rubyYScale: any;
	/**
	 * The ruby type. Can return: RubyTypes enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyType: any;
	/**
	 * The ruby alignment. Can return: RubyAlignments enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyAlignment: any;
	/**
	 * The position of ruby characters relative to the parent text. 
	 * Can return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyPosition: any;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyXOffset: any;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyYOffset: any;
	/**
	 * The ruby spacing relative to the parent text. . Can return: 
	 * RubyParentSpacing enumerator or NothingEnum enumerator.
	 */
	rubyParentSpacing: any;
	/**
	 * If true, auto aligns ruby. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	rubyAutoAlign: any;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyOverhang: any;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyAutoScaling: any;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyParentScalingPercent: any;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text. Can return: RubyOverhang enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyParentOverhangAmount: any;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby. Can return: Short Integer or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyDigits: any;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyIncludeRoman: any;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	rubyAutoTcyAutoScale: any;
	/**
	 * If true, turns on warichu. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	warichu: any;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	warichuSize: any;
	/**
	 * The number of lines of warichu within a single normal line. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuLines: any;
	/**
	 * The gap between lines of warichu characters. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	warichuLineSpacing: any;
	/**
	 * The warichu alignment. Can return: WarichuAlignment 
	 * enumerator or NothingEnum enumerator.
	 */
	warichuAlignment: any;
	/**
	 * The minimum number of characters allowed after a line break. 
	 * . Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsAfterBreak: any;
	/**
	 * The minimum number of characters allowed before a line 
	 * break. Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsBeforeBreak: any;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	otfProportionalMetrics: any;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical. . Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	otfHVKana: any;
	/**
	 * If true, applies italics to half-width alphanumerics. . Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfRomanItalics: any;
	/**
	 * If true, the line changes size when characters are scaled. . 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	scaleAffectsLineHeight: any;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids. Can return: Boolean or NothingEnum enumerator.
	 */
	cjkGridTracking: any;
	/**
	 * The glyph variant to substitute for standard glyphs. Can 
	 * return: AlternateGlyphForms enumerator or NothingEnum 
	 * enumerator.
	 */
	glyphForm: any;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph. Can return: Boolean or NothingEnum enumerator.
	 */
	paragraphGyoudori: any;
	/**
	 * The alignment to the frame grid or baseline grid. Can 
	 * return: GridAlignment enumerator or NothingEnum enumerator.
	 */
	gridAlignment: any;
	/**
	 * The manual gyoudori setting. Can return: Short Integer or 
	 * NothingEnum enumerator.
	 */
	gridGyoudori: any;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	autoTcy: any;
	/**
	 * If true, auto tcy includes Roman characters. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	autoTcyIncludeRoman: any;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator, String or 
	 * NothingEnum enumerator.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined. Can return: KinsokuType 
	 * enumerator or NothingEnum enumerator.
	 */
	kinsokuType: any;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect. Can return: 
	 * KinsokuHangTypes enumerator or NothingEnum enumerator.
	 */
	kinsokuHangType: any;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	bunriKinshi: any;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String, 
	 * MojikumiTableDefaults enumerator or NothingEnum enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rensuuji: any;
	/**
	 * If true, rotates Roman characters in vertical text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	rotateSingleByteCharacters: any;
	/**
	 * The point from which leading is measured from line to line. 
	 * Can return: LeadingModel enumerator or NothingEnum 
	 * enumerator.
	 */
	leadingModel: any;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	treatIdeographicSpaceAsSpace: any;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	allowArbitraryHyphenation: any;
	/**
	 * The text after string expression for bullets. Can return: 
	 * String or NothingEnum enumerator.
	 */
	bulletsTextAfter: any;
	/**
	 * The list to be part of. Can return: NumberingList, String or 
	 * NothingEnum enumerator.
	 */
	appliedNumberingList: any;
	/**
	 * The level of the paragraph. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	numberingLevel: any;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator, String or NothingEnum enumerator.
	 */
	numberingFormat: any;
	/**
	 * Continue the numbering at this level. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	numberingContinue: any;
	/**
	 * Determines starting number in a numbered list. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	numberingStartAt: any;
	/**
	 * If true, apply the numbering restart policy. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	numberingApplyRestartPolicy: any;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle, String or NothingEnum 
	 * enumerator.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle, String or NothingEnum enumerator.
	 */
	numberingCharacterStyle: any;
	/**
	 * The number string expression for numbering. Can return: 
	 * String or NothingEnum enumerator.
	 */
	numberingExpression: any;
	/**
	 * List type for bullets and numbering. Can return: ListType 
	 * enumerator or NothingEnum enumerator.
	 */
	bulletsAndNumberingListType: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindGrepPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindGrepPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Find glyph preferences.
 * @class
 * @extends Preference
 */
export declare class FindGlyphPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FindGlyphPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The GID/CID of the glyph. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	glyphID: any;
	/**
	 * The Registry Ordered font group. Can return: Array of 2 
	 * Strings or NothingEnum enumerator.
	 */
	rosFontGroup: any;
	/**
	 * The font applied to the FindGlyphPreference, specified as 
	 * either a font object or the name of font family. Can return: 
	 * Font, String or NothingEnum enumerator.
	 */
	appliedFont: any;
	/**
	 * The name of the font style. Can return: String or 
	 * NothingEnum enumerator.
	 */
	fontStyle: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindGlyphPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindGlyphPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Find object preferences.
 * @class
 * @extends Preference
 */
export declare class FindObjectPreference extends Preference {
	/**
	 * Transparency settings. Can return: 
	 * FindChangeTransparencySetting or NothingEnum enumerator.
	 */
	readonly transparencySettings: any;
	/**
	 * Transparency settings for the stroke. Can return: 
	 * FindChangeStrokeTransparencySetting or NothingEnum 
	 * enumerator.
	 */
	readonly strokeTransparencySettings: any;
	/**
	 * Transparency settings for the fill applied to the 
	 * FindObjectPreference. Can return: 
	 * FindChangeFillTransparencySetting or NothingEnum enumerator.
	 */
	readonly fillTransparencySettings: any;
	/**
	 * Transparency settings for the content of the 
	 * FindObjectPreference. Can return: 
	 * FindChangeContentTransparencySetting or NothingEnum 
	 * enumerator.
	 */
	readonly contentTransparencySettings: any;
	/**
	 * If true, the text wrap path has been explicitly modified by 
	 * the user. Can return: Boolean or NothingEnum enumerator.
	 */
	readonly userModifiedWrap: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FindObjectPreference (a Application). */
	readonly parent: Application;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The direction of the story. Can return: 
	 * StoryDirectionOptions enumerator or NothingEnum enumerator.
	 */
	storyDirection: any;
	/**
	 * The point in the referenced object relative to which to 
	 * position the anchored object. Notes: Valid only when 
	 * anchored position is custom. Can return: AnchorPoint 
	 * enumerator or NothingEnum enumerator.
	 */
	positionReferencePoint: any;
	/**
	 * If true, text wraps on the master spread apply to that 
	 * spread only, and not to any pages the master spread has been 
	 * applied to. Can return: Boolean or NothingEnum enumerator.
	 */
	applyToMasterPageOnly: any;
	/**
	 * Text wrap side options. Can return: TextWrapSideOptions 
	 * enumerator or NothingEnum enumerator.
	 */
	textWrapSide: any;
	/**
	 * The minimum space between text and the edges of the wrapped 
	 * object. Specify four values in the format [top, left, 
	 * bottom, right]. . Can return: Ordered array containing 
	 * top:Unit, left:Unit, bottom:Unit, right:Unit or NothingEnum 
	 * enumerator.
	 */
	textWrapOffset: any;
	/**
	 * The text wrap mode. . Can return: TextWrapModes enumerator 
	 * or NothingEnum enumerator.
	 */
	textWrapMode: any;
	/**
	 * The applied object style(s). Can return: String or 
	 * NothingEnum enumerator. Can also accept: ObjectStyle.
	 */
	appliedObjectStyles: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the FindObjectPreference. . Can return: Swatch 
	 * or NothingEnum enumerator. Can also accept: String.
	 */
	fillColor: any;
	/**
	 * The percent of tint to use in the FindObjectPreference's 
	 * fill color. (To specify a tint percent, use a number in the 
	 * range of 0 to 100; to use the inherited or overridden value, 
	 * use -1.). Can return: Real or NothingEnum enumerator.
	 */
	fillTint: any;
	/**
	 * If true, the FindObjectPreference's fill color overprints 
	 * any underlying objects. If false, the fill color knocks out 
	 * the underlying colors. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	overprintFill: any;
	/**
	 * The weight (in points) to apply to the 
	 * FindObjectPreference's stroke. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	strokeWeight: any;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join. Can return: Real (1 - 500) or NothingEnum enumerator.
	 */
	miterLimit: any;
	/**
	 * The end shape of an open path. Can return: EndCap enumerator 
	 * or NothingEnum enumerator.
	 */
	endCap: any;
	/**
	 * The corner join applied to the FindObjectPreference. Can 
	 * return: EndJoin enumerator or NothingEnum enumerator.
	 */
	endJoin: any;
	/**
	 * The name of the stroke style to apply. Can return: 
	 * StrokeStyle or NothingEnum enumerator. Can also accept: 
	 * String.
	 */
	strokeType: any;
	/**
	 * The corner adjustment applied to the FindObjectPreference. 
	 * Can return: StrokeCornerAdjustment enumerator or NothingEnum 
	 * enumerator.
	 */
	strokeCornerAdjustment: any;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3]. Can 
	 * return: Array of Units or NothingEnum enumerator.
	 */
	strokeDashAndGap: any;
	/**
	 * The arrowhead applied to the start of the path. . Can 
	 * return: ArrowHead enumerator or NothingEnum enumerator.
	 */
	leftLineEnd: any;
	/**
	 * The arrowhead applied to the end of the path. Can return: 
	 * ArrowHead enumerator or NothingEnum enumerator.
	 */
	rightLineEnd: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the FindObjectPreference. Can return: Swatch 
	 * or NothingEnum enumerator. Can also accept: String.
	 */
	strokeColor: any;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.). Can 
	 * return: Real or NothingEnum enumerator.
	 */
	strokeTint: any;
	/**
	 * If true, the FindObjectPreference's stroke color overprints 
	 * any underlying objects. If false, the stroke color knocks 
	 * out the  underlying colors. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	overprintStroke: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	gapColor: any;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.). Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gapTint: any;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	overprintGap: any;
	/**
	 * The stroke alignment applied to the FindObjectPreference. 
	 * Can return: StrokeAlignment enumerator or NothingEnum 
	 * enumerator.
	 */
	strokeAlignment: any;
	/**
	 * If true, the FindObjectPreference does not print. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	nonprinting: any;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * FindObjectPreference. (Range: -180 to 180). Can return: Real 
	 * or NothingEnum enumerator.
	 */
	gradientFillAngle: any;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * FindObjectPreference. (Range: -180 to 180). Can return: Real 
	 * or NothingEnum enumerator.
	 */
	gradientStrokeAngle: any;
	/**
	 * The number of columns in the text frame. Note: Depending on 
	 * the value of use fixed column width, the number of columns 
	 * can change automatically when the text frame size changes. 
	 * Can return: Long Integer (1 - 40) or NothingEnum enumerator.
	 */
	textColumnCount: any;
	/**
	 * The space between columns in the text frame. Can return: 
	 * Unit (0 - 8640 points) or NothingEnum enumerator.
	 */
	textColumnGutter: any;
	/**
	 * The column width of the columns in the text frame. Can 
	 * return: Unit (0 - 8640 points) or NothingEnum enumerator.
	 */
	textColumnFixedWidth: any;
	/**
	 * If true, maintains column width when the text frame is 
	 * resized. If false, causes columns to resize when the text 
	 * frame is resized. Note: When true, resizing the frame can 
	 * change the number of columns in the frame. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	useFixedColumnWidth: any;
	/**
	 * The amount to offset text from the edges of the text frame, 
	 * specified either as a single value applied uniformly to all 
	 * sides of the text frame or as an array of 4 values in the 
	 * format [top inset, left inset, bottom inset, right inset]. 
	 * Can return: Unit (0 - 8640 points), Array of 4 Units (0 - 
	 * 8640 points) or NothingEnum enumerator.
	 */
	insetSpacing: any;
	/**
	 * The distance between the baseline of the text and the top 
	 * inset of the text frame or cell. Can return: FirstBaseline 
	 * enumerator or NothingEnum enumerator.
	 */
	firstBaselineOffset: any;
	/**
	 * The minimum distance between the baseline of the text and 
	 * the top inset of the text frame or cell. Can return: Unit (0 
	 * - 8640 points) or NothingEnum enumerator.
	 */
	minimumFirstBaselineOffset: any;
	/**
	 * The vertical alignment of the text content. . Can return: 
	 * VerticalJustification enumerator or NothingEnum enumerator.
	 */
	verticalJustification: any;
	/**
	 * The maximum amount of vertical space between two paragraphs. 
	 * Note: Valid only when vertical justification is justified; 
	 * the specified amount is applied in addition to the space 
	 * before or space after values defined for the paragraph. Can 
	 * return: Unit (0 - 8640 points) or NothingEnum enumerator.
	 */
	verticalThreshold: any;
	/**
	 * If true, ignores text wrap settings for drawn or placed 
	 * objects in the text frame. . Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	ignoreWrap: any;
	/**
	 * If true, uses a custom baseline frame grid. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	useCustomBaselineFrameGrid: any;
	/**
	 * The amount to offset the baseline grid. Can return: Unit (0 
	 * - 8640 points) or NothingEnum enumerator.
	 */
	startingOffsetForBaselineFrameGrid: any;
	/**
	 * The location (top of page, top margin, top of frame, or 
	 * frame inset) on which to base the custom baseline grid. Can 
	 * return: BaselineFrameGridRelativeOption enumerator or 
	 * NothingEnum enumerator.
	 */
	baselineFrameGridRelativeOption: any;
	/**
	 * The distance between grid lines. Can return: Unit (1 - 8640 
	 * points) or NothingEnum enumerator.
	 */
	baselineFrameGridIncrement: any;
	/**
	 * The grid line color, specified either as an array of three 
	 * doubles, each in the range 0 to 255 and representing R, G, 
	 * and B values, or as a UI color. Can return: Array of 3 Reals 
	 * (0 - 255) or UIColors enumerator or NothingEnum enumerator.
	 */
	baselineFrameGridColor: any;
	/**
	 * If true, inverts the text wrap. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	inverse: any;
	/**
	 * The contour type. Can return: ContourOptionsTypes enumerator 
	 * or NothingEnum enumerator.
	 */
	contourType: any;
	/**
	 * If true, creates interior clipping paths within the 
	 * surrounding clipping path. Note: Valid only when clipping 
	 * type is alpha channel or detect edges. . Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	includeInsideEdges: any;
	/**
	 * The position of the anchored object relative to the anchor. 
	 * Can return: AnchorPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	anchoredPosition: any;
	/**
	 * If true, the position of the anchored object is relative to 
	 * the binding spine of the page or spread. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	spineRelative: any;
	/**
	 * If true, prevents manual positioning of the anchored object. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	lockPosition: any;
	/**
	 * If true, pins the position of the anchored object within the 
	 * text frame top and bottom. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	pinPosition: any;
	/**
	 * The point in the anchored object to position. Can return: 
	 * AnchorPoint enumerator or NothingEnum enumerator.
	 */
	anchorPoint: any;
	/**
	 * The horizontal reference point on the page. Valid only when 
	 * anchored position is custom. Can return: AnchoredRelativeTo 
	 * enumerator or NothingEnum enumerator.
	 */
	horizontalReferencePoint: any;
	/**
	 * The vertical reference point on the page. Valid when 
	 * anchored position is custom. Can return: 
	 * VerticallyRelativeTo enumerator or NothingEnum enumerator.
	 */
	verticalReferencePoint: any;
	/**
	 * The horizontal (x) offset of the anchored object. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	anchorXoffset: any;
	/**
	 * The vertical (y) offset of the anchored object. Corresponds 
	 * to the space after property for above line positioning. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	anchorYoffset: any;
	/**
	 * The space above an above-line anchored object. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	anchorSpaceAbove: any;
	/**
	 * If true, adjust the position of characters at the edges of 
	 * the frame to provide a better appearance. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	opticalMarginAlignment: any;
	/**
	 * The point size used as the basis for calculating optical 
	 * margin alignment. (Range: 0.1 to 1296). Can return: Unit 
	 * (0.1 - 1296 points) or NothingEnum enumerator.
	 */
	opticalMarginSize: any;
	/**
	 * The amount in measurement units to crop the left edge of a 
	 * graphic. Can return: Unit or NothingEnum enumerator.
	 */
	leftCrop: any;
	/**
	 * The amount in measurement units to crop the top edge of a 
	 * graphic. Can return: Unit or NothingEnum enumerator.
	 */
	topCrop: any;
	/**
	 * The amount in measurement units to crop the right edge of a 
	 * graphic. Can return: Unit or NothingEnum enumerator.
	 */
	rightCrop: any;
	/**
	 * The amount in measurement units to crop the bottom edge of a 
	 * graphic. Can return: Unit or NothingEnum enumerator.
	 */
	bottomCrop: any;
	/**
	 * The frame fitting option to apply to placed or pasted 
	 * content if the frame is empty. Can be applied to a frame, 
	 * object style, or document or to the application. Can return: 
	 * EmptyFrameFittingOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	fittingOnEmptyFrame: any;
	/**
	 * The point with which to align the image empty when fitting 
	 * in a frame. For information, see frame fitting options. Can 
	 * return: AnchorPoint enumerator or NothingEnum enumerator.
	 */
	fittingAlignment: any;
	/**
	 * The arrowhead alignment applied to the FindObjectPreference. 
	 * Can return: ArrowHeadAlignmentEnum enumerator or NothingEnum 
	 * enumerator.
	 */
	arrowHeadAlignment: any;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	leftArrowHeadScale: any;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rightArrowHeadScale: any;
	/**
	 * If true, enable overrides to document footnote options. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	enableOverrides: any;
	/**
	 * If true, enable straddling footnotes. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	spanFootnotesAcross: any;
	/**
	 * Minimum Spacing Before First Footnote. Can return: Unit (0 - 
	 * 8640 points) or NothingEnum enumerator.
	 */
	minimumSpacingOption: any;
	/**
	 * Space between footnotes. Can return: Unit (0 - 8640 points) 
	 * or NothingEnum enumerator.
	 */
	spaceBetweenFootnotes: any;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight. Can return: CornerOptions enumerator or 
	 * NothingEnum enumerator.
	 */
	topLeftCornerOption: any;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes. Can return: CornerOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	topRightCornerOption: any;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes. Can return: CornerOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	bottomLeftCornerOption: any;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes. Can return: CornerOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	bottomRightCornerOption: any;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes. Can return: Unit or NothingEnum 
	 * enumerator.
	 */
	topLeftCornerRadius: any;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	topRightCornerRadius: any;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	bottomLeftCornerRadius: any;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	bottomRightCornerRadius: any;
	/**
	 * Auto-sizing type of text frame. Based on type, reference 
	 * value is automatically adjusted. For example, for height 
	 * only type, top-left reference point becomes top-center. 
	 * Recommended to change auto-sizing type, after setting other 
	 * auto-sizing attributes. Can return: AutoSizingTypeEnum 
	 * enumerator or NothingEnum enumerator.
	 */
	autoSizingType: any;
	/**
	 * The reference point for auto sizing of text frame. Reference 
	 * point is automatically adjusted to the suitable value 
	 * depending on the auto-sizing type value. As an example, top 
	 * left reference point becomes top center for height only 
	 * dimension. Can return: AutoSizingReferenceEnum enumerator or 
	 * NothingEnum enumerator.
	 */
	autoSizingReferencePoint: any;
	/**
	 * If true, minimum height value is used during the auto-sizing 
	 * of text frame. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	useMinimumHeightForAutoSizing: any;
	/**
	 * The minimum height for auto-sizing of the text frame. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	minimumHeightForAutoSizing: any;
	/**
	 * If true, minimum width value is used during the auto-sizing 
	 * of text frame. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	useMinimumWidthForAutoSizing: any;
	/**
	 * The minimum width for auto-sizing of the text frame. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	minimumWidthForAutoSizing: any;
	/**
	 * If true, line-breaks are not introduced after auto sizing. . 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	useNoLineBreaksForAutoSizing: any;
	/**
	 * Preserve Appearance from Layout. Can return: 
	 * PreserveAppearanceFromLayoutEnum enumerator or NothingEnum 
	 * enumerator.
	 */
	preserveAppearanceFromLayout: any;
	/**
	 * The source type of alternate text. Can return: SourceType 
	 * enumerator or NothingEnum enumerator.
	 */
	altTextSourceType: any;
	/**
	 * The source type of actual text. Can return: SourceType 
	 * enumerator or NothingEnum enumerator.
	 */
	actualTextSourceType: any;
	/**
	 * The custom alternate text entered by the user. Can return: 
	 * String or NothingEnum enumerator.
	 */
	customAltText: any;
	/**
	 * The custom actual text entered by the user. Can return: 
	 * String or NothingEnum enumerator.
	 */
	customActualText: any;
	/**
	 * The metadata property to use as source of alternate text. 
	 * Can return: Ordered array containing namespacePrefix:String, 
	 * propertyPath:String or NothingEnum enumerator.
	 */
	altMetadataProperty: any;
	/**
	 * The metadata property to use as source of actual text. Can 
	 * return: Ordered array containing namespacePrefix:String, 
	 * propertyPath:String or NothingEnum enumerator.
	 */
	actualMetadataProperty: any;
	/**
	 * The tag type of page item. Can return: TagType enumerator or 
	 * NothingEnum enumerator.
	 */
	applyTagType: any;
	/**
	 * Allows user to select the image format for conversion. Can 
	 * return: ImageFormat enumerator or NothingEnum enumerator.
	 */
	imageConversionType: any;
	/**
	 * The export resolution. Can return: ImageResolution 
	 * enumerator or NothingEnum enumerator.
	 */
	imageExportResolution: any;
	/**
	 * The color palette for GIF conversion. Note: Not valid when 
	 * image conversion is JPEG. . Can return: GIFOptionsPalette 
	 * enumerator or NothingEnum enumerator.
	 */
	gifOptionsPalette: any;
	/**
	 * If true, generates interlaced GIFs. Note: Not valid  when 
	 * image conversion is JPEG. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	gifOptionsInterlaced: any;
	/**
	 * The quality of converted JPEG images. Note: Not valid when 
	 * image conversion is GIF. . Can return: JPEGOptionsQuality 
	 * enumerator or NothingEnum enumerator.
	 */
	jpegOptionsQuality: any;
	/**
	 * The formatting method for converted JPEG images. Note: Not 
	 * valid  when image conversion is GIF. Can return: 
	 * JPEGOptionsFormat enumerator or NothingEnum enumerator.
	 */
	jpegOptionsFormat: any;
	/**
	 * Alignment applied to images. Can return: ImageAlignmentType 
	 * enumerator or NothingEnum enumerator.
	 */
	imageAlignment: any;
	/**
	 * Space Before applied to images. Can return: Real (0 - 8640) 
	 * or NothingEnum enumerator.
	 */
	imageSpaceBefore: any;
	/**
	 * Space After applied to images. Can return: Real (0 - 8640) 
	 * or NothingEnum enumerator.
	 */
	imageSpaceAfter: any;
	/**
	 * If true, image page break settings will be used in objects. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	useImagePageBreak: any;
	/**
	 * Image page break settings to be used with objects. Can 
	 * return: ImagePageBreakType enumerator or NothingEnum 
	 * enumerator.
	 */
	imagePageBreak: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Provides the alternate text for the object */
	altText(): string;
	/** Provides the actual text for the object */
	actualText(): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindObjectPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindObjectPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Find transliterate preferences.
 * @class
 * @extends Preference
 */
export declare class FindTransliteratePreference extends Preference {
	/**
	 * Bullet character. Can return: Bullet or NothingEnum 
	 * enumerator.
	 */
	readonly bulletChar: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindTransliteratePreference (a 
	 * Application).
	 */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * The character type to find. Can return: 
	 * FindChangeTransliterateCharacterTypes enumerator or 
	 * NothingEnum enumerator.
	 */
	findCharacterType: any;
	/**
	 * The character style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * CharacterStyle.
	 */
	appliedCharacterStyle: any;
	/**
	 * The paragraph style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * ParagraphStyle.
	 */
	appliedParagraphStyle: any;
	/**
	 * The amount to indent the first line. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	firstLineIndent: any;
	/**
	 * The width of the left indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	leftIndent: any;
	/**
	 * The width of the right indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	rightIndent: any;
	/**
	 * The height of the paragraph space above. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceBefore: any;
	/**
	 * The height of the paragraph space below. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceAfter: any;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean, BalanceLinesStyle enumerator or NothingEnum 
	 * enumerator.
	 */
	balanceRaggedLines: any;
	/**
	 * The paragraph alignment. Can return: Justification 
	 * enumerator or NothingEnum enumerator.
	 */
	justification: any;
	/**
	 * The alignment to use for lines that contain a single word. 
	 * Can return: SingleWordJustification enumerator or 
	 * NothingEnum enumerator.
	 */
	singleWordJustification: any;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	autoLeading: any;
	/**
	 * The number of lines to drop cap. Can return: Short Integer 
	 * (0 - 25) or NothingEnum enumerator.
	 */
	dropCapLines: any;
	/**
	 * The number of characters to drop cap. Can return: Short 
	 * Integer (0 - 150) or NothingEnum enumerator.
	 */
	dropCapCharacters: any;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	keepLinesTogether: any;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepAllLinesTogether: any;
	/**
	 * The minimum number of lines to keep with the next paragraph. 
	 * Can return: Short Integer (0 - 5) or NothingEnum enumerator.
	 */
	keepWithNext: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break. Can return: Short Integer (1 - 
	 * 50) or NothingEnum enumerator.
	 */
	keepFirstLines: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break. Can return: Short Integer (1 - 50) or 
	 * NothingEnum enumerator.
	 */
	keepLastLines: any;
	/**
	 * The location at which to start the paragraph. Can return: 
	 * StartParagraph enumerator or NothingEnum enumerator.
	 */
	startParagraph: any;
	/**
	 * The text composer to use to compose the text. Can return: 
	 * String or NothingEnum enumerator.
	 */
	composer: any;
	/**
	 * The amount to indent the last line in the paragraph. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	lastLineIndent: any;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	hyphenateLastWord: any;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	dropcapDetail: any;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated. Can return: Boolean or NothingEnum enumerator.
	 */
	hyphenateAcrossColumns: any;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepRuleAboveInFrame: any;
	/**
	 * If true, ignores optical edge alignment for the paragraph. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	ignoreEdgeAlignment: any;
	/**
	 * The font applied to the FindTransliteratePreference, 
	 * specified as either a font object or the name of font 
	 * family. Can return: Font, String or NothingEnum enumerator.
	 */
	appliedFont: any;
	/**
	 * The name of the font style. Can return: String or 
	 * NothingEnum enumerator.
	 */
	fontStyle: any;
	/** The text size. Can return: Unit or NothingEnum enumerator. */
	pointSize: any;
	/**
	 * The leading applied to the text. Can return: Unit, Leading 
	 * enumerator or NothingEnum enumerator.
	 */
	leading: any;
	/**
	 * The type of pair kerning. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kerningMethod: any;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	tracking: any;
	/**
	 * The capitalization scheme. Can return: Capitalization 
	 * enumerator or NothingEnum enumerator.
	 */
	capitalization: any;
	/**
	 * The text position relative to the baseline. Can return: 
	 * Position enumerator or NothingEnum enumerator.
	 */
	position: any;
	/**
	 * If true, underlines the text. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	underline: any;
	/**
	 * If true, draws a strikethrough line through the text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThru: any;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	ligatures: any;
	/**
	 * If true, keeps the text on the same line. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	noBreak: any;
	/**
	 * The horizontal scaling applied to the 
	 * FindTransliteratePreference. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	horizontalScale: any;
	/**
	 * The vertical scaling applied to the 
	 * FindTransliteratePreference. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	verticalScale: any;
	/**
	 * The baseline shift applied to the text. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	baselineShift: any;
	/**
	 * The skew angle of the FindTransliteratePreference. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	skew: any;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * FindTransliteratePreference. (To specify a tint percentage, 
	 * use a number in the range of 0 to 100; to use the inherited 
	 * or overridden value, use -1.). Can return: Real or 
	 * NothingEnum enumerator.
	 */
	fillTint: any;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * FindTransliteratePreference. (To specify a tint percentage, 
	 * use a number in the range of 0 to 100; to use the inherited 
	 * or overridden value, use -1.). Can return: Real or 
	 * NothingEnum enumerator.
	 */
	strokeTint: any;
	/**
	 * The stroke weight applied to the characters of the text. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	strokeWeight: any;
	/**
	 * If true, the stroke of the characters will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	overprintStroke: any;
	/**
	 * If true, the fill color of the characters will overprint. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	overprintFill: any;
	/**
	 * The figure style in OpenType fonts. Can return: 
	 * OTFFigureStyle enumerator or NothingEnum enumerator.
	 */
	otfFigureStyle: any;
	/**
	 * If true, uses ordinals in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfOrdinal: any;
	/**
	 * If true, uses fractions in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfFraction: any;
	/**
	 * If true, uses discretionary ligatures in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfDiscretionaryLigature: any;
	/**
	 * If true, uses titling forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfTitling: any;
	/**
	 * If true, uses contextual alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfContextualAlternate: any;
	/**
	 * If true, uses swash forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSwash: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch, String or NothingEnum 
	 * enumerator.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100). Can return: Real or NothingEnum enumerator.
	 */
	underlineTint: any;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid. Can return: Real or NothingEnum enumerator.
	 */
	underlineGapTint: any;
	/**
	 * If true, the underline stroke color will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	underlineOverprint: any;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint. Can return: Boolean or NothingEnum enumerator.
	 */
	underlineGapOverprint: any;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline. Can return: Unit or NothingEnum enumerator.
	 */
	underlineOffset: any;
	/**
	 * The stroke weight of the underline stroke. Can return: Unit 
	 * or NothingEnum enumerator.
	 */
	underlineWeight: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch, 
	 * String or NothingEnum enumerator.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughTint: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughGapTint: any;
	/**
	 * If true, the strikethrough stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughOverprint: any;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid. Can return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughGapOverprint: any;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline. Can return: Unit or NothingEnum 
	 * enumerator.
	 */
	strikeThroughOffset: any;
	/**
	 * The stroke weight of the strikethrough stroke. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	strikeThroughWeight: any;
	/**
	 * If true, use a slashed zeroes in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSlashedZero: any;
	/**
	 * If true, use historical forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfHistorical: any;
	/**
	 * The stylistic sets to use in OpenType fonts. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	otfStylisticSets: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	gradientFillLength: any;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientFillAngle: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gradientStrokeLength: any;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientStrokeAngle: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientFillStart: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientStrokeStart: any;
	/**
	 * If true, uses mark positioning in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfMark: any;
	/**
	 * If true, uses localized forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfLocale: any;
	/**
	 * The OpenType positional form. Can return: PositionalForms 
	 * enumerator or NothingEnum enumerator.
	 */
	positionalForm: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a fill color, to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Swatch.
	 */
	fillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a stroke color, to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: Swatch.
	 */
	strokeColor: any;
	/**
	 * The language to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Language or 
	 * LanguageWithVendors.
	 */
	appliedLanguage: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em. . Can return: Real or 
	 * NothingEnum enumerator.
	 */
	kerningValue: any;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line. Can return: CharacterAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	characterAlignment: any;
	/**
	 * The amount of horizontal character compression. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	tsume: any;
	/**
	 * The amount of space before each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	leadingAki: any;
	/**
	 * The amount of space after each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	trailingAki: any;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	characterRotation: any;
	/**
	 * The number of grid squares in which to arrange the text. . 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	jidori: any;
	/**
	 * The amount (as a percentage) of shatai obliquing to apply. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	shataiMagnification: any;
	/**
	 * The shatai lens angle (in degrees). Can return: Real or 
	 * NothingEnum enumerator.
	 */
	shataiDegreeAngle: any;
	/**
	 * If true, applies shatai rotation. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustRotation: any;
	/**
	 * If true, adjusts shatai tsume. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustTsume: any;
	/**
	 * If true, makes the character horizontal in vertical text. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	tatechuyoko: any;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoXOffset: any;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoYOffset: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch, String 
	 * or NothingEnum enumerator.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenTint: any;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenStrokeTint: any;
	/**
	 * The stroke weight (in points) of kenten characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	kentenWeight: any;
	/**
	 * The method of overprinting the kenten fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintFill: any;
	/**
	 * The method of overprinting the kenten stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintStroke: any;
	/**
	 * The style of kenten characters. Can return: KentenCharacter 
	 * enumerator or NothingEnum enumerator.
	 */
	kentenKind: any;
	/**
	 * The distance between kenten characters and their parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	kentenPlacement: any;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters. . Can return: KentenAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	kentenAlignment: any;
	/**
	 * The kenten position relative to the parent character. Can 
	 * return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	kentenPosition: any;
	/**
	 * The font to use for kenten characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/**
	 * The size (in points) of kenten characters. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	kentenFontSize: any;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size. Can return: Real or NothingEnum enumerator.
	 */
	kentenXScale: any;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size. . Can return: Real or NothingEnum enumerator.
	 */
	kentenYScale: any;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kentenCustomCharacter: any;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom. . Can return: 
	 * KentenCharacterSet enumerator or NothingEnum enumerator.
	 */
	kentenCharacterSet: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100). Can return: Real or NothingEnum enumerator.
	 */
	rubyTint: any;
	/**
	 * The stroke weight (in points) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyWeight: any;
	/**
	 * The method of overprinting the ruby fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintFill: any;
	/**
	 * The method of overprinting the ruby stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintStroke: any;
	/**
	 * The stroke tint (as a percentage) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyStrokeTint: any;
	/**
	 * The font applied to ruby characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/**
	 * The size (in points) of ruby characters. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyFontSize: any;
	/**
	 * If true, uses OpenType Pro fonts for ruby. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyOpenTypePro: any;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyXScale: any;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rubyYScale: any;
	/**
	 * The ruby type. Can return: RubyTypes enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyType: any;
	/**
	 * The ruby alignment. Can return: RubyAlignments enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyAlignment: any;
	/**
	 * The position of ruby characters relative to the parent text. 
	 * Can return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyPosition: any;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyXOffset: any;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyYOffset: any;
	/**
	 * The ruby spacing relative to the parent text. . Can return: 
	 * RubyParentSpacing enumerator or NothingEnum enumerator.
	 */
	rubyParentSpacing: any;
	/**
	 * If true, auto aligns ruby. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	rubyAutoAlign: any;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyOverhang: any;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyAutoScaling: any;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyParentScalingPercent: any;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text. Can return: RubyOverhang enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyParentOverhangAmount: any;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby. Can return: Short Integer or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyDigits: any;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyIncludeRoman: any;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	rubyAutoTcyAutoScale: any;
	/**
	 * If true, turns on warichu. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	warichu: any;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	warichuSize: any;
	/**
	 * The number of lines of warichu within a single normal line. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuLines: any;
	/**
	 * The gap between lines of warichu characters. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	warichuLineSpacing: any;
	/**
	 * The warichu alignment. Can return: WarichuAlignment 
	 * enumerator or NothingEnum enumerator.
	 */
	warichuAlignment: any;
	/**
	 * The minimum number of characters allowed after a line break. 
	 * . Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsAfterBreak: any;
	/**
	 * The minimum number of characters allowed before a line 
	 * break. Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsBeforeBreak: any;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	otfProportionalMetrics: any;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical. . Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	otfHVKana: any;
	/**
	 * If true, applies italics to half-width alphanumerics. . Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfRomanItalics: any;
	/**
	 * If true, the line changes size when characters are scaled. . 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	scaleAffectsLineHeight: any;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids. Can return: Boolean or NothingEnum enumerator.
	 */
	cjkGridTracking: any;
	/**
	 * The glyph variant to substitute for standard glyphs. Can 
	 * return: AlternateGlyphForms enumerator or NothingEnum 
	 * enumerator.
	 */
	glyphForm: any;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph. Can return: Boolean or NothingEnum enumerator.
	 */
	paragraphGyoudori: any;
	/**
	 * The alignment to the frame grid or baseline grid. Can 
	 * return: GridAlignment enumerator or NothingEnum enumerator.
	 */
	gridAlignment: any;
	/**
	 * The manual gyoudori setting. Can return: Short Integer or 
	 * NothingEnum enumerator.
	 */
	gridGyoudori: any;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	autoTcy: any;
	/**
	 * If true, auto tcy includes Roman characters. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	autoTcyIncludeRoman: any;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator, String or 
	 * NothingEnum enumerator.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined. Can return: KinsokuType 
	 * enumerator or NothingEnum enumerator.
	 */
	kinsokuType: any;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect. Can return: 
	 * KinsokuHangTypes enumerator or NothingEnum enumerator.
	 */
	kinsokuHangType: any;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	bunriKinshi: any;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String, 
	 * MojikumiTableDefaults enumerator or NothingEnum enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rensuuji: any;
	/**
	 * If true, rotates Roman characters in vertical text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	rotateSingleByteCharacters: any;
	/**
	 * The point from which leading is measured from line to line. 
	 * Can return: LeadingModel enumerator or NothingEnum 
	 * enumerator.
	 */
	leadingModel: any;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	treatIdeographicSpaceAsSpace: any;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	allowArbitraryHyphenation: any;
	/**
	 * The text after string expression for bullets. Can return: 
	 * String or NothingEnum enumerator.
	 */
	bulletsTextAfter: any;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle, String or NothingEnum 
	 * enumerator.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The alignment of the bullet character. Can return: 
	 * ListAlignment enumerator or NothingEnum enumerator.
	 */
	bulletsAlignment: any;
	/**
	 * The list to be part of. Can return: NumberingList, String or 
	 * NothingEnum enumerator.
	 */
	appliedNumberingList: any;
	/**
	 * The level of the paragraph. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	numberingLevel: any;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator, String or NothingEnum enumerator.
	 */
	numberingFormat: any;
	/**
	 * The number string expression for numbering. Can return: 
	 * String or NothingEnum enumerator.
	 */
	numberingExpression: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle, String or NothingEnum enumerator.
	 */
	numberingCharacterStyle: any;
	/**
	 * Continue the numbering at this level. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	numberingContinue: any;
	/**
	 * Determines starting number in a numbered list. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	numberingStartAt: any;
	/**
	 * If true, apply the numbering restart policy. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	numberingApplyRestartPolicy: any;
	/**
	 * The alignment of the number. Can return: ListAlignment 
	 * enumerator or NothingEnum enumerator.
	 */
	numberingAlignment: any;
	/**
	 * List type for bullets and numbering. Can return: ListType 
	 * enumerator or NothingEnum enumerator.
	 */
	bulletsAndNumberingListType: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindTransliteratePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindTransliteratePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Change text preferences.
 * @class
 * @extends Preference
 */
export declare class ChangeTextPreference extends Preference {
	/**
	 * Numbering restart policies. Can return: 
	 * NumberingRestartPolicy or NothingEnum enumerator.
	 */
	readonly numberingRestartPolicies: any;
	/**
	 * Bullet character. Can return: Bullet or NothingEnum 
	 * enumerator.
	 */
	readonly bulletChar: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ChangeTextPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long. Can return: Real or NothingEnum enumerator.
	 */
	paragraphKashidaWidth: any;
	/**
	 * The replacement ChangeTextPreference. Can return: String or 
	 * NothingEnum enumerator.
	 */
	changeTo: any;
	/**
	 * The character style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * CharacterStyle.
	 */
	appliedCharacterStyle: any;
	/**
	 * The paragraph style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * ParagraphStyle.
	 */
	appliedParagraphStyle: any;
	/**
	 * The XML tag applied to the element. Can return: String or 
	 * NothingEnum enumerator. Can also accept: XMLTag.
	 */
	markupTag: any;
	/**
	 * The amount to indent the first line. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	firstLineIndent: any;
	/**
	 * The width of the left indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	leftIndent: any;
	/**
	 * The width of the right indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	rightIndent: any;
	/**
	 * The height of the paragraph space above. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceBefore: any;
	/**
	 * The height of the paragraph space below. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceAfter: any;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean, BalanceLinesStyle enumerator or NothingEnum 
	 * enumerator.
	 */
	balanceRaggedLines: any;
	/**
	 * The paragraph alignment. Can return: Justification 
	 * enumerator or NothingEnum enumerator.
	 */
	justification: any;
	/**
	 * The alignment to use for lines that contain a single word. 
	 * Can return: SingleWordJustification enumerator or 
	 * NothingEnum enumerator.
	 */
	singleWordJustification: any;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	autoLeading: any;
	/**
	 * The number of lines to drop cap. Can return: Short Integer 
	 * (0 - 25) or NothingEnum enumerator.
	 */
	dropCapLines: any;
	/**
	 * The number of characters to drop cap. Can return: Short 
	 * Integer (0 - 150) or NothingEnum enumerator.
	 */
	dropCapCharacters: any;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	keepLinesTogether: any;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepAllLinesTogether: any;
	/**
	 * The minimum number of lines to keep with the next paragraph. 
	 * Can return: Short Integer (0 - 5) or NothingEnum enumerator.
	 */
	keepWithNext: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break. Can return: Short Integer (1 - 
	 * 50) or NothingEnum enumerator.
	 */
	keepFirstLines: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break. Can return: Short Integer (1 - 50) or 
	 * NothingEnum enumerator.
	 */
	keepLastLines: any;
	/**
	 * The location at which to start the paragraph. Can return: 
	 * StartParagraph enumerator or NothingEnum enumerator.
	 */
	startParagraph: any;
	/**
	 * The text composer to use to compose the text. Can return: 
	 * String or NothingEnum enumerator.
	 */
	composer: any;
	/**
	 * The amount to indent the last line in the paragraph. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	lastLineIndent: any;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	hyphenateLastWord: any;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	dropcapDetail: any;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated. Can return: Boolean or NothingEnum enumerator.
	 */
	hyphenateAcrossColumns: any;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepRuleAboveInFrame: any;
	/**
	 * If true, ignores optical edge alignment for the paragraph. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	ignoreEdgeAlignment: any;
	/**
	 * The font applied to the ChangeTextPreference, specified as 
	 * either a font object or the name of font family. Can return: 
	 * Font, String or NothingEnum enumerator.
	 */
	appliedFont: any;
	/**
	 * The name of the font style. Can return: String or 
	 * NothingEnum enumerator.
	 */
	fontStyle: any;
	/** The text size. Can return: Unit or NothingEnum enumerator. */
	pointSize: any;
	/**
	 * The leading applied to the text. Can return: Unit, Leading 
	 * enumerator or NothingEnum enumerator.
	 */
	leading: any;
	/**
	 * The type of pair kerning. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kerningMethod: any;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	tracking: any;
	/**
	 * The capitalization scheme. Can return: Capitalization 
	 * enumerator or NothingEnum enumerator.
	 */
	capitalization: any;
	/**
	 * The text position relative to the baseline. Can return: 
	 * Position enumerator or NothingEnum enumerator.
	 */
	position: any;
	/**
	 * If true, underlines the text. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	underline: any;
	/**
	 * If true, draws a strikethrough line through the text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThru: any;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	ligatures: any;
	/**
	 * If true, keeps the text on the same line. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	noBreak: any;
	/**
	 * The horizontal scaling applied to the ChangeTextPreference. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	horizontalScale: any;
	/**
	 * The vertical scaling applied to the ChangeTextPreference. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	verticalScale: any;
	/**
	 * The baseline shift applied to the text. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	baselineShift: any;
	/**
	 * The skew angle of the ChangeTextPreference. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	skew: any;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * ChangeTextPreference. (To specify a tint percentage, use a 
	 * number in the range of 0 to 100; to use the inherited or 
	 * overridden value, use -1.). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	fillTint: any;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * ChangeTextPreference. (To specify a tint percentage, use a 
	 * number in the range of 0 to 100; to use the inherited or 
	 * overridden value, use -1.). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strokeTint: any;
	/**
	 * The stroke weight applied to the characters of the text. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	strokeWeight: any;
	/**
	 * If true, the stroke of the characters will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	overprintStroke: any;
	/**
	 * If true, the fill color of the characters will overprint. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	overprintFill: any;
	/**
	 * The figure style in OpenType fonts. Can return: 
	 * OTFFigureStyle enumerator or NothingEnum enumerator.
	 */
	otfFigureStyle: any;
	/**
	 * If true, uses ordinals in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfOrdinal: any;
	/**
	 * If true, uses fractions in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfFraction: any;
	/**
	 * If true, uses discretionary ligatures in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfDiscretionaryLigature: any;
	/**
	 * If true, uses titling forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfTitling: any;
	/**
	 * If true, uses contextual alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfContextualAlternate: any;
	/**
	 * If true, uses swash forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSwash: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch, String or NothingEnum 
	 * enumerator.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100). Can return: Real or NothingEnum enumerator.
	 */
	underlineTint: any;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid. Can return: Real or NothingEnum enumerator.
	 */
	underlineGapTint: any;
	/**
	 * If true, the underline stroke color will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	underlineOverprint: any;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint. Can return: Boolean or NothingEnum enumerator.
	 */
	underlineGapOverprint: any;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline. Can return: Unit or NothingEnum enumerator.
	 */
	underlineOffset: any;
	/**
	 * The stroke weight of the underline stroke. Can return: Unit 
	 * or NothingEnum enumerator.
	 */
	underlineWeight: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch, 
	 * String or NothingEnum enumerator.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughTint: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughGapTint: any;
	/**
	 * If true, the strikethrough stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughOverprint: any;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid. Can return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughGapOverprint: any;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline. Can return: Unit or NothingEnum 
	 * enumerator.
	 */
	strikeThroughOffset: any;
	/**
	 * The stroke weight of the strikethrough stroke. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	strikeThroughWeight: any;
	/**
	 * If true, use a slashed zeroes in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSlashedZero: any;
	/**
	 * If true, use historical forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfHistorical: any;
	/**
	 * The stylistic sets to use in OpenType fonts. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	otfStylisticSets: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	gradientFillLength: any;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientFillAngle: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gradientStrokeLength: any;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientStrokeAngle: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientFillStart: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientStrokeStart: any;
	/**
	 * If true, uses mark positioning in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfMark: any;
	/**
	 * If true, uses localized forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfLocale: any;
	/**
	 * The OpenType positional form. Can return: PositionalForms 
	 * enumerator or NothingEnum enumerator.
	 */
	positionalForm: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a fill color, to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Swatch.
	 */
	fillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a stroke color, to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: Swatch.
	 */
	strokeColor: any;
	/**
	 * The language to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Language or 
	 * LanguageWithVendors.
	 */
	appliedLanguage: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em. . Can return: Real or 
	 * NothingEnum enumerator.
	 */
	kerningValue: any;
	/**
	 * The change conditions mode, change either replaces applied 
	 * conditions or adds to applied conditions. Can return: 
	 * ChangeConditionsModes enumerator or NothingEnum enumerator.
	 */
	changeConditionsMode: any;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join. Can return: Real (0 - 1000) or NothingEnum enumerator.
	 */
	miterLimit: any;
	/**
	 * The stroke alignment applied to the text. Can return: 
	 * TextStrokeAlign enumerator or NothingEnum enumerator.
	 */
	strokeAlignment: any;
	/**
	 * The stroke join type applied to the characters of the text. 
	 * Can return: OutlineJoin enumerator or NothingEnum 
	 * enumerator.
	 */
	endJoin: any;
	/**
	 * The conditions to search for or change to. Specify the 
	 * "nothing" enum for "Any" or an empty list for 
	 * "[Unconditional]". Can return: Array of Strings or 
	 * NothingEnum enumerator. Can also accept: Array of 
	 * Conditions.
	 */
	appliedConditions: any;
	/**
	 * Paragraph direction. Can return: ParagraphDirectionOptions 
	 * enumerator or NothingEnum enumerator.
	 */
	paragraphDirection: any;
	/**
	 * Paragraph justification. Can return: 
	 * ParagraphJustificationOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	paragraphJustification: any;
	/**
	 * If true, use overlapping swash forms in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfOverlapSwash: any;
	/**
	 * If true, use stylistic alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfStylisticAlternate: any;
	/**
	 * If true, use alternate justification forms in OpenType 
	 * fonts. Can return: Boolean or NothingEnum enumerator.
	 */
	otfJustificationAlternate: any;
	/**
	 * If true, use stretched alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfStretchedAlternate: any;
	/**
	 * The direction of the character. Can return: 
	 * CharacterDirectionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	characterDirection: any;
	/**
	 * The keyboard direction of the character. Can return: 
	 * CharacterDirectionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	keyboardDirection: any;
	/**
	 * The digits type. Can return: DigitsTypeOptions enumerator or 
	 * NothingEnum enumerator.
	 */
	digitsType: any;
	/**
	 * Use of Kashidas for justification. Can return: 
	 * KashidasOptions enumerator or NothingEnum enumerator.
	 */
	kashidas: any;
	/**
	 * Position of diacriticical characters. Can return: 
	 * DiacriticPositionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	diacriticPosition: any;
	/**
	 * The x (horizontal) offset for diacritic adjustment. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	xOffsetDiacritic: any;
	/**
	 * The y (vertical) offset for diacritic adjustment. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	yOffsetDiacritic: any;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	keepWithPrevious: any;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40), 
	 * SpanColumnCountOptions enumerator or NothingEnum enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns. Can return: SpanColumnTypeOptions 
	 * enumerator or NothingEnum enumerator.
	 */
	spanColumnType: any;
	/**
	 * The inside gutter if the paragraph splits columns. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	splitColumnInsideGutter: any;
	/**
	 * The outside gutter if the paragraph splits columns. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	splitColumnOutsideGutter: any;
	/**
	 * The minimum space before a span or a split column. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	spanColumnMinSpaceBefore: any;
	/**
	 * The minimum space after a span or a split column. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	spanColumnMinSpaceAfter: any;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line. Can return: CharacterAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	characterAlignment: any;
	/**
	 * The amount of horizontal character compression. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	tsume: any;
	/**
	 * The amount of space before each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	leadingAki: any;
	/**
	 * The amount of space after each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	trailingAki: any;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	characterRotation: any;
	/**
	 * The number of grid squares in which to arrange the text. . 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	jidori: any;
	/**
	 * The amount (as a percentage) of shatai obliquing to apply. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	shataiMagnification: any;
	/**
	 * The shatai lens angle (in degrees). Can return: Real or 
	 * NothingEnum enumerator.
	 */
	shataiDegreeAngle: any;
	/**
	 * If true, applies shatai rotation. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustRotation: any;
	/**
	 * If true, adjusts shatai tsume. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustTsume: any;
	/**
	 * If true, makes the character horizontal in vertical text. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	tatechuyoko: any;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoXOffset: any;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoYOffset: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch, String 
	 * or NothingEnum enumerator.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenTint: any;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenStrokeTint: any;
	/**
	 * The stroke weight (in points) of kenten characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	kentenWeight: any;
	/**
	 * The method of overprinting the kenten fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintFill: any;
	/**
	 * The method of overprinting the kenten stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintStroke: any;
	/**
	 * The style of kenten characters. Can return: KentenCharacter 
	 * enumerator or NothingEnum enumerator.
	 */
	kentenKind: any;
	/**
	 * The distance between kenten characters and their parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	kentenPlacement: any;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters. . Can return: KentenAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	kentenAlignment: any;
	/**
	 * The kenten position relative to the parent character. Can 
	 * return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	kentenPosition: any;
	/**
	 * The font to use for kenten characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/**
	 * The size (in points) of kenten characters. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	kentenFontSize: any;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size. Can return: Real or NothingEnum enumerator.
	 */
	kentenXScale: any;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size. . Can return: Real or NothingEnum enumerator.
	 */
	kentenYScale: any;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kentenCustomCharacter: any;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom. . Can return: 
	 * KentenCharacterSet enumerator or NothingEnum enumerator.
	 */
	kentenCharacterSet: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100). Can return: Real or NothingEnum enumerator.
	 */
	rubyTint: any;
	/**
	 * The stroke weight (in points) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyWeight: any;
	/**
	 * The method of overprinting the ruby fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintFill: any;
	/**
	 * The method of overprinting the ruby stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintStroke: any;
	/**
	 * The stroke tint (as a percentage) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyStrokeTint: any;
	/**
	 * The font applied to ruby characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/**
	 * The size (in points) of ruby characters. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyFontSize: any;
	/**
	 * If true, uses OpenType Pro fonts for ruby. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyOpenTypePro: any;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyXScale: any;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rubyYScale: any;
	/**
	 * The ruby type. Can return: RubyTypes enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyType: any;
	/**
	 * The ruby alignment. Can return: RubyAlignments enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyAlignment: any;
	/**
	 * The position of ruby characters relative to the parent text. 
	 * Can return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyPosition: any;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyXOffset: any;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyYOffset: any;
	/**
	 * The ruby spacing relative to the parent text. . Can return: 
	 * RubyParentSpacing enumerator or NothingEnum enumerator.
	 */
	rubyParentSpacing: any;
	/**
	 * If true, auto aligns ruby. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	rubyAutoAlign: any;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyOverhang: any;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyAutoScaling: any;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyParentScalingPercent: any;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text. Can return: RubyOverhang enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyParentOverhangAmount: any;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby. Can return: Short Integer or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyDigits: any;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyIncludeRoman: any;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	rubyAutoTcyAutoScale: any;
	/**
	 * If true, turns on warichu. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	warichu: any;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	warichuSize: any;
	/**
	 * The number of lines of warichu within a single normal line. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuLines: any;
	/**
	 * The gap between lines of warichu characters. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	warichuLineSpacing: any;
	/**
	 * The warichu alignment. Can return: WarichuAlignment 
	 * enumerator or NothingEnum enumerator.
	 */
	warichuAlignment: any;
	/**
	 * The minimum number of characters allowed after a line break. 
	 * . Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsAfterBreak: any;
	/**
	 * The minimum number of characters allowed before a line 
	 * break. Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsBeforeBreak: any;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	otfProportionalMetrics: any;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical. . Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	otfHVKana: any;
	/**
	 * If true, applies italics to half-width alphanumerics. . Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfRomanItalics: any;
	/**
	 * If true, the line changes size when characters are scaled. . 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	scaleAffectsLineHeight: any;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids. Can return: Boolean or NothingEnum enumerator.
	 */
	cjkGridTracking: any;
	/**
	 * The glyph variant to substitute for standard glyphs. Can 
	 * return: AlternateGlyphForms enumerator or NothingEnum 
	 * enumerator.
	 */
	glyphForm: any;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph. Can return: Boolean or NothingEnum enumerator.
	 */
	paragraphGyoudori: any;
	/**
	 * The alignment to the frame grid or baseline grid. Can 
	 * return: GridAlignment enumerator or NothingEnum enumerator.
	 */
	gridAlignment: any;
	/**
	 * The manual gyoudori setting. Can return: Short Integer or 
	 * NothingEnum enumerator.
	 */
	gridGyoudori: any;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	autoTcy: any;
	/**
	 * If true, auto tcy includes Roman characters. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	autoTcyIncludeRoman: any;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator, String or 
	 * NothingEnum enumerator.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined. Can return: KinsokuType 
	 * enumerator or NothingEnum enumerator.
	 */
	kinsokuType: any;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect. Can return: 
	 * KinsokuHangTypes enumerator or NothingEnum enumerator.
	 */
	kinsokuHangType: any;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	bunriKinshi: any;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String, 
	 * MojikumiTableDefaults enumerator or NothingEnum enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rensuuji: any;
	/**
	 * If true, rotates Roman characters in vertical text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	rotateSingleByteCharacters: any;
	/**
	 * The point from which leading is measured from line to line. 
	 * Can return: LeadingModel enumerator or NothingEnum 
	 * enumerator.
	 */
	leadingModel: any;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	treatIdeographicSpaceAsSpace: any;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	allowArbitraryHyphenation: any;
	/**
	 * The text after string expression for bullets. Can return: 
	 * String or NothingEnum enumerator.
	 */
	bulletsTextAfter: any;
	/**
	 * The list to be part of. Can return: NumberingList, String or 
	 * NothingEnum enumerator.
	 */
	appliedNumberingList: any;
	/**
	 * The level of the paragraph. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	numberingLevel: any;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator, String or NothingEnum enumerator.
	 */
	numberingFormat: any;
	/**
	 * Continue the numbering at this level. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	numberingContinue: any;
	/**
	 * Determines starting number in a numbered list. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	numberingStartAt: any;
	/**
	 * If true, apply the numbering restart policy. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	numberingApplyRestartPolicy: any;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle, String or NothingEnum 
	 * enumerator.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle, String or NothingEnum enumerator.
	 */
	numberingCharacterStyle: any;
	/**
	 * The number string expression for numbering. Can return: 
	 * String or NothingEnum enumerator.
	 */
	numberingExpression: any;
	/**
	 * List type for bullets and numbering. Can return: ListType 
	 * enumerator or NothingEnum enumerator.
	 */
	bulletsAndNumberingListType: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ChangeTextPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ChangeTextPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Change grep preferences.
 * @class
 * @extends Preference
 */
export declare class ChangeGrepPreference extends Preference {
	/**
	 * Numbering restart policies. Can return: 
	 * NumberingRestartPolicy or NothingEnum enumerator.
	 */
	readonly numberingRestartPolicies: any;
	/**
	 * Bullet character. Can return: Bullet or NothingEnum 
	 * enumerator.
	 */
	readonly bulletChar: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ChangeGrepPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long. Can return: Real or NothingEnum enumerator.
	 */
	paragraphKashidaWidth: any;
	/**
	 * The replacement ChangeGrepPreference. Can return: String or 
	 * NothingEnum enumerator.
	 */
	changeTo: any;
	/**
	 * The character style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * CharacterStyle.
	 */
	appliedCharacterStyle: any;
	/**
	 * The paragraph style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * ParagraphStyle.
	 */
	appliedParagraphStyle: any;
	/**
	 * The XML tag applied to the element. Can return: String or 
	 * NothingEnum enumerator. Can also accept: XMLTag.
	 */
	markupTag: any;
	/**
	 * The amount to indent the first line. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	firstLineIndent: any;
	/**
	 * The width of the left indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	leftIndent: any;
	/**
	 * The width of the right indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	rightIndent: any;
	/**
	 * The height of the paragraph space above. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceBefore: any;
	/**
	 * The height of the paragraph space below. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceAfter: any;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean, BalanceLinesStyle enumerator or NothingEnum 
	 * enumerator.
	 */
	balanceRaggedLines: any;
	/**
	 * The paragraph alignment. Can return: Justification 
	 * enumerator or NothingEnum enumerator.
	 */
	justification: any;
	/**
	 * The alignment to use for lines that contain a single word. 
	 * Can return: SingleWordJustification enumerator or 
	 * NothingEnum enumerator.
	 */
	singleWordJustification: any;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	autoLeading: any;
	/**
	 * The number of lines to drop cap. Can return: Short Integer 
	 * (0 - 25) or NothingEnum enumerator.
	 */
	dropCapLines: any;
	/**
	 * The number of characters to drop cap. Can return: Short 
	 * Integer (0 - 150) or NothingEnum enumerator.
	 */
	dropCapCharacters: any;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	keepLinesTogether: any;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepAllLinesTogether: any;
	/**
	 * The minimum number of lines to keep with the next paragraph. 
	 * Can return: Short Integer (0 - 5) or NothingEnum enumerator.
	 */
	keepWithNext: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break. Can return: Short Integer (1 - 
	 * 50) or NothingEnum enumerator.
	 */
	keepFirstLines: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break. Can return: Short Integer (1 - 50) or 
	 * NothingEnum enumerator.
	 */
	keepLastLines: any;
	/**
	 * The location at which to start the paragraph. Can return: 
	 * StartParagraph enumerator or NothingEnum enumerator.
	 */
	startParagraph: any;
	/**
	 * The text composer to use to compose the text. Can return: 
	 * String or NothingEnum enumerator.
	 */
	composer: any;
	/**
	 * The amount to indent the last line in the paragraph. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	lastLineIndent: any;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	hyphenateLastWord: any;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	dropcapDetail: any;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated. Can return: Boolean or NothingEnum enumerator.
	 */
	hyphenateAcrossColumns: any;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepRuleAboveInFrame: any;
	/**
	 * If true, ignores optical edge alignment for the paragraph. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	ignoreEdgeAlignment: any;
	/**
	 * The font applied to the ChangeGrepPreference, specified as 
	 * either a font object or the name of font family. Can return: 
	 * Font, String or NothingEnum enumerator.
	 */
	appliedFont: any;
	/**
	 * The name of the font style. Can return: String or 
	 * NothingEnum enumerator.
	 */
	fontStyle: any;
	/** The text size. Can return: Unit or NothingEnum enumerator. */
	pointSize: any;
	/**
	 * The leading applied to the text. Can return: Unit, Leading 
	 * enumerator or NothingEnum enumerator.
	 */
	leading: any;
	/**
	 * The type of pair kerning. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kerningMethod: any;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	tracking: any;
	/**
	 * The capitalization scheme. Can return: Capitalization 
	 * enumerator or NothingEnum enumerator.
	 */
	capitalization: any;
	/**
	 * The text position relative to the baseline. Can return: 
	 * Position enumerator or NothingEnum enumerator.
	 */
	position: any;
	/**
	 * If true, underlines the text. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	underline: any;
	/**
	 * If true, draws a strikethrough line through the text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThru: any;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	ligatures: any;
	/**
	 * If true, keeps the text on the same line. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	noBreak: any;
	/**
	 * The horizontal scaling applied to the ChangeGrepPreference. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	horizontalScale: any;
	/**
	 * The vertical scaling applied to the ChangeGrepPreference. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	verticalScale: any;
	/**
	 * The baseline shift applied to the text. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	baselineShift: any;
	/**
	 * The skew angle of the ChangeGrepPreference. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	skew: any;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * ChangeGrepPreference. (To specify a tint percentage, use a 
	 * number in the range of 0 to 100; to use the inherited or 
	 * overridden value, use -1.). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	fillTint: any;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * ChangeGrepPreference. (To specify a tint percentage, use a 
	 * number in the range of 0 to 100; to use the inherited or 
	 * overridden value, use -1.). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strokeTint: any;
	/**
	 * The stroke weight applied to the characters of the text. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	strokeWeight: any;
	/**
	 * If true, the stroke of the characters will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	overprintStroke: any;
	/**
	 * If true, the fill color of the characters will overprint. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	overprintFill: any;
	/**
	 * The figure style in OpenType fonts. Can return: 
	 * OTFFigureStyle enumerator or NothingEnum enumerator.
	 */
	otfFigureStyle: any;
	/**
	 * If true, uses ordinals in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfOrdinal: any;
	/**
	 * If true, uses fractions in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfFraction: any;
	/**
	 * If true, uses discretionary ligatures in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfDiscretionaryLigature: any;
	/**
	 * If true, uses titling forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfTitling: any;
	/**
	 * If true, uses contextual alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfContextualAlternate: any;
	/**
	 * If true, uses swash forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSwash: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch, String or NothingEnum 
	 * enumerator.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100). Can return: Real or NothingEnum enumerator.
	 */
	underlineTint: any;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid. Can return: Real or NothingEnum enumerator.
	 */
	underlineGapTint: any;
	/**
	 * If true, the underline stroke color will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	underlineOverprint: any;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint. Can return: Boolean or NothingEnum enumerator.
	 */
	underlineGapOverprint: any;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline. Can return: Unit or NothingEnum enumerator.
	 */
	underlineOffset: any;
	/**
	 * The stroke weight of the underline stroke. Can return: Unit 
	 * or NothingEnum enumerator.
	 */
	underlineWeight: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch, 
	 * String or NothingEnum enumerator.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughTint: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughGapTint: any;
	/**
	 * If true, the strikethrough stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughOverprint: any;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid. Can return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughGapOverprint: any;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline. Can return: Unit or NothingEnum 
	 * enumerator.
	 */
	strikeThroughOffset: any;
	/**
	 * The stroke weight of the strikethrough stroke. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	strikeThroughWeight: any;
	/**
	 * If true, use a slashed zeroes in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSlashedZero: any;
	/**
	 * If true, use historical forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfHistorical: any;
	/**
	 * The stylistic sets to use in OpenType fonts. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	otfStylisticSets: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	gradientFillLength: any;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientFillAngle: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gradientStrokeLength: any;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientStrokeAngle: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientFillStart: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientStrokeStart: any;
	/**
	 * If true, uses mark positioning in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfMark: any;
	/**
	 * If true, uses localized forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfLocale: any;
	/**
	 * The OpenType positional form. Can return: PositionalForms 
	 * enumerator or NothingEnum enumerator.
	 */
	positionalForm: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a fill color, to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Swatch.
	 */
	fillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a stroke color, to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: Swatch.
	 */
	strokeColor: any;
	/**
	 * The language to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Language or 
	 * LanguageWithVendors.
	 */
	appliedLanguage: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em. . Can return: Real or 
	 * NothingEnum enumerator.
	 */
	kerningValue: any;
	/**
	 * The change conditions mode, change either replaces applied 
	 * conditions or adds to applied conditions. Can return: 
	 * ChangeConditionsModes enumerator or NothingEnum enumerator.
	 */
	changeConditionsMode: any;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join. Can return: Real (0 - 1000) or NothingEnum enumerator.
	 */
	miterLimit: any;
	/**
	 * The stroke alignment applied to the text. Can return: 
	 * TextStrokeAlign enumerator or NothingEnum enumerator.
	 */
	strokeAlignment: any;
	/**
	 * The stroke join type applied to the characters of the text. 
	 * Can return: OutlineJoin enumerator or NothingEnum 
	 * enumerator.
	 */
	endJoin: any;
	/**
	 * The conditions to search for or change to. Specify the 
	 * "nothing" enum for "Any" or an empty list for 
	 * "[Unconditional]". Can return: Array of Strings or 
	 * NothingEnum enumerator. Can also accept: Array of 
	 * Conditions.
	 */
	appliedConditions: any;
	/**
	 * Paragraph direction. Can return: ParagraphDirectionOptions 
	 * enumerator or NothingEnum enumerator.
	 */
	paragraphDirection: any;
	/**
	 * Paragraph justification. Can return: 
	 * ParagraphJustificationOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	paragraphJustification: any;
	/**
	 * If true, use overlapping swash forms in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfOverlapSwash: any;
	/**
	 * If true, use stylistic alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfStylisticAlternate: any;
	/**
	 * If true, use alternate justification forms in OpenType 
	 * fonts. Can return: Boolean or NothingEnum enumerator.
	 */
	otfJustificationAlternate: any;
	/**
	 * If true, use stretched alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfStretchedAlternate: any;
	/**
	 * The direction of the character. Can return: 
	 * CharacterDirectionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	characterDirection: any;
	/**
	 * The keyboard direction of the character. Can return: 
	 * CharacterDirectionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	keyboardDirection: any;
	/**
	 * The digits type. Can return: DigitsTypeOptions enumerator or 
	 * NothingEnum enumerator.
	 */
	digitsType: any;
	/**
	 * Use of Kashidas for justification. Can return: 
	 * KashidasOptions enumerator or NothingEnum enumerator.
	 */
	kashidas: any;
	/**
	 * Position of diacriticical characters. Can return: 
	 * DiacriticPositionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	diacriticPosition: any;
	/**
	 * The x (horizontal) offset for diacritic adjustment. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	xOffsetDiacritic: any;
	/**
	 * The y (vertical) offset for diacritic adjustment. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	yOffsetDiacritic: any;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	keepWithPrevious: any;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40), 
	 * SpanColumnCountOptions enumerator or NothingEnum enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns. Can return: SpanColumnTypeOptions 
	 * enumerator or NothingEnum enumerator.
	 */
	spanColumnType: any;
	/**
	 * The inside gutter if the paragraph splits columns. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	splitColumnInsideGutter: any;
	/**
	 * The outside gutter if the paragraph splits columns. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	splitColumnOutsideGutter: any;
	/**
	 * The minimum space before a span or a split column. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	spanColumnMinSpaceBefore: any;
	/**
	 * The minimum space after a span or a split column. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	spanColumnMinSpaceAfter: any;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line. Can return: CharacterAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	characterAlignment: any;
	/**
	 * The amount of horizontal character compression. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	tsume: any;
	/**
	 * The amount of space before each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	leadingAki: any;
	/**
	 * The amount of space after each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	trailingAki: any;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	characterRotation: any;
	/**
	 * The number of grid squares in which to arrange the text. . 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	jidori: any;
	/**
	 * The amount (as a percentage) of shatai obliquing to apply. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	shataiMagnification: any;
	/**
	 * The shatai lens angle (in degrees). Can return: Real or 
	 * NothingEnum enumerator.
	 */
	shataiDegreeAngle: any;
	/**
	 * If true, applies shatai rotation. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustRotation: any;
	/**
	 * If true, adjusts shatai tsume. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustTsume: any;
	/**
	 * If true, makes the character horizontal in vertical text. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	tatechuyoko: any;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoXOffset: any;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoYOffset: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch, String 
	 * or NothingEnum enumerator.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenTint: any;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenStrokeTint: any;
	/**
	 * The stroke weight (in points) of kenten characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	kentenWeight: any;
	/**
	 * The method of overprinting the kenten fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintFill: any;
	/**
	 * The method of overprinting the kenten stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintStroke: any;
	/**
	 * The style of kenten characters. Can return: KentenCharacter 
	 * enumerator or NothingEnum enumerator.
	 */
	kentenKind: any;
	/**
	 * The distance between kenten characters and their parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	kentenPlacement: any;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters. . Can return: KentenAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	kentenAlignment: any;
	/**
	 * The kenten position relative to the parent character. Can 
	 * return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	kentenPosition: any;
	/**
	 * The font to use for kenten characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/**
	 * The size (in points) of kenten characters. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	kentenFontSize: any;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size. Can return: Real or NothingEnum enumerator.
	 */
	kentenXScale: any;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size. . Can return: Real or NothingEnum enumerator.
	 */
	kentenYScale: any;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kentenCustomCharacter: any;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom. . Can return: 
	 * KentenCharacterSet enumerator or NothingEnum enumerator.
	 */
	kentenCharacterSet: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100). Can return: Real or NothingEnum enumerator.
	 */
	rubyTint: any;
	/**
	 * The stroke weight (in points) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyWeight: any;
	/**
	 * The method of overprinting the ruby fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintFill: any;
	/**
	 * The method of overprinting the ruby stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintStroke: any;
	/**
	 * The stroke tint (as a percentage) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyStrokeTint: any;
	/**
	 * The font applied to ruby characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/**
	 * The size (in points) of ruby characters. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyFontSize: any;
	/**
	 * If true, uses OpenType Pro fonts for ruby. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyOpenTypePro: any;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyXScale: any;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rubyYScale: any;
	/**
	 * The ruby type. Can return: RubyTypes enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyType: any;
	/**
	 * The ruby alignment. Can return: RubyAlignments enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyAlignment: any;
	/**
	 * The position of ruby characters relative to the parent text. 
	 * Can return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyPosition: any;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyXOffset: any;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyYOffset: any;
	/**
	 * The ruby spacing relative to the parent text. . Can return: 
	 * RubyParentSpacing enumerator or NothingEnum enumerator.
	 */
	rubyParentSpacing: any;
	/**
	 * If true, auto aligns ruby. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	rubyAutoAlign: any;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyOverhang: any;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyAutoScaling: any;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyParentScalingPercent: any;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text. Can return: RubyOverhang enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyParentOverhangAmount: any;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby. Can return: Short Integer or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyDigits: any;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyIncludeRoman: any;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	rubyAutoTcyAutoScale: any;
	/**
	 * If true, turns on warichu. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	warichu: any;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	warichuSize: any;
	/**
	 * The number of lines of warichu within a single normal line. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuLines: any;
	/**
	 * The gap between lines of warichu characters. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	warichuLineSpacing: any;
	/**
	 * The warichu alignment. Can return: WarichuAlignment 
	 * enumerator or NothingEnum enumerator.
	 */
	warichuAlignment: any;
	/**
	 * The minimum number of characters allowed after a line break. 
	 * . Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsAfterBreak: any;
	/**
	 * The minimum number of characters allowed before a line 
	 * break. Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsBeforeBreak: any;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	otfProportionalMetrics: any;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical. . Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	otfHVKana: any;
	/**
	 * If true, applies italics to half-width alphanumerics. . Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfRomanItalics: any;
	/**
	 * If true, the line changes size when characters are scaled. . 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	scaleAffectsLineHeight: any;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids. Can return: Boolean or NothingEnum enumerator.
	 */
	cjkGridTracking: any;
	/**
	 * The glyph variant to substitute for standard glyphs. Can 
	 * return: AlternateGlyphForms enumerator or NothingEnum 
	 * enumerator.
	 */
	glyphForm: any;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph. Can return: Boolean or NothingEnum enumerator.
	 */
	paragraphGyoudori: any;
	/**
	 * The alignment to the frame grid or baseline grid. Can 
	 * return: GridAlignment enumerator or NothingEnum enumerator.
	 */
	gridAlignment: any;
	/**
	 * The manual gyoudori setting. Can return: Short Integer or 
	 * NothingEnum enumerator.
	 */
	gridGyoudori: any;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	autoTcy: any;
	/**
	 * If true, auto tcy includes Roman characters. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	autoTcyIncludeRoman: any;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator, String or 
	 * NothingEnum enumerator.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined. Can return: KinsokuType 
	 * enumerator or NothingEnum enumerator.
	 */
	kinsokuType: any;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect. Can return: 
	 * KinsokuHangTypes enumerator or NothingEnum enumerator.
	 */
	kinsokuHangType: any;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	bunriKinshi: any;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String, 
	 * MojikumiTableDefaults enumerator or NothingEnum enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rensuuji: any;
	/**
	 * If true, rotates Roman characters in vertical text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	rotateSingleByteCharacters: any;
	/**
	 * The point from which leading is measured from line to line. 
	 * Can return: LeadingModel enumerator or NothingEnum 
	 * enumerator.
	 */
	leadingModel: any;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	treatIdeographicSpaceAsSpace: any;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	allowArbitraryHyphenation: any;
	/**
	 * The text after string expression for bullets. Can return: 
	 * String or NothingEnum enumerator.
	 */
	bulletsTextAfter: any;
	/**
	 * The list to be part of. Can return: NumberingList, String or 
	 * NothingEnum enumerator.
	 */
	appliedNumberingList: any;
	/**
	 * The level of the paragraph. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	numberingLevel: any;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator, String or NothingEnum enumerator.
	 */
	numberingFormat: any;
	/**
	 * Continue the numbering at this level. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	numberingContinue: any;
	/**
	 * Determines starting number in a numbered list. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	numberingStartAt: any;
	/**
	 * If true, apply the numbering restart policy. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	numberingApplyRestartPolicy: any;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle, String or NothingEnum 
	 * enumerator.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle, String or NothingEnum enumerator.
	 */
	numberingCharacterStyle: any;
	/**
	 * The number string expression for numbering. Can return: 
	 * String or NothingEnum enumerator.
	 */
	numberingExpression: any;
	/**
	 * List type for bullets and numbering. Can return: ListType 
	 * enumerator or NothingEnum enumerator.
	 */
	bulletsAndNumberingListType: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ChangeGrepPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ChangeGrepPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Change glyph preferences.
 * @class
 * @extends Preference
 */
export declare class ChangeGlyphPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ChangeGlyphPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The GID/CID of the glyph. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	glyphID: any;
	/**
	 * The font applied to the ChangeGlyphPreference, specified as 
	 * either a font object or the name of font family. Can return: 
	 * Font, String or NothingEnum enumerator.
	 */
	appliedFont: any;
	/**
	 * The name of the font style. Can return: String or 
	 * NothingEnum enumerator.
	 */
	fontStyle: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ChangeGlyphPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ChangeGlyphPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Change object preferences.
 * @class
 * @extends Preference
 */
export declare class ChangeObjectPreference extends Preference {
	/**
	 * Transparency settings. Can return: 
	 * FindChangeTransparencySetting or NothingEnum enumerator.
	 */
	readonly transparencySettings: any;
	/**
	 * Transparency settings for the stroke. Can return: 
	 * FindChangeStrokeTransparencySetting or NothingEnum 
	 * enumerator.
	 */
	readonly strokeTransparencySettings: any;
	/**
	 * Transparency settings for the fill applied to the 
	 * ChangeObjectPreference. Can return: 
	 * FindChangeFillTransparencySetting or NothingEnum enumerator.
	 */
	readonly fillTransparencySettings: any;
	/**
	 * Transparency settings for the content of the 
	 * ChangeObjectPreference. Can return: 
	 * FindChangeContentTransparencySetting or NothingEnum 
	 * enumerator.
	 */
	readonly contentTransparencySettings: any;
	/**
	 * If true, the text wrap path has been explicitly modified by 
	 * the user. Can return: Boolean or NothingEnum enumerator.
	 */
	readonly userModifiedWrap: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ChangeObjectPreference (a Application). */
	readonly parent: Application;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The direction of the story. Can return: 
	 * StoryDirectionOptions enumerator or NothingEnum enumerator.
	 */
	storyDirection: any;
	/**
	 * The point in the referenced object relative to which to 
	 * position the anchored object. Notes: Valid only when 
	 * anchored position is custom. Can return: AnchorPoint 
	 * enumerator or NothingEnum enumerator.
	 */
	positionReferencePoint: any;
	/**
	 * If true, text wraps on the master spread apply to that 
	 * spread only, and not to any pages the master spread has been 
	 * applied to. Can return: Boolean or NothingEnum enumerator.
	 */
	applyToMasterPageOnly: any;
	/**
	 * Text wrap side options. Can return: TextWrapSideOptions 
	 * enumerator or NothingEnum enumerator.
	 */
	textWrapSide: any;
	/**
	 * The minimum space between text and the edges of the wrapped 
	 * object. Specify four values in the format [top, left, 
	 * bottom, right]. . Can return: Ordered array containing 
	 * top:Unit, left:Unit, bottom:Unit, right:Unit or NothingEnum 
	 * enumerator.
	 */
	textWrapOffset: any;
	/**
	 * The text wrap mode. . Can return: TextWrapModes enumerator 
	 * or NothingEnum enumerator.
	 */
	textWrapMode: any;
	/**
	 * The applied object style(s). Can return: String or 
	 * NothingEnum enumerator. Can also accept: ObjectStyle.
	 */
	appliedObjectStyles: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the ChangeObjectPreference. . Can return: Swatch 
	 * or NothingEnum enumerator. Can also accept: String.
	 */
	fillColor: any;
	/**
	 * The percent of tint to use in the ChangeObjectPreference's 
	 * fill color. (To specify a tint percent, use a number in the 
	 * range of 0 to 100; to use the inherited or overridden value, 
	 * use -1.). Can return: Real or NothingEnum enumerator.
	 */
	fillTint: any;
	/**
	 * If true, the ChangeObjectPreference's fill color overprints 
	 * any underlying objects. If false, the fill color knocks out 
	 * the underlying colors. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	overprintFill: any;
	/**
	 * The weight (in points) to apply to the 
	 * ChangeObjectPreference's stroke. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	strokeWeight: any;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join. Can return: Real (1 - 500) or NothingEnum enumerator.
	 */
	miterLimit: any;
	/**
	 * The end shape of an open path. Can return: EndCap enumerator 
	 * or NothingEnum enumerator.
	 */
	endCap: any;
	/**
	 * The corner join applied to the ChangeObjectPreference. Can 
	 * return: EndJoin enumerator or NothingEnum enumerator.
	 */
	endJoin: any;
	/**
	 * The name of the stroke style to apply. Can return: 
	 * StrokeStyle or NothingEnum enumerator. Can also accept: 
	 * String.
	 */
	strokeType: any;
	/**
	 * The corner adjustment applied to the ChangeObjectPreference. 
	 * Can return: StrokeCornerAdjustment enumerator or NothingEnum 
	 * enumerator.
	 */
	strokeCornerAdjustment: any;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3]. Can 
	 * return: Array of Units or NothingEnum enumerator.
	 */
	strokeDashAndGap: any;
	/**
	 * The arrowhead applied to the start of the path. . Can 
	 * return: ArrowHead enumerator or NothingEnum enumerator.
	 */
	leftLineEnd: any;
	/**
	 * The arrowhead applied to the end of the path. Can return: 
	 * ArrowHead enumerator or NothingEnum enumerator.
	 */
	rightLineEnd: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the ChangeObjectPreference. Can return: Swatch 
	 * or NothingEnum enumerator. Can also accept: String.
	 */
	strokeColor: any;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.). Can 
	 * return: Real or NothingEnum enumerator.
	 */
	strokeTint: any;
	/**
	 * If true, the ChangeObjectPreference's stroke color 
	 * overprints any underlying objects. If false, the stroke 
	 * color knocks out the  underlying colors. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	overprintStroke: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	gapColor: any;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.). Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gapTint: any;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	overprintGap: any;
	/**
	 * The stroke alignment applied to the ChangeObjectPreference. 
	 * Can return: StrokeAlignment enumerator or NothingEnum 
	 * enumerator.
	 */
	strokeAlignment: any;
	/**
	 * If true, the ChangeObjectPreference does not print. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	nonprinting: any;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * ChangeObjectPreference. (Range: -180 to 180). Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gradientFillAngle: any;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * ChangeObjectPreference. (Range: -180 to 180). Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gradientStrokeAngle: any;
	/**
	 * The number of columns in the text frame. Note: Depending on 
	 * the value of use fixed column width, the number of columns 
	 * can change automatically when the text frame size changes. 
	 * Can return: Long Integer (1 - 40) or NothingEnum enumerator.
	 */
	textColumnCount: any;
	/**
	 * The space between columns in the text frame. Can return: 
	 * Unit (0 - 8640 points) or NothingEnum enumerator.
	 */
	textColumnGutter: any;
	/**
	 * The column width of the columns in the text frame. Can 
	 * return: Unit (0 - 8640 points) or NothingEnum enumerator.
	 */
	textColumnFixedWidth: any;
	/**
	 * If true, maintains column width when the text frame is 
	 * resized. If false, causes columns to resize when the text 
	 * frame is resized. Note: When true, resizing the frame can 
	 * change the number of columns in the frame. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	useFixedColumnWidth: any;
	/**
	 * The amount to offset text from the edges of the text frame, 
	 * specified either as a single value applied uniformly to all 
	 * sides of the text frame or as an array of 4 values in the 
	 * format [top inset, left inset, bottom inset, right inset]. 
	 * Can return: Unit (0 - 8640 points), Array of 4 Units (0 - 
	 * 8640 points) or NothingEnum enumerator.
	 */
	insetSpacing: any;
	/**
	 * The distance between the baseline of the text and the top 
	 * inset of the text frame or cell. Can return: FirstBaseline 
	 * enumerator or NothingEnum enumerator.
	 */
	firstBaselineOffset: any;
	/**
	 * The minimum distance between the baseline of the text and 
	 * the top inset of the text frame or cell. Can return: Unit (0 
	 * - 8640 points) or NothingEnum enumerator.
	 */
	minimumFirstBaselineOffset: any;
	/**
	 * The vertical alignment of the text content. . Can return: 
	 * VerticalJustification enumerator or NothingEnum enumerator.
	 */
	verticalJustification: any;
	/**
	 * The maximum amount of vertical space between two paragraphs. 
	 * Note: Valid only when vertical justification is justified; 
	 * the specified amount is applied in addition to the space 
	 * before or space after values defined for the paragraph. Can 
	 * return: Unit (0 - 8640 points) or NothingEnum enumerator.
	 */
	verticalThreshold: any;
	/**
	 * If true, ignores text wrap settings for drawn or placed 
	 * objects in the text frame. . Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	ignoreWrap: any;
	/**
	 * If true, uses a custom baseline frame grid. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	useCustomBaselineFrameGrid: any;
	/**
	 * The amount to offset the baseline grid. Can return: Unit (0 
	 * - 8640 points) or NothingEnum enumerator.
	 */
	startingOffsetForBaselineFrameGrid: any;
	/**
	 * The location (top of page, top margin, top of frame, or 
	 * frame inset) on which to base the custom baseline grid. Can 
	 * return: BaselineFrameGridRelativeOption enumerator or 
	 * NothingEnum enumerator.
	 */
	baselineFrameGridRelativeOption: any;
	/**
	 * The distance between grid lines. Can return: Unit (1 - 8640 
	 * points) or NothingEnum enumerator.
	 */
	baselineFrameGridIncrement: any;
	/**
	 * The grid line color, specified either as an array of three 
	 * doubles, each in the range 0 to 255 and representing R, G, 
	 * and B values, or as a UI color. Can return: Array of 3 Reals 
	 * (0 - 255) or UIColors enumerator or NothingEnum enumerator.
	 */
	baselineFrameGridColor: any;
	/**
	 * If true, inverts the text wrap. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	inverse: any;
	/**
	 * The contour type. Can return: ContourOptionsTypes enumerator 
	 * or NothingEnum enumerator.
	 */
	contourType: any;
	/**
	 * If true, creates interior clipping paths within the 
	 * surrounding clipping path. Note: Valid only when clipping 
	 * type is alpha channel or detect edges. . Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	includeInsideEdges: any;
	/**
	 * The position of the anchored object relative to the anchor. 
	 * Can return: AnchorPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	anchoredPosition: any;
	/**
	 * If true, the position of the anchored object is relative to 
	 * the binding spine of the page or spread. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	spineRelative: any;
	/**
	 * If true, prevents manual positioning of the anchored object. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	lockPosition: any;
	/**
	 * If true, pins the position of the anchored object within the 
	 * text frame top and bottom. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	pinPosition: any;
	/**
	 * The point in the anchored object to position. Can return: 
	 * AnchorPoint enumerator or NothingEnum enumerator.
	 */
	anchorPoint: any;
	/**
	 * The horizontal reference point on the page. Valid only when 
	 * anchored position is custom. Can return: AnchoredRelativeTo 
	 * enumerator or NothingEnum enumerator.
	 */
	horizontalReferencePoint: any;
	/**
	 * The vertical reference point on the page. Valid when 
	 * anchored position is custom. Can return: 
	 * VerticallyRelativeTo enumerator or NothingEnum enumerator.
	 */
	verticalReferencePoint: any;
	/**
	 * The horizontal (x) offset of the anchored object. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	anchorXoffset: any;
	/**
	 * The vertical (y) offset of the anchored object. Corresponds 
	 * to the space after property for above line positioning. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	anchorYoffset: any;
	/**
	 * The space above an above-line anchored object. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	anchorSpaceAbove: any;
	/**
	 * If true, adjust the position of characters at the edges of 
	 * the frame to provide a better appearance. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	opticalMarginAlignment: any;
	/**
	 * The point size used as the basis for calculating optical 
	 * margin alignment. (Range: 0.1 to 1296). Can return: Unit 
	 * (0.1 - 1296 points) or NothingEnum enumerator.
	 */
	opticalMarginSize: any;
	/**
	 * The amount in measurement units to crop the left edge of a 
	 * graphic. Can return: Unit or NothingEnum enumerator.
	 */
	leftCrop: any;
	/**
	 * The amount in measurement units to crop the top edge of a 
	 * graphic. Can return: Unit or NothingEnum enumerator.
	 */
	topCrop: any;
	/**
	 * The amount in measurement units to crop the right edge of a 
	 * graphic. Can return: Unit or NothingEnum enumerator.
	 */
	rightCrop: any;
	/**
	 * The amount in measurement units to crop the bottom edge of a 
	 * graphic. Can return: Unit or NothingEnum enumerator.
	 */
	bottomCrop: any;
	/**
	 * The frame fitting option to apply to placed or pasted 
	 * content if the frame is empty. Can be applied to a frame, 
	 * object style, or document or to the application. Can return: 
	 * EmptyFrameFittingOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	fittingOnEmptyFrame: any;
	/**
	 * The point with which to align the image empty when fitting 
	 * in a frame. For information, see frame fitting options. Can 
	 * return: AnchorPoint enumerator or NothingEnum enumerator.
	 */
	fittingAlignment: any;
	/**
	 * The arrowhead alignment applied to the 
	 * ChangeObjectPreference. Can return: ArrowHeadAlignmentEnum 
	 * enumerator or NothingEnum enumerator.
	 */
	arrowHeadAlignment: any;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	leftArrowHeadScale: any;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rightArrowHeadScale: any;
	/**
	 * If true, enable overrides to document footnote options. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	enableOverrides: any;
	/**
	 * If true, enable straddling footnotes. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	spanFootnotesAcross: any;
	/**
	 * Minimum Spacing Before First Footnote. Can return: Unit (0 - 
	 * 8640 points) or NothingEnum enumerator.
	 */
	minimumSpacingOption: any;
	/**
	 * Space between footnotes. Can return: Unit (0 - 8640 points) 
	 * or NothingEnum enumerator.
	 */
	spaceBetweenFootnotes: any;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight. Can return: CornerOptions enumerator or 
	 * NothingEnum enumerator.
	 */
	topLeftCornerOption: any;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes. Can return: CornerOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	topRightCornerOption: any;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes. Can return: CornerOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	bottomLeftCornerOption: any;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes. Can return: CornerOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	bottomRightCornerOption: any;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes. Can return: Unit or NothingEnum 
	 * enumerator.
	 */
	topLeftCornerRadius: any;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	topRightCornerRadius: any;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	bottomLeftCornerRadius: any;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	bottomRightCornerRadius: any;
	/**
	 * Auto-sizing type of text frame. Based on type, reference 
	 * value is automatically adjusted. For example, for height 
	 * only type, top-left reference point becomes top-center. 
	 * Recommended to change auto-sizing type, after setting other 
	 * auto-sizing attributes. Can return: AutoSizingTypeEnum 
	 * enumerator or NothingEnum enumerator.
	 */
	autoSizingType: any;
	/**
	 * The reference point for auto sizing of text frame. Reference 
	 * point is automatically adjusted to the suitable value 
	 * depending on the auto-sizing type value. As an example, top 
	 * left reference point becomes top center for height only 
	 * dimension. Can return: AutoSizingReferenceEnum enumerator or 
	 * NothingEnum enumerator.
	 */
	autoSizingReferencePoint: any;
	/**
	 * If true, minimum height value is used during the auto-sizing 
	 * of text frame. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	useMinimumHeightForAutoSizing: any;
	/**
	 * The minimum height for auto-sizing of the text frame. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	minimumHeightForAutoSizing: any;
	/**
	 * If true, minimum width value is used during the auto-sizing 
	 * of text frame. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	useMinimumWidthForAutoSizing: any;
	/**
	 * The minimum width for auto-sizing of the text frame. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	minimumWidthForAutoSizing: any;
	/**
	 * If true, line-breaks are not introduced after auto sizing. . 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	useNoLineBreaksForAutoSizing: any;
	/**
	 * Preserve Appearance from Layout. Can return: 
	 * PreserveAppearanceFromLayoutEnum enumerator or NothingEnum 
	 * enumerator.
	 */
	preserveAppearanceFromLayout: any;
	/**
	 * The source type of alternate text. Can return: SourceType 
	 * enumerator or NothingEnum enumerator.
	 */
	altTextSourceType: any;
	/**
	 * The source type of actual text. Can return: SourceType 
	 * enumerator or NothingEnum enumerator.
	 */
	actualTextSourceType: any;
	/**
	 * The custom alternate text entered by the user. Can return: 
	 * String or NothingEnum enumerator.
	 */
	customAltText: any;
	/**
	 * The custom actual text entered by the user. Can return: 
	 * String or NothingEnum enumerator.
	 */
	customActualText: any;
	/**
	 * The metadata property to use as source of alternate text. 
	 * Can return: Ordered array containing namespacePrefix:String, 
	 * propertyPath:String or NothingEnum enumerator.
	 */
	altMetadataProperty: any;
	/**
	 * The metadata property to use as source of actual text. Can 
	 * return: Ordered array containing namespacePrefix:String, 
	 * propertyPath:String or NothingEnum enumerator.
	 */
	actualMetadataProperty: any;
	/**
	 * The tag type of page item. Can return: TagType enumerator or 
	 * NothingEnum enumerator.
	 */
	applyTagType: any;
	/**
	 * Allows user to select the image format for conversion. Can 
	 * return: ImageFormat enumerator or NothingEnum enumerator.
	 */
	imageConversionType: any;
	/**
	 * The export resolution. Can return: ImageResolution 
	 * enumerator or NothingEnum enumerator.
	 */
	imageExportResolution: any;
	/**
	 * The color palette for GIF conversion. Note: Not valid when 
	 * image conversion is JPEG. . Can return: GIFOptionsPalette 
	 * enumerator or NothingEnum enumerator.
	 */
	gifOptionsPalette: any;
	/**
	 * If true, generates interlaced GIFs. Note: Not valid  when 
	 * image conversion is JPEG. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	gifOptionsInterlaced: any;
	/**
	 * The quality of converted JPEG images. Note: Not valid when 
	 * image conversion is GIF. . Can return: JPEGOptionsQuality 
	 * enumerator or NothingEnum enumerator.
	 */
	jpegOptionsQuality: any;
	/**
	 * The formatting method for converted JPEG images. Note: Not 
	 * valid  when image conversion is GIF. Can return: 
	 * JPEGOptionsFormat enumerator or NothingEnum enumerator.
	 */
	jpegOptionsFormat: any;
	/**
	 * Alignment applied to images. Can return: ImageAlignmentType 
	 * enumerator or NothingEnum enumerator.
	 */
	imageAlignment: any;
	/**
	 * Space Before applied to images. Can return: Real (0 - 8640) 
	 * or NothingEnum enumerator.
	 */
	imageSpaceBefore: any;
	/**
	 * Space After applied to images. Can return: Real (0 - 8640) 
	 * or NothingEnum enumerator.
	 */
	imageSpaceAfter: any;
	/**
	 * If true, image page break settings will be used in objects. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	useImagePageBreak: any;
	/**
	 * Image page break settings to be used with objects. Can 
	 * return: ImagePageBreakType enumerator or NothingEnum 
	 * enumerator.
	 */
	imagePageBreak: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Provides the alternate text for the object */
	altText(): string;
	/** Provides the actual text for the object */
	actualText(): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ChangeObjectPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ChangeObjectPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Change transliterate preferences.
 * @class
 * @extends Preference
 */
export declare class ChangeTransliteratePreference extends Preference {
	/**
	 * Bullet character. Can return: Bullet or NothingEnum 
	 * enumerator.
	 */
	readonly bulletChar: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ChangeTransliteratePreference (a 
	 * Application).
	 */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * The character type to which to change the found character 
	 * type. Can return: FindChangeTransliterateCharacterTypes 
	 * enumerator or NothingEnum enumerator.
	 */
	changeCharacterType: any;
	/**
	 * The character style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * CharacterStyle.
	 */
	appliedCharacterStyle: any;
	/**
	 * The paragraph style to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: 
	 * ParagraphStyle.
	 */
	appliedParagraphStyle: any;
	/**
	 * The XML tag applied to the element. Can return: String or 
	 * NothingEnum enumerator. Can also accept: XMLTag.
	 */
	markupTag: any;
	/**
	 * The amount to indent the first line. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	firstLineIndent: any;
	/**
	 * The width of the left indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	leftIndent: any;
	/**
	 * The width of the right indent. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	rightIndent: any;
	/**
	 * The height of the paragraph space above. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceBefore: any;
	/**
	 * The height of the paragraph space below. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	spaceAfter: any;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean, BalanceLinesStyle enumerator or NothingEnum 
	 * enumerator.
	 */
	balanceRaggedLines: any;
	/**
	 * The paragraph alignment. Can return: Justification 
	 * enumerator or NothingEnum enumerator.
	 */
	justification: any;
	/**
	 * The alignment to use for lines that contain a single word. 
	 * Can return: SingleWordJustification enumerator or 
	 * NothingEnum enumerator.
	 */
	singleWordJustification: any;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	autoLeading: any;
	/**
	 * The number of lines to drop cap. Can return: Short Integer 
	 * (0 - 25) or NothingEnum enumerator.
	 */
	dropCapLines: any;
	/**
	 * The number of characters to drop cap. Can return: Short 
	 * Integer (0 - 150) or NothingEnum enumerator.
	 */
	dropCapCharacters: any;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	keepLinesTogether: any;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepAllLinesTogether: any;
	/**
	 * The minimum number of lines to keep with the next paragraph. 
	 * Can return: Short Integer (0 - 5) or NothingEnum enumerator.
	 */
	keepWithNext: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break. Can return: Short Integer (1 - 
	 * 50) or NothingEnum enumerator.
	 */
	keepFirstLines: any;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break. Can return: Short Integer (1 - 50) or 
	 * NothingEnum enumerator.
	 */
	keepLastLines: any;
	/**
	 * The location at which to start the paragraph. Can return: 
	 * StartParagraph enumerator or NothingEnum enumerator.
	 */
	startParagraph: any;
	/**
	 * The text composer to use to compose the text. Can return: 
	 * String or NothingEnum enumerator.
	 */
	composer: any;
	/**
	 * The amount to indent the last line in the paragraph. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	lastLineIndent: any;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	hyphenateLastWord: any;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	dropcapDetail: any;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated. Can return: Boolean or NothingEnum enumerator.
	 */
	hyphenateAcrossColumns: any;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	keepRuleAboveInFrame: any;
	/**
	 * If true, ignores optical edge alignment for the paragraph. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	ignoreEdgeAlignment: any;
	/**
	 * The font applied to the ChangeTransliteratePreference, 
	 * specified as either a font object or the name of font 
	 * family. Can return: Font, String or NothingEnum enumerator.
	 */
	appliedFont: any;
	/**
	 * The name of the font style. Can return: String or 
	 * NothingEnum enumerator.
	 */
	fontStyle: any;
	/** The text size. Can return: Unit or NothingEnum enumerator. */
	pointSize: any;
	/**
	 * The leading applied to the text. Can return: Unit, Leading 
	 * enumerator or NothingEnum enumerator.
	 */
	leading: any;
	/**
	 * The type of pair kerning. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kerningMethod: any;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	tracking: any;
	/**
	 * The capitalization scheme. Can return: Capitalization 
	 * enumerator or NothingEnum enumerator.
	 */
	capitalization: any;
	/**
	 * The text position relative to the baseline. Can return: 
	 * Position enumerator or NothingEnum enumerator.
	 */
	position: any;
	/**
	 * If true, underlines the text. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	underline: any;
	/**
	 * If true, draws a strikethrough line through the text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThru: any;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	ligatures: any;
	/**
	 * If true, keeps the text on the same line. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	noBreak: any;
	/**
	 * The horizontal scaling applied to the 
	 * ChangeTransliteratePreference. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	horizontalScale: any;
	/**
	 * The vertical scaling applied to the 
	 * ChangeTransliteratePreference. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	verticalScale: any;
	/**
	 * The baseline shift applied to the text. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	baselineShift: any;
	/**
	 * The skew angle of the ChangeTransliteratePreference. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	skew: any;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * ChangeTransliteratePreference. (To specify a tint 
	 * percentage, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.). Can return: 
	 * Real or NothingEnum enumerator.
	 */
	fillTint: any;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * ChangeTransliteratePreference. (To specify a tint 
	 * percentage, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.). Can return: 
	 * Real or NothingEnum enumerator.
	 */
	strokeTint: any;
	/**
	 * The stroke weight applied to the characters of the text. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	strokeWeight: any;
	/**
	 * If true, the stroke of the characters will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	overprintStroke: any;
	/**
	 * If true, the fill color of the characters will overprint. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	overprintFill: any;
	/**
	 * The figure style in OpenType fonts. Can return: 
	 * OTFFigureStyle enumerator or NothingEnum enumerator.
	 */
	otfFigureStyle: any;
	/**
	 * If true, uses ordinals in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfOrdinal: any;
	/**
	 * If true, uses fractions in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfFraction: any;
	/**
	 * If true, uses discretionary ligatures in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfDiscretionaryLigature: any;
	/**
	 * If true, uses titling forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfTitling: any;
	/**
	 * If true, uses contextual alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfContextualAlternate: any;
	/**
	 * If true, uses swash forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSwash: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch, String or NothingEnum 
	 * enumerator.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100). Can return: Real or NothingEnum enumerator.
	 */
	underlineTint: any;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid. Can return: Real or NothingEnum enumerator.
	 */
	underlineGapTint: any;
	/**
	 * If true, the underline stroke color will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	underlineOverprint: any;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint. Can return: Boolean or NothingEnum enumerator.
	 */
	underlineGapOverprint: any;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline. Can return: Unit or NothingEnum enumerator.
	 */
	underlineOffset: any;
	/**
	 * The stroke weight of the underline stroke. Can return: Unit 
	 * or NothingEnum enumerator.
	 */
	underlineWeight: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch, 
	 * String or NothingEnum enumerator.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughTint: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughGapTint: any;
	/**
	 * If true, the strikethrough stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughOverprint: any;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid. Can return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughGapOverprint: any;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline. Can return: Unit or NothingEnum 
	 * enumerator.
	 */
	strikeThroughOffset: any;
	/**
	 * The stroke weight of the strikethrough stroke. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	strikeThroughWeight: any;
	/**
	 * If true, use a slashed zeroes in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSlashedZero: any;
	/**
	 * If true, use historical forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfHistorical: any;
	/**
	 * The stylistic sets to use in OpenType fonts. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	otfStylisticSets: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	gradientFillLength: any;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientFillAngle: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gradientStrokeLength: any;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientStrokeAngle: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientFillStart: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientStrokeStart: any;
	/**
	 * If true, uses mark positioning in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfMark: any;
	/**
	 * If true, uses localized forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfLocale: any;
	/**
	 * The OpenType positional form. Can return: PositionalForms 
	 * enumerator or NothingEnum enumerator.
	 */
	positionalForm: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a fill color, to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Swatch.
	 */
	fillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as 
	 * a stroke color, to search for or change to. Can return: 
	 * String or NothingEnum enumerator. Can also accept: Swatch.
	 */
	strokeColor: any;
	/**
	 * The language to search for or change to. Can return: String 
	 * or NothingEnum enumerator. Can also accept: Language or 
	 * LanguageWithVendors.
	 */
	appliedLanguage: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em. . Can return: Real or 
	 * NothingEnum enumerator.
	 */
	kerningValue: any;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line. Can return: CharacterAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	characterAlignment: any;
	/**
	 * The amount of horizontal character compression. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	tsume: any;
	/**
	 * The amount of space before each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	leadingAki: any;
	/**
	 * The amount of space after each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	trailingAki: any;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	characterRotation: any;
	/**
	 * The number of grid squares in which to arrange the text. . 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	jidori: any;
	/**
	 * The amount (as a percentage) of shatai obliquing to apply. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	shataiMagnification: any;
	/**
	 * The shatai lens angle (in degrees). Can return: Real or 
	 * NothingEnum enumerator.
	 */
	shataiDegreeAngle: any;
	/**
	 * If true, applies shatai rotation. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustRotation: any;
	/**
	 * If true, adjusts shatai tsume. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustTsume: any;
	/**
	 * If true, makes the character horizontal in vertical text. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	tatechuyoko: any;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoXOffset: any;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoYOffset: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch, String 
	 * or NothingEnum enumerator.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenTint: any;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenStrokeTint: any;
	/**
	 * The stroke weight (in points) of kenten characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	kentenWeight: any;
	/**
	 * The method of overprinting the kenten fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintFill: any;
	/**
	 * The method of overprinting the kenten stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintStroke: any;
	/**
	 * The style of kenten characters. Can return: KentenCharacter 
	 * enumerator or NothingEnum enumerator.
	 */
	kentenKind: any;
	/**
	 * The distance between kenten characters and their parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	kentenPlacement: any;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters. . Can return: KentenAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	kentenAlignment: any;
	/**
	 * The kenten position relative to the parent character. Can 
	 * return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	kentenPosition: any;
	/**
	 * The font to use for kenten characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/**
	 * The size (in points) of kenten characters. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	kentenFontSize: any;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size. Can return: Real or NothingEnum enumerator.
	 */
	kentenXScale: any;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size. . Can return: Real or NothingEnum enumerator.
	 */
	kentenYScale: any;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kentenCustomCharacter: any;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom. . Can return: 
	 * KentenCharacterSet enumerator or NothingEnum enumerator.
	 */
	kentenCharacterSet: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100). Can return: Real or NothingEnum enumerator.
	 */
	rubyTint: any;
	/**
	 * The stroke weight (in points) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyWeight: any;
	/**
	 * The method of overprinting the ruby fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintFill: any;
	/**
	 * The method of overprinting the ruby stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintStroke: any;
	/**
	 * The stroke tint (as a percentage) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyStrokeTint: any;
	/**
	 * The font applied to ruby characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/**
	 * The size (in points) of ruby characters. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyFontSize: any;
	/**
	 * If true, uses OpenType Pro fonts for ruby. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyOpenTypePro: any;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyXScale: any;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rubyYScale: any;
	/**
	 * The ruby type. Can return: RubyTypes enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyType: any;
	/**
	 * The ruby alignment. Can return: RubyAlignments enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyAlignment: any;
	/**
	 * The position of ruby characters relative to the parent text. 
	 * Can return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyPosition: any;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyXOffset: any;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyYOffset: any;
	/**
	 * The ruby spacing relative to the parent text. . Can return: 
	 * RubyParentSpacing enumerator or NothingEnum enumerator.
	 */
	rubyParentSpacing: any;
	/**
	 * If true, auto aligns ruby. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	rubyAutoAlign: any;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyOverhang: any;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyAutoScaling: any;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyParentScalingPercent: any;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text. Can return: RubyOverhang enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyParentOverhangAmount: any;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby. Can return: Short Integer or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyDigits: any;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyIncludeRoman: any;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	rubyAutoTcyAutoScale: any;
	/**
	 * If true, turns on warichu. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	warichu: any;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	warichuSize: any;
	/**
	 * The number of lines of warichu within a single normal line. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuLines: any;
	/**
	 * The gap between lines of warichu characters. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	warichuLineSpacing: any;
	/**
	 * The warichu alignment. Can return: WarichuAlignment 
	 * enumerator or NothingEnum enumerator.
	 */
	warichuAlignment: any;
	/**
	 * The minimum number of characters allowed after a line break. 
	 * . Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsAfterBreak: any;
	/**
	 * The minimum number of characters allowed before a line 
	 * break. Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsBeforeBreak: any;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	otfProportionalMetrics: any;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical. . Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	otfHVKana: any;
	/**
	 * If true, applies italics to half-width alphanumerics. . Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfRomanItalics: any;
	/**
	 * If true, the line changes size when characters are scaled. . 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	scaleAffectsLineHeight: any;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids. Can return: Boolean or NothingEnum enumerator.
	 */
	cjkGridTracking: any;
	/**
	 * The glyph variant to substitute for standard glyphs. Can 
	 * return: AlternateGlyphForms enumerator or NothingEnum 
	 * enumerator.
	 */
	glyphForm: any;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph. Can return: Boolean or NothingEnum enumerator.
	 */
	paragraphGyoudori: any;
	/**
	 * The alignment to the frame grid or baseline grid. Can 
	 * return: GridAlignment enumerator or NothingEnum enumerator.
	 */
	gridAlignment: any;
	/**
	 * The manual gyoudori setting. Can return: Short Integer or 
	 * NothingEnum enumerator.
	 */
	gridGyoudori: any;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	autoTcy: any;
	/**
	 * If true, auto tcy includes Roman characters. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	autoTcyIncludeRoman: any;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator, String or 
	 * NothingEnum enumerator.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined. Can return: KinsokuType 
	 * enumerator or NothingEnum enumerator.
	 */
	kinsokuType: any;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect. Can return: 
	 * KinsokuHangTypes enumerator or NothingEnum enumerator.
	 */
	kinsokuHangType: any;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	bunriKinshi: any;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String, 
	 * MojikumiTableDefaults enumerator or NothingEnum enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rensuuji: any;
	/**
	 * If true, rotates Roman characters in vertical text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	rotateSingleByteCharacters: any;
	/**
	 * The point from which leading is measured from line to line. 
	 * Can return: LeadingModel enumerator or NothingEnum 
	 * enumerator.
	 */
	leadingModel: any;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	treatIdeographicSpaceAsSpace: any;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	allowArbitraryHyphenation: any;
	/**
	 * The text after string expression for bullets. Can return: 
	 * String or NothingEnum enumerator.
	 */
	bulletsTextAfter: any;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle, String or NothingEnum 
	 * enumerator.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The alignment of the bullet character. Can return: 
	 * ListAlignment enumerator or NothingEnum enumerator.
	 */
	bulletsAlignment: any;
	/**
	 * The list to be part of. Can return: NumberingList, String or 
	 * NothingEnum enumerator.
	 */
	appliedNumberingList: any;
	/**
	 * The level of the paragraph. Can return: Long Integer or 
	 * NothingEnum enumerator.
	 */
	numberingLevel: any;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator, String or NothingEnum enumerator.
	 */
	numberingFormat: any;
	/**
	 * The number string expression for numbering. Can return: 
	 * String or NothingEnum enumerator.
	 */
	numberingExpression: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle, String or NothingEnum enumerator.
	 */
	numberingCharacterStyle: any;
	/**
	 * Continue the numbering at this level. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	numberingContinue: any;
	/**
	 * Determines starting number in a numbered list. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	numberingStartAt: any;
	/**
	 * If true, apply the numbering restart policy. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	numberingApplyRestartPolicy: any;
	/**
	 * The alignment of the number. Can return: ListAlignment 
	 * enumerator or NothingEnum enumerator.
	 */
	numberingAlignment: any;
	/**
	 * List type for bullets and numbering. Can return: ListType 
	 * enumerator or NothingEnum enumerator.
	 */
	bulletsAndNumberingListType: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ChangeTransliteratePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ChangeTransliteratePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Linking preferences.
 * @class
 * @extends Preference
 */
export declare class LinkingPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the LinkingPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, link states will be checked at document open time */
	checkLinksAtOpen: boolean;
	/**
	 * If true, missing links will be searched for at document open 
	 * time
	 */
	findMissingLinksAtOpen: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * LinkingPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): LinkingPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Export options for InCopy INCX document format.
 * @class
 * @extends Preference
 */
export declare class InCopyExportOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the InCopyExportOption (a Application, Story, 
	 * XmlStory, Oval, Rectangle or Polygon).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, include graphic proxy data. */
	includeGraphicProxies: boolean;
	/**
	 * If true, export all resources (styles etc), otherwise export 
	 * resources used by the story.
	 */
	includeAllResources: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * InCopyExportOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): InCopyExportOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A preset that contains all of the print settings.
 * @class
 */
export declare class PrinterPreset {
	/** Available printers. */
	readonly printerList: string;
	/** Available PPDs. */
	readonly ppdList: string;
	/** A list of the available paper sizes. */
	readonly paperSizeList: string;
	/**
	 * Lists the ink screenings available in the PPD. Note: Valid 
	 * only when color output is separations or in rip separations.
	 */
	readonly screeningList: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PrinterPreset (a Application). */
	readonly parent: Application;
	/**
	 * The index of the PrinterPreset within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the PrinterPreset. */
	name: string;
	/**
	 * The current printer. Can return: Printer enumerator or 
	 * String.
	 */
	printer: any;
	/**
	 * The PPD, specified as a PPD name or an enumeration. Can 
	 * return: PPDValues enumerator or String.
	 */
	ppd: any;
	/**
	 * The PostScript file to print to. Note: Valid only when the 
	 * current printer is defined as postscript file.
	 */
	printFile: File;
	/**
	 * The number of copies to print. Note: Not valid when printer 
	 * is PostScript File.
	 */
	copies: number;
	/** If true, collate printed copies. */
	collating: boolean;
	/** If true, prints pages in reverse order. */
	reverseOrder: boolean;
	/** The sequence of pages to print. */
	sequence: Sequences;
	/**
	 * If true, prints each spread with all spread pages on a 
	 * single sheet. If false, prints spread pages as separate 
	 * pages.
	 */
	printSpreads: boolean;
	/** If true, prints master pages. */
	printMasterPages: boolean;
	/**
	 * If true, prints non-printing objects. Note: Valid only when 
	 * trapping is off.
	 */
	printNonprinting: boolean;
	/**
	 * If true, prints blank pages. Note: Valid only when trapping 
	 * is off.
	 */
	printBlankPages: boolean;
	/**
	 * If true, prints visible guides and baseline grids. Note: 
	 * Valid only when trapping is off.
	 */
	printGuidesGrids: boolean;
	/**
	 * The paper size, specified as either a string or an 
	 * enumeration. For information on paper size names, see paper 
	 * size list. Can return: PaperSizes enumerator or String.
	 */
	paperSize: any;
	/**
	 * The paper height. Note: Valid only when paper size is custom 
	 * or scale mode is scale width height. Can return: PaperSize 
	 * enumerator or Unit.
	 */
	paperHeight: any;
	/**
	 * The paper width. Note: Valid only when paper size is custom 
	 * or scale mode is scale width height. Can return: PaperSize 
	 * enumerator or Unit.
	 */
	paperWidth: any;
	/**
	 * The amount of space to offset the page from the left edge of 
	 * the imageable area.
	 */
	paperOffset: number|string;
	/** The space between document pages on the printing medium. */
	paperGap: number|string;
	/** If true, uses transverse orientation. */
	paperTransverse: boolean;
	/** The orientation of the printed page. */
	printPageOrientation: PrintPageOrientation;
	/**
	 * The position of the page on the printing medium. Note: Valid 
	 * only when tile is false.
	 */
	pagePosition: PagePositions;
	/**
	 * The policy for scaling the page. Note: Valid only when 
	 * printing from Layout view.
	 */
	scaleMode: ScaleModes;
	/**
	 * The amount (as a percentage)  that the page width is scaled 
	 * during printing. (Range: 0 to 1000) Note: Valid only when 
	 * scale mode is scale width height.
	 */
	scaleWidth: number;
	/**
	 * The amount (as a percentage) that the page height is scaled 
	 * during printing. (Range: 0 to 1000) Note: Valid only when 
	 * scale mode is scale width height.
	 */
	scaleHeight: number;
	/**
	 * If true, constrains the proportions of the scaling; uses the 
	 * most recent value for either scale width or scale height to 
	 * define both values. Note: Valid only when scale mode is 
	 * scale width height.
	 */
	scaleProportional: boolean;
	/**
	 * If true, prints thumbnails. Note: Valid only when trapping 
	 * is off and tile is false.
	 */
	thumbnails: boolean;
	/** The number of thumbnails per page. */
	thumbnailsPerPage: ThumbsPerPage;
	/** If true, tiles pages. */
	tile: boolean;
	/** The tiling type. Note: Valid only when tiling is true. */
	tilingType: TilingTypes;
	/**
	 * The amount of tiling overlap. Note: Valid only when tiling 
	 * is true and tiling type is not manual.
	 */
	tilingOverlap: number;
	/**
	 * If true, prints all printer marks. If false, prints 
	 * specified printer marks.
	 */
	allPrinterMarks: boolean;
	/**
	 * Prints crop marks that define where the page should be 
	 * trimmed.
	 */
	cropMarks: boolean;
	/** If true, print bleed marks. */
	bleedMarks: boolean;
	/**
	 * If true, prints small targets outside the page area for 
	 * aligning color separations.
	 */
	registrationMarks: boolean;
	/**
	 * If true, add small squares of color representing the CMYK 
	 * inks and tints of gray in 10% increments.
	 */
	colorBars: boolean;
	/**
	 * If true, prints the filename, page number, current date and 
	 * time, and color separation name.
	 */
	pageInformationMarks: boolean;
	/**
	 * The type of printer marks, either an enum value or the name 
	 * of a custom marks file. Can return: MarkTypes enumerator or 
	 * String.
	 */
	markType: any;
	/** The stroke weight (in points) for printer marks. */
	markLineWeight: MarkLineWeight;
	/**
	 * The distance to offset the page marks from the edge of the 
	 * page.
	 */
	markOffset: number|string;
	/** If true, uses the bleed area set for the document. */
	useDocumentBleedToPrint: boolean;
	/**
	 * The height of the bleed area at the top of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedTop: number|string;
	/**
	 * The height of the bleed area at the bottom of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number|string;
	/**
	 * The width of the bleed area at the inside of the page. Note: 
	 * Valid only when use document bleed to print is true.
	 */
	bleedInside: number|string;
	/**
	 * The width of the bleed area at the outside of the page. 
	 * Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number|string;
	/** If true, includes the slug area in the printed document. */
	includeSlugToPrint: boolean;
	/**
	 * The color output mode for composites. Note: Not valid when a 
	 * device-independent PPD is specified.
	 */
	colorOutput: ColorOutputModes;
	/**
	 * If true, prints all text as black unless text has the color 
	 * None or Paper or a color value that equals white. If false, 
	 * prints colored text, such as blue hyperlinks, in halftone 
	 * patterns. Note: Valid only when trapping is off.
	 */
	textAsBlack: boolean;
	/** The type of trapping. */
	trapping: Trapping;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/** If true, prints the document as a negative. */
	negative: boolean;
	/**
	 * The ink screening settings for composite gray output in 
	 * PostScript or PDF format. . Can return: Screeening 
	 * enumerator or String.
	 */
	screening: any;
	/**
	 * The screen angle to use when printing composites. (Range: 0 
	 * to 360) Note: Valid only for PostScript or PDF files that 
	 * use custom screening.
	 */
	compositeAngle: number;
	/**
	 * The screen frequency to use when printing composites. 
	 * (Range: 1 to 500) Note: Valid only for PostScript or PDF 
	 * files that use custom screening.
	 */
	compositeFrequency: number;
	/**
	 * If true, simulates the effects of overprinting spot inks 
	 * with different neutral density values by converting spot 
	 * colors to process colors for printing. Note: Not valid when 
	 * the color output mode is defined to leave color profiles 
	 * unchanged.
	 */
	simulateOverprint: boolean;
	/**
	 * If true, prints the cyan ink. Note: Valid only when trapping 
	 * is off.
	 */
	printCyan: boolean;
	/** The angle override for cyan ink. (Range: 0 to 360) */
	cyanAngle: number;
	/** The frequency override for cyan ink. (Range: 1 to 500) */
	cyanFrequency: number;
	/**
	 * If true, prints the magenta ink. Note: Valid only when 
	 * trapping is off.
	 */
	printMagenta: boolean;
	/** The angle override for magenta ink. (Range: 0 to 360) */
	magentaAngle: number;
	/** The frequency override for magenta ink. (Range: 1 to 500) */
	magentaFrequency: number;
	/**
	 * If true, prints the yellow ink. Note: Valid only when 
	 * trapping is off.
	 */
	printYellow: boolean;
	/** The angle override for yellow ink. (Range: 0 to 360) */
	yellowAngle: number;
	/** The frequency override for yellow ink. (Range: 1 to 500) */
	yellowFrequency: number;
	/**
	 * If true, prints the black ink. Note: Valid only when 
	 * trapping is off.
	 */
	printBlack: boolean;
	/** The angle override for black ink. (Range: 0 to 360) */
	blackAngle: number;
	/** The frequency override for black ink. (Range: 1 to 500) */
	blackFrequency: number;
	/** The image data sent to the printer or file. */
	sendImageData: ImageDataTypes;
	/** Controls how fonts are downloaded to the printer. */
	fontDownloading: FontDownloading;
	/**
	 * If true, downloads all fonts listed in the selected PPD. 
	 * Valid only when font downloading is complete or subset.
	 */
	downloadPPDFonts: boolean;
	/** The PostScript level of the printer. */
	postscriptLevel: PostScriptLevels;
	/** The format in which to send image data to the printer. */
	dataFormat: DataFormat;
	/**
	 * The source of the color management system. Note: Valid only 
	 * when use color management is true.
	 */
	sourceSpace: SourceSpaces;
	/**
	 * The color profile. Can return: Profile enumerator or String.
	 */
	profile: any;
	/**
	 * The color-rendering dictionary (CRD), specified as a CRD 
	 * name or an enumeration value. Note: Valid only when use 
	 * color management is true. Can return: 
	 * ColorRenderingDictionary enumerator or String.
	 */
	crd: any;
	/**
	 * The rendering intent. Note: Valid only when use color 
	 * management is true.
	 */
	intent: RenderingIntent;
	/**
	 * If true, prints graphics that are either OPI comments stored 
	 * in imported EPS files or linked using OPI comments. For 
	 * information on linking files using OPI comments, see omit 
	 * EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean;
	/** If true, replaces EPS images with OPI links. */
	omitEPS: boolean;
	/** If true, replaces PDF images with OPI links. */
	omitPDF: boolean;
	/** If true, replaces bitmap images with OPI links. */
	omitBitmaps: boolean;
	/** The name of the transparency flattener preset. */
	flattenerPresetName: string;
	/** If true, ignores flattener spread overrides. */
	ignoreSpreadOverrides: boolean;
	/**
	 * If true, forces all bleed area settings to be the same, 
	 * using the most recent bleed measurement setting. If false, 
	 * allows bleed top, bleed bottom, bleed inside, and bleed 
	 * outside to have different measurements.
	 */
	bleedChain: boolean;
	/** If true, uses bitmap printing. */
	bitmapPrinting: boolean;
	/**
	 * The resolution for bitmap printing. (Range: 72 to 1200) 
	 * Note: Valid when bitmap printing is true.
	 */
	bitmapResolution: number;
	/** The layers to print. */
	printLayers: PrintLayerOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the PrinterPreset. */
	remove(): void;
	/** Duplicates the PrinterPreset. */
	duplicate(): PrinterPreset;
	/**
	 * Generates a string which, if executed, will return the 
	 * PrinterPreset.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PrinterPreset;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of printer presets.
 * @class
 */
export declare class PrinterPresets {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new PrinterPreset.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PrinterPreset (Optional)
	 */
	add(withProperties: Object): PrinterPreset;
	/** Displays the number of elements in the PrinterPreset. */
	count(): number;
	/**
	 * Returns the PrinterPreset with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PrinterPreset;
	/**
	 * Returns the PrinterPreset with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PrinterPreset;
	/**
	 * Returns the PrinterPresets within the specified range.
	 * @param {any} _from - The PrinterPreset, index, or name at 
	 * the beginning of the range. Can accept: PrinterPreset, Long 
	 * Integer or String.
	 * @param {any} to - The PrinterPreset, index, or name at the 
	 * end of the range. Can accept: PrinterPreset, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): PrinterPreset;
	/** Returns the first PrinterPreset in the collection. */
	firstItem(): PrinterPreset;
	/** Returns the last PrinterPreset in the collection. */
	lastItem(): PrinterPreset;
	/** Returns the middle PrinterPreset in the collection. */
	middleItem(): PrinterPreset;
	/**
	 * Returns the PrinterPreset with the index previous to the 
	 * specified index.
	 * @param {PrinterPreset} obj - The index of the PrinterPreset 
	 * that follows the desired PrinterPreset.
	 */
	previousItem(obj: PrinterPreset): PrinterPreset;
	/**
	 * Returns the PrinterPreset whose index follows the specified 
	 * PrinterPreset in the collection.
	 * @param {PrinterPreset} obj - The PrinterPreset whose index 
	 * comes before the desired PrinterPreset.
	 */
	nextItem(obj: PrinterPreset): PrinterPreset;
	/** Returns any PrinterPreset in the collection. */
	anyItem(): PrinterPreset;
	/** Returns every PrinterPreset in the collection. */
	everyItem(): PrinterPreset;
	/**
	 * Generates a string which, if executed, will return the 
	 * PrinterPreset.
	 */
	toSource(): string;
	/**
	 * Returns the PrinterPreset with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PrinterPreset;
}

/**
 * XML import preferences.
 * @class
 * @extends Preference
 */
export declare class XMLImportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the XMLImportPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, creates a link to the imported XML file. If false, 
	 * embeds the file.
	 */
	createLinkToXML: boolean;
	/**
	 * If true, repeating text elements inherit the formatting 
	 * applied to placeholder text. Note: Valid only when import 
	 * style is merge.
	 */
	repeatTextElements: boolean;
	/**
	 * If true, ignores elements that do not match the existing 
	 * structure. Note: Valid only when import style is merge.
	 */
	ignoreUnmatchedIncoming: boolean;
	/**
	 * If true, imports text into tables if tags match placeholder 
	 * tables and their cells. Note: Valid only when import style 
	 * is merge.
	 */
	importTextIntoTables: boolean;
	/**
	 * If true, leaves existing content in place if the matching 
	 * XML content contains only whitespace characters such as a 
	 * carriage return or a tab character. Note: Valid only when 
	 * import style is merge.
	 */
	ignoreWhitespace: boolean;
	/**
	 * If true, deletes existing elements or placeholders in the 
	 * document that do not have matches in the XML file. Note: 
	 * Valid only when import style is merge.
	 */
	removeUnmatchedExisting: boolean;
	/**
	 * If true, imports into the selected XML element. If false, 
	 * imports at the root element.
	 */
	importToSelected: boolean;
	/**
	 * The style of incorporating imported XML content into the 
	 * document.
	 */
	importStyle: XMLImportStyles;
	/** If true, transforms the XML using an XSLT file. */
	allowTransform: boolean;
	/**
	 * The name of the XSLT file. Note: Valid when allow transform 
	 * is true. Can return: File or XMLTransformFile enumerator.
	 */
	transformFilename: any;
	/**
	 * Stylesheet parameters as a list of name/value pairs in the 
	 * format [[name, value], [name, value], ...]. Can return: 
	 * Ordered array containing name:String, value:String.
	 */
	transformParameters: any;
	/** If true, imports CALS tables as InDesign tables. */
	importCALSTables: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLImportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLImportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * XML export preferences.
 * @class
 * @extends Preference
 */
export declare class XMLExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the XMLExportPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, displays exported XML content in a specified 
	 * viewer.
	 */
	viewAfterExport: boolean;
	/**
	 * The preferred browser for viewing XML. Can return: File or 
	 * NothingEnum enumerator.
	 */
	preferredBrowser: any;
	/**
	 * If true, exports XML content from the selected XML element. 
	 * If false, exports the entire document.
	 */
	exportFromSelected: boolean;
	/** The file encoding type for exporting XML content. */
	fileEncoding: XMLFileEncoding;
	/** If true, includes Ruby text in the exported XML content. */
	ruby: boolean;
	/** If true, excludes the DTD from the exported XML content. */
	excludeDtd: boolean;
	/** If true, copies original images to the images subfolder. */
	copyOriginalImages: boolean;
	/** If true, copies optimized images to the images subfolder. */
	copyOptimizedImages: boolean;
	/** If true, copies formatted images to the images subfolder. */
	copyFormattedImages: boolean;
	/**
	 * The file format to use for converted images. Note: Valid 
	 * only when copy optimized images and/or copy formatted images 
	 * is true.
	 */
	imageConversion: ImageConversion;
	/**
	 * The color palette for GIF conversion. Note: Not valid when 
	 * image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;
	/**
	 * If true, generates interlaced GIFs. Note: Not valid  when 
	 * image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;
	/**
	 * The quality of converted JPEG images. Note: Not valid when 
	 * image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;
	/**
	 * The formatting method for converted JPEG images. Note: Not 
	 * valid  when image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;
	/** If true, transforms the XML using an XSLT file. */
	allowTransform: boolean;
	/**
	 * The name of the XSLT file. Note: Valid when allow transform 
	 * is true. Can return: File or XMLTransformFile enumerator.
	 */
	transformFilename: any;
	/**
	 * If true, replaces special characters with character 
	 * references.
	 */
	characterReferences: boolean;
	/** The export format for untagged tables in tagged stories. */
	exportUntaggedTablesFormat: XMLExportUntaggedTablesFormat;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * XML preferences.
 * @class
 * @extends Preference
 */
export declare class XMLPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the XMLPreference (a Application or Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The name of the default tag to use for new story elements. 
	 * Note: Either specifies an existing tag or creates a new tag.
	 */
	defaultStoryTagName: string;
	/**
	 * The color of the default story tag, specified either as an 
	 * array of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Notes: 
	 * Valid only when default story tag name value creates a new 
	 * tag. Does not update the color of an existing tag. Can 
	 * return: Array of 3 Reals (0 - 255) or UIColors enumerator.
	 */
	defaultStoryTagColor: any;
	/**
	 * The name of the default tag to use for new table elements. 
	 * Note: Either specifies an existing tag or creates a new tag.
	 */
	defaultTableTagName: string;
	/**
	 * The color of the default table tag, specified either as an 
	 * array of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Notes: 
	 * Valid only when default table tag name value creates a new 
	 * tag. Does not update the color of an existing tag. . Can 
	 * return: Array of 3 Reals (0 - 255) or UIColors enumerator.
	 */
	defaultTableTagColor: any;
	/**
	 * The name of the default tag to use for new table cell 
	 * elements. Note: Either specifies an existing tag or creates 
	 * a new tag.
	 */
	defaultCellTagName: string;
	/**
	 * The color of the default cell tag, specified either as an 
	 * array of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Note: 
	 * Valid only when default cell tag name value creates a new 
	 * tag. Does not update the color of an existing tag. . Can 
	 * return: Array of 3 Reals (0 - 255) or UIColors enumerator.
	 */
	defaultCellTagColor: any;
	/**
	 * The default name for new image elements created 
	 * automatically.
	 */
	defaultImageTagName: string;
	/**
	 * The color to give a new image tag, specified either as an 
	 * array of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Note: 
	 * Used only when the tag needs to be created. Can return: 
	 * Array of 3 Reals (0 - 255) or UIColors enumerator.
	 */
	defaultImageTagColor: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Export for web preferences.
 * @class
 * @extends Preference
 */
export declare class ExportForWebPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ExportForWebPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, copies formatted images to the images subfolder. */
	copyFormattedImages: boolean;
	/** If true, copies optimized images to the images subfolder. */
	copyOptimizedImages: boolean;
	/** If true, copies original images to the images subfolder. */
	copyOriginalImages: boolean;
	/**
	 * The file format to use for converted images. Note: Valid 
	 * only when copy optimized images and/or copy formatted images 
	 * is true.
	 */
	imageConversion: ImageConversion;
	/**
	 * The color palette for GIF conversion. Note: Not valid when 
	 * image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;
	/**
	 * If true, generates interlaced GIFs. Note: Not valid  when 
	 * image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;
	/**
	 * The quality of converted JPEG images. Note: Not valid when 
	 * image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;
	/**
	 * The formatting method for converted JPEG images. Note: Not 
	 * valid  when image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ExportForWebPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ExportForWebPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Anchored object default settings.
 * @class
 * @extends Preference
 */
export declare class AnchoredObjectDefault extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the AnchoredObjectDefault (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The initial frame type of a new anchored object. */
	anchorContent: ContentType;
	/** The initial height of a new anchored object. */
	initialAnchorHeight: number|string;
	/** The initial width of a new anchored object. */
	initialAnchorWidth: number|string;
	/**
	 * The initial paragraph style of a new anchored object. Note: 
	 * Valid when anchor content is text.
	 */
	anchoredParagraphStyle: ParagraphStyle;
	/** The initial object style of a new anchored object. */
	anchoredObjectStyle: ObjectStyle;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * AnchoredObjectDefault.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): AnchoredObjectDefault;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The settings for an anchored object.
 * @class
 * @extends Preference
 */
export declare class AnchoredObjectSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the AnchoredObjectSetting (a Application, 
	 * Document, EPSText, SplineItem, Polygon, GraphicLine, 
	 * Rectangle, Oval, Group, TextFrame, Button, FormField, 
	 * SignatureField, TextBox, RadioButton, ListBox, ComboBox, 
	 * CheckBox, MultiStateObject or ObjectStyle).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The position of the anchored object relative to the anchor. */
	anchoredPosition: AnchorPosition;
	/**
	 * If true, the position of the anchored object is relative to 
	 * the binding spine of the page or spread.
	 */
	spineRelative: boolean;
	/**
	 * If true, prevents manual positioning of the anchored object.
	 */
	lockPosition: boolean;
	/**
	 * If true, pins the position of the anchored object within the 
	 * text frame top and bottom.
	 */
	pinPosition: boolean;
	/** The point in the anchored object to position. */
	anchorPoint: AnchorPoint;
	/**
	 * When anchored position is above line, the position of the 
	 * anchored object is relative to the text area. When anchored 
	 * position is custom, the horizontal alignment of the anchored 
	 * object is set by the horizontal reference point. Note: Not 
	 * valid when anchored position is inline.
	 */
	horizontalAlignment: HorizontalAlignment;
	/**
	 * The horizontal reference point on the page. Valid only when 
	 * anchored position is custom.
	 */
	horizontalReferencePoint: AnchoredRelativeTo;
	/**
	 * The vertical alignment of the anchored object reference 
	 * point with the vertical reference point on the page. Notes: 
	 * Valid only when anchored position is custom.
	 */
	verticalAlignment: VerticalAlignment;
	/**
	 * The vertical reference point on the page. Valid when 
	 * anchored position is custom.
	 */
	verticalReferencePoint: VerticallyRelativeTo;
	/** The horizontal (x) offset of the anchored object. */
	anchorXoffset: number|string;
	/**
	 * The vertical (y) offset of the anchored object. Corresponds 
	 * to the space after property for above line positioning.
	 */
	anchorYoffset: number|string;
	/** The space above an above-line anchored object. */
	anchorSpaceAbove: number|string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Inserts the anchored object into specified story.
	 * @param {InsertionPoint} storyOffset - The location within 
	 * the story, specified as an insertion point.
	 * @param {AnchorPosition} anchoredPosition - The position of 
	 * the anchored object relative to the anchor. (Optional)
	 */
	insertAnchoredObject(storyOffset: InsertionPoint, anchoredPosition: AnchorPosition): void;
	/** Releases the anchored object from its associated text. */
	releaseAnchoredObject(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * AnchoredObjectSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): AnchoredObjectSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Baseline frame grid options.
 * @class
 * @extends Preference
 */
export declare class BaselineFrameGridOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the BaselineFrameGridOption (a Application, 
	 * Document, TextFrame or ObjectStyle).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, uses a custom baseline frame grid. */
	useCustomBaselineFrameGrid: boolean;
	/** The amount to offset the baseline grid. */
	startingOffsetForBaselineFrameGrid: number|string;
	/**
	 * The location (top of page, top margin, top of frame, or 
	 * frame inset) on which to base the custom baseline grid.
	 */
	baselineFrameGridRelativeOption: BaselineFrameGridRelativeOption;
	/** The distance between grid lines. */
	baselineFrameGridIncrement: number|string;
	/**
	 * The grid line color, specified either as an array of three 
	 * doubles, each in the range 0 to 255 and representing R, G, 
	 * and B values, or as a UI color. Can return: Array of 3 Reals 
	 * (0 - 255) or UIColors enumerator.
	 */
	baselineFrameGridColor: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * BaselineFrameGridOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): BaselineFrameGridOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Options for specifying default footnote formatting.
 * @class
 * @extends Preference
 */
export declare class FootnoteOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FootnoteOption (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The footnote numbering style. Can return: 
	 * FootnoteNumberingStyle enumerator or String.
	 */
	footnoteNumberingStyle: any;
	/** The number at which to start footnote numbering. */
	startAt: number;
	/**
	 * The point at which to restart footnote numbering. Can 
	 * return: FootnoteRestarting enumerator or String.
	 */
	restartNumbering: any;
	/**
	 * The position of the footnote prefix and/or suffix. Can 
	 * return: FootnotePrefixSuffix enumerator or String.
	 */
	showPrefixSuffix: any;
	/**
	 * The prefix text of the footnote. (Limit: 0 to 100 
	 * characters)
	 */
	prefix: string;
	/**
	 * The suffix text of the footnote. (Limit: 0 to 100 
	 * characters)
	 */
	suffix: string;
	/**
	 * The paragraph style to apply to footnotes. Note: The space 
	 * before and after the paragraph defined in the paragraph 
	 * style is ignored for footnotes. To define space above and 
	 * between footnotes, see spacer and space between.
	 */
	footnoteTextStyle: ParagraphStyle;
	/**
	 * The character style to apply to footnote reference numbers 
	 * in the main text.
	 */
	footnoteMarkerStyle: CharacterStyle;
	/**
	 * The position of footnote reference numbers in the main text. 
	 * Can return: FootnoteMarkerPositioning enumerator or String.
	 */
	markerPositioning: any;
	/**
	 * The text to insert between the footnote marker number and 
	 * the footnote text. (Range: 0 to 100 characters)
	 */
	separatorText: string;
	/**
	 * The amount of vertical space between footnotes. Note: The 
	 * space before and space after defined for the paragraph style 
	 * applied to the footnote is ignored.
	 */
	spaceBetween: number|string;
	/**
	 * The minimum amount of vertical space between the bottom of 
	 * the text column and the first footnote. Note: The space 
	 * before amount defined in the paragraph style applied to the 
	 * footnote is ignored for the first footnote.
	 */
	spacer: number|string;
	/**
	 * The distance between the top of the footnote container and 
	 * the footnote text.
	 */
	footnoteFirstBaselineOffset: FootnoteFirstBaseline;
	/**
	 * The minimum distance between the baseline of the text and 
	 * the top of the footnote container.
	 */
	footnoteMinimumFirstBaselineOffset: number|string;
	/**
	 * If true, footnotes at the end of the story are placed just 
	 * below the text. If false, footnotes at the end of the story 
	 * are placed at the bottom of the column.
	 */
	eosPlacement: boolean;
	/**
	 * If true, footnotes cannot split across columns. If false, 
	 * footnotes flow into succeeding columns when the footnote 
	 * text causes the footnote area to expand upward to reach the 
	 * footnote reference number in the main text.
	 */
	noSplitting: boolean;
	/**
	 * If true, draws a rule between the text and the first 
	 * footnote in the column.
	 */
	ruleOn: boolean;
	/**
	 * The stroke type of the rule above the first footnote in a 
	 * column. Note: Valid when rule on is true. Can return: 
	 * StrokeStyle or String.
	 */
	ruleType: any;
	/**
	 * The stroke weight of the rule above the first footnote in 
	 * the column. (Range: 0 to 1000) Note: Valid when rule on is 
	 * true.
	 */
	ruleLineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the rule above the first footnote in the 
	 * column. Note: Valid when rule on is true. Can return: Swatch 
	 * or String.
	 */
	ruleColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the rule above the first footnote in the 
	 * column. Note: Valid when rule type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleGapColor: any;
	/**
	 * The tint (as a percentage) of the rule above the first 
	 * footnote in the column. (Range: 0 to 100) Note: Valid when 
	 * rule on is true.
	 */
	ruleTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the rule 
	 * above the first footnote in the column. (Range: 0 to 100) 
	 * Note: Valid when rule type is not solid.
	 */
	ruleGapTint: number;
	/**
	 * If true, overprints the gap color of the rule above the 
	 * first footnote in the column. Note: Valid when rule type is 
	 * not solid.
	 */
	ruleGapOverprint: boolean;
	/**
	 * If true, overprints the rule above the first footnote in the 
	 * column. Note: Valid when rule on is true.
	 */
	ruleOverprint: boolean;
	/**
	 * The amount to left indent the rule above the first footnote 
	 * in the column. Note: Valid when rule on is true.
	 */
	ruleLeftIndent: number|string;
	/**
	 * The length of the rule above the first footnote in the 
	 * column. Note: Valid when rule on is true.
	 */
	ruleWidth: number|string;
	/**
	 * The vertical offset of the rule above the first footnote in 
	 * the column. Note: Valid when rule on is true.
	 */
	ruleOffset: number|string;
	/**
	 * If true, draws a rule above footnote text that continues 
	 * from a previous column. Note: Valid when no splitting is 
	 * false or undefined.
	 */
	continuingRuleOn: boolean;
	/**
	 * The stroke type of the rule above continued footnote text. 
	 * Note: Valid when continuing rule on is true. Can return: 
	 * StrokeStyle or String.
	 */
	continuingRuleType: any;
	/**
	 * The stroke weight of the rule above continued footnote text. 
	 * (Range: 0 to 1000) Note: Valid when continuing rule on is 
	 * true.
	 */
	continuingRuleLineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the rule above continued footnote text. Note: Valid when 
	 * continuing rule on is true. Can return: Swatch or String.
	 */
	continuingRuleColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the rule above continued footnote text. 
	 * Note: Valid when continuing rule type is not solid. Can 
	 * return: Swatch or String.
	 */
	continuingRuleGapColor: any;
	/**
	 * The tint (as a percentage) of the rule above continued 
	 * footnote text. (Range: 0 to 100) Note: Valid when continuing 
	 * rule type is not solid.
	 */
	continuingRuleTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the rule 
	 * above continued footnote text. (Range: 0 to 100) Note: Valid 
	 * when continuing rule type is not solid.
	 */
	continuingRuleGapTint: number;
	/**
	 * If true, overprints the rule above continued footnote text. 
	 * Note: Valid when continuing rule on is true.
	 */
	continuingRuleOverprint: boolean;
	/**
	 * If true, overprints the gap color of the rule above 
	 * continued footnote text. Note: Valid when continuing rule 
	 * type is not solid.
	 */
	continuingRuleGapOverprint: boolean;
	/**
	 * The amount to left indent the rule above continued footnote 
	 * text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleLeftIndent: number|string;
	/**
	 * The length of the rule above continued footnote text. Note: 
	 * Valid when continuing rule on is true.
	 */
	continuingRuleWidth: number|string;
	/**
	 * The vertical offset of the rule above continued footnote 
	 * text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleOffset: number|string;
	/**
	 * If true, document will have straddling footnotes. If false, 
	 * document will not have straddling footnotes.
	 */
	enableStraddling: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FootnoteOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FootnoteOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The preferences for a page number variable.
 * @class
 * @extends Preference
 */
export declare class PageNumberVariablePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PageNumberVariablePreference (a 
	 * TextVariable).
	 */
	readonly parent: TextVariable;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The text that precedes the value of the variable. (Limit: 
	 * 128 characters)
	 */
	textBefore: string;
	/** The format for the variable. */
	format: VariableNumberingStyles;
	/**
	 * The text that follows the value of the variable. (Limit: 128 
	 * characters)
	 */
	textAfter: string;
	/** The scope or range of the pages to include. */
	scope: VariableScopes;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PageNumberVariablePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PageNumberVariablePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The preferences for a chapter number variable.
 * @class
 * @extends Preference
 */
export declare class ChapterNumberVariablePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ChapterNumberVariablePreference (a 
	 * TextVariable).
	 */
	readonly parent: TextVariable;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The text that precedes the value of the variable. (Limit: 
	 * 128 characters)
	 */
	textBefore: string;
	/** The format for the variable. */
	format: VariableNumberingStyles;
	/**
	 * The text that follows the value of the variable. (Limit: 128 
	 * characters)
	 */
	textAfter: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ChapterNumberVariablePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ChapterNumberVariablePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The preferences for a date variable.
 * @class
 * @extends Preference
 */
export declare class DateVariablePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DateVariablePreference (a TextVariable). */
	readonly parent: TextVariable;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The text that precedes the value of the variable. (Limit: 
	 * 128 characters)
	 */
	textBefore: string;
	/** The date format. */
	format: string;
	/**
	 * The text that follows the value of the variable. (Limit: 128 
	 * characters)
	 */
	textAfter: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DateVariablePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DateVariablePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The preferences for a file name variable.
 * @class
 * @extends Preference
 */
export declare class FileNameVariablePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FileNameVariablePreference (a 
	 * TextVariable).
	 */
	readonly parent: TextVariable;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The text that precedes the value of the variable. (Limit: 
	 * 128 characters)
	 */
	textBefore: string;
	/** If true, includes the entire path of the file. */
	includePath: boolean;
	/** If true, includes the file extension. */
	includeExtension: boolean;
	/**
	 * The text that follows the value of the variable. (Limit: 128 
	 * characters)
	 */
	textAfter: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FileNameVariablePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FileNameVariablePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The preferences for a running header/footer (match character 
 * style) variable.
 * @class
 * @extends Preference
 */
export declare class MatchCharacterStylePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MatchCharacterStylePreference (a 
	 * TextVariable).
	 */
	readonly parent: TextVariable;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The text that precedes the value of the variable. (Limit: 
	 * 128 characters)
	 */
	textBefore: string;
	/**
	 * The text that follows the value of the variable. (Limit: 128 
	 * characters)
	 */
	textAfter: string;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/**
	 * The starting point and direction in which the search will be 
	 * conducted.
	 */
	searchStrategy: SearchStrategies;
	/** The case of the matched text. */
	changeCase: ChangeCaseOptions;
	/** If true, deletes end punctuation from the matched text. */
	deleteEndPunctuation: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * MatchCharacterStylePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MatchCharacterStylePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The preferences for a running header/footer (match paragraph 
 * style) variable.
 * @class
 * @extends Preference
 */
export declare class MatchParagraphStylePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MatchParagraphStylePreference (a 
	 * TextVariable).
	 */
	readonly parent: TextVariable;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The text that precedes the value of the variable. (Limit: 
	 * 128 characters)
	 */
	textBefore: string;
	/**
	 * The text that follows the value of the variable. (Limit: 128 
	 * characters)
	 */
	textAfter: string;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The starting point and direction in which the search will be 
	 * conducted.
	 */
	searchStrategy: SearchStrategies;
	/** The case of the matched text. */
	changeCase: ChangeCaseOptions;
	/** If true, deletes end punctuation from the matched text. */
	deleteEndPunctuation: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * MatchParagraphStylePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MatchParagraphStylePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The preferences for a custom text variable.
 * @class
 * @extends Preference
 */
export declare class CustomTextVariablePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CustomTextVariablePreference (a 
	 * TextVariable).
	 */
	readonly parent: TextVariable;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * CustomTextVariablePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CustomTextVariablePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The preferences for a caption metadata variable.
 * @class
 * @extends Preference
 */
export declare class CaptionMetadataVariablePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CaptionMetadataVariablePreference (a 
	 * TextVariable).
	 */
	readonly parent: TextVariable;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The text that precedes the value of the variable. (Limit: 
	 * 128 characters)
	 */
	textBefore: string;
	/** Name of the metadata provider. */
	metadataProviderName: string;
	/**
	 * The text that follows the value of the variable. (Limit: 128 
	 * characters)
	 */
	textAfter: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * CaptionMetadataVariablePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CaptionMetadataVariablePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Grid defaults. Note: Applies to named, layout, and frame 
 * (story) grids.
 * @class
 * @extends Preference
 */
export declare class GridDataInformation extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GridDataInformation (a Story, XmlStory, 
	 * Page, NamedGrid or TextFrame).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The font applied to the GridDataInformation, specified as 
	 * either a font object or the name of font family. Can return: 
	 * Font or String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/** The amount of white space between characters. */
	characterAki: number;
	/** The amount of white space between lines. */
	lineAki: number;
	/** The horizontal scaling applied to the GridDataInformation. */
	horizontalScale: number;
	/** The vertical scaling applied to the GridDataInformation. */
	verticalScale: number;
	/** The line justification. */
	lineAlignment: LineAlignment;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The grid view setting. */
	gridView: GridViewSettings;
	/**
	 * The character count location. Note: Valid when show 
	 * character count is true.
	 */
	characterCountLocation: CharacterCountLocation;
	/** The character size for the character count display. */
	characterCountSize: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GridDataInformation.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GridDataInformation;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Default properties specific to layout grids.
 * @class
 * @extends Preference
 */
export declare class LayoutGridDataInformation extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the LayoutGridDataInformation (a Application 
	 * or Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The font applied to the LayoutGridDataInformation, specified 
	 * as either a font object or the name of font family. Can 
	 * return: Font or String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/** The amount of white space between characters. */
	characterAki: number;
	/** The amount of white space between lines. */
	lineAki: number;
	/**
	 * The horizontal scaling applied to the 
	 * LayoutGridDataInformation.
	 */
	horizontalScale: number;
	/**
	 * The vertical scaling applied to the 
	 * LayoutGridDataInformation.
	 */
	verticalScale: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * LayoutGridDataInformation.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): LayoutGridDataInformation;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Default properties specific to frame grids.
 * @class
 * @extends Preference
 */
export declare class StoryGridDataInformation extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the StoryGridDataInformation (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The font applied to the StoryGridDataInformation, specified 
	 * as either a font object or the name of font family. Can 
	 * return: Font or String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/** The amount of white space between characters. */
	characterAki: number;
	/** The amount of white space between lines. */
	lineAki: number;
	/**
	 * The horizontal scaling applied to the 
	 * StoryGridDataInformation.
	 */
	horizontalScale: number;
	/**
	 * The vertical scaling applied to the 
	 * StoryGridDataInformation.
	 */
	verticalScale: number;
	/** The line justification. */
	lineAlignment: LineAlignment;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The grid view setting. */
	gridView: GridViewSettings;
	/**
	 * The character count location. Note: Valid when show 
	 * character count is true.
	 */
	characterCountLocation: CharacterCountLocation;
	/** The character size for the character count display. */
	characterCountSize: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * StoryGridDataInformation.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): StoryGridDataInformation;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Character grid preferences.
 * @class
 * @extends Preference
 */
export declare class CjkGridPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CjkGridPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, displays the layout grids. */
	showAllLayoutGrids: boolean;
	/** If true, displays the frame (story) grids. */
	showAllFrameGrids: boolean;
	/**
	 * The view magnification (as a percentage) less than which 
	 * grids do not appear. (Range: 5 to 4000)
	 */
	minimumScale: number;
	/** If true, objects snap to the layout grid. */
	snapToLayoutGrid: boolean;
	/**
	 * The layout grid color, specified either as an array of three 
	 * doubles, each in the range 0 to 255 and representing R, G, 
	 * and B values, or as a UI color. Can return: Array of 3 Reals 
	 * (0 - 255) or UIColors enumerator.
	 */
	layoutGridColorIndex: any;
	/**
	 * Applies the grid color to every nth cell, where n is the 
	 * value of this property.
	 */
	colorEveryNthCell: number;
	/**
	 * If true, applies the grid color from the the edge of the 
	 * line. If false, applies the grid color from the corner of 
	 * the frame.
	 */
	singleLineColorMode: boolean;
	/**
	 * If true, uses ICF mode for grid cells. If false, uses 
	 * virtual body mode.
	 */
	icfMode: boolean;
	/**
	 * If true, cell shape is circular. If false, cell shape is 
	 * rectangular.
	 */
	useCircularCells: boolean;
	/** If true, displays the character count for the frame. */
	showCharacterCount: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * CjkGridPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CjkGridPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Grid printing and exporting preferences.
 * @class
 * @extends Preference
 */
export declare class GridPrintingPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the GridPrintingPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, displays layout grids in the printed or exported 
	 * document.
	 */
	layoutGridPrinting: boolean;
	/**
	 * If true, displays frame (story) grids in the printed or 
	 * exported document.
	 */
	frameGridPrinting: boolean;
	/** If true, displays text in the printed or exported document. */
	textPrinting: boolean;
	/**
	 * If true, displays page items other than text, frame grids, 
	 * and layout grids in the printed or exported document. For 
	 * information on printing and exporting text and grids, see 
	 * text printing, frame grid printing, and layout grid 
	 * printing.
	 */
	pageItemPrinting: boolean;
	/** The stroke weight (in points) of the layout grid. */
	layoutGridStrokeWeight: number;
	/** The stroke weight (in points) of the frame grid. */
	frameGridStrokeWeight: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GridPrintingPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GridPrintingPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Galley preferences.
 * @class
 * @extends Preference
 */
export declare class GalleyPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GalleyPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The background color, specified either as an array of three 
	 * doubles, each in the range 0 to 255 and representing R, G, 
	 * and B values, or as an InCopy UI color. . Can return: Array 
	 * of 3 Reals (0 - 255) or InCopyUIColors enumerator.
	 */
	backgroundColor: any;
	/** If true, the cursor blinks. */
	blinkCursor: boolean;
	/** The cursor type for galley and story views. */
	cursorType: CursorTypes;
	/** If true, galley text is anti-aliased. */
	smoothText: boolean;
	/**
	 * The text color, specified either as an array of three 
	 * doubles, each in the range 0 to 255 and representing R, G, 
	 * and B values, or as an InCopy UI color. Can return: Array of 
	 * 3 Reals (0 - 255) or InCopyUIColors enumerator.
	 */
	textColor: any;
	/** If true, displays the depth ruler. */
	showDepthRuler: boolean;
	/**
	 * The type of text anti-aliasing to use in story and galley 
	 * views.
	 */
	antiAliasType: AntiAliasType;
	/** If true, show paragraph style names. */
	showParagraphStyleNames: boolean;
	/** Amount of spacing between lines. */
	lineSpacingValue: LineSpacingType;
	/** Font family name to use for text display. */
	displayFont: string;
	/** Size to use for text display. */
	displayFontSize: number|string;
	/** Info column width. */
	infoColumnWidth: number|string;
	/** If true, display the Info column. */
	showInfoColumn: boolean;
	/** If true, show paragraph break marks. */
	showParagraphBreakMarks: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GalleyPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GalleyPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A preset that contains transparency flattener properties.
 * @class
 */
export declare class FlattenerPreset {
	/** The unique ID of the FlattenerPreset. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FlattenerPreset (a Application). */
	readonly parent: Application;
	/**
	 * The index of the FlattenerPreset within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the FlattenerPreset. */
	name: string;
	/**
	 * The amount of vector artwork to rasterize during flattening, 
	 * specified as an enumerator or as a percentage in the range 0 
	 * to 100. Can return: FlattenerLevel enumerator or Real (0 - 
	 * 100).
	 */
	rasterVectorBalance: any;
	/**
	 * The resolution for vector objects rasterized as a result of 
	 * flattening. (Range: 1 to 9600) For information, see raster 
	 * vector balance.
	 */
	lineArtAndTextResolution: number;
	/**
	 * The resolution for gradients rasterized as a result of 
	 * flattening and for drop shadow and feathers when printed or 
	 * exported. (Range: 0 to 1200) Note: Resolutions higher than 
	 * 300 ppi increase file size and printing time but generally 
	 * do not improve the image quality.
	 */
	gradientAndMeshResolution: number;
	/**
	 * If true, ensures that the boundaries between vector and 
	 * rasterized artwork fall along object paths.
	 */
	clipComplexRegions: boolean;
	/**
	 * If true, converts all strokes to outlines and ensures that 
	 * stroke widths remain constant during flattening. Note: Can 
	 * cause thin strokes to appear slightly thicker than their 
	 * original width. Affects all strokes, not only strokes 
	 * involved in the transparency.
	 */
	convertAllStrokesToOutlines: boolean;
	/**
	 * If true, converts all text to outlines and discards all type 
	 * glyph information on spreads with transparency; ensures that 
	 * the width of text strokes remains constant during 
	 * flattening. Note: Can cause small fonts to appear slightly 
	 * thicker when viewed in Acrobat or printed on low-quality 
	 * desktop printers, but does not affect type quality when 
	 * printed on high-resolution printers or imagesetters.
	 */
	convertAllTextToOutlines: boolean;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the FlattenerPreset. */
	duplicate(): FlattenerPreset;
	/** Deletes the FlattenerPreset. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * FlattenerPreset.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FlattenerPreset;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of transparency flattener presets.
 * @class
 */
export declare class FlattenerPresets {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new FlattenerPreset.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new FlattenerPreset (Optional)
	 */
	add(withProperties: Object): FlattenerPreset;
	/** Displays the number of elements in the FlattenerPreset. */
	count(): number;
	/**
	 * Returns the FlattenerPreset with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): FlattenerPreset;
	/**
	 * Returns the FlattenerPreset with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): FlattenerPreset;
	/**
	 * Returns the FlattenerPreset with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): FlattenerPreset;
	/**
	 * Returns the FlattenerPresets within the specified range.
	 * @param {any} _from - The FlattenerPreset, index, or name at 
	 * the beginning of the range. Can accept: FlattenerPreset, 
	 * Long Integer or String.
	 * @param {any} to - The FlattenerPreset, index, or name at the 
	 * end of the range. Can accept: FlattenerPreset, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): FlattenerPreset;
	/** Returns the first FlattenerPreset in the collection. */
	firstItem(): FlattenerPreset;
	/** Returns the last FlattenerPreset in the collection. */
	lastItem(): FlattenerPreset;
	/** Returns the middle FlattenerPreset in the collection. */
	middleItem(): FlattenerPreset;
	/**
	 * Returns the FlattenerPreset with the index previous to the 
	 * specified index.
	 * @param {FlattenerPreset} obj - The index of the 
	 * FlattenerPreset that follows the desired FlattenerPreset.
	 */
	previousItem(obj: FlattenerPreset): FlattenerPreset;
	/**
	 * Returns the FlattenerPreset whose index follows the 
	 * specified FlattenerPreset in the collection.
	 * @param {FlattenerPreset} obj - The FlattenerPreset whose 
	 * index comes before the desired FlattenerPreset.
	 */
	nextItem(obj: FlattenerPreset): FlattenerPreset;
	/** Returns any FlattenerPreset in the collection. */
	anyItem(): FlattenerPreset;
	/** Returns every FlattenerPreset in the collection. */
	everyItem(): FlattenerPreset;
	/**
	 * Generates a string which, if executed, will return the 
	 * FlattenerPreset.
	 */
	toSource(): string;
	/**
	 * Returns the FlattenerPreset with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: FlattenerPreset;
}

/**
 * Transparency flattener preferences.
 * @class
 * @extends Preference
 */
export declare class FlattenerPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the FlattenerPreference (a Spread). */
	readonly parent: Spread;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The amount of vector artwork to rasterize during flattening, 
	 * specified as an enumerator or as a percentage in the range 0 
	 * to 100. Can return: FlattenerLevel enumerator or Real (0 - 
	 * 100).
	 */
	rasterVectorBalance: any;
	/**
	 * The resolution for vector objects rasterized as a result of 
	 * flattening. (Range: 1 to 9600) For information, see raster 
	 * vector balance.
	 */
	lineArtAndTextResolution: number;
	/**
	 * The resolution for gradients rasterized as a result of 
	 * flattening and for drop shadow and feathers when printed or 
	 * exported. (Range: 0 to 1200) Note: Resolutions higher than 
	 * 300 ppi increase file size and printing time but generally 
	 * do not improve the image quality.
	 */
	gradientAndMeshResolution: number;
	/**
	 * If true, ensures that the boundaries between vector and 
	 * rasterized artwork fall along object paths.
	 */
	clipComplexRegions: boolean;
	/**
	 * If true, converts all strokes to outlines and ensures that 
	 * stroke widths remain constant during flattening. Note: Can 
	 * cause thin strokes to appear slightly thicker than their 
	 * original width. Affects all strokes, not only strokes 
	 * involved in the transparency.
	 */
	convertAllStrokesToOutlines: boolean;
	/**
	 * If true, converts all text to outlines and discards all type 
	 * glyph information on spreads with transparency; ensures that 
	 * the width of text strokes remains constant during 
	 * flattening. Note: Can cause small fonts to appear slightly 
	 * thicker when viewed in Acrobat or printed on low-quality 
	 * desktop printers, but does not affect type quality when 
	 * printed on high-resolution printers or imagesetters.
	 */
	convertAllTextToOutlines: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FlattenerPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FlattenerPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Transparency preferences.
 * @class
 * @extends Preference
 */
export declare class TransparencyPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TransparencyPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The color space used for blending the colors of transparent 
	 * objects.
	 */
	blendingSpace: BlendingSpace;
	/** The angle of the global light. (Range: -360 to 360) */
	globalLightAngle: number;
	/** The altitude of the global light. (Range: 0 to 90) */
	globalLightAltitude: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TransparencyPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TransparencyPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Transparency settings.
 * @class
 * @extends Preference
 */
export declare class TransparencySetting extends Preference {
	/** Blending mode settings. */
	readonly blendingSettings: BlendingSetting;
	/** Settings related to the drop shadow effect. */
	readonly dropShadowSettings: DropShadowSetting;
	/** Settings related to the feather effect. */
	readonly featherSettings: FeatherSetting;
	/** Settings related to the inner shadow effect. */
	readonly innerShadowSettings: InnerShadowSetting;
	/** Settings related to the outer glow effect. */
	readonly outerGlowSettings: OuterGlowSetting;
	/** Settings related to the inner glow effect. */
	readonly innerGlowSettings: InnerGlowSetting;
	/** Settings related to the bevel and emboss effect. */
	readonly bevelAndEmbossSettings: BevelAndEmbossSetting;
	/** Settings related to the satin effect */
	readonly satinSettings: SatinSetting;
	/** Settings related to the directional feather effect. */
	readonly directionalFeatherSettings: DirectionalFeatherSetting;
	/** Settings related to the gradient feather effect. */
	readonly gradientFeatherSettings: GradientFeatherSetting;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TransparencySetting (a PageItem, HtmlItem, 
	 * FormField, SignatureField, TextBox, RadioButton, ListBox, 
	 * ComboBox, CheckBox, MultiStateObject, Button, MediaItem, 
	 * Sound, Movie, EPSText, SplineItem, Polygon, GraphicLine, 
	 * Rectangle, Oval, Graphic, ImportedPage, PICT, WMF, PDF, EPS, 
	 * Image, Group, TextFrame, PageItemDefault or ObjectStyle).
	 */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TransparencySetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TransparencySetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Transparency settings for the stroke of the parent object.
 * @class
 * @extends Preference
 */
export declare class StrokeTransparencySetting extends Preference {
	/** Blending mode settings. */
	readonly blendingSettings: BlendingSetting;
	/** Settings related to the drop shadow effect. */
	readonly dropShadowSettings: DropShadowSetting;
	/** Settings related to the feather effect. */
	readonly featherSettings: FeatherSetting;
	/** Settings related to the inner shadow effect. */
	readonly innerShadowSettings: InnerShadowSetting;
	/** Settings related to the outer glow effect. */
	readonly outerGlowSettings: OuterGlowSetting;
	/** Settings related to the inner glow effect. */
	readonly innerGlowSettings: InnerGlowSetting;
	/** Settings related to the bevel and emboss effect. */
	readonly bevelAndEmbossSettings: BevelAndEmbossSetting;
	/** Settings related to the satin effect */
	readonly satinSettings: SatinSetting;
	/** Settings related to the directional feather effect. */
	readonly directionalFeatherSettings: DirectionalFeatherSetting;
	/** Settings related to the gradient feather effect. */
	readonly gradientFeatherSettings: GradientFeatherSetting;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the StrokeTransparencySetting (a PageItem, 
	 * HtmlItem, FormField, SignatureField, TextBox, RadioButton, 
	 * ListBox, ComboBox, CheckBox, MultiStateObject, Button, 
	 * MediaItem, Sound, Movie, EPSText, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, Graphic, ImportedPage, PICT, 
	 * WMF, PDF, EPS, Image, Group, TextFrame, PageItemDefault or 
	 * ObjectStyle).
	 */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * StrokeTransparencySetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): StrokeTransparencySetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Transparency settings for the fill applied to the parent 
 * object.
 * @class
 * @extends Preference
 */
export declare class FillTransparencySetting extends Preference {
	/** Blending mode settings. */
	readonly blendingSettings: BlendingSetting;
	/** Settings related to the drop shadow effect. */
	readonly dropShadowSettings: DropShadowSetting;
	/** Settings related to the feather effect. */
	readonly featherSettings: FeatherSetting;
	/** Settings related to the inner shadow effect. */
	readonly innerShadowSettings: InnerShadowSetting;
	/** Settings related to the outer glow effect. */
	readonly outerGlowSettings: OuterGlowSetting;
	/** Settings related to the inner glow effect. */
	readonly innerGlowSettings: InnerGlowSetting;
	/** Settings related to the bevel and emboss effect. */
	readonly bevelAndEmbossSettings: BevelAndEmbossSetting;
	/** Settings related to the satin effect */
	readonly satinSettings: SatinSetting;
	/** Settings related to the directional feather effect. */
	readonly directionalFeatherSettings: DirectionalFeatherSetting;
	/** Settings related to the gradient feather effect. */
	readonly gradientFeatherSettings: GradientFeatherSetting;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FillTransparencySetting (a PageItem, 
	 * HtmlItem, FormField, SignatureField, TextBox, RadioButton, 
	 * ListBox, ComboBox, CheckBox, MultiStateObject, Button, 
	 * MediaItem, Sound, Movie, EPSText, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, Graphic, ImportedPage, PICT, 
	 * WMF, PDF, EPS, Image, Group, TextFrame, PageItemDefault or 
	 * ObjectStyle).
	 */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FillTransparencySetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FillTransparencySetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Basic object blending settings.
 * @class
 * @extends Preference
 */
export declare class BlendingSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the BlendingSetting (a TransparencySetting, 
	 * StrokeTransparencySetting, FillTransparencySetting or 
	 * ContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The blending mode for controlling how the base color 
	 * interacts with the color of the BlendingSetting.
	 */
	blendMode: BlendMode;
	/**
	 * The fill opacity of the BlendingSetting (as a percentage). 
	 * (Range: 0 to 100)
	 */
	opacity: number;
	/** If true, the BlendingSetting is a knockout group. */
	knockoutGroup: boolean;
	/**
	 * If true, blending is applied only to the group. If false, 
	 * blending includes all objects beneath the group.
	 */
	isolateBlending: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * BlendingSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): BlendingSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Drop shadow settings.
 * @class
 * @extends Preference
 */
export declare class DropShadowSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the DropShadowSetting (a TransparencySetting, 
	 * StrokeTransparencySetting, FillTransparencySetting or 
	 * ContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The distance between the item and its shadow */
	distance: number|string;
	/** The angle at which the shadow is thrown */
	angle: number;
	/** The shadow mode. */
	mode: ShadowMode;
	/** The blending mode for the drop shadow effect. */
	blendMode: BlendMode;
	/**
	 * The opacity of the drop shadow (as a percentage). (Range: 0 
	 * to 100)
	 */
	opacity: number;
	/**
	 * The horizontal offset of the drop shadow. Range depends on 
	 * the unit type. For points: -1000 to 1000; for picas: -83p4 
	 * to 83p4; for inches: -13.8889 to 13.8889; for mm: -352.778 
	 * to 352.778; for cm: -35.277 to 35.277; for ciceros: 
	 * -78c2.389 to 78c2.389.
	 */
	xOffset: number|string;
	/**
	 * The vertical offset of the drop shadow. (Range depends on 
	 * the unit type. For points: -1000 to 1000; for picas: -83p4 
	 * to 83p4; for inches: -13.8889 to 13.8889; for mm: -352.778 
	 * to 352.778; for cm: -35.277 to 35.277; for ciceros: 
	 * -78c2.389 to 78c2.389)
	 */
	yOffset: number|string;
	/**
	 * The radius (in pixels) of the blur applied to the drop 
	 * shadow. (Range depends on the unit type. For points: 0 to 
	 * 144; for picas: 0p0 to 12p0; for inches: 0 to 2; for mm: 0 
	 * to 50.08; for cm: 0 to 5.08; for ciceros: 0c0 to 11c3.128.)
	 */
	size: number|string;
	/**
	 * The color applied to the drop shadow, specified as a swatch 
	 * (color, gradient, tint, or mixed ink), or as an array of 
	 * color values. The color mode dictates the array values: for 
	 * RGB, specify three values, each in the range 0 to 255, in 
	 * the format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127.
	 */
	effectColor: Swatch;
	/**
	 * The amount (as a percentage) of noise applied to the shadow. 
	 * (Range: 0 to 100)
	 */
	noise: number;
	/**
	 * The amount (as a percentage of the blur width) to spread the 
	 * footprint of the drop shadow and reduce the radius of the 
	 * blur. (Range: 0 to 100)
	 */
	spread: number;
	/** If true, uses the global light angle. */
	useGlobalLight: boolean;
	/** If true, the layer will knock out the drop shadow. */
	knockedOut: boolean;
	/**
	 * If true, the drop shadow will take into account other 
	 * non-shadow effects.
	 */
	honorOtherEffects: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DropShadowSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DropShadowSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Feather effect settings.
 * @class
 * @extends Preference
 */
export declare class FeatherSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FeatherSetting (a TransparencySetting, 
	 * StrokeTransparencySetting, FillTransparencySetting or 
	 * ContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The feather mode. */
	mode: FeatherMode;
	/**
	 * The feather width. (Range depends on the unit type. For 
	 * points: 0 to 1000; for picas: 0 to 83p4; for inches: 0 to 
	 * 13.8889; for mm: 0 to 352.778; for cm: 0 to 35.277; for 
	 * ciceros: 0 to 78c2.389.)
	 */
	width: number|string;
	/** The corner effect applied to the feather. */
	cornerType: FeatherCornerType;
	/**
	 * The amount (as a percentage) of noise applied to the 
	 * feather. (Range: 0 to 100)
	 */
	noise: number;
	/**
	 * The amount to choke the feather (as a percentage of the 
	 * feather width). (Range: 0 to 100)
	 */
	chokeAmount: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FeatherSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FeatherSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Inner shadow effect settings.
 * @class
 * @extends Preference
 */
export declare class InnerShadowSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the InnerShadowSetting (a TransparencySetting, 
	 * StrokeTransparencySetting, FillTransparencySetting or 
	 * ContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The horizontal offset of the shadow */
	xOffset: number|string;
	/** The vertical offset of the shadow */
	yOffset: number|string;
	/** If true, the inner shadow effect is applied. */
	applied: boolean;
	/**
	 * The color applied to the inner shadow, specified as a swatch 
	 * (color, gradient, tint, or mixed ink), or as an array of 
	 * color values. The color mode dictates the array values: for 
	 * RGB, specify three values, each in the range 0 to 255, in 
	 * the format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127.
	 */
	effectColor: Swatch;
	/** The blending mode for the inner shadow effect. */
	blendMode: BlendMode;
	/**
	 * The opacity (as a percentage) of the inner shadow. (Range: 0 
	 * to 100)
	 */
	opacity: number;
	/**
	 * The angle at which the inner shadow is thrown. (Range: -360 
	 * to 360)
	 */
	angle: number;
	/** The distance between the InnerShadowSetting and the shadow. */
	distance: number|string;
	/** If true, the global light angle is used. */
	useGlobalLight: boolean;
	/**
	 * The amount to choke the inner shadow (as a percentage of 
	 * shadow size). (Range: 0 to 100)
	 */
	chokeAmount: number;
	/** The size of the inner shadow. */
	size: number|string;
	/**
	 * The amount (as a percentage) of noise to add to the shadow. 
	 * (Range: 0 to 100)
	 */
	noise: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * InnerShadowSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): InnerShadowSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Outer glow effect settings.
 * @class
 * @extends Preference
 */
export declare class OuterGlowSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the OuterGlowSetting (a TransparencySetting, 
	 * StrokeTransparencySetting, FillTransparencySetting or 
	 * ContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the outer glow effect is applied. */
	applied: boolean;
	/** The blending mode for the outer glow effect. */
	blendMode: BlendMode;
	/**
	 * The opacity of the outer glow (as a percentage). (Range: 0 
	 * to 100)
	 */
	opacity: number;
	/**
	 * The amount (as a percentage) of noise applied to the outer 
	 * glow. (Range: 0 to 100)
	 */
	noise: number;
	/**
	 * The color applied to the outer glow, specified as a swatch 
	 * (color, gradient, tint, or mixed ink), or an array of color 
	 * values. The color mode dictates the array values: for RGB, 
	 * specify three values, each in the range 0 to 255, in the 
	 * format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127.
	 */
	effectColor: Swatch;
	/** The technique applied to the outer glow. */
	technique: GlowTechnique;
	/**
	 * The amount of spread (as a percentage of the outer glow 
	 * size). (Range: 0 to 100)
	 */
	spread: number;
	/** The size of the outer glow. */
	size: number|string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * OuterGlowSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): OuterGlowSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Inner glow effect settings.
 * @class
 * @extends Preference
 */
export declare class InnerGlowSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the InnerGlowSetting (a TransparencySetting, 
	 * StrokeTransparencySetting, FillTransparencySetting or 
	 * ContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the inner glow effect is applied. */
	applied: boolean;
	/** The blending mode for the inner glow effect. */
	blendMode: BlendMode;
	/**
	 * The opacity of the inner glow (as a percentage). (Range: 0 
	 * to 100)
	 */
	opacity: number;
	/**
	 * The amount (as a percentage) of noise applied to the inner 
	 * glow. (Range: 0 to 100)
	 */
	noise: number;
	/**
	 * The color applied to the inner glow, specified as a swatch 
	 * (color, gradient, tint, or mixed ink), or as an array of 
	 * color values. The color mode dictates the array values: for 
	 * RGB, specify three values, each in the range 0 to 255, in 
	 * the format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127.
	 */
	effectColor: Swatch;
	/** The technique used for the inner glow. */
	technique: GlowTechnique;
	/**
	 * The amount of spread (as a percentage of the inner glow 
	 * size). (Range: 0 to 100)
	 */
	spread: number;
	/** The size of the inner glow. */
	size: number|string;
	/** The light source of the inner glow effect. */
	source: InnerGlowSource;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * InnerGlowSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): InnerGlowSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Bevel and emboss effect settings.
 * @class
 * @extends Preference
 */
export declare class BevelAndEmbossSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the BevelAndEmbossSetting (a 
	 * TransparencySetting, StrokeTransparencySetting, 
	 * FillTransparencySetting or ContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the bevel or emboss effect is applied. */
	applied: boolean;
	/** The style of bevel or emboss. */
	style: BevelAndEmbossStyle;
	/** The edging technique of the bevel or emboss. */
	technique: BevelAndEmbossTechnique;
	/**
	 * The depth of the bevel or emboss (as a percentage). (Range: 
	 * 0 to 1000)
	 */
	depth: number;
	/** The direction of the bevel or emboss. */
	direction: BevelAndEmbossDirection;
	/** The size of the bevel or emboss. */
	size: number|string;
	/** The amount (in pixels) of softening. */
	soften: number|string;
	/** The angle of the light source. (Range: -180 to 180) */
	angle: number;
	/** The altitude of the light source. (Range: 0 to 90) */
	altitude: number;
	/** If true, the global light source is used. */
	useGlobalLight: boolean;
	/**
	 * The color applied to the highlight portion of the effect, 
	 * specified as a swatch (color, gradient, tint, or mixed ink), 
	 * a color library color, a hex value, or as an array of color 
	 * values. The color mode dictates the array values: for RGB, 
	 * specify three values, each in the range 0 to 255, in the 
	 * format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127; for HSB, specify three colors in the 
	 * format [H,S,B], with H in the range 0 to 360 and S and B as 
	 * percentages in the range 0 to 100.
	 */
	highlightColor: Swatch;
	/** The blending mode for the highlight portion of the effect. */
	highlightBlendMode: BlendMode;
	/**
	 * The opacity of the highlight portion of the effect (as a 
	 * percentage). (Range: 0 to 100)
	 */
	highlightOpacity: number;
	/**
	 * The color applied to the shadow portion of the effect, 
	 * specified as a swatch (color, gradient, tint, or mixed ink), 
	 * a color library color, a hex value, or as an array of color 
	 * values. The color mode dictates the array values: for RGB, 
	 * specify three values, each in the range 0 to 255, in the 
	 * format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127; for HSB, specify three colors in the 
	 * format [H,S,B], with H in the range 0 to 360 and S and B as 
	 * percentages in the range 0 to 100.
	 */
	shadowColor: Swatch;
	/** The blending mode for the shadow portion of the effect. */
	shadowBlendMode: BlendMode;
	/**
	 * The opacity of the shadow portion of the effect (as a 
	 * percentage). (Range: 0 to 100)
	 */
	shadowOpacity: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * BevelAndEmbossSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): BevelAndEmbossSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Satin effect settings.
 * @class
 * @extends Preference
 */
export declare class SatinSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the SatinSetting (a TransparencySetting, 
	 * StrokeTransparencySetting, FillTransparencySetting or 
	 * ContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, applies the satin effect. */
	applied: boolean;
	/**
	 * The color applied to the satin effect, specified as a swatch 
	 * (color, gradient, tint, or mixed ink), a color library 
	 * color, a hex value, or as an array of color values. The 
	 * color mode dictates the array values: for RGB, specify three 
	 * values, each in the range 0 to 255, in the format [R,G,B]; 
	 * for CMYK, specify four values, each as a percentage and each 
	 * in the range 0 to 100, in the format [C,M,Y,K]; for LAB, 
	 * specify three values in the format [L,A,B], with L in the 
	 * range 0 to 100 and A and B in the range -128 to 127; for 
	 * HSB, specify three colors in the format [H,S,B], with H in 
	 * the range 0 to 360 and S and B as percentages in the range 0 
	 * to 100.
	 */
	effectColor: Swatch;
	/** The blending mode for the satin effect. */
	blendMode: BlendMode;
	/**
	 * The opacity of the satin effect (as a percentage). (Range: 0 
	 * to 100)
	 */
	opacity: number;
	/** The light angle of the satin effect. (Range: -360 to 360) */
	angle: number;
	/**
	 * The distance (in pixels) from the SatinSetting to the satin 
	 * effect.
	 */
	distance: number|string;
	/** The width (in pixels) of the satin effect. */
	size: number|string;
	/** If true, inverts the satin effect. */
	invertEffect: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * SatinSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): SatinSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Transparency settings for the content of the parent object.
 * @class
 * @extends Preference
 */
export declare class ContentTransparencySetting extends Preference {
	/** Blending mode settings. */
	readonly blendingSettings: BlendingSetting;
	/** Settings related to the drop shadow effect. */
	readonly dropShadowSettings: DropShadowSetting;
	/** Settings related to the feather effect. */
	readonly featherSettings: FeatherSetting;
	/** Settings related to the inner shadow effect. */
	readonly innerShadowSettings: InnerShadowSetting;
	/** Settings related to the outer glow effect. */
	readonly outerGlowSettings: OuterGlowSetting;
	/** Settings related to the inner glow effect. */
	readonly innerGlowSettings: InnerGlowSetting;
	/** Settings related to the bevel and emboss effect. */
	readonly bevelAndEmbossSettings: BevelAndEmbossSetting;
	/** Settings related to the satin effect */
	readonly satinSettings: SatinSetting;
	/** Settings related to the directional feather effect. */
	readonly directionalFeatherSettings: DirectionalFeatherSetting;
	/** Settings related to the gradient feather effect. */
	readonly gradientFeatherSettings: GradientFeatherSetting;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ContentTransparencySetting (a PageItem, 
	 * HtmlItem, FormField, SignatureField, TextBox, RadioButton, 
	 * ListBox, ComboBox, CheckBox, MultiStateObject, Button, 
	 * MediaItem, Sound, Movie, EPSText, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, Graphic, ImportedPage, PICT, 
	 * WMF, PDF, EPS, Image, Group, TextFrame, PageItemDefault or 
	 * ObjectStyle).
	 */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ContentTransparencySetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ContentTransparencySetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Directional feather effect settings.
 * @class
 * @extends Preference
 */
export declare class DirectionalFeatherSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the DirectionalFeatherSetting (a 
	 * TransparencySetting, StrokeTransparencySetting, 
	 * FillTransparencySetting or ContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the directional feather effect is applied. */
	applied: boolean;
	/**
	 * The feather width (in pixels) on the left side of the 
	 * DirectionalFeatherSetting.
	 */
	leftWidth: number|string;
	/**
	 * The feather width (in pixels) on the right side of the 
	 * DirectionalFeatherSetting. (Range: .2 to 250)
	 */
	rightWidth: number|string;
	/**
	 * The feather width (in pixels) on the top side of the object 
	 * DirectionalFeatherSetting. (Range: .2 to 250)
	 */
	topWidth: number|string;
	/**
	 * The feather width (in pixels) on the bottom side of the 
	 * object DirectionalFeatherSetting. (Range: .2 to 250)
	 */
	bottomWidth: number|string;
	/**
	 * The amount to choke the directional feather (as a percentage 
	 * of the feather width). (Range: 0 to 100)
	 */
	chokeAmount: number;
	/** The angle of the feather. (Range: 180 to -180) */
	angle: number;
	/** The shape-following algorithm applied to the feather. */
	followShapeMode: FollowShapeModeOptions;
	/**
	 * The amount of noise (as a percentage) applied to the feather 
	 * region. (Range: 0 to 100)
	 */
	noise: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DirectionalFeatherSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DirectionalFeatherSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Gradient feather effect settings.
 * @class
 * @extends Preference
 */
export declare class GradientFeatherSetting extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the GradientFeatherSetting (a 
	 * TransparencySetting, StrokeTransparencySetting, 
	 * FillTransparencySetting or ContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of opacity gradient stops. */
	readonly opacityGradientStops: OpacityGradientStops;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the gradient feather effect is applied. */
	applied: boolean;
	/** The type of gradient. */
	type: GradientType;
	/** The angle of the gradient feather. */
	angle: number;
	/**
	 * The length of the axial gradient, or radius of the radial 
	 * gradient.
	 */
	length: number|string;
	/**
	 * The center point (for a radial gradient) or starting point 
	 * (for a linear gradient) applied to the fill, as page 
	 * coordinates in the format [x, y].
	 */
	gradientStart: number|string;
	/** The hilite angle of the radial gradient feather. */
	hiliteAngle: number;
	/** The hilite length of the radial gradient feather. */
	hiliteLength: number|string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GradientFeatherSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GradientFeatherSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Transparency settings.
 * @class
 * @extends Preference
 */
export declare class FindChangeTransparencySetting extends Preference {
	/** Blending mode settings. */
	readonly blendingSettings: FindChangeBlendingSetting;
	/** Settings related to the drop shadow effect. */
	readonly dropShadowSettings: FindChangeDropShadowSetting;
	/** Settings related to the feather effect. */
	readonly featherSettings: FindChangeFeatherSetting;
	/** Settings related to the inner shadow effect. */
	readonly innerShadowSettings: FindChangeInnerShadowSetting;
	/** Settings related to the outer glow effect. */
	readonly outerGlowSettings: FindChangeOuterGlowSetting;
	/** Settings related to the inner glow effect. */
	readonly innerGlowSettings: FindChangeInnerGlowSetting;
	/** Settings related to the bevel and emboss effect. */
	readonly bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting;
	/** Settings related to the satin effect */
	readonly satinSettings: FindChangeSatinSetting;
	/** Settings related to the directional feather effect. */
	readonly directionalFeatherSettings: FindChangeDirectionalFeatherSetting;
	/** Settings related to the gradient feather effect. */
	readonly gradientFeatherSettings: FindChangeGradientFeatherSetting;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeTransparencySetting (a 
	 * FindObjectPreference or ChangeObjectPreference).
	 */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeTransparencySetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeTransparencySetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Transparency settings for the stroke of the parent object.
 * @class
 * @extends Preference
 */
export declare class FindChangeStrokeTransparencySetting extends Preference {
	/** Blending mode settings. */
	readonly blendingSettings: FindChangeBlendingSetting;
	/** Settings related to the drop shadow effect. */
	readonly dropShadowSettings: FindChangeDropShadowSetting;
	/** Settings related to the feather effect. */
	readonly featherSettings: FindChangeFeatherSetting;
	/** Settings related to the inner shadow effect. */
	readonly innerShadowSettings: FindChangeInnerShadowSetting;
	/** Settings related to the outer glow effect. */
	readonly outerGlowSettings: FindChangeOuterGlowSetting;
	/** Settings related to the inner glow effect. */
	readonly innerGlowSettings: FindChangeInnerGlowSetting;
	/** Settings related to the bevel and emboss effect. */
	readonly bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting;
	/** Settings related to the satin effect */
	readonly satinSettings: FindChangeSatinSetting;
	/** Settings related to the directional feather effect. */
	readonly directionalFeatherSettings: FindChangeDirectionalFeatherSetting;
	/** Settings related to the gradient feather effect. */
	readonly gradientFeatherSettings: FindChangeGradientFeatherSetting;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeStrokeTransparencySetting (a 
	 * FindObjectPreference or ChangeObjectPreference).
	 */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeStrokeTransparencySetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeStrokeTransparencySetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Transparency settings for the fill applied to the parent 
 * object.
 * @class
 * @extends Preference
 */
export declare class FindChangeFillTransparencySetting extends Preference {
	/** Blending mode settings. */
	readonly blendingSettings: FindChangeBlendingSetting;
	/** Settings related to the drop shadow effect. */
	readonly dropShadowSettings: FindChangeDropShadowSetting;
	/** Settings related to the feather effect. */
	readonly featherSettings: FindChangeFeatherSetting;
	/** Settings related to the inner shadow effect. */
	readonly innerShadowSettings: FindChangeInnerShadowSetting;
	/** Settings related to the outer glow effect. */
	readonly outerGlowSettings: FindChangeOuterGlowSetting;
	/** Settings related to the inner glow effect. */
	readonly innerGlowSettings: FindChangeInnerGlowSetting;
	/** Settings related to the bevel and emboss effect. */
	readonly bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting;
	/** Settings related to the satin effect */
	readonly satinSettings: FindChangeSatinSetting;
	/** Settings related to the directional feather effect. */
	readonly directionalFeatherSettings: FindChangeDirectionalFeatherSetting;
	/** Settings related to the gradient feather effect. */
	readonly gradientFeatherSettings: FindChangeGradientFeatherSetting;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeFillTransparencySetting (a 
	 * FindObjectPreference or ChangeObjectPreference).
	 */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeFillTransparencySetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeFillTransparencySetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Transparency settings for the content of the parent object.
 * @class
 * @extends Preference
 */
export declare class FindChangeContentTransparencySetting extends Preference {
	/** Blending mode settings. */
	readonly blendingSettings: FindChangeBlendingSetting;
	/** Settings related to the drop shadow effect. */
	readonly dropShadowSettings: FindChangeDropShadowSetting;
	/** Settings related to the feather effect. */
	readonly featherSettings: FindChangeFeatherSetting;
	/** Settings related to the inner shadow effect. */
	readonly innerShadowSettings: FindChangeInnerShadowSetting;
	/** Settings related to the outer glow effect. */
	readonly outerGlowSettings: FindChangeOuterGlowSetting;
	/** Settings related to the inner glow effect. */
	readonly innerGlowSettings: FindChangeInnerGlowSetting;
	/** Settings related to the bevel and emboss effect. */
	readonly bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting;
	/** Settings related to the satin effect */
	readonly satinSettings: FindChangeSatinSetting;
	/** Settings related to the directional feather effect. */
	readonly directionalFeatherSettings: FindChangeDirectionalFeatherSetting;
	/** Settings related to the gradient feather effect. */
	readonly gradientFeatherSettings: FindChangeGradientFeatherSetting;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeContentTransparencySetting (a 
	 * FindObjectPreference or ChangeObjectPreference).
	 */
	readonly parent: any;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeContentTransparencySetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeContentTransparencySetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Basic object blending settings.
 * @class
 * @extends BlendingSetting
 */
export declare class FindChangeBlendingSetting extends BlendingSetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeBlendingSetting (a 
	 * FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting or 
	 * FindChangeContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The blending mode for controlling how the base color 
	 * interacts with the color of the FindChangeBlendingSetting. 
	 * Can return: BlendMode enumerator or NothingEnum enumerator.
	 */
	blendMode: any;
	/**
	 * The fill opacity of the FindChangeBlendingSetting (as a 
	 * percentage). (Range: 0 to 100). Can return: Real (0 - 100) 
	 * or NothingEnum enumerator.
	 */
	opacity: any;
	/**
	 * If true, the FindChangeBlendingSetting is a knockout group. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	knockoutGroup: any;
	/**
	 * If true, blending is applied only to the group. If false, 
	 * blending includes all objects beneath the group. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	isolateBlending: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeBlendingSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeBlendingSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Drop shadow settings.
 * @class
 * @extends DropShadowSetting
 */
export declare class FindChangeDropShadowSetting extends DropShadowSetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeDropShadowSetting (a 
	 * FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting or 
	 * FindChangeContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The distance between the item and its shadow. Can return: 
	 * Unit (0 - 1000 points) or NothingEnum enumerator.
	 */
	distance: any;
	/**
	 * The angle at which the shadow is thrown. Can return: Real 
	 * (-180 - 180) or NothingEnum enumerator.
	 */
	angle: any;
	/**
	 * The shadow mode. Can return: ShadowMode enumerator or 
	 * NothingEnum enumerator.
	 */
	mode: any;
	/**
	 * The blending mode for the drop shadow effect. Can return: 
	 * BlendMode enumerator or NothingEnum enumerator.
	 */
	blendMode: any;
	/**
	 * The opacity of the drop shadow (as a percentage). (Range: 0 
	 * to 100). Can return: Real (0 - 100) or NothingEnum 
	 * enumerator.
	 */
	opacity: any;
	/**
	 * The horizontal offset of the drop shadow. Range depends on 
	 * the unit type. For points: -1000 to 1000; for picas: -83p4 
	 * to 83p4; for inches: -13.8889 to 13.8889; for mm: -352.778 
	 * to 352.778; for cm: -35.277 to 35.277; for ciceros: 
	 * -78c2.389 to 78c2.389. Can return: Unit (-1000 - 1000 
	 * points) or NothingEnum enumerator.
	 */
	xOffset: any;
	/**
	 * The vertical offset of the drop shadow. (Range depends on 
	 * the unit type. For points: -1000 to 1000; for picas: -83p4 
	 * to 83p4; for inches: -13.8889 to 13.8889; for mm: -352.778 
	 * to 352.778; for cm: -35.277 to 35.277; for ciceros: 
	 * -78c2.389 to 78c2.389). Can return: Unit (-1000 - 1000 
	 * points) or NothingEnum enumerator.
	 */
	yOffset: any;
	/**
	 * The radius (in pixels) of the blur applied to the drop 
	 * shadow. (Range depends on the unit type. For points: 0 to 
	 * 144; for picas: 0p0 to 12p0; for inches: 0 to 2; for mm: 0 
	 * to 50.08; for cm: 0 to 5.08; for ciceros: 0c0 to 11c3.128.). 
	 * Can return: Unit (0 - 144 points) or NothingEnum enumerator.
	 */
	size: any;
	/**
	 * The color applied to the drop shadow, specified as a swatch 
	 * (color, gradient, tint, or mixed ink), or as an array of 
	 * color values. The color mode dictates the array values: for 
	 * RGB, specify three values, each in the range 0 to 255, in 
	 * the format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127. Can return: Swatch or NothingEnum 
	 * enumerator.
	 */
	effectColor: any;
	/**
	 * The amount (as a percentage) of noise applied to the shadow. 
	 * (Range: 0 to 100). Can return: Real (0 - 100) or NothingEnum 
	 * enumerator.
	 */
	noise: any;
	/**
	 * The amount (as a percentage of the blur width) to spread the 
	 * footprint of the drop shadow and reduce the radius of the 
	 * blur. (Range: 0 to 100). Can return: Real (0 - 100) or 
	 * NothingEnum enumerator.
	 */
	spread: any;
	/**
	 * If true, uses the global light angle. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	useGlobalLight: any;
	/**
	 * If true, the layer will knock out the drop shadow. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	knockedOut: any;
	/**
	 * If true, the drop shadow will take into account other 
	 * non-shadow effects. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	honorOtherEffects: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeDropShadowSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeDropShadowSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Feather effect settings.
 * @class
 * @extends FeatherSetting
 */
export declare class FindChangeFeatherSetting extends FeatherSetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeFeatherSetting (a 
	 * FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting or 
	 * FindChangeContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The feather mode. Can return: FeatherMode enumerator or 
	 * NothingEnum enumerator.
	 */
	mode: any;
	/**
	 * The feather width. (Range depends on the unit type. For 
	 * points: 0 to 1000; for picas: 0 to 83p4; for inches: 0 to 
	 * 13.8889; for mm: 0 to 352.778; for cm: 0 to 35.277; for 
	 * ciceros: 0 to 78c2.389.). Can return: Unit (0 - 1000 points) 
	 * or NothingEnum enumerator.
	 */
	width: any;
	/**
	 * The corner effect applied to the feather. Can return: 
	 * FeatherCornerType enumerator or NothingEnum enumerator.
	 */
	cornerType: any;
	/**
	 * The amount (as a percentage) of noise applied to the 
	 * feather. (Range: 0 to 100). Can return: Real (0 - 100) or 
	 * NothingEnum enumerator.
	 */
	noise: any;
	/**
	 * The amount to choke the feather (as a percentage of the 
	 * feather width). (Range: 0 to 100). Can return: Real (0 - 
	 * 100) or NothingEnum enumerator.
	 */
	chokeAmount: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeFeatherSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeFeatherSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Inner shadow effect settings.
 * @class
 * @extends InnerShadowSetting
 */
export declare class FindChangeInnerShadowSetting extends InnerShadowSetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeInnerShadowSetting (a 
	 * FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting or 
	 * FindChangeContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The horizontal offset of the shadow. Can return: Unit (-1000 
	 * - 1000 points) or NothingEnum enumerator.
	 */
	xOffset: any;
	/**
	 * The vertical offset of the shadow. Can return: Unit (-1000 - 
	 * 1000 points) or NothingEnum enumerator.
	 */
	yOffset: any;
	/**
	 * If true, the inner shadow effect is applied. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	applied: any;
	/**
	 * The color applied to the inner shadow, specified as a swatch 
	 * (color, gradient, tint, or mixed ink), or as an array of 
	 * color values. The color mode dictates the array values: for 
	 * RGB, specify three values, each in the range 0 to 255, in 
	 * the format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127. . Can return: Swatch or NothingEnum 
	 * enumerator.
	 */
	effectColor: any;
	/**
	 * The blending mode for the inner shadow effect. Can return: 
	 * BlendMode enumerator or NothingEnum enumerator.
	 */
	blendMode: any;
	/**
	 * The opacity (as a percentage) of the inner shadow. (Range: 0 
	 * to 100). Can return: Real (0 - 100) or NothingEnum 
	 * enumerator.
	 */
	opacity: any;
	/**
	 * The angle at which the inner shadow is thrown. (Range: -360 
	 * to 360). Can return: Real (-180 - 180) or NothingEnum 
	 * enumerator.
	 */
	angle: any;
	/**
	 * The distance between the FindChangeInnerShadowSetting and 
	 * the shadow. . Can return: Unit (0 - 1000 points) or 
	 * NothingEnum enumerator.
	 */
	distance: any;
	/**
	 * If true, the global light angle is used. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	useGlobalLight: any;
	/**
	 * The amount to choke the inner shadow (as a percentage of 
	 * shadow size). (Range: 0 to 100). Can return: Real (0 - 100) 
	 * or NothingEnum enumerator.
	 */
	chokeAmount: any;
	/**
	 * The size of the inner shadow. Can return: Unit (0 - 144 
	 * points) or NothingEnum enumerator.
	 */
	size: any;
	/**
	 * The amount (as a percentage) of noise to add to the shadow. 
	 * (Range: 0 to 100). Can return: Real (0 - 100) or NothingEnum 
	 * enumerator.
	 */
	noise: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeInnerShadowSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeInnerShadowSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Outer glow effect settings.
 * @class
 * @extends OuterGlowSetting
 */
export declare class FindChangeOuterGlowSetting extends OuterGlowSetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeOuterGlowSetting (a 
	 * FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting or 
	 * FindChangeContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, the outer glow effect is applied. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	applied: any;
	/**
	 * The blending mode for the outer glow effect. Can return: 
	 * BlendMode enumerator or NothingEnum enumerator.
	 */
	blendMode: any;
	/**
	 * The opacity of the outer glow (as a percentage). (Range: 0 
	 * to 100). Can return: Real (0 - 100) or NothingEnum 
	 * enumerator.
	 */
	opacity: any;
	/**
	 * The amount (as a percentage) of noise applied to the outer 
	 * glow. (Range: 0 to 100). Can return: Real (0 - 100) or 
	 * NothingEnum enumerator.
	 */
	noise: any;
	/**
	 * The color applied to the outer glow, specified as a swatch 
	 * (color, gradient, tint, or mixed ink), or an array of color 
	 * values. The color mode dictates the array values: for RGB, 
	 * specify three values, each in the range 0 to 255, in the 
	 * format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127. Can return: Swatch or NothingEnum 
	 * enumerator.
	 */
	effectColor: any;
	/**
	 * The technique applied to the outer glow. Can return: 
	 * GlowTechnique enumerator or NothingEnum enumerator.
	 */
	technique: any;
	/**
	 * The amount of spread (as a percentage of the outer glow 
	 * size). (Range: 0 to 100). Can return: Real (0 - 100) or 
	 * NothingEnum enumerator.
	 */
	spread: any;
	/**
	 * The size of the outer glow. Can return: Unit (0 - 144 
	 * points) or NothingEnum enumerator.
	 */
	size: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeOuterGlowSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeOuterGlowSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Inner glow effect settings.
 * @class
 * @extends InnerGlowSetting
 */
export declare class FindChangeInnerGlowSetting extends InnerGlowSetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeInnerGlowSetting (a 
	 * FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting or 
	 * FindChangeContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, the inner glow effect is applied. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	applied: any;
	/**
	 * The blending mode for the inner glow effect. Can return: 
	 * BlendMode enumerator or NothingEnum enumerator.
	 */
	blendMode: any;
	/**
	 * The opacity of the inner glow (as a percentage). (Range: 0 
	 * to 100). Can return: Real (0 - 100) or NothingEnum 
	 * enumerator.
	 */
	opacity: any;
	/**
	 * The amount (as a percentage) of noise applied to the inner 
	 * glow. (Range: 0 to 100). Can return: Real (0 - 100) or 
	 * NothingEnum enumerator.
	 */
	noise: any;
	/**
	 * The color applied to the inner glow, specified as a swatch 
	 * (color, gradient, tint, or mixed ink), or as an array of 
	 * color values. The color mode dictates the array values: for 
	 * RGB, specify three values, each in the range 0 to 255, in 
	 * the format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127. Can return: Swatch or NothingEnum 
	 * enumerator.
	 */
	effectColor: any;
	/**
	 * The technique used for the inner glow. Can return: 
	 * GlowTechnique enumerator or NothingEnum enumerator.
	 */
	technique: any;
	/**
	 * The amount of spread (as a percentage of the inner glow 
	 * size). (Range: 0 to 100). Can return: Real (0 - 100) or 
	 * NothingEnum enumerator.
	 */
	spread: any;
	/**
	 * The size of the inner glow. Can return: Unit (0 - 144 
	 * points) or NothingEnum enumerator.
	 */
	size: any;
	/**
	 * The light source of the inner glow effect. Can return: 
	 * InnerGlowSource enumerator or NothingEnum enumerator.
	 */
	source: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeInnerGlowSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeInnerGlowSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Bevel and emboss effect settings.
 * @class
 * @extends BevelAndEmbossSetting
 */
export declare class FindChangeBevelAndEmbossSetting extends BevelAndEmbossSetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeBevelAndEmbossSetting (a 
	 * FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting or 
	 * FindChangeContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, the bevel or emboss effect is applied. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	applied: any;
	/**
	 * The style of bevel or emboss. Can return: 
	 * BevelAndEmbossStyle enumerator or NothingEnum enumerator.
	 */
	style: any;
	/**
	 * The edging technique of the bevel or emboss. Can return: 
	 * BevelAndEmbossTechnique enumerator or NothingEnum 
	 * enumerator.
	 */
	technique: any;
	/**
	 * The depth of the bevel or emboss (as a percentage). (Range: 
	 * 0 to 1000). Can return: Real (0 - 1000) or NothingEnum 
	 * enumerator.
	 */
	depth: any;
	/**
	 * The direction of the bevel or emboss. Can return: 
	 * BevelAndEmbossDirection enumerator or NothingEnum 
	 * enumerator.
	 */
	direction: any;
	/**
	 * The size of the bevel or emboss. Can return: Unit (0 - 144 
	 * points) or NothingEnum enumerator.
	 */
	size: any;
	/**
	 * The amount (in pixels) of softening. Can return: Unit (0 - 
	 * 144 points) or NothingEnum enumerator.
	 */
	soften: any;
	/**
	 * The angle of the light source. (Range: -180 to 180). Can 
	 * return: Real (-180 - 180) or NothingEnum enumerator.
	 */
	angle: any;
	/**
	 * The altitude of the light source. (Range: 0 to 90). Can 
	 * return: Real (0 - 100) or NothingEnum enumerator.
	 */
	altitude: any;
	/**
	 * If true, the global light source is used. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	useGlobalLight: any;
	/**
	 * The color applied to the highlight portion of the effect, 
	 * specified as a swatch (color, gradient, tint, or mixed ink), 
	 * a color library color, a hex value, or as an array of color 
	 * values. The color mode dictates the array values: for RGB, 
	 * specify three values, each in the range 0 to 255, in the 
	 * format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127; for HSB, specify three colors in the 
	 * format [H,S,B], with H in the range 0 to 360 and S and B as 
	 * percentages in the range 0 to 100. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	highlightColor: any;
	/**
	 * The blending mode for the highlight portion of the effect. 
	 * Can return: BlendMode enumerator or NothingEnum enumerator.
	 */
	highlightBlendMode: any;
	/**
	 * The opacity of the highlight portion of the effect (as a 
	 * percentage). (Range: 0 to 100). Can return: Real (0 - 100) 
	 * or NothingEnum enumerator.
	 */
	highlightOpacity: any;
	/**
	 * The color applied to the shadow portion of the effect, 
	 * specified as a swatch (color, gradient, tint, or mixed ink), 
	 * a color library color, a hex value, or as an array of color 
	 * values. The color mode dictates the array values: for RGB, 
	 * specify three values, each in the range 0 to 255, in the 
	 * format [R,G,B]; for CMYK, specify four values, each as a 
	 * percentage and each in the range 0 to 100, in the format 
	 * [C,M,Y,K]; for LAB, specify three values in the format 
	 * [L,A,B], with L in the range 0 to 100 and A and B in the 
	 * range -128 to 127; for HSB, specify three colors in the 
	 * format [H,S,B], with H in the range 0 to 360 and S and B as 
	 * percentages in the range 0 to 100. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	shadowColor: any;
	/**
	 * The blending mode for the shadow portion of the effect. Can 
	 * return: BlendMode enumerator or NothingEnum enumerator.
	 */
	shadowBlendMode: any;
	/**
	 * The opacity of the shadow portion of the effect (as a 
	 * percentage). (Range: 0 to 100). Can return: Real (0 - 100) 
	 * or NothingEnum enumerator.
	 */
	shadowOpacity: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeBevelAndEmbossSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeBevelAndEmbossSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Satin effect settings.
 * @class
 * @extends SatinSetting
 */
export declare class FindChangeSatinSetting extends SatinSetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeSatinSetting (a 
	 * FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting or 
	 * FindChangeContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, applies the satin effect. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	applied: any;
	/**
	 * The color applied to the satin effect, specified as a swatch 
	 * (color, gradient, tint, or mixed ink), a color library 
	 * color, a hex value, or as an array of color values. The 
	 * color mode dictates the array values: for RGB, specify three 
	 * values, each in the range 0 to 255, in the format [R,G,B]; 
	 * for CMYK, specify four values, each as a percentage and each 
	 * in the range 0 to 100, in the format [C,M,Y,K]; for LAB, 
	 * specify three values in the format [L,A,B], with L in the 
	 * range 0 to 100 and A and B in the range -128 to 127; for 
	 * HSB, specify three colors in the format [H,S,B], with H in 
	 * the range 0 to 360 and S and B as percentages in the range 0 
	 * to 100. Can return: Swatch or NothingEnum enumerator.
	 */
	effectColor: any;
	/**
	 * The blending mode for the satin effect. Can return: 
	 * BlendMode enumerator or NothingEnum enumerator.
	 */
	blendMode: any;
	/**
	 * The opacity of the satin effect (as a percentage). (Range: 0 
	 * to 100). Can return: Real (0 - 100) or NothingEnum 
	 * enumerator.
	 */
	opacity: any;
	/**
	 * The light angle of the satin effect. (Range: -360 to 360). 
	 * Can return: Real (-180 - 180) or NothingEnum enumerator.
	 */
	angle: any;
	/**
	 * The distance (in pixels) from the FindChangeSatinSetting to 
	 * the satin effect. Can return: Unit (0 - 1000 points) or 
	 * NothingEnum enumerator.
	 */
	distance: any;
	/**
	 * The width (in pixels) of the satin effect. Can return: Unit 
	 * (0 - 144 points) or NothingEnum enumerator.
	 */
	size: any;
	/**
	 * If true, inverts the satin effect. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	invertEffect: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeSatinSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeSatinSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Directional feather effect settings.
 * @class
 * @extends DirectionalFeatherSetting
 */
export declare class FindChangeDirectionalFeatherSetting extends DirectionalFeatherSetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeDirectionalFeatherSetting (a 
	 * FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting or 
	 * FindChangeContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, the directional feather effect is applied. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	applied: any;
	/**
	 * The feather width (in pixels) on the left side of the 
	 * FindChangeDirectionalFeatherSetting. Can return: Unit (0 - 
	 * 1000 points) or NothingEnum enumerator.
	 */
	leftWidth: any;
	/**
	 * The feather width (in pixels) on the right side of the 
	 * FindChangeDirectionalFeatherSetting. (Range: .2 to 250). Can 
	 * return: Unit (0 - 1000 points) or NothingEnum enumerator.
	 */
	rightWidth: any;
	/**
	 * The feather width (in pixels) on the top side of the object 
	 * FindChangeDirectionalFeatherSetting. (Range: .2 to 250). Can 
	 * return: Unit (0 - 1000 points) or NothingEnum enumerator.
	 */
	topWidth: any;
	/**
	 * The feather width (in pixels) on the bottom side of the 
	 * object FindChangeDirectionalFeatherSetting. (Range: .2 to 
	 * 250). Can return: Unit (0 - 1000 points) or NothingEnum 
	 * enumerator.
	 */
	bottomWidth: any;
	/**
	 * The amount to choke the directional feather (as a percentage 
	 * of the feather width). (Range: 0 to 100). Can return: Real 
	 * (0 - 100) or NothingEnum enumerator.
	 */
	chokeAmount: any;
	/**
	 * The angle of the feather. (Range: 180 to -180). Can return: 
	 * Real (-180 - 180) or NothingEnum enumerator.
	 */
	angle: any;
	/**
	 * The shape-following algorithm applied to the feather. Can 
	 * return: FollowShapeModeOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	followShapeMode: any;
	/**
	 * The amount of noise (as a percentage) applied to the feather 
	 * region. (Range: 0 to 100). Can return: Real (0 - 100) or 
	 * NothingEnum enumerator.
	 */
	noise: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeDirectionalFeatherSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeDirectionalFeatherSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Gradient feather effect settings.
 * @class
 * @extends GradientFeatherSetting
 */
export declare class FindChangeGradientFeatherSetting extends GradientFeatherSetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the FindChangeGradientFeatherSetting (a 
	 * FindChangeTransparencySetting, 
	 * FindChangeStrokeTransparencySetting, 
	 * FindChangeFillTransparencySetting or 
	 * FindChangeContentTransparencySetting).
	 */
	readonly parent: any;
	/** A collection of opacity gradient stops. */
	readonly opacityGradientStops: OpacityGradientStops;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, the gradient feather effect is applied. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	applied: any;
	/**
	 * The type of gradient. Can return: GradientType enumerator or 
	 * NothingEnum enumerator.
	 */
	type: any;
	/**
	 * The angle of the gradient feather. Can return: Real (-180 - 
	 * 180) or NothingEnum enumerator.
	 */
	angle: any;
	/**
	 * The length of the axial gradient, or radius of the radial 
	 * gradient. Can return: Unit or NothingEnum enumerator.
	 */
	length: any;
	/**
	 * The center point (for a radial gradient) or starting point 
	 * (for a linear gradient) applied to the fill, as page 
	 * coordinates in the format [x, y]. Can return: Array of 2 
	 * Units or NothingEnum enumerator.
	 */
	gradientStart: any;
	/**
	 * The hilite angle of the radial gradient feather. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	hiliteAngle: any;
	/**
	 * The hilite length of the radial gradient feather. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	hiliteLength: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * FindChangeGradientFeatherSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): FindChangeGradientFeatherSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Text import preferences.
 * @class
 * @extends Preference
 */
export declare class TextImportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TextImportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The computer language character set used to create the text 
	 * file.
	 */
	characterSet: TextImportCharacterSet;
	/** The platform used to create the imported text file. */
	platform: ImportPlatform;
	/** The dictionary to use for the imported text. */
	dictionary: string;
	/**
	 * If true, the import filter removes extra carriage returns at 
	 * the ends of lines.
	 */
	stripReturnsBetweenLines: boolean;
	/**
	 * If true, the import filter removes extra carriage returns 
	 * between paragraphs.
	 */
	stripReturnsBetweenParagraphs: boolean;
	/**
	 * If true, converts the specified number of spaces into a tab. 
	 * For information on specifying the number of spaces, see 
	 * spaces into tabs count.
	 */
	convertSpacesIntoTabs: boolean;
	/**
	 * The number of spaces to convert to a tab. Note: Valid when 
	 * convert spaces into tabs is true.
	 */
	spacesIntoTabsCount: number;
	/**
	 * If true, convert straight quotes and apostrophes in the 
	 * imported text to typographic quotation marks and 
	 * apostrophes.
	 */
	useTypographersQuotes: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextImportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextImportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Text export preferences.
 * @class
 * @extends Preference
 */
export declare class TextExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TextExportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The character set. */
	characterSet: TextExportCharacterSet;
	/** The platform on which the text file will be used. */
	platform: ImportPlatform;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Word RTF import preferences.
 * @class
 * @extends Preference
 */
export declare class WordRTFImportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the WordRTFImportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, maintains character formatting in text whose 
	 * formatting has been removed. Note: Valid when remove 
	 * formatting is true.
	 */
	preserveLocalOverrides: boolean;
	/** If true, imports unused styles. */
	importUnusedStyles: boolean;
	/** The option for handling style name conflicts. */
	resolveCharacterStyleClash: ResolveStyleClash;
	/**
	 * The option for resolving conflicts that arise when paragraph 
	 * styles have matching names.
	 */
	resolveParagraphStyleClash: ResolveStyleClash;
	/** If true, preserves inline graphics. */
	preserveGraphics: boolean;
	/** If true, preserves comments and edits in the imported file. */
	preserveTrackChanges: boolean;
	/** If true, imports footnotes. */
	importFootnotes: boolean;
	/** If true, imports endnotes. */
	importEndnotes: boolean;
	/**
	 * If true, convert straight quotes and apostrophes in the 
	 * imported text to typographic quotation marks and 
	 * apostrophes.
	 */
	useTypographersQuotes: boolean;
	/** The option for handling manual page breaks. */
	convertPageBreaks: ConvertPageBreaks;
	/** If true, imports the index. */
	importIndex: boolean;
	/** If true, imports the table of contents. */
	importTOC: boolean;
	/** If true, removes text and table formatting. */
	removeFormatting: boolean;
	/**
	 * The policy for converting tables whose formatting has been 
	 * removed. Note: Valid when remove formatting is true.
	 */
	convertTablesTo: ConvertTablesOptions;
	/**
	 * If true, bullets and numbers will be converted to embedded 
	 * characters during import. If false, bullets and numbers will 
	 * be rendered by InDesign.
	 */
	convertBulletsAndNumbersToText: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * WordRTFImportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): WordRTFImportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Tagged text export preferences.
 * @class
 * @extends Preference
 */
export declare class TaggedTextExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TaggedTextExportPreference (a 
	 * Application).
	 */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The character set. */
	characterSet: TagTextExportCharacterSet;
	/** The form for tags in the exported text. */
	tagForm: TagTextForm;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TaggedTextExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TaggedTextExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Tagged text import preferences.
 * @class
 * @extends Preference
 */
export declare class TaggedTextImportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TaggedTextImportPreference (a 
	 * Application).
	 */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, convert straight quotes and apostrophes in the 
	 * imported text to typographic quotation marks and 
	 * apostrophes.
	 */
	useTypographersQuotes: boolean;
	/** If true, removes text formatting. */
	removeTextFormatting: boolean;
	/**
	 * The policy for resolving conflicts when style names in the 
	 * imported tagged text file match style names the current 
	 * publication.
	 */
	styleConflict: StyleConflict;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TaggedTextImportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TaggedTextImportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Excel import preferences.
 * @class
 * @extends Preference
 */
export declare class ExcelImportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ExcelImportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, convert straight quotes and apostrophes in the 
	 * imported text to typographic quotation marks and 
	 * apostrophes.
	 */
	useTypographersQuotes: boolean;
	/** If true, preserves inline graphics. */
	preserveGraphics: boolean;
	/**
	 * The stored custom or personal view(s) to import with the 
	 * file.
	 */
	viewName: string;
	/** The worksheet to import. */
	sheetName: string;
	/** The worksheet's index. For information, see sheet name. */
	sheetIndex: number;
	/**
	 * The range of cells to import. Note: Use a colon (:) to 
	 * separate the start and end cell names in the range.
	 */
	rangeName: string;
	/** The cell alignment for the imported document. */
	alignmentStyle: AlignmentStyleOptions;
	/**
	 * The number of decimal places to include. Note: Valid only 
	 * when alignment style is decimal.
	 */
	decimalPlaces: number;
	/** If true, shows hidden cells. */
	showHiddenCells: boolean;
	/**
	 * The import error code. (Key: 0=Success; 1=Empty Sheet; 
	 * 2=Invalid sheet; 3=Invalid range; 4=Invalid View; 5=Misc. 
	 * Error)
	 */
	errorCode: number;
	/** The format for imported spreadsheets. */
	tableFormatting: TableFormattingOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ExcelImportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ExcelImportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Metadata preferences.
 * @class
 * @extends Preference
 */
export declare class MetadataPreference extends Preference {
	/**
	 * The location of the document on the asset management server.
	 */
	readonly serverURL: string;
	/** The most recent modification date of the document. */
	readonly modificationDate: Date;
	/** The creation date of the document. */
	readonly creationDate: Date;
	/** The name of the application used to create the document. */
	readonly creator: string;
	/** The format of the document. */
	readonly format: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the MetadataPreference (a Document). */
	readonly parent: Document;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The author of the document. */
	author: string;
	/** The description of the MetadataPreference. */
	description: string;
	/** The job name. */
	jobName: string;
	/** The copyright status of the document. */
	copyrightStatus: CopyrightStatus;
	/** The text to use as a copyright notice. */
	copyrightNotice: string;
	/**
	 * The URL of the file that contains the linked copyright 
	 * statement.
	 */
	copyrightInfoURL: string;
	/** The list of keywords associated with the document. */
	keywords: string;
	/** The title of the document. */
	documentTitle: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Saves the metadata in the document to an external file.
	 * @param {File} to - The path to the external file.
	 */
	save(to: File): void;
	/**
	 * Replaces the current metadata in the document with metadata 
	 * from the specified file.
	 * @param {File} using - The full path to the file that 
	 * contains the replacement metadata.
	 * @param {boolean} affectAll - If true, treats all properties 
	 * as external. Note: Defaults to false. (Optional)
	 */
	replace(using: File, affectAll?: boolean): void;
	/**
	 * Uses metadata from the specified external file to define any 
	 * undefined metadata properties in the document.
	 * @param {File} _from - The path to the external file that 
	 * contains the metadata.
	 * @param {boolean} affectAll - If true, also replaces existing 
	 * metadata with data from the external file. If false, does 
	 * not replace existing metadata. Note: Defaults to false. 
	 * (Optional)
	 */
	append(_from: File, affectAll?: boolean): void;
	/**
	 * Gets the XMP property value associated with the specified 
	 * path.
	 * @param {string} namespace - The namespace of the property.
	 * @param {string} path - The specified path.
	 */
	getProperty(namespace: string, path: string): string;
	/**
	 * Sets the XMP property associated with the specified path.
	 * @param {string} namespace - The namespace of the property.
	 * @param {string} path - The specified path(s).
	 * @param {string} value - The value to assign to the property. 
	 * Note: To remove the property, pass an empty string.
	 */
	setProperty(namespace: string, path: string, value: string): void;
	/**
	 * Creates an empty container.
	 * @param {string} namespace - The namespace of the container.
	 * @param {string} path - The path to the container.
	 * @param {number} index - The index of the item within the 
	 * container. Specified values must be 1 or greater. To append 
	 * the item to the end of the index and allow the next 
	 * available value to be assigned, use 0. (Optional)
	 * @param {ContainerType} container - The container type. Note: 
	 * Required when the new item is the first item added to the 
	 * container. (Optional)
	 */
	createContainerItem(namespace: string, path: string, index?: number, container?: ContainerType): void;
	/**
	 * Counts the number of items in the container.
	 * @param {string} namespace - The namespace of the container.
	 * @param {string} path - The path to the container.
	 */
	countContainer(namespace: string, path: string): number;
	/**
	 * Generates a string which, if executed, will return the 
	 * MetadataPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MetadataPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Default display performance settings for the application.
 * @class
 * @extends Preference
 */
export declare class DisplayPerformancePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the DisplayPerformancePreference (a 
	 * Application).
	 */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * Object-level default display performance settings. Note: The 
	 * settings do not apply to graphics that are already placed in 
	 * the document.
	 */
	defaultDisplaySettings: ViewDisplaySettings;
	/**
	 * If true, ignores object-level default display performance 
	 * settings and uses the application-level default display 
	 * settings; also prevents setting object-level settings.
	 */
	ignoreLocalSettings: boolean;
	/**
	 * If true, sets application-level preferences to preserve 
	 * object-level display settings.
	 */
	persistLocalSettings: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DisplayPerformancePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DisplayPerformancePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Object-level display settings.
 * @class
 */
export declare class DisplaySetting {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DisplaySetting (a Application). */
	readonly parent: Application;
	/**
	 * The index of the DisplaySetting within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The display method for raster images. */
	raster: TagRaster;
	/** The display method for vector images. */
	vector: TagVector;
	/** The display setting for transparencies. */
	transparency: TagTransparency;
	/** If true, uses anti-aliasing for text and bitmap images. */
	antialiasing: boolean;
	/** The point size below which text is greeked. */
	greekBelow: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DisplaySetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DisplaySetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Display setting properties.
 * @class
 */
export declare class DisplaySettings {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the DisplaySetting. */
	count(): number;
	/**
	 * Returns the DisplaySetting with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DisplaySetting;
	/**
	 * Returns the DisplaySettings within the specified range.
	 * @param {any} _from - The DisplaySetting, index, or name at 
	 * the beginning of the range. Can accept: DisplaySetting, Long 
	 * Integer or String.
	 * @param {any} to - The DisplaySetting, index, or name at the 
	 * end of the range. Can accept: DisplaySetting, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): DisplaySetting;
	/** Returns the first DisplaySetting in the collection. */
	firstItem(): DisplaySetting;
	/** Returns the last DisplaySetting in the collection. */
	lastItem(): DisplaySetting;
	/** Returns the middle DisplaySetting in the collection. */
	middleItem(): DisplaySetting;
	/**
	 * Returns the DisplaySetting with the index previous to the 
	 * specified index.
	 * @param {DisplaySetting} obj - The index of the 
	 * DisplaySetting that follows the desired DisplaySetting.
	 */
	previousItem(obj: DisplaySetting): DisplaySetting;
	/**
	 * Returns the DisplaySetting whose index follows the specified 
	 * DisplaySetting in the collection.
	 * @param {DisplaySetting} obj - The DisplaySetting whose index 
	 * comes before the desired DisplaySetting.
	 */
	nextItem(obj: DisplaySetting): DisplaySetting;
	/** Returns any DisplaySetting in the collection. */
	anyItem(): DisplaySetting;
	/** Returns every DisplaySetting in the collection. */
	everyItem(): DisplaySetting;
	/**
	 * Generates a string which, if executed, will return the 
	 * DisplaySetting.
	 */
	toSource(): string;
	/**
	 * Returns the DisplaySetting with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: DisplaySetting;
}

/**
 * GPU performance settings for the application.
 * @class
 * @extends Preference
 */
export declare class GpuPerformancePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the GpuPerformancePreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, enables GPU performance. */
	enableGpuPerformance: boolean;
	/** If true, enables animated zoom. */
	enableAnimatedZoom: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GpuPerformancePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GpuPerformancePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * XML view preferences
 * @class
 * @extends Preference
 */
export declare class XMLViewPreference extends Preference {
	/**
	 * If true, displays the tag options dialog when tagging any 
	 * item whose parent is not tagged.
	 */
	readonly showTagOptions: boolean;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the XMLViewPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, displays the structure view. */
	showStructure: boolean;
	/** If true, displays XML tags. */
	showTagMarkers: boolean;
	/** If true, displays XML tags in tagged frames. */
	showTaggedFrames: boolean;
	/**
	 * If true, displays attributes as well as elements in the 
	 * structure view. Note: Valid only when show structure is 
	 * true.
	 */
	showAttributes: boolean;
	/**
	 * If true, the structure view displays text snippets of 
	 * element content. Note: Valid only when show structure is 
	 * true.
	 */
	showTextSnippets: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLViewPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLViewPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Preflight options.
 * @class
 * @extends Preference
 */
export declare class PreflightOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PreflightOption (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The pages or documents to preflight, specified either as an 
	 * enumeration or a string. To specify a range, separate page 
	 * numbers in the string with a hyphen (-). To specify separate 
	 * pages, separate page numbers in the string with a comma (,). 
	 * Can return: PreflightScopeOptions enumerator or String.
	 */
	preflightScope: any;
	/** Which layers to preflight. */
	preflightWhichLayers: PreflightLayerOptions;
	/** If true, include objects on pasteboard when preflighting. */
	preflightIncludeObjectsOnPasteboard: boolean;
	/**
	 * If true, include objects that do not print when 
	 * preflighting.
	 */
	preflightIncludeNonprintingObjects: boolean;
	/**
	 * The policy for preflighting applied when opening a document 
	 * or book, whether to use embedded profile or the another 
	 * profile when the preflight is turned on.
	 */
	preflightProfilePolicy: PreflightProfileOptions;
	/**
	 * The working preflight profile. Can return: PreflightProfile 
	 * or String.
	 */
	preflightWorkingProfile: any;
	/** If true, embed working profile when creating new document. */
	preflightEmbedWorkingProfile: boolean;
	/**
	 * If true, preflight is turned off for all documents or for 
	 * this document.
	 */
	preflightOff: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PreflightOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Preflight book options.
 * @class
 * @extends Preference
 */
export declare class PreflightBookOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PreflightBookOption (a Application or 
	 * Book).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The pages or documents to preflight, specified either as an 
	 * enumeration or a string. To specify a range, separate page 
	 * numbers in the string with a hyphen (-). To specify separate 
	 * pages, separate page numbers in the string with a comma (,). 
	 * Can return: PreflightScopeOptions enumerator or String.
	 */
	preflightScope: any;
	/** Which layers to preflight. */
	preflightWhichLayers: PreflightLayerOptions;
	/** If true, include objects on pasteboard when preflighting. */
	preflightIncludeObjectsOnPasteboard: boolean;
	/**
	 * If true, include objects that do not print when 
	 * preflighting.
	 */
	preflightIncludeNonprintingObjects: boolean;
	/**
	 * The policy for preflighting applied when opening a document 
	 * or book, whether to use embedded profile or the another 
	 * profile when the preflight is turned on.
	 */
	preflightProfilePolicy: PreflightProfileOptions;
	/**
	 * The working preflight profile. Can return: PreflightProfile 
	 * or String.
	 */
	preflightWorkingProfile: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightBookOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PreflightBookOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * PNG export preferences.
 * @class
 * @extends Preference
 */
export declare class PNGExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PNGExportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The page range to export. */
	pngExportRange: PNGExportRangeEnum;
	/**
	 * The page(s) to export, specified as a page number or an 
	 * array of page numbers. Note: Valid when PNG export range is 
	 * not all.
	 */
	pageString: string;
	/**
	 * If true, exports each spread as a single PNG file. If false, 
	 * exports facing pages as separate files and appends 
	 * sequential numbers to each file name.
	 */
	exportingSpread: boolean;
	/** The compression quality. */
	pngQuality: PNGQualityEnum;
	/**
	 * The export resolution expressed as a real number instead of 
	 * an integer. (Range: 1.0 to 2400.0)
	 */
	exportResolution: number;
	/** RGB or Gray */
	pngColorSpace: PNGColorSpaceEnum;
	/** If true, use a transparent background for the exported PNG. */
	transparentBackground: boolean;
	/**
	 * If true, use anti-aliasing for text and vectors during 
	 * export.
	 */
	antiAlias: boolean;
	/**
	 * If true, uses the document's bleed settings in the exported 
	 * PNG.
	 */
	useDocumentBleeds: boolean;
	/**
	 * If true, simulates the effects of overprinting spot and 
	 * process colors in the same way they would occur when 
	 * printing.
	 */
	simulateOverprint: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PNGExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PNGExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Button preferences.
 * @class
 * @extends Preference
 */
export declare class ButtonPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ButtonPreference (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the ButtonPreference. */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ButtonPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ButtonPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Watermark preference
 * @class
 * @extends Preference
 */
export declare class WatermarkPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the WatermarkPreference (a Document or 
	 * Application).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Watermark visibility for a document */
	watermarkVisibility: boolean;
	/** Watermark do print for a document */
	watermarkDoPrint: boolean;
	/** Watermark draw in back for a document */
	watermarkDrawInBack: boolean;
	/** Watermark text for a document */
	watermarkText: string;
	/** Watermark font family display name */
	watermarkFontFamily: string;
	/** Watermark font style name */
	watermarkFontStyle: string;
	/** Watermark font point size for a document */
	watermarkFontPointSize: number;
	/**
	 * Watermark font color for a document. Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator.
	 */
	watermarkFontColor: any;
	/** Watermark opacity (as a percentage). (Range: 0 to 100) */
	watermarkOpacity: number;
	/** Watermark rotation for a document */
	watermarkRotation: number;
	/** Watermark horizontal position enum for a document */
	watermarkHorizontalPosition: WatermarkHorizontalPositionEnum;
	/** Watermark horizontal offset for a document */
	watermarkHorizontalOffset: number|string;
	/** Watermark vertical position enum for a document */
	watermarkVerticalPosition: WatermarkVerticalPositionEnum;
	/** Watermark vertical offset for a document */
	watermarkVerticalOffset: number|string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * WatermarkPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): WatermarkPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * General application preferences.
 * @class
 * @extends Preference
 */
export declare class GeneralPreference extends Preference {
	/** The value of the system reported main monitor resolution */
	readonly mainMonitorPpi: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the GeneralPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Tool tip behavior. */
	toolTips: ToolTipOptions;
	/**
	 * Controls whether or not to greek vector graphics when 
	 * dragging at high quality.
	 */
	greekVectorGraphicsOnDrag: boolean;
	/**
	 * Show the conveyor on content collector or content placer 
	 * tool activation
	 */
	showConveyor: boolean;
	/** Enable the creation of links on content place */
	createLinksOnContentPlace: boolean;
	/** Enable the mapping of styles on content place */
	mapStylesOnContentPlace: boolean;
	/**
	 * Enable the use of a custom monitor resolution in pixels per 
	 * inch as opposed to querying the system settings
	 */
	useCustomMonitorResolution: boolean;
	/**
	 * When using a custom monitor resolution, what is the value of 
	 * that resolution in pixels per inch
	 */
	customMonitorPpi: number;
	/**
	 * Specify the Application User Interface brightness preference 
	 * (from 0.0 to 1.0). To use color theme brightness preset 
	 * values, specify 0.0 for Dark, 0.50 for Medium Dark, 0.51 for 
	 * Medium Bright, and 1.0 for Bright. Any value between 0.0 and 
	 * 1.0 will automatically be mapped to closest preset.
	 */
	uiBrightnessPreference: number;
	/**
	 * Specify the Pasteboard color preference (0 or 1). Specify 0 
	 * to set preference to Default White, and 1 to set preference 
	 * to Match with Theme Color.
	 */
	pasteboardColorPreference: number;
	/** If true, show What's New dialog on startup. */
	showWhatsNewOnStartup: boolean;
	/**
	 * If true, on creating new swatch through the new swatch 
	 * dialog, it will be exported to CC Libraries as well
	 */
	autoAddSwatchToCCLibraries: boolean;
	/**
	 * If true, on creating new char style through the new char 
	 * style dialog, it will be exported to CC Libraries as well
	 */
	autoAddCharStyleToCCLibraries: boolean;
	/**
	 * If true, on creating new para style through the new para 
	 * style dialog, it will be exported to CC Libraries as well
	 */
	autoAddParaStyleToCCLibraries: boolean;
	/** If true, enable publish online feature. */
	enablePublishOnline: boolean;
	/**
	 * If true, enhanced file open experience will be shown when 
	 * Ctrl/Cmd + O are pressed.
	 */
	showEnhancedFileOpen: boolean;
	/** If true, show start workspace when no documents are open */
	showStartWorkspace: boolean;
	/**
	 * If true, show stock cart adornment on unlicensed stock 
	 * images
	 */
	showStockPurchaseAdornment: boolean;
	/**
	 * Controls whether or not the content grabber adornment is 
	 * shown.
	 */
	showContentGrabber: boolean;
	/**
	 * Controls whether or not the live corners grabber adornment 
	 * is shown.
	 */
	showLiveCorners: boolean;
	/**
	 * Controls whether or not to show the master page overlay when 
	 * a page is selected using the Page Tool.
	 */
	showMasterPageOverlay: boolean;
	/**
	 * Controls whether page items move when a page is repositioned 
	 * from the UI. The option/alt key temporarily reverses this 
	 * property
	 */
	objectsMoveWithPage: boolean;
	/**
	 * Controls whether or not you can select and interact with a 
	 * locked item. When this is off, only position is locked.
	 */
	preventSelectingLockedItems: boolean;
	/** Controls whether or not multi-touch gestures are enabled. */
	enableMultiTouchGestures: boolean;
	/** Controls the appearance of the Tools panel. */
	toolsPanel: ToolsPanelOptions;
	/** If true, panel drawers close automatically. */
	autoCollapseIconPanels: boolean;
	/**
	 * Controls whether or not to show thumbnails of imported files 
	 * in the Place icon.
	 */
	placeCursorUsesThumbnails: boolean;
	/**
	 * If true, Large Tabs are shown for panels else Smaller tabs 
	 * are shown
	 */
	panelTabHeightPreference: boolean;
	/**
	 * If true, legacy new document dialog will be shown when 
	 * Ctrl/Cmd + N are pressed.
	 */
	showLegacyNewDocumentDialog: boolean;
	/**
	 * If true, vertical reveal strips appear when palette UI is 
	 * hidden.
	 */
	autoShowHiddenPanels: boolean;
	/** If true, application lives in a frame. */
	useApplicationFrame: boolean;
	/** If true, application bar is shown. */
	applicationBarShown: boolean;
	/** If true, documents open as tabs. */
	openDocumentsAsTabs: boolean;
	/** If true, floating windows can be docked by user as tabs. */
	enableFloatingWindowDocking: boolean;
	/**
	 * Number of items to show in the Open Recent menu list. Range: 
	 * 0 to 30
	 */
	openRecentLength: number;
	/**
	 * Controls whether or not to dynamically display 
	 * transformation information as part of the cursor while 
	 * manipulating page items.
	 */
	showTransformationValues: boolean;
	/**
	 * Controls whether or not the anchor object adornment is 
	 * shown.
	 */
	showAnchorObjectAdornment: boolean;
	/**
	 * Controls whether or not to highlight object under selection 
	 * tool.
	 */
	highlightObjectUnderSelectionTool: boolean;
	/**
	 * The pages to create preview images for. Note: Valid when 
	 * include preview is true.
	 */
	previewPages: PreviewPagesOptions;
	/** The location in which to store temporary files. */
	temporaryFolder: File;
	/** The page numbering method. */
	pageNumbering: PageNumberingOptions;
	/**
	 * The threshold at which to trigger font subsetting based on 
	 * the number of glyphs the font contains.
	 */
	completeFontDownloadGlyphLimit: number;
	/** If true, includes a preview in saved documents. */
	includePreview: boolean;
	/**
	 * If true, use incoming spot color definition in case of 
	 * conflict, when placing or pasting content
	 */
	useIncomingSpotUponConflict: boolean;
	/**
	 * If true, objects after ungrouping go back to their original 
	 * layers.
	 */
	ungroupRemembersLayers: boolean;
	/** The preview size. Note: Valid when include preview is true. */
	previewSize: PreviewSizeOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GeneralPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GeneralPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Clipboard preferences.
 * @class
 * @extends Preference
 */
export declare class ClipboardPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ClipboardPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, includes text attributes when pasting text. */
	preferStyledTextWhenPasting: boolean;
	/** If true, pastes PDF if available. */
	preferPDFWhenPasting: boolean;
	/** If true, copies PDF to the clipboard. */
	copyPDFToClipboard: boolean;
	/**
	 * If true, objects cut or copied from different layers retain 
	 * their layer assignment when pasted.
	 */
	pasteRemembersLayers: boolean;
	/**
	 * If true, preserves PDF data on the system clipboard when the 
	 * application exits.
	 */
	preservePdfClipboardAtQuit: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ClipboardPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ClipboardPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Transform preferences.
 * @class
 * @extends Preference
 */
export declare class TransformPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TransformPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, includes the stroke weight when displaying object 
	 * dimensions. If false, measures objects from the path or 
	 * frame.
	 */
	dimensionsIncludeStrokeWeight: boolean;
	/**
	 * If true, transformation values are relative to the parent 
	 * object. If false, the transformation values are absolute 
	 * values.
	 */
	transformationsAreTotals: boolean;
	/**
	 * If true, measures the x and y values of the object relative 
	 * to the containing frame. If false, measures the x and y 
	 * values relative to the rulers.
	 */
	showContentOffset: boolean;
	/**
	 * If true, transparency effects are scaled when objects are 
	 * scaled.
	 */
	adjustEffectsWhenScaling: boolean;
	/** The method used to scale a page item. */
	whenScaling: WhenScalingOptions;
	/** If true, strokes are scaled when objects are scaled. */
	adjustStrokeWeightWhenScaling: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TransformPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TransformPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Note preferences.
 * @class
 * @extends Preference
 */
export declare class NotePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the NotePreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The background color for notes. */
	noteBackgroundColor: NoteBackgrounds;
	/**
	 * The note color, specified either as an array of three 
	 * doubles, each in the range 0 to 255 and representing R, G, 
	 * and B values, or as an InCopy UI color. Can return: Array of 
	 * 3 Reals (0 - 255) or InCopyUIColors enumerator.
	 */
	noteColor: any;
	/**
	 * If true, displays note information and some note content 
	 * when the mouse pointer hovers over a note anchor in layout 
	 * view or a note bookend in galley or story view.
	 */
	showNoteTips: boolean;
	/**
	 * If true, includes inline notes content when using 
	 * Find/Change commands (in Galley and Story views only).
	 */
	findAndReplaceNoteContents: boolean;
	/**
	 * If true, includes inline notes content when using Spell 
	 * Check (in Galley and Story views only).
	 */
	spellCheckNotes: boolean;
	/** The color to use for notes. */
	noteColorChoices: NoteColorChoices;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * NotePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): NotePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Track changes preferences.
 * @class
 * @extends Preference
 */
export declare class TrackChangesPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TrackChangesPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The change bar color, specified as an InCopy UI color. Can 
	 * return: Array of 3 Reals (0 - 255) or InCopyUIColors 
	 * enumerator.
	 */
	changeBarColor: any;
	/** If true, displays added text. */
	showAddedText: boolean;
	/** If true, displays change bars, */
	showChangeBars: boolean;
	/** If true, displays deleted text. */
	showDeletedText: boolean;
	/** If true, displays moved text. */
	showMovedText: boolean;
	/**
	 * If true, includes deleted text when using the Spell Check 
	 * command.
	 */
	spellCheckDeletedText: boolean;
	/**
	 * The color for added text, specified as an InCopy UI color. 
	 * Note: Valid only when added text color choice is change uses 
	 * change pref color. Can return: Array of 3 Reals (0 - 255) or 
	 * InCopyUIColors enumerator.
	 */
	textColorForAddedText: any;
	/**
	 * The background color for added text, specified as an InCopy 
	 * UI color. Note: Valid only when added background color 
	 * choice is change background uses change pref color. Can 
	 * return: Array of 3 Reals (0 - 255) or InCopyUIColors 
	 * enumerator.
	 */
	backgroundColorForAddedText: any;
	/**
	 * The color for deleted text, specified as an InCopy UI color. 
	 * Note: Valid only when deleted text color choice is change 
	 * uses change pref color. Can return: Array of 3 Reals (0 - 
	 * 255) or InCopyUIColors enumerator.
	 */
	textColorForDeletedText: any;
	/**
	 * The background color for deleted text, specified as an 
	 * InCopy UI color. Note: Valid only when deleted background 
	 * color choice is change background uses change pref color. 
	 * Can return: Array of 3 Reals (0 - 255) or InCopyUIColors 
	 * enumerator.
	 */
	backgroundColorForDeletedText: any;
	/**
	 * The color for moved text, specified as an InCopy UI color. 
	 * Note: Valid only when moved text color choice is change uses 
	 * change pref color. Can return: Array of 3 Reals (0 - 255) or 
	 * InCopyUIColors enumerator.
	 */
	textColorForMovedText: any;
	/**
	 * The background color for moved text, specified as an InCopy 
	 * UI color. Note: Valid only when moved background color 
	 * choice is change background uses change pref color. Can 
	 * return: Array of 3 Reals (0 - 255) or InCopyUIColors 
	 * enumerator.
	 */
	backgroundColorForMovedText: any;
	/** The marking that identifies added text. */
	markingForAddedText: ChangeMarkings;
	/** The marking that identifies deleted text. */
	markingForDeletedText: ChangeMarkings;
	/** The marking that identifies moved text. */
	markingForMovedText: ChangeMarkings;
	/** The change bar location. */
	locationForChangeBar: ChangebarLocations;
	/** The color option for added text. */
	addedTextColorChoice: ChangeTextColorChoices;
	/** The background color option for added text. */
	addedBackgroundColorChoice: ChangeBackgroundColorChoices;
	/** The color option for deleted text. */
	deletedTextColorChoice: ChangeTextColorChoices;
	/** The background color option for deleted text. */
	deletedBackgroundColorChoice: ChangeBackgroundColorChoices;
	/** The color option for moved text. */
	movedTextColorChoice: ChangeTextColorChoices;
	/** The background color option for moved text. */
	movedBackgroundColorChoice: ChangeBackgroundColorChoices;
	/**
	 * If true, prevent duplicate user color for tracked changes 
	 * background color.
	 */
	preventDuplicateColor: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TrackChangesPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TrackChangesPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * JPEG export preferences.
 * @class
 * @extends Preference
 */
export declare class JPEGExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the JPEGExportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true, exports each spread as a single JPEG file. If 
	 * false, exports facing pages as separate files and appends 
	 * sequential numbers to each file name.
	 */
	exportingSpread: boolean;
	/** The compression quality. */
	jpegQuality: JPEGOptionsQuality;
	/**
	 * The page(s) to export, specified as a page number or an 
	 * array of page numbers. Note: Valid when JPEG export range is 
	 * not all.
	 */
	pageString: string;
	/** The rendering style. */
	jpegRenderingStyle: JPEGOptionsFormat;
	/** The page range to export. */
	jpegExportRange: ExportRangeOrAllPages;
	/** True to embed the color profile, false otherwise. */
	embedColorProfile: boolean;
	/** One of RGB, CMYK or Gray */
	jpegColorSpace: JpegColorSpaceEnum;
	/**
	 * If true, uses the document's bleed settings in the exported 
	 * JPEG.
	 */
	useDocumentBleeds: boolean;
	/**
	 * If true, use anti-aliasing for text and vectors during 
	 * export.
	 */
	antiAlias: boolean;
	/**
	 * If true, simulates the effects of overprinting spot and 
	 * process colors in the same way they would occur when 
	 * printing.
	 */
	simulateOverprint: boolean;
	/**
	 * The export	resolution expressed as a real number instead of 
	 * an integer. (Range: 1.0 to 2400.0)
	 */
	exportResolution: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * JPEGExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): JPEGExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Data merge preferences.
 * @class
 * @extends Preference
 */
export declare class DataMergePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DataMergePreference (a DataMerge). */
	readonly parent: DataMerge;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The records to merge. */
	recordSelection: RecordSelection;
	/** The offset value of the left margin in the target document. */
	leftMargin: number|string;
	/** The offset value of the top margin in the target document. */
	topMargin: number|string;
	/**
	 * The offset value of the right margin in the target document.
	 */
	rightMargin: number|string;
	/**
	 * The offset value of the bottom margin in the target 
	 * document.
	 */
	bottomMargin: number|string;
	/**
	 * The order in which to arrange multiple records on the page 
	 * in the target document.
	 */
	arrangeBy: ArrangeBy;
	/**
	 * The amount of space between rows of records in the target 
	 * document.
	 */
	rowSpacing: number|string;
	/**
	 * The amount of space between columns of records in the target 
	 * document.
	 */
	columnSpacing: number|string;
	/**
	 * The number of the record to merge. Note: Valid only when 
	 * record selection is one record.
	 */
	recordNumber: number;
	/**
	 * The range of records to merge. Note: Valid only when record 
	 * selection is range.
	 */
	recordRange: string;
	/**
	 * The number of records to place on each page in the document.
	 */
	recordsPerPage: RecordsPerPage;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * If true, lists missing images in the specified output file.
	 * @param {File} outputMissingImagesReportFile - The path to 
	 * the output file.
	 */
	alertMissingImages(outputMissingImagesReportFile: File): boolean;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMergePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DataMergePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Data merge options.
 * @class
 * @extends Preference
 */
export declare class DataMergeOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the DataMergeOption (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Instructions for fitting content in a frame. */
	fittingOption: Fitting;
	/**
	 * If true, centers the image in the frame; preserves the frame 
	 * size as well as content size and proportions. Note: If the 
	 * content is larger than the frame, content around the edges 
	 * is obscured by the bounding box of the frame.
	 */
	centerImage: boolean;
	/**
	 * If true, links images to the target document. If false, 
	 * embeds images in the target document.
	 */
	linkImages: boolean;
	/** If true, removes blank lines caused by empty fields. */
	removeBlankLines: boolean;
	/** If true, creates a new document when records are merged. */
	createNewDocument: boolean;
	/** The maximum number of pages per document. */
	documentSize: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMergeOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DataMergeOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A data merge object.
 * @class
 * @extends Preference
 */
export declare class DataMerge extends Preference {
	/**
	 * The data merge preference properties that define the layout 
	 * and content of the target page.
	 */
	readonly dataMergePreferences: DataMergePreference;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DataMerge (a Document). */
	readonly parent: Document;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of data merge fields. */
	readonly dataMergeFields: DataMergeFields;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Specifies the file to use as the data source.
	 * @param {File} dataSourceFile - The path to the data source 
	 * file.
	 */
	selectDataSource(dataSourceFile: File): void;
	/** Updates the data source file with the most current data. */
	updateDataSource(): void;
	/** Removes the data source. */
	removeDataSource(): void;
	/**
	 * Merges records and produces an optional overset report.
	 * @param {File} outputOversetReportFile - The path to the file 
	 * in which to store the overset report. (Optional)
	 */
	mergeRecords(outputOversetReportFile: File): void;
	/**
	 * Merges records and exports to PDF.
	 * @param {File} to - The path of exported PDF file.
	 * @param {PDFExportPreset} using - The PDF export style to 
	 * use. (Optional)
	 * @param {File} outputOversetReportFile - The path to the file 
	 * in which to store the overset report. (Optional)
	 */
	exportFile(to: File, using: PDFExportPreset, outputOversetReportFile: File): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * DataMerge.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DataMerge;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Chapter numbering preferences.
 * @class
 * @extends Preference
 */
export declare class ChapterNumberPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ChapterNumberPreference (a Document). */
	readonly parent: Document;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Chapter number. */
	chapterNumber: number;
	/** Source for generating the chapter number. */
	chapterNumberSource: ChapterNumberSources;
	/**
	 * Chapter number formatting options. Can return: 
	 * NumberingStyle enumerator or String.
	 */
	chapterNumberFormat: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ChapterNumberPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ChapterNumberPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Object style object effects category settings.
 * @class
 * @extends Preference
 */
export declare class ObjectStyleObjectEffectsCategorySettings extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ObjectStyleObjectEffectsCategorySettings 
	 * (a ObjectStyle).
	 */
	readonly parent: ObjectStyle;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the object style will apply transparency settings. */
	enableTransparency: boolean;
	/** If true, the object style will apply drop shadows. */
	enableDropShadow: boolean;
	/** If true, the object style will apply feathering. */
	enableFeather: boolean;
	/** If true, the object style will apply inner shadows. */
	enableInnerShadow: boolean;
	/** If true, the object style will apply outer glow. */
	enableOuterGlow: boolean;
	/** If true, the object style will apply inner glow. */
	enableInnerGlow: boolean;
	/** If true, the object style will apply bevel emboss. */
	enableBevelEmboss: boolean;
	/** If true, the object style will apply satin. */
	enableSatin: boolean;
	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean;
	/** If true, the object style will apply gradient feathering. */
	enableGradientFeather: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectStyleObjectEffectsCategorySettings.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ObjectStyleObjectEffectsCategorySettings;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Object style stroke effects category settings.
 * @class
 * @extends Preference
 */
export declare class ObjectStyleStrokeEffectsCategorySettings extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ObjectStyleStrokeEffectsCategorySettings 
	 * (a ObjectStyle).
	 */
	readonly parent: ObjectStyle;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the object style will apply transparency settings. */
	enableTransparency: boolean;
	/** If true, the object style will apply drop shadows. */
	enableDropShadow: boolean;
	/** If true, the object style will apply feathering. */
	enableFeather: boolean;
	/** If true, the object style will apply inner shadows. */
	enableInnerShadow: boolean;
	/** If true, the object style will apply outer glow. */
	enableOuterGlow: boolean;
	/** If true, the object style will apply inner glow. */
	enableInnerGlow: boolean;
	/** If true, the object style will apply bevel emboss. */
	enableBevelEmboss: boolean;
	/** If true, the object style will apply satin. */
	enableSatin: boolean;
	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean;
	/** If true, the object style will apply gradient feathering. */
	enableGradientFeather: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectStyleStrokeEffectsCategorySettings.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ObjectStyleStrokeEffectsCategorySettings;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Object style fill effects category settings.
 * @class
 * @extends Preference
 */
export declare class ObjectStyleFillEffectsCategorySettings extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ObjectStyleFillEffectsCategorySettings (a 
	 * ObjectStyle).
	 */
	readonly parent: ObjectStyle;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the object style will apply transparency settings. */
	enableTransparency: boolean;
	/** If true, the object style will apply drop shadows. */
	enableDropShadow: boolean;
	/** If true, the object style will apply feathering. */
	enableFeather: boolean;
	/** If true, the object style will apply inner shadows. */
	enableInnerShadow: boolean;
	/** If true, the object style will apply outer glow. */
	enableOuterGlow: boolean;
	/** If true, the object style will apply inner glow. */
	enableInnerGlow: boolean;
	/** If true, the object style will apply bevel emboss. */
	enableBevelEmboss: boolean;
	/** If true, the object style will apply satin. */
	enableSatin: boolean;
	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean;
	/** If true, the object style will apply gradient feathering. */
	enableGradientFeather: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectStyleFillEffectsCategorySettings.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ObjectStyleFillEffectsCategorySettings;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Object style content effects category settings.
 * @class
 * @extends Preference
 */
export declare class ObjectStyleContentEffectsCategorySettings extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ObjectStyleContentEffectsCategorySettings 
	 * (a ObjectStyle).
	 */
	readonly parent: ObjectStyle;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the object style will apply transparency settings. */
	enableTransparency: boolean;
	/** If true, the object style will apply drop shadows. */
	enableDropShadow: boolean;
	/** If true, the object style will apply feathering. */
	enableFeather: boolean;
	/** If true, the object style will apply inner shadows. */
	enableInnerShadow: boolean;
	/** If true, the object style will apply outer glow. */
	enableOuterGlow: boolean;
	/** If true, the object style will apply inner glow. */
	enableInnerGlow: boolean;
	/** If true, the object style will apply bevel emboss. */
	enableBevelEmboss: boolean;
	/** If true, the object style will apply satin. */
	enableSatin: boolean;
	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean;
	/** If true, the object style will apply gradient feathering. */
	enableGradientFeather: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectStyleContentEffectsCategorySettings.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ObjectStyleContentEffectsCategorySettings;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Grabber preferences.
 * @class
 * @extends Preference
 */
export declare class GrabberPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the GrabberPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The display performance quality setting to use when 
	 * scrolling.
	 */
	grabberPanning: PanningTypes;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * GrabberPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): GrabberPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Type Contextual UI Preference.
 * @class
 * @extends Preference
 */
export declare class TypeContextualUiPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TypeContextualUiPreference (a 
	 * Application).
	 */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Preference for showing contextual ui for alternates. */
	showAlternatesUi: boolean;
	/** Preference for showing contextual ui for fractions. */
	showFractionsUi: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TypeContextualUiPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TypeContextualUiPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Preferences for alignment and distribution.
 * @class
 * @extends Preference
 */
export declare class AlignDistributePreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the AlignDistributePreference (a Application).
	 */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The bounds to use as a basis for aligning or distributing 
	 * page items.
	 */
	alignDistributeBounds: AlignDistributeBounds;
	/**
	 * If true, distribute space between page items and ignore the 
	 * bounds setting.
	 */
	distributeAbsolute: boolean;
	/** The distance to use when distributing page items. */
	distributeAbsoluteMeasurement: number|string;
	/**
	 * If true, distribute space between page items and ignore the 
	 * bounds setting.
	 */
	distributeSpaceAbsolute: boolean;
	/** The distance to use when distributing page items. */
	distributeSpaceAbsoluteMeasurement: number|string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * AlignDistributePreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): AlignDistributePreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * SWF export settings for the application object.
 * @class
 * @extends Preference
 */
export declare class SWFExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the SWFExportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Flatten transparency when exporting. */
	flattenTransparency: boolean;
	/** The dynamic media handling options. */
	dynamicMediaHandling: DynamicMediaHandlingOptions;
	/** The name of the page transition to use for all pages. */
	pageTransitionOverride: PageTransitionOverrideOptions;
	/** SWF background setting */
	swfBackground: SWFBackgroundOptions;
	/** The frame rate in frames per second. */
	frameRate: number;
	/** The fitting method to use. */
	fitMethod: FitMethodSettings;
	/** The options for fitting to predefined dimension. */
	fitOption: FitDimension;
	/** The size fits to given scale percentage. */
	fitScale: number;
	/** The size fits to given width and height. */
	fitWidthAndHeight: number;
	/**
	 * The pages to print, specified either as an enumeration or a 
	 * string. To specify a range, separate page numbers in the 
	 * string with a hyphen (-). To specify separate pages, 
	 * separate page numbers in the string with a comma (,). Can 
	 * return: PageRange enumerator or String.
	 */
	pageRange: any;
	/**
	 * If true, each spread in the exported document is combined 
	 * into a single page that has spread's original width.
	 */
	dynamicDocumentExportReaderSpreads: boolean;
	/**
	 * If true, all the pages in the exported document will be 
	 * rasterized.
	 */
	rasterizePages: boolean;
	/** Flag indicates whether to generate HTML. */
	generateHTML: boolean;
	/** The text export policy. */
	textExportPolicy: DynamicDocumentsTextExportPolicy;
	/**
	 * Flag indicates whether to include interactive page curl when 
	 * export to SWF.
	 */
	includeInteractivePageCurl: boolean;
	/** The SWF raster compression options. */
	rasterCompression: RasterCompressionOptions;
	/** The JPEG quality options. */
	jpegQualityOptions: DynamicDocumentsJPEGQualityOptions;
	/** The SWF curve quality. */
	curveQuality: SWFCurveQualityValue;
	/** The raster resolution. */
	rasterResolution: number;
	/** The resampling type. */
	resamplingType: Sampling;
	/** The resampling threshold. */
	resamplingThreshold: number;
	/**
	 * Flag indicates whether to allow to use network access when 
	 * export to SWF.
	 */
	useNetworkAccess: boolean;
	/** Flag indicates to whether to view the SWF after exporting. */
	viewSWFAfterExporting: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * SWFExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): SWFExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * XFL export preferences.
 * @class
 * @extends Preference
 */
export declare class XFLExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XFLExportPreference (a Application). */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The dynamic media handling options. */
	dynamicMediaHandling: DynamicMediaHandlingOptions;
	/**
	 * If true, discretionary hyphenation points are inserted when 
	 * TLF text is used.
	 */
	insertHyphens: boolean;
	/** The fitting method to use. */
	fitMethod: FitMethodSettings;
	/** The options for fitting to predefined dimension. */
	fitOption: FitDimension;
	/** The size fits to given scale percentage. */
	fitScale: number;
	/** The size fits to given width and height. */
	fitWidthAndHeight: number;
	/**
	 * The pages to print, specified either as an enumeration or a 
	 * string. To specify a range, separate page numbers in the 
	 * string with a hyphen (-). To specify separate pages, 
	 * separate page numbers in the string with a comma (,). Can 
	 * return: PageRange enumerator or String.
	 */
	pageRange: any;
	/**
	 * If true, each spread in the exported document is combined 
	 * into a single page that has spread's original width.
	 */
	dynamicDocumentExportReaderSpreads: boolean;
	/**
	 * If true, all the pages in the exported document will be 
	 * rasterized.
	 */
	rasterizePages: boolean;
	/** Flatten transparency when exporting. */
	flattenTransparency: boolean;
	/** The text export policy. */
	textExportPolicy: DynamicDocumentsTextExportPolicy;
	/** The raster format options. */
	rasterFormat: XFLRasterizeFormatOptions;
	/** The JPEG quality options. */
	jpegQualityOptions: DynamicDocumentsJPEGQualityOptions;
	/** The raster resolution. */
	rasterResolution: number;
	/** The resampling type. */
	resamplingType: Sampling;
	/** The resampling threshold. */
	resamplingThreshold: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * XFLExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XFLExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Animation settings.
 * @class
 * @extends Preference
 */
export declare class AnimationSetting extends Preference {
	/** Determines if this animated object has custom settings. */
	readonly hasCustomSettings: boolean;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the AnimationSetting (a PageItem, HtmlItem, 
	 * FormField, SignatureField, TextBox, RadioButton, ListBox, 
	 * ComboBox, CheckBox, MultiStateObject, Button, MediaItem, 
	 * Sound, Movie, EPSText, SplineItem, Polygon, GraphicLine, 
	 * Rectangle, Oval, Graphic, ImportedPage, PICT, WMF, PDF, EPS, 
	 * Image, Group or TextFrame).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The base animation preset applied. Can return: MotionPreset, 
	 * String or NothingEnum enumerator.
	 */
	preset: any;
	/**
	 * The tranform offset percentage from the target object 
	 * bounding box's left-top corner.
	 */
	transformOffsets: number;
	/** The duration in second for this animation. */
	duration: number;
	/**
	 * The list of motion path points for this animation. Can 
	 * return: Ordered array containing pathPointArray:Array of 
	 * Ordered array containing anchor:Array of 2 Reals, 
	 * leftDirection:Array of 2 Reals, rightDirection:Array of 2 
	 * Reals, pathOpen:Boolean.
	 */
	motionPathPoints: any;
	/**
	 * The list of motion path points and key frames for this 
	 * animation. Can return: Ordered array containing 
	 * keyFrame:Long Integer, pathPoint:Ordered array containing 
	 * anchor:Array of 2 Reals, leftDirection:Array of 2 Reals, 
	 * rightDirection:Array of 2 Reals.
	 */
	motionPath: any;
	/**
	 * The list of opacity key frames for this animation. Can 
	 * return: Ordered array containing keyFrame:Long Integer, 
	 * value:Real.
	 */
	opacityArray: any;
	/**
	 * The list of rotation key frames for this animation. Can 
	 * return: Ordered array containing keyFrame:Long Integer, 
	 * value:Real.
	 */
	rotationArray: any;
	/**
	 * The list of scale x key frames for this animation. Can 
	 * return: Ordered array containing keyFrame:Long Integer, 
	 * value:Real.
	 */
	scaleXArray: any;
	/**
	 * The list of scale y key frames for this animation. Can 
	 * return: Ordered array containing keyFrame:Long Integer, 
	 * value:Real.
	 */
	scaleYArray: any;
	/** The animation design option. */
	designOption: DesignOptions;
	/** The ease type. */
	easeType: AnimationEaseOptions;
	/** The number of times this animation plays. */
	plays: number;
	/** Set to true if animation play loops. */
	playsLoop: boolean;
	/**
	 * Determines if this object is initially hidden when displayed 
	 * in an exported SWF file.
	 */
	initiallyHidden: boolean;
	/**
	 * Determines if this object is hidden after its animation is 
	 * played in an exported SWF file.
	 */
	hiddenAfter: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Save a copy of this motion preset to a InDesign motion 
	 * preset file.
	 * @param {File} to - The Flash motion preset file to export 
	 * to.
	 */
	saveACopy(to: File): void;
	/**
	 * Save this motion preset as custom preset.
	 * @param {string} name - The name for the new motion preset.
	 */
	save(name: string): MotionPreset;
	/**
	 * Generates a string which, if executed, will return the 
	 * AnimationSetting.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): AnimationSetting;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Conditional text preferences.
 * @class
 * @extends Preference
 */
export declare class ConditionalTextPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ConditionalTextPreference (a Application 
	 * or Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Shows or hides condition indicators. */
	showConditionIndicators: ConditionIndicatorMode;
	/** The currently active condition set. */
	activeConditionSet: ConditionSet;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ConditionalTextPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ConditionalTextPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * EPub export preferences.
 * @class
 * @extends Preference
 */
export declare class EPubExportPreference extends Preference {
	/** The PNG compression level. */
	readonly level: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the EPubExportPreference (a Book or Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The epub title. */
	epubTitle: string;
	/** The epub creator. */
	epubCreator: string;
	/** The epub subject. */
	epubSubject: string;
	/** The epub description. */
	epubDescription: string;
	/** The epub date. */
	epubDate: string;
	/** The epub rights. */
	epubRights: string;
	/**
	 * If true, InDesign will use existing image for graphic 
	 * objects on export.
	 */
	useExistingImageOnExport: boolean;
	/** The epub publisher. */
	epubPublisher: string;
	/** The epub unique identifier, like ISBN. */
	id: string;
	/** The export order. */
	exportOrder: ExportOrder;
	/** The epub cover option. */
	epubCover: EpubCover;
	/** The epub cover image file path. */
	coverImageFile: string;
	/** The bullet export option. */
	bulletExportOption: BulletListExportOption;
	/** The numbered list export option. */
	numberedListExportOption: NumberedListExportOption;
	/** Left margin of the epub. */
	leftMargin: number;
	/** Right margin of the epub. */
	rightMargin: number;
	/** Top margin of the epub. */
	topMargin: number;
	/** Bottom margin of the epub. */
	bottomMargin: number;
	/** The export resolution */
	imageExportResolution: ImageResolution;
	/** Allows user to select the image size option for conversion */
	customImageSizeOption: ImageSizeOption;
	/** If true, format image based on layout appearence. */
	preserveLayoutAppearence: boolean;
	/** Alignment applied to images */
	imageAlignment: ImageAlignmentType;
	/** Space Before applied to images */
	imageSpaceBefore: number;
	/** Space After applied to images */
	imageSpaceAfter: number;
	/** If true, image page break settings will be used in objects */
	useImagePageBreak: boolean;
	/** Image page break settings to be used with objects */
	imagePageBreak: ImagePageBreakType;
	/**
	 * The file format to use for converted images. Note: Valid 
	 * only when copy optimized images and/or copy formatted images 
	 * is true.
	 */
	imageConversion: ImageConversion;
	/**
	 * The color palette for GIF conversion. Note: Not valid when 
	 * image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;
	/**
	 * If true, generates interlaced GIFs. Note: Not valid  when 
	 * image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;
	/**
	 * The quality of converted JPEG images. Note: Not valid when 
	 * image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;
	/**
	 * The formatting method for converted JPEG images. Note: Not 
	 * valid  when image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;
	/** ignore object level image conversion settings. */
	ignoreObjectConversionSettings: boolean;
	/** The name of TOC style to generate epub TOC. */
	tocStyleName: string;
	/**
	 * If  true, break InDesign document into smaller piece when 
	 * generating epub.
	 */
	breakDocument: boolean;
	/** The name of paragraph style to break InDesign document. */
	paragraphStyleName: string;
	/** If  true, strip soft return. */
	stripSoftReturn: boolean;
	/** If true, output local style override. */
	preserveLocalOverride: boolean;
	/** If true, embed font in epub. */
	embedFont: boolean;
	/** The file path of external cascading style sheets. */
	externalStyleSheets: string;
	/** The file path of external javascripts. */
	javascripts: string;
	/** The version of EPUB. */
	version: EpubVersion;
	/** If true, InDesign will generate cascade style sheet. */
	generateCascadeStyleSheet: boolean;
	/** The placement of footnote for EPub export */
	footnotePlacement: EPubFootnotePlacement;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * EPubExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): EPubExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * HTML export preferences.
 * @class
 * @extends Preference
 */
export declare class HTMLExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the HTMLExportPreference (a Document). */
	readonly parent: Document;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * If true and have selection, export selected content to HTML.
	 */
	exportSelection: boolean;
	/** The export order. */
	exportOrder: ExportOrder;
	/** The bullet export option. */
	bulletExportOption: BulletListExportOption;
	/** The numbered list export option. */
	numberedListExportOption: NumberedListExportOption;
	/** If true, open docuemnt in viewer after export. */
	viewDocumentAfterExport: boolean;
	/** The export order. */
	imageExportOption: ImageExportOption;
	/** The export resolution */
	imageExportResolution: ImageResolution;
	/** Allows user to select the image size option for conversion */
	customImageSizeOption: ImageSizeOption;
	/** If true, format image based on layout appearence. */
	preserveLayoutAppearence: boolean;
	/** Alignment applied to images */
	imageAlignment: ImageAlignmentType;
	/** Space Before applied to images */
	imageSpaceBefore: number;
	/** Space After applied to images */
	imageSpaceAfter: number;
	/**
	 * The file format to use for converted images. Note: Valid 
	 * only when copy optimized images and/or copy formatted images 
	 * is true.
	 */
	imageConversion: ImageConversion;
	/**
	 * The color palette for GIF conversion. Note: Not valid when 
	 * image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;
	/**
	 * If true, generates interlaced GIFs. Note: Not valid  when 
	 * image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;
	/**
	 * The quality of converted JPEG images. Note: Not valid when 
	 * image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;
	/**
	 * The formatting method for converted JPEG images. Note: Not 
	 * valid  when image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;
	/** The PNG compression level. */
	level: number;
	/** ignore object level image conversion settings. */
	ignoreObjectConversionSettings: boolean;
	/** The server path for image . */
	serverPath: string;
	/** The image extension on server. */
	imageExtension: string;
	/** If true, output local style override. */
	preserveLocalOverride: boolean;
	/** The file path of external cascading style sheets. */
	externalStyleSheets: string;
	/** The file path of external javascripts. */
	javascripts: string;
	/** If true, InDesign will generate cascade style sheet. */
	generateCascadeStyleSheet: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * HTMLExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HTMLExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * EPub fixed layout export preferences.
 * @class
 * @extends Preference
 */
export declare class EPubFixedLayoutExportPreference extends Preference {
	/** The PNG compression level. */
	readonly level: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the EPubFixedLayoutExportPreference (a Book or 
	 * Document).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The epub publisher. */
	epubPublisher: string;
	/** The epub unique identifier, like ISBN. */
	id: string;
	/** The epub cover option. */
	epubCover: EpubCover;
	/** The epub cover image file path. */
	coverImageFile: string;
	/** The export resolution */
	imageExportResolution: ImageResolution;
	/**
	 * The file format to use for converted images. Note: Valid 
	 * only when copy optimized images and/or copy formatted images 
	 * is true.
	 */
	imageConversion: ImageConversion;
	/**
	 * The color palette for GIF conversion. Note: Not valid when 
	 * image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;
	/**
	 * If true, generates interlaced GIFs. Note: Not valid  when 
	 * image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean;
	/**
	 * The quality of converted JPEG images. Note: Not valid when 
	 * image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;
	/**
	 * The formatting method for converted JPEG images. Note: Not 
	 * valid  when image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat;
	/** The name of TOC style to generate epub TOC. */
	tocStyleName: string;
	/** The file path of external cascading style sheets. */
	externalStyleSheets: string;
	/** The file path of external javascripts. */
	javascripts: string;
	/** The epub title. */
	epubTitle: string;
	/** The epub creator. */
	epubCreator: string;
	/** The epub subject. */
	epubSubject: string;
	/** The epub description. */
	epubDescription: string;
	/** The epub date. */
	epubDate: string;
	/** The epub rights. */
	epubRights: string;
	/** The epub page range. */
	epubPageRange: string;
	/** The epub page range format. */
	epubPageRangeFormat: PageRangeFormat;
	/** The control for spreads in fixed layout EPub. */
	epubSpreadControlOptions: EpubFixedLayoutSpreadControl;
	/** The epub navigation style. */
	epubNavigationStyles: EpubNavigationStyle;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * EPubFixedLayoutExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): EPubFixedLayoutExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * EPub export preview app preferences.
 * @class
 * @extends Preference
 */
export declare class EPubExportPreviewAppPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the EPubExportPreviewAppPreference (a 
	 * Application).
	 */
	readonly parent: Application;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, open docuemnt in viewer after export. */
	viewDocumentAfterExport: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Add a new preview application preference
	 * @param {string} applicationPath - The full path of the 
	 * application to be added.
	 * @param {boolean} selectedForReflowableEpub - Check if the 
	 * app is selected in Reflowable ePub export.
	 * @param {boolean} selectedForFixedLayoutEpub - Check if the 
	 * app is selected in Fixed Layout ePub export.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new EPubExportPreviewAppPreference 
	 * (Optional)
	 */
	addApplication(applicationPath: string, selectedForReflowableEpub: boolean, selectedForFixedLayoutEpub: boolean, withProperties: Object): void;
	/**
	 * Remove an application at specified index.
	 * @param {number} indexOfApp - The index of the application to 
	 * be removed.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new EPubExportPreviewAppPreference 
	 * (Optional)
	 */
	removeApplication(indexOfApp: number, withProperties: Object): void;
	/**
	 * Get the application at index.
	 * @param {boolean} indexOfApp - The index of the application 
	 * to get information for.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new EPubExportPreviewAppPreference 
	 * (Optional)
	 */
	getApplicationAtIndex(indexOfApp: boolean, withProperties: Object): any;
	/** Number of applications added for ePub Preview. */
	getApplicationCount(): number;
	/**
	 * Generates a string which, if executed, will return the 
	 * EPubExportPreviewAppPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): EPubExportPreviewAppPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * HTML FXL export preferences.
 * @class
 * @extends Preference
 */
export declare class HTMLFXLExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the HTMLFXLExportPreference (a Document). */
	readonly parent: Document;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The epub page range. */
	epubPageRange: string;
	/** The epub page range format. */
	epubPageRangeFormat: PageRangeFormat;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * HTMLFXLExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HTMLFXLExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Publish export preferences.
 * @class
 * @extends Preference
 */
export declare class PublishExportPreference extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PublishExportPreference (a Document). */
	readonly parent: Document;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The publish cover option. */
	publishCover: PublishCoverEnum;
	/** The epub cover image file path. */
	coverImageFile: string;
	/** The publish page range. */
	publishPageRange: string;
	/** The publish page range format. */
	publishPageRangeFormat: PageRangeFormat;
	/**
	 * The file format to use for converted images. Note: Valid 
	 * only when copy optimized images and/or copy formatted images 
	 * is true.
	 */
	imageConversion: ImageConversion;
	/** The export resolution */
	imageExportResolution: ImageResolution;
	/** The publish description. */
	publishDescription: string;
	/** The file name. */
	publishFileName: string;
	/** the publish format. */
	publishFormat: PublishFormatEnum;
	/** The cover page. */
	coverPage: string;
	/**
	 * The color palette for GIF conversion. Note: Not valid when 
	 * image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette;
	/**
	 * The quality of converted JPEG images. Note: Not valid when 
	 * image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality;
	/** If PDF should be uploaded while publishing. */
	publishPdf: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PublishExportPreference.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PublishExportPreference;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * The link options for a linked story.
 * @class
 * @extends Preference
 */
export declare class LinkedStoryOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the LinkedStoryOption (a Application, 
	 * Document, Story or XmlStory).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the linked story will be updated while saving. */
	updateWhileSaving: boolean;
	/**
	 * If true, a warning will be shown if the update link 
	 * operation will override local edits.
	 */
	warnOnUpdateOfEditedStory: boolean;
	/**
	 * If true, forced line breaks will be removed during story 
	 * creation or update.
	 */
	removeForcedLineBreaks: boolean;
	/**
	 * If true, style mappings will be applied during linked story 
	 * creation or update.
	 */
	applyStyleMappings: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * LinkedStoryOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): LinkedStoryOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A para style mapping.
 * @class
 */
export declare class ParaStyleMapping {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ParaStyleMapping (a Application, Document, 
	 * Story or XmlStory).
	 */
	readonly parent: any;
	/**
	 * The index of the ParaStyleMapping within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The source style name property. */
	sourceStyleName: string;
	/** The destination style name property. */
	destinationStyleName: string;
	/** The type of the mapping rule. */
	mappingRuleType: MapType;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** deletes a style mapping. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * ParaStyleMapping.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ParaStyleMapping;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of para style mappings.
 * @class
 */
export declare class ParaStyleMappings {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a style mapping.
	 * @param {string} sourceStyleName - The source style name.
	 * @param {string} destinationStyleName - The destination style 
	 * name.
	 * @param {MapType} mappingRuleType - The mapping type
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ParaStyleMapping (Optional)
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: Object): ParaStyleMapping;
	/** Displays the number of elements in the ParaStyleMapping. */
	count(): number;
	/**
	 * Returns the ParaStyleMapping with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ParaStyleMapping;
	/**
	 * Returns the ParaStyleMappings within the specified range.
	 * @param {any} _from - The ParaStyleMapping, index, or name at 
	 * the beginning of the range. Can accept: ParaStyleMapping, 
	 * Long Integer or String.
	 * @param {any} to - The ParaStyleMapping, index, or name at 
	 * the end of the range. Can accept: ParaStyleMapping, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): ParaStyleMapping;
	/** Returns the first ParaStyleMapping in the collection. */
	firstItem(): ParaStyleMapping;
	/** Returns the last ParaStyleMapping in the collection. */
	lastItem(): ParaStyleMapping;
	/** Returns the middle ParaStyleMapping in the collection. */
	middleItem(): ParaStyleMapping;
	/**
	 * Returns the ParaStyleMapping with the index previous to the 
	 * specified index.
	 * @param {ParaStyleMapping} obj - The index of the 
	 * ParaStyleMapping that follows the desired ParaStyleMapping.
	 */
	previousItem(obj: ParaStyleMapping): ParaStyleMapping;
	/**
	 * Returns the ParaStyleMapping whose index follows the 
	 * specified ParaStyleMapping in the collection.
	 * @param {ParaStyleMapping} obj - The ParaStyleMapping whose 
	 * index comes before the desired ParaStyleMapping.
	 */
	nextItem(obj: ParaStyleMapping): ParaStyleMapping;
	/** Returns any ParaStyleMapping in the collection. */
	anyItem(): ParaStyleMapping;
	/** Returns every ParaStyleMapping in the collection. */
	everyItem(): ParaStyleMapping;
	/**
	 * Generates a string which, if executed, will return the 
	 * ParaStyleMapping.
	 */
	toSource(): string;
	/**
	 * Returns the ParaStyleMapping with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ParaStyleMapping;
}

/**
 * A cell style mapping.
 * @class
 */
export declare class CellStyleMapping {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CellStyleMapping (a Application, Document, 
	 * Story or XmlStory).
	 */
	readonly parent: any;
	/**
	 * The index of the CellStyleMapping within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The source style name property. */
	sourceStyleName: string;
	/** The destination style name property. */
	destinationStyleName: string;
	/** The type of the mapping rule. */
	mappingRuleType: MapType;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** deletes a style mapping. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * CellStyleMapping.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CellStyleMapping;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of cell style mappings.
 * @class
 */
export declare class CellStyleMappings {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a style mapping.
	 * @param {string} sourceStyleName - The source style name.
	 * @param {string} destinationStyleName - The destination style 
	 * name.
	 * @param {MapType} mappingRuleType - The mapping type
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CellStyleMapping (Optional)
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: Object): CellStyleMapping;
	/** Displays the number of elements in the CellStyleMapping. */
	count(): number;
	/**
	 * Returns the CellStyleMapping with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CellStyleMapping;
	/**
	 * Returns the CellStyleMappings within the specified range.
	 * @param {any} _from - The CellStyleMapping, index, or name at 
	 * the beginning of the range. Can accept: CellStyleMapping, 
	 * Long Integer or String.
	 * @param {any} to - The CellStyleMapping, index, or name at 
	 * the end of the range. Can accept: CellStyleMapping, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): CellStyleMapping;
	/** Returns the first CellStyleMapping in the collection. */
	firstItem(): CellStyleMapping;
	/** Returns the last CellStyleMapping in the collection. */
	lastItem(): CellStyleMapping;
	/** Returns the middle CellStyleMapping in the collection. */
	middleItem(): CellStyleMapping;
	/**
	 * Returns the CellStyleMapping with the index previous to the 
	 * specified index.
	 * @param {CellStyleMapping} obj - The index of the 
	 * CellStyleMapping that follows the desired CellStyleMapping.
	 */
	previousItem(obj: CellStyleMapping): CellStyleMapping;
	/**
	 * Returns the CellStyleMapping whose index follows the 
	 * specified CellStyleMapping in the collection.
	 * @param {CellStyleMapping} obj - The CellStyleMapping whose 
	 * index comes before the desired CellStyleMapping.
	 */
	nextItem(obj: CellStyleMapping): CellStyleMapping;
	/** Returns any CellStyleMapping in the collection. */
	anyItem(): CellStyleMapping;
	/** Returns every CellStyleMapping in the collection. */
	everyItem(): CellStyleMapping;
	/**
	 * Generates a string which, if executed, will return the 
	 * CellStyleMapping.
	 */
	toSource(): string;
	/**
	 * Returns the CellStyleMapping with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CellStyleMapping;
}

/**
 * A char style mapping.
 * @class
 */
export declare class CharStyleMapping {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CharStyleMapping (a Application, Document, 
	 * Story or XmlStory).
	 */
	readonly parent: any;
	/**
	 * The index of the CharStyleMapping within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The source style name property. */
	sourceStyleName: string;
	/** The destination style name property. */
	destinationStyleName: string;
	/** The type of the mapping rule. */
	mappingRuleType: MapType;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** deletes a style mapping. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * CharStyleMapping.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CharStyleMapping;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of char style mappings.
 * @class
 */
export declare class CharStyleMappings {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a style mapping.
	 * @param {string} sourceStyleName - The source style name.
	 * @param {string} destinationStyleName - The destination style 
	 * name.
	 * @param {MapType} mappingRuleType - The mapping type
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CharStyleMapping (Optional)
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: Object): CharStyleMapping;
	/** Displays the number of elements in the CharStyleMapping. */
	count(): number;
	/**
	 * Returns the CharStyleMapping with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CharStyleMapping;
	/**
	 * Returns the CharStyleMappings within the specified range.
	 * @param {any} _from - The CharStyleMapping, index, or name at 
	 * the beginning of the range. Can accept: CharStyleMapping, 
	 * Long Integer or String.
	 * @param {any} to - The CharStyleMapping, index, or name at 
	 * the end of the range. Can accept: CharStyleMapping, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): CharStyleMapping;
	/** Returns the first CharStyleMapping in the collection. */
	firstItem(): CharStyleMapping;
	/** Returns the last CharStyleMapping in the collection. */
	lastItem(): CharStyleMapping;
	/** Returns the middle CharStyleMapping in the collection. */
	middleItem(): CharStyleMapping;
	/**
	 * Returns the CharStyleMapping with the index previous to the 
	 * specified index.
	 * @param {CharStyleMapping} obj - The index of the 
	 * CharStyleMapping that follows the desired CharStyleMapping.
	 */
	previousItem(obj: CharStyleMapping): CharStyleMapping;
	/**
	 * Returns the CharStyleMapping whose index follows the 
	 * specified CharStyleMapping in the collection.
	 * @param {CharStyleMapping} obj - The CharStyleMapping whose 
	 * index comes before the desired CharStyleMapping.
	 */
	nextItem(obj: CharStyleMapping): CharStyleMapping;
	/** Returns any CharStyleMapping in the collection. */
	anyItem(): CharStyleMapping;
	/** Returns every CharStyleMapping in the collection. */
	everyItem(): CharStyleMapping;
	/**
	 * Generates a string which, if executed, will return the 
	 * CharStyleMapping.
	 */
	toSource(): string;
	/**
	 * Returns the CharStyleMapping with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CharStyleMapping;
}

/**
 * A table style mapping.
 * @class
 */
export declare class TableStyleMapping {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TableStyleMapping (a Application, 
	 * Document, Story or XmlStory).
	 */
	readonly parent: any;
	/**
	 * The index of the TableStyleMapping within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The source style name property. */
	sourceStyleName: string;
	/** The destination style name property. */
	destinationStyleName: string;
	/** The type of the mapping rule. */
	mappingRuleType: MapType;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** deletes a style mapping. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * TableStyleMapping.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TableStyleMapping;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of table style mappings.
 * @class
 */
export declare class TableStyleMappings {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a style mapping.
	 * @param {string} sourceStyleName - The source style name.
	 * @param {string} destinationStyleName - The destination style 
	 * name.
	 * @param {MapType} mappingRuleType - The mapping type
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TableStyleMapping (Optional)
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: Object): TableStyleMapping;
	/** Displays the number of elements in the TableStyleMapping. */
	count(): number;
	/**
	 * Returns the TableStyleMapping with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TableStyleMapping;
	/**
	 * Returns the TableStyleMappings within the specified range.
	 * @param {any} _from - The TableStyleMapping, index, or name 
	 * at the beginning of the range. Can accept: 
	 * TableStyleMapping, Long Integer or String.
	 * @param {any} to - The TableStyleMapping, index, or name at 
	 * the end of the range. Can accept: TableStyleMapping, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): TableStyleMapping;
	/** Returns the first TableStyleMapping in the collection. */
	firstItem(): TableStyleMapping;
	/** Returns the last TableStyleMapping in the collection. */
	lastItem(): TableStyleMapping;
	/** Returns the middle TableStyleMapping in the collection. */
	middleItem(): TableStyleMapping;
	/**
	 * Returns the TableStyleMapping with the index previous to the 
	 * specified index.
	 * @param {TableStyleMapping} obj - The index of the 
	 * TableStyleMapping that follows the desired 
	 * TableStyleMapping.
	 */
	previousItem(obj: TableStyleMapping): TableStyleMapping;
	/**
	 * Returns the TableStyleMapping whose index follows the 
	 * specified TableStyleMapping in the collection.
	 * @param {TableStyleMapping} obj - The TableStyleMapping whose 
	 * index comes before the desired TableStyleMapping.
	 */
	nextItem(obj: TableStyleMapping): TableStyleMapping;
	/** Returns any TableStyleMapping in the collection. */
	anyItem(): TableStyleMapping;
	/** Returns every TableStyleMapping in the collection. */
	everyItem(): TableStyleMapping;
	/**
	 * Generates a string which, if executed, will return the 
	 * TableStyleMapping.
	 */
	toSource(): string;
	/**
	 * Returns the TableStyleMapping with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TableStyleMapping;
}

/**
 * The link options for a linked Page Item.
 * @class
 * @extends Preference
 */
export declare class LinkedPageItemOption extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the LinkedPageItemOption (a Application, 
	 * Document, PageItem, HtmlItem, FormField, SignatureField, 
	 * TextBox, RadioButton, ListBox, ComboBox, CheckBox, 
	 * MultiStateObject, Button, MediaItem, Sound, Movie, EPSText, 
	 * SplineItem, Polygon, GraphicLine, Rectangle, Oval, Graphic, 
	 * ImportedPage, PICT, WMF, PDF, EPS, Image, Group or 
	 * TextFrame).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the linked Page Item will be updated while saving. */
	updateLinkWhileSaving: boolean;
	/**
	 * If true, a warning will be shown if the update link 
	 * operation will override local edits.
	 */
	warnOnUpdateOfEditedPageItem: boolean;
	/**
	 * If true, size and shape edits will be preserved during 
	 * update.
	 */
	preserveSizeAndShape: boolean;
	/** If true, appearance edits will be preserved during update. */
	preserveAppearance: boolean;
	/**
	 * If true, interactivity edits will be preserved during 
	 * update.
	 */
	preserveInteractivity: boolean;
	/**
	 * If true, frame content edits will be preserved during 
	 * update.
	 */
	preserveFrameContent: boolean;
	/**
	 * If true, text wrap, hyperLinks, text frame options, object 
	 * export settings will be preserved during update.
	 */
	preserveOthers: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * LinkedPageItemOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): LinkedPageItemOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A preflight rule
 * @class
 */
export declare class PreflightRule {
	/** The rule ID for this rule. */
	readonly id: string;
	/** The name of the PreflightRule. */
	readonly name: string;
	/** The description of the PreflightRule. */
	readonly description: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PreflightRule (a Application). */
	readonly parent: Application;
	/**
	 * The index of the PreflightRule within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the preflight rule is fully supported. */
	fullFeature: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightRule.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PreflightRule;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of preflight rules.
 * @class
 */
export declare class PreflightRules {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the PreflightRule. */
	count(): number;
	/**
	 * Returns the PreflightRule with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PreflightRule;
	/**
	 * Returns the PreflightRule with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PreflightRule;
	/**
	 * Returns the PreflightRule with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PreflightRule;
	/**
	 * Returns the PreflightRules within the specified range.
	 * @param {any} _from - The PreflightRule, index, or name at 
	 * the beginning of the range. Can accept: PreflightRule, Long 
	 * Integer or String.
	 * @param {any} to - The PreflightRule, index, or name at the 
	 * end of the range. Can accept: PreflightRule, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): PreflightRule;
	/** Returns the first PreflightRule in the collection. */
	firstItem(): PreflightRule;
	/** Returns the last PreflightRule in the collection. */
	lastItem(): PreflightRule;
	/** Returns the middle PreflightRule in the collection. */
	middleItem(): PreflightRule;
	/**
	 * Returns the PreflightRule with the index previous to the 
	 * specified index.
	 * @param {PreflightRule} obj - The index of the PreflightRule 
	 * that follows the desired PreflightRule.
	 */
	previousItem(obj: PreflightRule): PreflightRule;
	/**
	 * Returns the PreflightRule whose index follows the specified 
	 * PreflightRule in the collection.
	 * @param {PreflightRule} obj - The PreflightRule whose index 
	 * comes before the desired PreflightRule.
	 */
	nextItem(obj: PreflightRule): PreflightRule;
	/** Returns any PreflightRule in the collection. */
	anyItem(): PreflightRule;
	/** Returns every PreflightRule in the collection. */
	everyItem(): PreflightRule;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightRule.
	 */
	toSource(): string;
	/**
	 * Returns the PreflightRule with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PreflightRule;
}

/**
 * A preflight rule data object.
 * @class
 */
export declare class RuleDataObject {
	/** The name of the RuleDataObject. */
	readonly name: string;
	/** The type of data. */
	readonly dataType: RuleDataType;
	/** The ID for this rule data object. */
	readonly id: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the RuleDataObject (a PreflightProfileRule or 
	 * PreflightRuleInstance).
	 */
	readonly parent: any;
	/**
	 * The index of the RuleDataObject within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The value for this data object. Can return: String, Real, 
	 * Long Integer, Short Integer, Boolean, Object or Array of 
	 * Strings, Reals, Long Integers, Short Integers, Booleans, 
	 * Objects or Arrays of Array of Arrays of Array of Strings, 
	 * Reals, Long Integers, Short Integers, Booleans or Objects.
	 */
	dataValue: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the RuleDataObject. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * RuleDataObject.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): RuleDataObject;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of prefight rule data objects.
 * @class
 */
export declare class RuleDataObjects {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Add a new preflight rule data to a preflight profile rule.
	 * @param {string} name - The name of the rule data to add
	 * @param {RuleDataType} dataType - The type of data
	 * @param {any} dataValue - The value of data. Can accept: 
	 * String, Real, Long Integer, Short Integer, Boolean, Object 
	 * or Array of Strings, Reals, Long Integers, Short Integers, 
	 * Booleans, Objects or Arrays of Array of Arrays of Array of 
	 * Strings, Reals, Long Integers, Short Integers, Booleans or 
	 * Objects.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new RuleDataObject (Optional)
	 */
	add(name: string, dataType: RuleDataType, dataValue: any, withProperties: Object): RuleDataObject;
	/** Displays the number of elements in the RuleDataObject. */
	count(): number;
	/**
	 * Returns the RuleDataObject with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): RuleDataObject;
	/**
	 * Returns the RuleDataObject with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): RuleDataObject;
	/**
	 * Returns the RuleDataObject with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): RuleDataObject;
	/**
	 * Returns the RuleDataObjects within the specified range.
	 * @param {any} _from - The RuleDataObject, index, or name at 
	 * the beginning of the range. Can accept: RuleDataObject, Long 
	 * Integer or String.
	 * @param {any} to - The RuleDataObject, index, or name at the 
	 * end of the range. Can accept: RuleDataObject, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): RuleDataObject;
	/** Returns the first RuleDataObject in the collection. */
	firstItem(): RuleDataObject;
	/** Returns the last RuleDataObject in the collection. */
	lastItem(): RuleDataObject;
	/** Returns the middle RuleDataObject in the collection. */
	middleItem(): RuleDataObject;
	/**
	 * Returns the RuleDataObject with the index previous to the 
	 * specified index.
	 * @param {RuleDataObject} obj - The index of the 
	 * RuleDataObject that follows the desired RuleDataObject.
	 */
	previousItem(obj: RuleDataObject): RuleDataObject;
	/**
	 * Returns the RuleDataObject whose index follows the specified 
	 * RuleDataObject in the collection.
	 * @param {RuleDataObject} obj - The RuleDataObject whose index 
	 * comes before the desired RuleDataObject.
	 */
	nextItem(obj: RuleDataObject): RuleDataObject;
	/** Returns any RuleDataObject in the collection. */
	anyItem(): RuleDataObject;
	/** Returns every RuleDataObject in the collection. */
	everyItem(): RuleDataObject;
	/**
	 * Generates a string which, if executed, will return the 
	 * RuleDataObject.
	 */
	toSource(): string;
	/**
	 * Returns the RuleDataObject with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: RuleDataObject;
}

/**
 * A preflight rule instance.
 * @class
 * @extends PreflightProfileRule
 */
export declare class PreflightRuleInstance extends PreflightProfileRule {
	/** The name of the PreflightRuleInstance. */
	readonly name: string;
	/** The rule ID for this rule. */
	readonly id: string;
	/** The description of the PreflightRuleInstance. */
	readonly description: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PreflightRuleInstance (a 
	 * PreflightProfile).
	 */
	readonly parent: PreflightProfile;
	/**
	 * The index of the PreflightRuleInstance within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of prefight rule data objects. */
	readonly ruleDataObjects: RuleDataObjects;
	/**
	 * Indicates whether or not the preflight rule is disabled, set 
	 * for error, warning, or information level feedback.
	 */
	flag: PreflightRuleFlag;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the PreflightRuleInstance. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightRuleInstance.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PreflightRuleInstance;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of preflight rule instances.
 * @class
 */
export declare class PreflightRuleInstances {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a new preflight rule to the profile.
	 * @param {string} id - The ID of the rule to be added
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PreflightRuleInstance (Optional)
	 */
	add(id: string, withProperties: Object): any;
	/**
	 * Displays the number of elements in the 
	 * PreflightRuleInstance.
	 */
	count(): number;
	/**
	 * Returns the PreflightRuleInstance with the specified index 
	 * or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PreflightRuleInstance;
	/**
	 * Returns the PreflightRuleInstance with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PreflightRuleInstance;
	/**
	 * Returns the PreflightRuleInstance with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PreflightRuleInstance;
	/**
	 * Returns the PreflightRuleInstances within the specified 
	 * range.
	 * @param {any} _from - The PreflightRuleInstance, index, or 
	 * name at the beginning of the range. Can accept: 
	 * PreflightRuleInstance, Long Integer or String.
	 * @param {any} to - The PreflightRuleInstance, index, or name 
	 * at the end of the range. Can accept: PreflightRuleInstance, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): PreflightRuleInstance;
	/** Returns the first PreflightRuleInstance in the collection. */
	firstItem(): PreflightRuleInstance;
	/** Returns the last PreflightRuleInstance in the collection. */
	lastItem(): PreflightRuleInstance;
	/** Returns the middle PreflightRuleInstance in the collection. */
	middleItem(): PreflightRuleInstance;
	/**
	 * Returns the PreflightRuleInstance with the index previous to 
	 * the specified index.
	 * @param {PreflightRuleInstance} obj - The index of the 
	 * PreflightRuleInstance that follows the desired 
	 * PreflightRuleInstance.
	 */
	previousItem(obj: PreflightRuleInstance): PreflightRuleInstance;
	/**
	 * Returns the PreflightRuleInstance whose index follows the 
	 * specified PreflightRuleInstance in the collection.
	 * @param {PreflightRuleInstance} obj - The 
	 * PreflightRuleInstance whose index comes before the desired 
	 * PreflightRuleInstance.
	 */
	nextItem(obj: PreflightRuleInstance): PreflightRuleInstance;
	/** Returns any PreflightRuleInstance in the collection. */
	anyItem(): PreflightRuleInstance;
	/** Returns every PreflightRuleInstance in the collection. */
	everyItem(): PreflightRuleInstance;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightRuleInstance.
	 */
	toSource(): string;
	/**
	 * Returns the PreflightRuleInstance with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PreflightRuleInstance;
}

/**
 * A preflight profile.
 * @class
 */
export declare class PreflightProfile {
	/** The unique ID of the PreflightProfile. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PreflightProfile (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/**
	 * The index of the PreflightProfile within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preflight profile rules. */
	readonly preflightProfileRules: PreflightProfileRules;
	/** A collection of preflight rule instances. */
	readonly preflightRuleInstances: PreflightRuleInstances;
	/** The name of the PreflightProfile. */
	name: string;
	/** The description of the PreflightProfile. */
	description: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the PreflightProfile. */
	remove(): void;
	/** Duplicates the PreflightProfile. */
	duplicate(): PreflightProfile;
	/**
	 * Update the preflight profile by copying from another 
	 * profile.
	 * @param {any} using - The preflight profile to copy. Can 
	 * accept: String or PreflightProfile. (Optional)
	 */
	update(using: any): void;
	/** Unembed this profile. */
	unembed(): void;
	/**
	 * Saves this preflight profile to a InDesign preflight profile 
	 * file.
	 * @param {File} to - The preflight profile file to save to.
	 */
	save(to: File): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightProfile.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PreflightProfile;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of preflight profiles.
 * @class
 */
export declare class PreflightProfiles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new PreflightProfile.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PreflightProfile (Optional)
	 */
	add(withProperties: Object): PreflightProfile;
	/** Displays the number of elements in the PreflightProfile. */
	count(): number;
	/**
	 * Returns the PreflightProfile with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PreflightProfile;
	/**
	 * Returns the PreflightProfile with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PreflightProfile;
	/**
	 * Returns the PreflightProfile with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PreflightProfile;
	/**
	 * Returns the PreflightProfiles within the specified range.
	 * @param {any} _from - The PreflightProfile, index, or name at 
	 * the beginning of the range. Can accept: PreflightProfile, 
	 * Long Integer or String.
	 * @param {any} to - The PreflightProfile, index, or name at 
	 * the end of the range. Can accept: PreflightProfile, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): PreflightProfile;
	/** Returns the first PreflightProfile in the collection. */
	firstItem(): PreflightProfile;
	/** Returns the last PreflightProfile in the collection. */
	lastItem(): PreflightProfile;
	/** Returns the middle PreflightProfile in the collection. */
	middleItem(): PreflightProfile;
	/**
	 * Returns the PreflightProfile with the index previous to the 
	 * specified index.
	 * @param {PreflightProfile} obj - The index of the 
	 * PreflightProfile that follows the desired PreflightProfile.
	 */
	previousItem(obj: PreflightProfile): PreflightProfile;
	/**
	 * Returns the PreflightProfile whose index follows the 
	 * specified PreflightProfile in the collection.
	 * @param {PreflightProfile} obj - The PreflightProfile whose 
	 * index comes before the desired PreflightProfile.
	 */
	nextItem(obj: PreflightProfile): PreflightProfile;
	/** Returns any PreflightProfile in the collection. */
	anyItem(): PreflightProfile;
	/** Returns every PreflightProfile in the collection. */
	everyItem(): PreflightProfile;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightProfile.
	 */
	toSource(): string;
	/**
	 * Returns the PreflightProfile with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PreflightProfile;
}

/**
 * An active preflight process.
 * @class
 */
export declare class PreflightProcess {
	/** The target document the process is inspecting. */
	readonly targetObject: Document;
	/** The preflight profile the process is using. */
	readonly appliedProfile: PreflightProfile;
	/** The description of the PreflightProcess. */
	readonly description: string;
	/** The results found by the process as a large string. */
	readonly processResults: string;
	/**
	 * A string containing a description of all elements visited by 
	 * the process.
	 */
	readonly processInventory: string;
	/**
	 * The aggregated results found by the process. Can return: 
	 * Ordered array containing documentName:String, 
	 * profileName:String, results:Array of Ordered array 
	 * containing parentNodeID:Long Integer, errorName:String, 
	 * pageNumber:String, errorInfo:String, errorDetail:Array of 
	 * Ordered array containing label:String, description:String.
	 */
	readonly aggregatedResults: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PreflightProcess (a Application). */
	readonly parent: Application;
	/**
	 * The index of the PreflightProcess within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the PreflightProcess. */
	remove(): void;
	/**
	 * Waits for the process to finish, up to an optional maximum 
	 * amount of time. No other processes get cycles during this 
	 * time.
	 * @param {number} waitTime - The maximum time to wait, in 
	 * seconds; if omitted, waits until completion no matter how 
	 * long it takes. (Optional)
	 */
	waitForProcess(waitTime: number): boolean;
	/**
	 * Saves a report of the completed preflight process.
	 * @param {File} to - The preflight report to save to.
	 * @param {boolean} autoOpen - If true, automatically open the 
	 * report after creation. (Optional)
	 */
	saveReport(to: File, autoOpen?: boolean): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightProcess.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PreflightProcess;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of preflight processes.
 * @class
 */
export declare class PreflightProcesses {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a new preflight process.
	 * @param {Document} targetObject - The document the process 
	 * should inspect.
	 * @param {PreflightProfile} appliedProfile - The preflight 
	 * profile that should be used.
	 * @param {PreflightOption} preflightOptions - The preflight 
	 * options that should be used. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PreflightProcess (Optional)
	 */
	add(targetObject: Document, appliedProfile: PreflightProfile, preflightOptions: PreflightOption, withProperties: Object): PreflightProcess;
	/** Displays the number of elements in the PreflightProcess. */
	count(): number;
	/**
	 * Returns the PreflightProcess with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PreflightProcess;
	/**
	 * Returns the PreflightProcesses within the specified range.
	 * @param {any} _from - The PreflightProcess, index, or name at 
	 * the beginning of the range. Can accept: PreflightProcess, 
	 * Long Integer or String.
	 * @param {any} to - The PreflightProcess, index, or name at 
	 * the end of the range. Can accept: PreflightProcess, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): PreflightProcess;
	/** Returns the first PreflightProcess in the collection. */
	firstItem(): PreflightProcess;
	/** Returns the last PreflightProcess in the collection. */
	lastItem(): PreflightProcess;
	/** Returns the middle PreflightProcess in the collection. */
	middleItem(): PreflightProcess;
	/**
	 * Returns the PreflightProcess with the index previous to the 
	 * specified index.
	 * @param {PreflightProcess} obj - The index of the 
	 * PreflightProcess that follows the desired PreflightProcess.
	 */
	previousItem(obj: PreflightProcess): PreflightProcess;
	/**
	 * Returns the PreflightProcess whose index follows the 
	 * specified PreflightProcess in the collection.
	 * @param {PreflightProcess} obj - The PreflightProcess whose 
	 * index comes before the desired PreflightProcess.
	 */
	nextItem(obj: PreflightProcess): PreflightProcess;
	/** Returns any PreflightProcess in the collection. */
	anyItem(): PreflightProcess;
	/** Returns every PreflightProcess in the collection. */
	everyItem(): PreflightProcess;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightProcess.
	 */
	toSource(): string;
	/**
	 * Returns the PreflightProcess with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PreflightProcess;
}

/**
 * A preflight profile rule.
 * @class
 */
export declare class PreflightProfileRule {
	/** The name of the PreflightProfileRule. */
	readonly name: string;
	/** The rule ID for this rule. */
	readonly id: string;
	/** The description of the PreflightProfileRule. */
	readonly description: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PreflightProfileRule (a PreflightProfile).
	 */
	readonly parent: PreflightProfile;
	/**
	 * The index of the PreflightProfileRule within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of prefight rule data objects. */
	readonly ruleDataObjects: RuleDataObjects;
	/**
	 * Indicates whether or not the preflight rule is disabled, set 
	 * for error, warning, or information level feedback.
	 */
	flag: PreflightRuleFlag;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the PreflightProfileRule. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightProfileRule.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PreflightProfileRule;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of preflight profile rules.
 * @class
 */
export declare class PreflightProfileRules {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a new preflight rule to the profile.
	 * @param {string} id - The ID of the rule to be added
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PreflightProfileRule (Optional)
	 */
	add(id: string, withProperties: Object): any;
	/**
	 * Displays the number of elements in the PreflightProfileRule.
	 */
	count(): number;
	/**
	 * Returns the PreflightProfileRule with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PreflightProfileRule;
	/**
	 * Returns the PreflightProfileRule with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): PreflightProfileRule;
	/**
	 * Returns the PreflightProfileRule with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PreflightProfileRule;
	/**
	 * Returns the PreflightProfileRules within the specified 
	 * range.
	 * @param {any} _from - The PreflightProfileRule, index, or 
	 * name at the beginning of the range. Can accept: 
	 * PreflightProfileRule, Long Integer or String.
	 * @param {any} to - The PreflightProfileRule, index, or name 
	 * at the end of the range. Can accept: PreflightProfileRule, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): PreflightProfileRule;
	/** Returns the first PreflightProfileRule in the collection. */
	firstItem(): PreflightProfileRule;
	/** Returns the last PreflightProfileRule in the collection. */
	lastItem(): PreflightProfileRule;
	/** Returns the middle PreflightProfileRule in the collection. */
	middleItem(): PreflightProfileRule;
	/**
	 * Returns the PreflightProfileRule with the index previous to 
	 * the specified index.
	 * @param {PreflightProfileRule} obj - The index of the 
	 * PreflightProfileRule that follows the desired 
	 * PreflightProfileRule.
	 */
	previousItem(obj: PreflightProfileRule): PreflightProfileRule;
	/**
	 * Returns the PreflightProfileRule whose index follows the 
	 * specified PreflightProfileRule in the collection.
	 * @param {PreflightProfileRule} obj - The PreflightProfileRule 
	 * whose index comes before the desired PreflightProfileRule.
	 */
	nextItem(obj: PreflightProfileRule): PreflightProfileRule;
	/** Returns any PreflightProfileRule in the collection. */
	anyItem(): PreflightProfileRule;
	/** Returns every PreflightProfileRule in the collection. */
	everyItem(): PreflightProfileRule;
	/**
	 * Generates a string which, if executed, will return the 
	 * PreflightProfileRule.
	 */
	toSource(): string;
	/**
	 * Returns the PreflightProfileRule with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PreflightProfileRule;
}

/**
 * A stroke style.
 * @class
 */
export declare class StrokeStyle {
	/** The stroke style type. */
	readonly strokeStyleType: string;
	/** The unique ID of the StrokeStyle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the StrokeStyle (a Document or Application). */
	readonly parent: any;
	/** The index of the StrokeStyle within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the StrokeStyle. */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the StrokeStyle. */
	duplicate(): StrokeStyle;
	/**
	 * Deletes the stroke style.
	 * @param {any} replacingWith - The stroke style to apply in 
	 * place of the deleted style. . Can accept: StrokeStyle or 
	 * String. (Optional)
	 */
	remove(replacingWith: any): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * StrokeStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): StrokeStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of stroke styles.
 * @class
 */
export declare class StrokeStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the StrokeStyle. */
	count(): number;
	/**
	 * Returns the StrokeStyle with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): StrokeStyle;
	/**
	 * Returns the StrokeStyle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): StrokeStyle;
	/**
	 * Returns the StrokeStyle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): StrokeStyle;
	/**
	 * Returns the StrokeStyles within the specified range.
	 * @param {any} _from - The StrokeStyle, index, or name at the 
	 * beginning of the range. Can accept: StrokeStyle, Long 
	 * Integer or String.
	 * @param {any} to - The StrokeStyle, index, or name at the end 
	 * of the range. Can accept: StrokeStyle, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): StrokeStyle;
	/** Returns the first StrokeStyle in the collection. */
	firstItem(): StrokeStyle;
	/** Returns the last StrokeStyle in the collection. */
	lastItem(): StrokeStyle;
	/** Returns the middle StrokeStyle in the collection. */
	middleItem(): StrokeStyle;
	/**
	 * Returns the StrokeStyle with the index previous to the 
	 * specified index.
	 * @param {StrokeStyle} obj - The index of the StrokeStyle that 
	 * follows the desired StrokeStyle.
	 */
	previousItem(obj: StrokeStyle): StrokeStyle;
	/**
	 * Returns the StrokeStyle whose index follows the specified 
	 * StrokeStyle in the collection.
	 * @param {StrokeStyle} obj - The StrokeStyle whose index comes 
	 * before the desired StrokeStyle.
	 */
	nextItem(obj: StrokeStyle): StrokeStyle;
	/** Returns any StrokeStyle in the collection. */
	anyItem(): StrokeStyle;
	/** Returns every StrokeStyle in the collection. */
	everyItem(): StrokeStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * StrokeStyle.
	 */
	toSource(): string;
	/**
	 * Returns the StrokeStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: StrokeStyle;
}

/**
 * A dashed stroke style.
 * @class
 * @extends StrokeStyle
 */
export declare class DashedStrokeStyle extends StrokeStyle {
	/** The stroke style type. */
	readonly strokeStyleType: string;
	/** The unique ID of the DashedStrokeStyle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the DashedStrokeStyle (a Document or 
	 * Application).
	 */
	readonly parent: any;
	/**
	 * The index of the DashedStrokeStyle within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The pattern of dashes and gaps, in the format [dash length1, 
	 * gap length1, dash length2, gap length2]. Define up to ten 
	 * values.
	 */
	dashArray: number|string;
	/** The corner adjustment applied to the DashedStrokeStyle. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The name of the DashedStrokeStyle. */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the DashedStrokeStyle. */
	duplicate(): DashedStrokeStyle;
	/**
	 * Deletes the stroke style.
	 * @param {any} replacingWith - The stroke style to apply in 
	 * place of the deleted style. . Can accept: StrokeStyle or 
	 * String. (Optional)
	 */
	remove(replacingWith: any): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * DashedStrokeStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DashedStrokeStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of dashed stroke styles.
 * @class
 */
export declare class DashedStrokeStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new DashedStrokeStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new DashedStrokeStyle (Optional)
	 */
	add(withProperties: Object): DashedStrokeStyle;
	/** Displays the number of elements in the DashedStrokeStyle. */
	count(): number;
	/**
	 * Returns the DashedStrokeStyle with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DashedStrokeStyle;
	/**
	 * Returns the DashedStrokeStyle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): DashedStrokeStyle;
	/**
	 * Returns the DashedStrokeStyle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): DashedStrokeStyle;
	/**
	 * Returns the DashedStrokeStyles within the specified range.
	 * @param {any} _from - The DashedStrokeStyle, index, or name 
	 * at the beginning of the range. Can accept: 
	 * DashedStrokeStyle, Long Integer or String.
	 * @param {any} to - The DashedStrokeStyle, index, or name at 
	 * the end of the range. Can accept: DashedStrokeStyle, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): DashedStrokeStyle;
	/** Returns the first DashedStrokeStyle in the collection. */
	firstItem(): DashedStrokeStyle;
	/** Returns the last DashedStrokeStyle in the collection. */
	lastItem(): DashedStrokeStyle;
	/** Returns the middle DashedStrokeStyle in the collection. */
	middleItem(): DashedStrokeStyle;
	/**
	 * Returns the DashedStrokeStyle with the index previous to the 
	 * specified index.
	 * @param {DashedStrokeStyle} obj - The index of the 
	 * DashedStrokeStyle that follows the desired 
	 * DashedStrokeStyle.
	 */
	previousItem(obj: DashedStrokeStyle): DashedStrokeStyle;
	/**
	 * Returns the DashedStrokeStyle whose index follows the 
	 * specified DashedStrokeStyle in the collection.
	 * @param {DashedStrokeStyle} obj - The DashedStrokeStyle whose 
	 * index comes before the desired DashedStrokeStyle.
	 */
	nextItem(obj: DashedStrokeStyle): DashedStrokeStyle;
	/** Returns any DashedStrokeStyle in the collection. */
	anyItem(): DashedStrokeStyle;
	/** Returns every DashedStrokeStyle in the collection. */
	everyItem(): DashedStrokeStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * DashedStrokeStyle.
	 */
	toSource(): string;
	/**
	 * Returns the DashedStrokeStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: DashedStrokeStyle;
}

/**
 * A dotted stroke style.
 * @class
 * @extends StrokeStyle
 */
export declare class DottedStrokeStyle extends StrokeStyle {
	/** The stroke style type. */
	readonly strokeStyleType: string;
	/** The unique ID of the DottedStrokeStyle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the DottedStrokeStyle (a Document or 
	 * Application).
	 */
	readonly parent: any;
	/**
	 * The index of the DottedStrokeStyle within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The length of gaps between dots. Define up to five values. */
	dotArray: number|string;
	/** The corner adjustment applied to the DottedStrokeStyle. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/** The name of the DottedStrokeStyle. */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the DottedStrokeStyle. */
	duplicate(): DottedStrokeStyle;
	/**
	 * Deletes the stroke style.
	 * @param {any} replacingWith - The stroke style to apply in 
	 * place of the deleted style. . Can accept: StrokeStyle or 
	 * String. (Optional)
	 */
	remove(replacingWith: any): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * DottedStrokeStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DottedStrokeStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of dotted stroke styles.
 * @class
 */
export declare class DottedStrokeStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new DottedStrokeStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new DottedStrokeStyle (Optional)
	 */
	add(withProperties: Object): DottedStrokeStyle;
	/** Displays the number of elements in the DottedStrokeStyle. */
	count(): number;
	/**
	 * Returns the DottedStrokeStyle with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DottedStrokeStyle;
	/**
	 * Returns the DottedStrokeStyle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): DottedStrokeStyle;
	/**
	 * Returns the DottedStrokeStyle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): DottedStrokeStyle;
	/**
	 * Returns the DottedStrokeStyles within the specified range.
	 * @param {any} _from - The DottedStrokeStyle, index, or name 
	 * at the beginning of the range. Can accept: 
	 * DottedStrokeStyle, Long Integer or String.
	 * @param {any} to - The DottedStrokeStyle, index, or name at 
	 * the end of the range. Can accept: DottedStrokeStyle, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): DottedStrokeStyle;
	/** Returns the first DottedStrokeStyle in the collection. */
	firstItem(): DottedStrokeStyle;
	/** Returns the last DottedStrokeStyle in the collection. */
	lastItem(): DottedStrokeStyle;
	/** Returns the middle DottedStrokeStyle in the collection. */
	middleItem(): DottedStrokeStyle;
	/**
	 * Returns the DottedStrokeStyle with the index previous to the 
	 * specified index.
	 * @param {DottedStrokeStyle} obj - The index of the 
	 * DottedStrokeStyle that follows the desired 
	 * DottedStrokeStyle.
	 */
	previousItem(obj: DottedStrokeStyle): DottedStrokeStyle;
	/**
	 * Returns the DottedStrokeStyle whose index follows the 
	 * specified DottedStrokeStyle in the collection.
	 * @param {DottedStrokeStyle} obj - The DottedStrokeStyle whose 
	 * index comes before the desired DottedStrokeStyle.
	 */
	nextItem(obj: DottedStrokeStyle): DottedStrokeStyle;
	/** Returns any DottedStrokeStyle in the collection. */
	anyItem(): DottedStrokeStyle;
	/** Returns every DottedStrokeStyle in the collection. */
	everyItem(): DottedStrokeStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * DottedStrokeStyle.
	 */
	toSource(): string;
	/**
	 * Returns the DottedStrokeStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: DottedStrokeStyle;
}

/**
 * A striped stroke style.
 * @class
 * @extends StrokeStyle
 */
export declare class StripedStrokeStyle extends StrokeStyle {
	/** The stroke style type. */
	readonly strokeStyleType: string;
	/** The unique ID of the StripedStrokeStyle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the StripedStrokeStyle (a Document or 
	 * Application).
	 */
	readonly parent: any;
	/**
	 * The index of the StripedStrokeStyle within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The width and position of stripes in a striped stroke 
	 * pattern. Each stripe is specified by a start-end pair in the 
	 * format [start1, end1, start2, end2]; each value indicates a 
	 * percentage of the stroke weight. Each value must be greater 
	 * than the previous value. (Range: 0 to 100).
	 */
	stripeArray: number;
	/** The name of the StripedStrokeStyle. */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the StripedStrokeStyle. */
	duplicate(): StripedStrokeStyle;
	/**
	 * Deletes the stroke style.
	 * @param {any} replacingWith - The stroke style to apply in 
	 * place of the deleted style. . Can accept: StrokeStyle or 
	 * String. (Optional)
	 */
	remove(replacingWith: any): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * StripedStrokeStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): StripedStrokeStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of striped stroke styles.
 * @class
 */
export declare class StripedStrokeStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new StripedStrokeStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new StripedStrokeStyle (Optional)
	 */
	add(withProperties: Object): StripedStrokeStyle;
	/** Displays the number of elements in the StripedStrokeStyle. */
	count(): number;
	/**
	 * Returns the StripedStrokeStyle with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): StripedStrokeStyle;
	/**
	 * Returns the StripedStrokeStyle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): StripedStrokeStyle;
	/**
	 * Returns the StripedStrokeStyle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): StripedStrokeStyle;
	/**
	 * Returns the StripedStrokeStyles within the specified range.
	 * @param {any} _from - The StripedStrokeStyle, index, or name 
	 * at the beginning of the range. Can accept: 
	 * StripedStrokeStyle, Long Integer or String.
	 * @param {any} to - The StripedStrokeStyle, index, or name at 
	 * the end of the range. Can accept: StripedStrokeStyle, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): StripedStrokeStyle;
	/** Returns the first StripedStrokeStyle in the collection. */
	firstItem(): StripedStrokeStyle;
	/** Returns the last StripedStrokeStyle in the collection. */
	lastItem(): StripedStrokeStyle;
	/** Returns the middle StripedStrokeStyle in the collection. */
	middleItem(): StripedStrokeStyle;
	/**
	 * Returns the StripedStrokeStyle with the index previous to 
	 * the specified index.
	 * @param {StripedStrokeStyle} obj - The index of the 
	 * StripedStrokeStyle that follows the desired 
	 * StripedStrokeStyle.
	 */
	previousItem(obj: StripedStrokeStyle): StripedStrokeStyle;
	/**
	 * Returns the StripedStrokeStyle whose index follows the 
	 * specified StripedStrokeStyle in the collection.
	 * @param {StripedStrokeStyle} obj - The StripedStrokeStyle 
	 * whose index comes before the desired StripedStrokeStyle.
	 */
	nextItem(obj: StripedStrokeStyle): StripedStrokeStyle;
	/** Returns any StripedStrokeStyle in the collection. */
	anyItem(): StripedStrokeStyle;
	/** Returns every StripedStrokeStyle in the collection. */
	everyItem(): StripedStrokeStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * StripedStrokeStyle.
	 */
	toSource(): string;
	/**
	 * Returns the StripedStrokeStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: StripedStrokeStyle;
}

/**
 * A TOC style definition.
 * @class
 */
export declare class TOCStyle {
	/** The unique ID of the TOCStyle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TOCStyle (a Document). */
	readonly parent: Document;
	/** The index of the TOCStyle within its containing object. */
	readonly index: number;
	/** A collection TOC style entries. */
	readonly tocStyleEntries: TOCStyleEntries;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The paragraph style applied to the TOC title. */
	titleStyle: ParagraphStyle;
	/** The TOC title. */
	title: string;
	/** The name of the TOCStyle. */
	name: string;
	/**
	 * If true, the lowest-level TOC entries are placed on the same 
	 * line as the previous entry.
	 */
	runIn: boolean;
	/**
	 * If true, the TOC includes entries from text on hidden 
	 * layers.
	 */
	includeHidden: boolean;
	/**
	 * If true, includes the entire book in the TOC. If false, 
	 * includes only the TOC entries in the current document. Note: 
	 * Valid when the current document is part of a book.
	 */
	includeBookDocuments: boolean;
	/** If true, creates bookmarks for TOC entries. */
	createBookmarks: boolean;
	/** The table of contents story direction. */
	setStoryDirection: HorizontalOrVertical;
	/** The format for importing numbered paragraphs into the TOC. */
	numberedParagraphs: NumberedParagraphsOptions;
	/** If true, make text anchor in source paragraph. */
	makeAnchor: boolean;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the TOCStyle. */
	duplicate(): TOCStyle;
	/** Deletes the TOCStyle. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * TOCStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TOCStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of TOC styles.
 * @class
 */
export declare class TOCStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new TOCStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TOCStyle (Optional)
	 */
	add(withProperties: Object): TOCStyle;
	/** Displays the number of elements in the TOCStyle. */
	count(): number;
	/**
	 * Returns the TOCStyle with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TOCStyle;
	/**
	 * Returns the TOCStyle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TOCStyle;
	/**
	 * Returns the TOCStyle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): TOCStyle;
	/**
	 * Returns the TOCStyles within the specified range.
	 * @param {any} _from - The TOCStyle, index, or name at the 
	 * beginning of the range. Can accept: TOCStyle, Long Integer 
	 * or String.
	 * @param {any} to - The TOCStyle, index, or name at the end of 
	 * the range. Can accept: TOCStyle, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): TOCStyle;
	/** Returns the first TOCStyle in the collection. */
	firstItem(): TOCStyle;
	/** Returns the last TOCStyle in the collection. */
	lastItem(): TOCStyle;
	/** Returns the middle TOCStyle in the collection. */
	middleItem(): TOCStyle;
	/**
	 * Returns the TOCStyle with the index previous to the 
	 * specified index.
	 * @param {TOCStyle} obj - The index of the TOCStyle that 
	 * follows the desired TOCStyle.
	 */
	previousItem(obj: TOCStyle): TOCStyle;
	/**
	 * Returns the TOCStyle whose index follows the specified 
	 * TOCStyle in the collection.
	 * @param {TOCStyle} obj - The TOCStyle whose index comes 
	 * before the desired TOCStyle.
	 */
	nextItem(obj: TOCStyle): TOCStyle;
	/** Returns any TOCStyle in the collection. */
	anyItem(): TOCStyle;
	/** Returns every TOCStyle in the collection. */
	everyItem(): TOCStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * TOCStyle.
	 */
	toSource(): string;
	/**
	 * Returns the TOCStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TOCStyle;
}

/**
 * A TOC entry definition.
 * @class
 */
export declare class TOCStyleEntry {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TOCStyleEntry (a TOCStyle). */
	readonly parent: TOCStyle;
	/**
	 * The index of the TOCStyleEntry within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the TOCStyleEntry. */
	name: string;
	/**
	 * The paragraph style applied to the TOC entry. Can return: 
	 * ParagraphStyle or String.
	 */
	formatStyle: any;
	/** The indent level of the entry in the TOC. */
	level: number;
	/**
	 * The character style applied to the page number of the entry. 
	 * Can return: CharacterStyle or String.
	 */
	pageNumberStyle: any;
	/** The page number placement for the TOC entry style. */
	pageNumberPosition: PageNumberPosition;
	/**
	 * The string to insert between the entry text and the page 
	 * numbers.
	 */
	separator: string;
	/**
	 * The character style applied to the string separating the TOC 
	 * entry text and the page numbers. Can return: CharacterStyle 
	 * or String.
	 */
	separatorStyle: any;
	/** If true, sorts the entries alphabetically. */
	sortAlphabet: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the TOCStyleEntry. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * TOCStyleEntry.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TOCStyleEntry;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection TOC style entries.
 * @class
 */
export declare class TOCStyleEntries {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Adds a TOC style entry.
	 * @param {string} styleName - The paragraph style to include 
	 * as TOC entries in the TOC. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TOCStyleEntry (Optional)
	 */
	add(styleName: string, withProperties: Object): TOCStyleEntry;
	/** Displays the number of elements in the TOCStyleEntry. */
	count(): number;
	/**
	 * Returns the TOCStyleEntry with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TOCStyleEntry;
	/**
	 * Returns the TOCStyleEntry with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TOCStyleEntry;
	/**
	 * Returns the TOCStyleEntries within the specified range.
	 * @param {any} _from - The TOCStyleEntry, index, or name at 
	 * the beginning of the range. Can accept: TOCStyleEntry, Long 
	 * Integer or String.
	 * @param {any} to - The TOCStyleEntry, index, or name at the 
	 * end of the range. Can accept: TOCStyleEntry, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): TOCStyleEntry;
	/** Returns the first TOCStyleEntry in the collection. */
	firstItem(): TOCStyleEntry;
	/** Returns the last TOCStyleEntry in the collection. */
	lastItem(): TOCStyleEntry;
	/** Returns the middle TOCStyleEntry in the collection. */
	middleItem(): TOCStyleEntry;
	/**
	 * Returns the TOCStyleEntry with the index previous to the 
	 * specified index.
	 * @param {TOCStyleEntry} obj - The index of the TOCStyleEntry 
	 * that follows the desired TOCStyleEntry.
	 */
	previousItem(obj: TOCStyleEntry): TOCStyleEntry;
	/**
	 * Returns the TOCStyleEntry whose index follows the specified 
	 * TOCStyleEntry in the collection.
	 * @param {TOCStyleEntry} obj - The TOCStyleEntry whose index 
	 * comes before the desired TOCStyleEntry.
	 */
	nextItem(obj: TOCStyleEntry): TOCStyleEntry;
	/** Returns any TOCStyleEntry in the collection. */
	anyItem(): TOCStyleEntry;
	/** Returns every TOCStyleEntry in the collection. */
	everyItem(): TOCStyleEntry;
	/**
	 * Generates a string which, if executed, will return the 
	 * TOCStyleEntry.
	 */
	toSource(): string;
	/**
	 * Returns the TOCStyleEntry with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TOCStyleEntry;
}

/**
 * A table cell.
 * @class
 */
export declare class Cell {
	/** The XML element associated with the Cell. */
	readonly associatedXMLElement: XMLItem;
	/** The unique ID of the Cell. */
	readonly id: number;
	/** The name of the Cell. */
	readonly name: string;
	/** The index of the Cell within its containing object. */
	readonly index: number;
	/** The number of rows that the object spans. */
	readonly rowSpan: number;
	/** The number of columns that the object spans. */
	readonly columnSpan: number;
	/** If true, the story has overset text. */
	readonly overflows: boolean;
	/** The parent row of the cell. */
	readonly parentRow: Row;
	/** The parent column of the cell. */
	readonly parentColumn: Column;
	/** Lists all page items contained by the Cell. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Cell. */
	readonly allGraphics: Graphic;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Cell (a XMLElement, Cell, Table, Column or 
	 * Row).
	 */
	readonly parent: any;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of table cells. */
	readonly cells: Cells;
	/** A collection of table rows. */
	readonly rows: Rows;
	/** A collection of table columns. */
	readonly columns: Columns;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of changes. */
	readonly changes: Changes;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/**
	 * The height of the Cell. For a table or column, specifies the 
	 * sum of the row heights.
	 */
	height: number|string;
	/**
	 * The width of the Cell. For a table or row, specifies the sum 
	 * of the column widths.
	 */
	width: number|string;
	/**
	 * The text contents. For rows or columns, when specified as a 
	 * string, the sting populates each cell in the row or column; 
	 * when specified as an array, the first value in the array 
	 * populates the left-most cell in the row or the top-most cell 
	 * in the column; the next value populates the next cell to the 
	 * right (for rows) or the next lowest cell (for columns), and 
	 * so on. Can return: PageItem, String, SpecialCharacters 
	 * enumerator or Array of Strings, SpecialCharacters 
	 * enumerators or PageItems. Can also accept: PageItem, 
	 * NothingEnum enumerator or Array of Strings, 
	 * SpecialCharacters enumerators, NothingEnum enumerators or 
	 * PageItems.
	 */
	contents: any;
	/**
	 * The length (of a linear gradient) or radius (of a radial 
	 * gradient) applied to the fill of the object.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * object. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Cell, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The top inset of the cell. The API has been deprecated. Use 
	 * TextTopInset or GraphicTopInset
	 * @deprecated
	 */
	topInset: number|string;
	/**
	 * The left inset of the cell.The API has been deprecated. Use 
	 * TextLeftInset or GraphicLeftInset
	 * @deprecated
	 */
	leftInset: number|string;
	/**
	 * The bottom inset of the cell.The API has been deprecated. 
	 * Use TextBottomInset or GraphicBottomInset
	 * @deprecated
	 */
	bottomInset: number|string;
	/**
	 * The right inset of the cell.The API has been deprecated. Use 
	 * TextLeftInset or GraphicRightInset
	 * @deprecated
	 */
	rightInset: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the object. Can also accept: String.
	 */
	fillColor: Swatch;
	/** The tint (as a percentage) of the fill of the object. */
	fillTint: number;
	/** If true, the fill of the object will overprint. */
	overprintFill: boolean;
	/** If true, draws a diagonal line starting from the top left. */
	topLeftDiagonalLine: boolean;
	/** If true, draws a diagonal line starting from the top right. */
	topRightDiagonalLine: boolean;
	/** If true, draws the diagonal line in front of cell contents. */
	diagonalLineInFront: boolean;
	/** The diagonal line stroke weight. */
	diagonalLineStrokeWeight: number|string;
	/**
	 * The stroke type of the diagonal line(s). Can also accept: 
	 * String.
	 */
	diagonalLineStrokeType: StrokeStyle;
	/** The diagonal line color, specified as a swatch. */
	diagonalLineStrokeColor: Swatch;
	/** The diagonal line tint (as a percentage). (Range: 0 to 100) */
	diagonalLineStrokeTint: number;
	/** If true, the diagonal line stroke will overprint. */
	diagonalLineStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the diagonal line stroke. Note: Not valid when 
	 * diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the diagonal line stroke gap 
	 * color. Note: Not valid when diagonal line stroke type is 
	 * solid.
	 */
	diagonalLineStrokeGapTint: number;
	/**
	 * If true, the stroke gap of the diagonal line will overprint. 
	 * Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean;
	/**
	 * If true, clips the cell's content to width and height of the 
	 * cell. The API has been deprecated. Use 
	 * ClipContentsToTextCell or ClipContentsToPageItemCell
	 * @deprecated
	 */
	clipContentToCell: boolean;
	/**
	 * The distance between the baseline of the text and the top 
	 * inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline;
	/** The vertical alignment of cell. */
	verticalJustification: VerticalJustification;
	/**
	 * The maximum space that can be added between paragraphs in a 
	 * cell. Note: Valid only when vertical justification is 
	 * justified.
	 */
	paragraphSpacingLimit: number|string;
	/**
	 * The space between the baseline of the text and the top inset 
	 * of the frame or cell.
	 */
	minimumFirstBaselineOffset: number|string;
	/**
	 * The rotation angle (in degrees) of the cell, specified as 
	 * one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number;
	/** The stroke weight of the left edge border stroke. */
	leftEdgeStrokeWeight: number|string;
	/** The stroke type of the left edge. Can also accept: String. */
	leftEdgeStrokeType: StrokeStyle;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the left edge border stroke. 
	 * (Range: 0 to 100)
	 */
	leftEdgeStrokeTint: number;
	/** If true, the left edge border stroke will overprint. */
	leftEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the left edge border stroke. Note: Not valid when 
	 * left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the left edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when left edge 
	 * stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the left edge border stroke will 
	 * overprint. Note: Not valid when left edge stroke type is 
	 * solid.
	 */
	leftEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the top edge border stroke. */
	topEdgeStrokeWeight: number|string;
	/** The stroke type of the top edge. Can also accept: String. */
	topEdgeStrokeType: StrokeStyle;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the top edge border stroke. 
	 * (Range: 0 to 100)
	 */
	topEdgeStrokeTint: number;
	/** If true, the top edge border stroke will overprint. */
	topEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the top edge border stroke. Note: Not valid when 
	 * top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the top edge border stroke gap 
	 * color. (Range: 0 to 100) Note: Not valid when top edge 
	 * stroke type is solid.
	 */
	topEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the top edge border stroke will 
	 * overprint. Note: Not valid when top edge stroke type is 
	 * solid.
	 */
	topEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the right edge border stroke. */
	rightEdgeStrokeWeight: number|string;
	/** The stroke type of the right edge. Can also accept: String. */
	rightEdgeStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch, of the right edge border 
	 * stroke.
	 */
	rightEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the right edge border stroke. 
	 * (Range: 0 to 100)
	 */
	rightEdgeStrokeTint: number;
	/** If true, the right edge border stroke will overprint. */
	rightEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the right edge border stroke. Note: Not valid 
	 * when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the right edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when right edge 
	 * stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the right edge border stroke will 
	 * overprint. Note: Not valid when right edge stroke type is 
	 * solid.
	 */
	rightEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the bottom edge border stroke. */
	bottomEdgeStrokeWeight: number|string;
	/**
	 * The stroke type of the bottom edge. Can also accept: String.
	 */
	bottomEdgeStrokeType: StrokeStyle;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number;
	/** If true, the bottom edge border stroke will overprint. */
	bottomEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the bottom edge border stroke. Note: Not valid 
	 * when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the bottom edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when bottom 
	 * edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the bottom edge border stroke will 
	 * overprint. Note: Not valid when bottom edge stroke type is 
	 * solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the inner row border strokes. */
	innerRowStrokeWeight: number|string;
	/** The stroke type of the inner row. Can also accept: String. */
	innerRowStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch, of the inner row border 
	 * stroke.
	 */
	innerRowStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner row border stroke. 
	 * (Range: 0 to 100)
	 */
	innerRowStrokeTint: number;
	/** If true, the inner row border stroke will overprint. */
	innerRowStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the inner row border stroke. Note: Not valid when 
	 * inner row stroke type is solid.
	 */
	innerRowStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner row border stroke. 
	 * (Range: 0 to 100) Note: Not valid when inner row stroke type 
	 * is solid.
	 */
	innerRowStrokeGapTint: number;
	/**
	 * If true, the gap color of the inner row border stroke will 
	 * overprint. Note: Not valid when inner row stroke type is 
	 * solid.
	 */
	innerRowStrokeGapOverprint: boolean;
	/** The stroke weight of the inner column border stroke. */
	innerColumnStrokeWeight: number|string;
	/**
	 * The stroke type of the inner column. Can also accept: 
	 * String.
	 */
	innerColumnStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch, of the inner column border 
	 * stroke.
	 */
	innerColumnStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner column border 
	 * stroke. (Range: 0 to 100)
	 */
	innerColumnStrokeTint: number;
	/** If true, the inner column border stroke will overprint. */
	innerColumnStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the inner column border stroke. Note: Not valid 
	 * when inner column stroke type is solid.
	 */
	innerColumnStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner column border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when inner 
	 * column stroke type is solid.
	 */
	innerColumnStrokeGapTint: number;
	/**
	 * If true, the gap color of the inner column border stroke 
	 * will overprint. Note: Not valid when inner column stroke 
	 * type is solid.
	 */
	innerColumnStrokeGapOverprint: boolean;
	/**
	 * The minimum height of the cells in the Cell. Note: When auto 
	 * grow is true, cells can automatically grow larger than this 
	 * amount when content is added. Also, the minimum height can 
	 * affect redistribution.
	 */
	minimumHeight: number|string;
	/**
	 * The maximum height to which cells in the Cell may grow. 
	 * Note: The maximum height cannot be exceeded even when auto 
	 * grow is set to true. Also, the maximum height can affect 
	 * redistribution.
	 */
	maximumHeight: number|string;
	/**
	 * If true, keeps the row with the next row when the table is 
	 * split across text frames or pages.
	 */
	keepWithNextRow: boolean;
	/** Indicates where to start the row. */
	startRow: StartParagraph;
	/**
	 * If true, the height of the cell or the cells in the Cell can 
	 * increase or decrease automatically to fit cell content. 
	 * Note: Allows cells to grow or shrink to the maximum or 
	 * minimum height, if specified.
	 */
	autoGrow: boolean;
	/** The row type. */
	rowType: RowTypes;
	/** The content type of cell. */
	cellType: CellTypeEnum;
	/** The left inset of the graphic cell. */
	graphicLeftInset: number|string;
	/** The top inset of the graphic cell. */
	graphicTopInset: number|string;
	/** The right inset of the graphic cell. */
	graphicRightInset: number|string;
	/** The bottom inset of the graphic cell. */
	graphicBottomInset: number|string;
	/**
	 * If true, clips the graphic cell's content to width and 
	 * height of the cell.
	 */
	clipContentToGraphicCell: boolean;
	/** The top inset of the text cell. */
	textTopInset: number|string;
	/** The left inset of the text cell. */
	textLeftInset: number|string;
	/** The bottom inset of the text cell. */
	textBottomInset: number|string;
	/** The right inset of the text cell. */
	textRightInset: number|string;
	/**
	 * If true, clips the text cell's content to width and height 
	 * of the cell.
	 */
	clipContentToTextCell: boolean;
	/**
	 * The cell style applied to the cell. Can also accept: String.
	 */
	appliedCellStyle: CellStyle;
	/** The direction of the text in the cell. */
	writingDirection: HorizontalOrVertical;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/** Recomposes the text in the Cell. */
	recompose(): void;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/** Deletes the Cell. */
	remove(): void;
	/**
	 * Merges the cells.
	 * @param {any} _with - The cell(s) to merge with. Can accept: 
	 * Cell, Row or Column. (Optional)
	 */
	merge(_with: any): Cell;
	/** Unmerges all merged cells in the Cell. */
	unmerge(): Cell;
	/**
	 * Splits the cell along the specified axis.
	 * @param {HorizontalOrVertical} using - The direction in which 
	 * to split the cell.
	 */
	split(using: HorizontalOrVertical): void;
	/**
	 * Convert cell type. The new cell type parameter is required. 
	 * Preserve data is optional
	 * @param {CellTypeEnum} finalCellType - Cell Type to which the 
	 * cell is to be converted
	 * @param {boolean} flagToPreserveData - If true then the data 
	 * inside the cell is preserved. While converting graphic cell 
	 * to text cell, page item becomes inline.  (Optional)
	 */
	convertCellType(finalCellType: CellTypeEnum, flagToPreserveData?: boolean): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Clear Cell Style Overrides
	 * @param {boolean} clearingOverridesThroughRootCellStyle - If 
	 * true, clears all overrides, whether or not they are defined 
	 * in the underlying cell style (Optional)
	 */
	clearCellStyleOverrides(clearingOverridesThroughRootCellStyle?: boolean): void;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Cell in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the Cell.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Cell;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of table cells.
 * @class
 */
export declare class Cells {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Cell. */
	count(): number;
	/**
	 * Returns the Cell with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Cell;
	/**
	 * Returns the Cell with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Cell;
	/**
	 * Returns the Cell with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Cell;
	/**
	 * Returns the Cells within the specified range.
	 * @param {any} _from - The Cell, index, or name at the 
	 * beginning of the range. Can accept: Cell, Long Integer or 
	 * String.
	 * @param {any} to - The Cell, index, or name at the end of the 
	 * range. Can accept: Cell, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Cell;
	/** Returns the first Cell in the collection. */
	firstItem(): Cell;
	/** Returns the last Cell in the collection. */
	lastItem(): Cell;
	/** Returns the middle Cell in the collection. */
	middleItem(): Cell;
	/**
	 * Returns the Cell with the index previous to the specified 
	 * index.
	 * @param {Cell} obj - The index of the Cell that follows the 
	 * desired Cell.
	 */
	previousItem(obj: Cell): Cell;
	/**
	 * Returns the Cell whose index follows the specified Cell in 
	 * the collection.
	 * @param {Cell} obj - The Cell whose index comes before the 
	 * desired Cell.
	 */
	nextItem(obj: Cell): Cell;
	/** Returns any Cell in the collection. */
	anyItem(): Cell;
	/** Returns every Cell in the collection. */
	everyItem(): Cell;
	/**
	 * Generates a string which, if executed, will return the Cell.
	 */
	toSource(): string;
	/**
	 * Returns the Cell with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Cell;
}

/**
 * A table.
 * @class
 */
export declare class Table {
	/** The XML element associated with the Table. */
	readonly associatedXMLElement: XMLItem;
	/**
	 * The insertion point before the table in the story containing 
	 * the table.
	 */
	readonly storyOffset: InsertionPoint;
	/** The index of the Table within its containing object. */
	readonly index: number;
	/** Lists all page items contained by the Table. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Table. */
	readonly allGraphics: Graphic;
	/** The unique ID of the Table. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Table (a XMLElement, XmlStory, TextFrame, 
	 * Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, 
	 * Line, Word, Character, Story or Cell).
	 */
	readonly parent: any;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of table cells. */
	readonly cells: Cells;
	/** A collection of table rows. */
	readonly rows: Rows;
	/** A collection of table columns. */
	readonly columns: Columns;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of changes. */
	readonly changes: Changes;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** The number of header rows. */
	headerRowCount: number;
	/** The number of footer rows. */
	footerRowCount: number;
	/**
	 * The height of the Table. For a table or column, specifies 
	 * the sum of the row heights.
	 */
	height: number|string;
	/**
	 * The width of the Table. For a table or row, specifies the 
	 * sum of the column widths.
	 */
	width: number|string;
	/** The stroke weight of the table's top border stroke. */
	topBorderStrokeWeight: number|string;
	/** The stroke type of the top border. Can also accept: String. */
	topBorderStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch (color, gradient, tint, or 
	 * mixed ink), of the table's top border stroke.
	 */
	topBorderStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the table's top border stroke. 
	 * (Range: 0 to 100)
	 */
	topBorderStrokeTint: number;
	/** If true, the top border strokes will overprint. */
	topBorderStrokeOverprint: boolean;
	/**
	 * The gap color, specified as a swatch (color, gradient, tint, 
	 * or mixed ink), of the table's top border stroke. Note: Valid 
	 * only when top border stroke type is not solid.
	 */
	topBorderStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of the table's 
	 * top border stroke. (Range: 0 to 100) Note: Valid only when 
	 * top border stroke type is not solid.
	 */
	topBorderStrokeGapTint: number;
	/**
	 * If true, the gap of the top border stroke will overprint. 
	 * Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapOverprint: boolean;
	/** The stroke weight of the left border stroke. */
	leftBorderStrokeWeight: number|string;
	/**
	 * The stroke type of the left border. Can also accept: String.
	 */
	leftBorderStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch (color, gradient, tint, or 
	 * mixed ink), of the left border stroke.
	 */
	leftBorderStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the left border stroke. 
	 * (Range: 0 to 100)
	 */
	leftBorderStrokeTint: number;
	/** If true, the left border stroke will overprint. */
	leftBorderStrokeOverprint: boolean;
	/**
	 * The gap color, specified as a swatch (color, gradient, tint, 
	 * or mixed ink), of the left border stroke. Note: Valid only 
	 * when left border stroke type is not solid.
	 */
	leftBorderStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of the left 
	 * border stroke. (Range: 0 to 100) Note: Valid only when left 
	 * border stroke type is not solid.
	 */
	leftBorderStrokeGapTint: number;
	/**
	 * If true, the gap of the left border stroke will overprint. 
	 * Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapOverprint: boolean;
	/** The stroke weight of the bottom border stroke. */
	bottomBorderStrokeWeight: number|string;
	/**
	 * The stroke type of the bottom border. Can also accept: 
	 * String.
	 */
	bottomBorderStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch (color, gradient, tint, or 
	 * mixed ink), of the bottom border stroke.
	 */
	bottomBorderStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the bottom border stroke. 
	 * (Range: 0 to 100)
	 */
	bottomBorderStrokeTint: number;
	/** If true, the bottom border stroke will overprint. */
	bottomBorderStrokeOverprint: boolean;
	/**
	 * The gap color, specified as a swatch (color, gradient, tint, 
	 * or mixed ink), of the bottom border stroke. Note: Valid only 
	 * when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of the bottom 
	 * border stroke. (Range: 0 to 100) Note: Valid only when 
	 * bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapTint: number;
	/**
	 * If true, the gap of the bottom border stroke will overprint. 
	 * Note: Valid only when bottom border stroke type is not 
	 * solid.
	 */
	bottomBorderStrokeGapOverprint: boolean;
	/** The stroke weight of the right border stroke. */
	rightBorderStrokeWeight: number|string;
	/**
	 * The stroke type of the right border. Can also accept: 
	 * String.
	 */
	rightBorderStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch (color, gradient, tint, or 
	 * mixed ink), of the right border stroke.
	 */
	rightBorderStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the right border stroke. 
	 * (Range: 0 to 100)
	 */
	rightBorderStrokeTint: number;
	/** If true, the right border stroke will overprint. */
	rightBorderStrokeOverprint: boolean;
	/**
	 * The gap color, specified as a swatch (color, gradient, tint, 
	 * or mixed ink), of the right border stroke. Note: Valid only 
	 * when right border stroke type is not solid.
	 */
	rightBorderStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of the right 
	 * border stroke. (Range: 0 to 100) Note: Valid only when right 
	 * border stroke type is not solid.
	 */
	rightBorderStrokeGapTint: number;
	/**
	 * If true, the gap color of the right border stroke will 
	 * overprint. Note: Valid only when right border stroke type is 
	 * not solid.
	 */
	rightBorderStrokeGapOverprint: boolean;
	/** The space above the table. */
	spaceBefore: number|string;
	/** The space below the table. */
	spaceAfter: number|string;
	/**
	 * The number of body rows at the beginning of the table in 
	 * which to skip border stroke formatting. Note: Valid when 
	 * start row stroke count is 1 or greater and/or end row stroke 
	 * count is 1 or greater.
	 */
	skipFirstAlternatingStrokeRows: number;
	/**
	 * The number of body rows at the end of the table in which to 
	 * skip border stroke formatting. Note: Valid when start row 
	 * stroke count is 1 or greater and/or end row stroke count is 
	 * 1 or greater.
	 */
	skipLastAlternatingStrokeRows: number;
	/**
	 * The number of rows in the first alternating row strokes 
	 * group.
	 */
	startRowStrokeCount: number;
	/**
	 * The color, specified as a swatch (color, gradient, tint, or 
	 * mixed ink), of row borders in the first alternating row 
	 * strokes group. Note: Valid when start row stroke count is 1 
	 * or greater.
	 */
	startRowStrokeColor: Swatch;
	/**
	 * The stroke weight of row borders in the first alternating 
	 * row strokes group. Note: Valid when start row stroke count 
	 * is 1 or greater.
	 */
	startRowStrokeWeight: number|string;
	/**
	 * The stroke type of rows in the first alternating strokes 
	 * group. Can also accept: String.
	 */
	startRowStrokeType: StrokeStyle;
	/**
	 * The tint (as a percentage) of the borders in the first 
	 * alternating row strokes group. (Range: 0 to 100) Note: Valid 
	 * when start row stroke count is 1 or greater.
	 */
	startRowStrokeTint: number;
	/**
	 * If true, the gap color of the row border stroke in the first 
	 * alternating row strokes group will overprint. Note: Valid 
	 * when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapOverprint: boolean;
	/**
	 * The stroke gap color of row borders in the first alternating 
	 * row strokes group, specified as a swatch (color, gradient, 
	 * tint, or mixed ink). Note: Valid when start row stroke count 
	 * is 1 or greater.
	 */
	startRowStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of row borders 
	 * in the first alternating rows group. (Range: 0 to 100) Note: 
	 * Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapTint: number;
	/**
	 * If true, the row borders in the first alternating row 
	 * strokes group will overprint. Note: Valid when start row 
	 * stroke count is 1 or greater.
	 */
	startRowStrokeOverprint: boolean;
	/**
	 * The number of rows in the second alternating row strokes 
	 * group.
	 */
	endRowStrokeCount: number;
	/**
	 * The stroke color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of row borders in the second 
	 * alternating row strokes group. Note: Valid when end row 
	 * stroke count is 1 or greater.
	 */
	endRowStrokeColor: Swatch;
	/**
	 * The stroke weight of row borders in the second alternating 
	 * row strokes group. Note: Valid when end row stroke count is 
	 * 1 or greater.
	 */
	endRowStrokeWeight: number|string;
	/**
	 * The stroke type of rows in the second alternating strokes 
	 * group. Can also accept: String.
	 */
	endRowStrokeType: StrokeStyle;
	/**
	 * The tint (as a percentage) of the row borders in the second 
	 * alternating strokes group. (Range: 0 to 100) Note: Valid 
	 * when end row stroke count is 1 or greater.
	 */
	endRowStrokeTint: number;
	/**
	 * If true, the rows in the second alternating rows group will 
	 * overprint. Note: Valid when end row stroke count is 1 or 
	 * greater.
	 */
	endRowStrokeOverprint: boolean;
	/**
	 * The gap color, specified as a swatch (color, gradient, tint, 
	 * or mixed ink), of row borders in the second alternating rows 
	 * group. Note: Valid when end row stroke count is 1 or 
	 * greater.
	 */
	endRowStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of rows in the 
	 * second alternating strokes group. (Range: 0 to 100) Note: 
	 * Valid when end row stroke count is 1 or greater and end row 
	 * stroke type is not solid.
	 */
	endRowStrokeGapTint: number;
	/**
	 * If true, the gap of the row borders in the second 
	 * alternating rows group will overprint. Note: Valid when end 
	 * row stroke count is 1 or greater.
	 */
	endRowStrokeGapOverprint: boolean;
	/**
	 * The number of columns on the left of the table in which to 
	 * skip border stroke formatting. Note: Valid when start column 
	 * stroke count is 1 or greater and/or end column stroke count 
	 * is 1 or greater.
	 */
	skipFirstAlternatingStrokeColumns: number;
	/**
	 * The number of columns on the right side of the table in 
	 * which to skip border stroke formatting. Note: Valid when 
	 * start column stroke count is 1 or greater and/or end column 
	 * stroke count is 1 or greater.
	 */
	skipLastAlternatingStrokeColumns: number;
	/**
	 * The number of columns in the first alternating column 
	 * strokes group.
	 */
	startColumnStrokeCount: number;
	/**
	 * The stroke color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of column borders in the first 
	 * alternating column strokes group.
	 */
	startColumnStrokeColor: Swatch;
	/**
	 * The stroke weight of column borders in the first alternating 
	 * column strokes group. Note: Valid when start column stroke 
	 * count is 1 or greater.
	 */
	startColumnStrokeWeight: number|string;
	/**
	 * The stroke type of columns in the first alternating strokes 
	 * group. Can also accept: String.
	 */
	startColumnStrokeType: StrokeStyle;
	/**
	 * The tint (as a percentage) of column borders in the first 
	 * alternating column strokes group. (Range: 0 to 100) Note: 
	 * Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeTint: number;
	/**
	 * If true, the column borders in the first alternating column 
	 * strokes group will overprint. Note: Valid when start column 
	 * stroke count is 1 or greater.
	 */
	startColumnStrokeOverprint: boolean;
	/**
	 * The stroke gap color, specified as a swatch (color, 
	 * gradient, tint, or mixed ink), of column borders in the 
	 * first alternating column strokes group. Note: Valid when 
	 * start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of column 
	 * borders in the first alternating column strokes group. 
	 * (Range: 0 to 100) Note: Valid when start column stroke count 
	 * is 1 or greater.
	 */
	startColumnStrokeGapTint: number;
	/**
	 * If true, the gap of the column borders in the first 
	 * alternating column strokes group will overprint. Note: Valid 
	 * when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapOverprint: boolean;
	/**
	 * The number of columns in the second alternating column 
	 * strokes group.
	 */
	endColumnStrokeCount: number;
	/**
	 * The stroke color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of column borders in the second 
	 * alternating column strokes group. Note: Valid when end 
	 * column stroke count is 1 or greater.
	 */
	endColumnStrokeColor: Swatch;
	/**
	 * The stroke weight of column borders in the second 
	 * alternating column strokes group. Note: Valid when end 
	 * column stroke count is 1 or greater.
	 */
	endColumnStrokeWeight: number|string;
	/**
	 * The stroke type of columns in the second alternating strokes 
	 * group. Can also accept: String.
	 */
	endColumnLineStyle: StrokeStyle;
	/**
	 * The tint (as a percentage) of column borders in the second 
	 * alternating column strokes group. (Range: 0 to 100) Note: 
	 * Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeTint: number;
	/**
	 * If true, the column borders in the second alternating column 
	 * strokes group will overprint. Note: Valid when end column 
	 * stroke count is 1 or greater.
	 */
	endColumnStrokeOverprint: boolean;
	/**
	 * The stroke gap color, specified as a swatch (color, 
	 * gradient, tint, or mixed ink), of column borders in the 
	 * second alternating column strokes group. Note: Valid when 
	 * end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of column 
	 * borders in the second alternating column strokes group. 
	 * (Range: 0 to 100) Note: Valid when end column stroke count 
	 * is 1 or greater.
	 */
	endColumnStrokeGapTint: number;
	/**
	 * If true, the gap of the column border stroke in the second 
	 * alternating column strokes group will overprint. Note: Valid 
	 * when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapOverprint: boolean;
	/**
	 * If true, hides alternating row fills. If false, hides 
	 * alternating column fills.
	 */
	columnFillsPriority: boolean;
	/**
	 * The number of body rows at the beginning of the table to 
	 * skip before applying the row fill color. Note: Valid when 
	 * alternating fills are defined for table rows.
	 */
	skipFirstAlternatingFillRows: number;
	/**
	 * The number of body rows at the end of the table in which to 
	 * not apply the row fill color. Note: Valid when alternating 
	 * fills are defined for table rows.
	 */
	skipLastAlternatingFillRows: number;
	/**
	 * The fill color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of rows in the first alternating fills 
	 * group. Note: Valid when alternating fills are defined for 
	 * table rows.
	 */
	startRowFillColor: Swatch;
	/**
	 * The number of rows in the first alternating fills group. 
	 * Note: Valid when alternating fills are defined for table 
	 * rows.
	 */
	startRowFillCount: number;
	/**
	 * The tint (as a percentage) of the rows in the first 
	 * alternating fills group. (Range: 0 to 100) Note: Valid when 
	 * alternating fills are defined for table rows.
	 */
	startRowFillTint: number;
	/**
	 * If true, the rows in the first alternating fills group will 
	 * overprint. Note: Valid when alternating fills are defined 
	 * for table rows.
	 */
	startRowFillOverprint: boolean;
	/**
	 * The number of rows in the second alternating fills group. 
	 * Note: Valid when alternating fills are defined for table 
	 * rows.
	 */
	endRowFillCount: number;
	/**
	 * The fill color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of rows in the second alternating fills 
	 * group. Note: Valid when alternating fills are defined for 
	 * table rows.
	 */
	endRowFillColor: Swatch;
	/**
	 * The tint (as a percentage) of the rows in the second 
	 * alternating fills group. (Range: 0 to 100) Note: Valid when 
	 * alternating fills are defined for table rows.
	 */
	endRowFillTint: number;
	/**
	 * If true, the rows in the second alternating fills group will 
	 * overprint. Note: Valid when alternating fills are defined 
	 * for table rows.
	 */
	endRowFillOverprint: boolean;
	/**
	 * The number of columns on the left side of the table to skip 
	 * before applying the column fill color. Note: Valid when 
	 * alternating fills are defined for table columns.
	 */
	skipFirstAlternatingFillColumns: number;
	/**
	 * The number columns on the right side of the table in which 
	 * to not apply the column fill color. Note: Valid when 
	 * alternating fills are defined for table columns.
	 */
	skipLastAlternatingFillColumns: number;
	/**
	 * The number of columns in the first alternating fills group. 
	 * Note: Valid when alternating fills are defined for table 
	 * columns.
	 */
	startColumnFillCount: number;
	/**
	 * The fill color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of columns in the first alternating 
	 * fills group. Note: Valid when alternating fills are defined 
	 * for table columns.
	 */
	startColumnFillColor: Swatch;
	/**
	 * The tint (as a percentage) of the columns in the first 
	 * alternating fills group. (Range: 0 to 100) Note: Valid when 
	 * alternating fills are defined for table columns.
	 */
	startColumnFillTint: number;
	/**
	 * If true, the columns in the first alternating fills group 
	 * will overprint. Note: Valid when alternating fills are 
	 * defined for table columns.
	 */
	startColumnFillOverprint: boolean;
	/**
	 * The number of columns in the second alternating fills group. 
	 * Note: Valid when alternating fills are defined for table 
	 * columns.
	 */
	endColumnFillCount: number;
	/**
	 * The fill color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of columns in the second alternating 
	 * fill group. Note: Valid when alternating fills are defined 
	 * for table columns.
	 */
	endColumnFillColor: Swatch;
	/**
	 * The tint (as a percentage) of the columns in the second 
	 * alternating fills group. (Range: 0 to 100) Note: Valid when 
	 * alternating fills are defined for table columns.
	 */
	endColumnFillTint: number;
	/**
	 * If true, the columns in the second alternating fills group 
	 * will overprint. Note: Valid when alternating fills are 
	 * defined for table columns.
	 */
	endColumnFillOverprint: boolean;
	/** The header placement. */
	breakHeaders: HeaderFooterBreakTypes;
	/** The footer placement. */
	breakFooters: HeaderFooterBreakTypes;
	/** If true, skips the first occurrence of header rows. */
	skipFirstHeader: boolean;
	/** If true, skips the last occurrence of footer rows. */
	skipLastFooter: boolean;
	/**
	 * The order in which to display row and column strokes at 
	 * corners.
	 */
	strokeOrder: StrokeOrderTypes;
	/** The pattern for alternating fills. */
	alternatingFills: AlternatingFillsTypes;
	/**
	 * The contents to place in cells, specified as an array whose 
	 * first item populates the top left cell and whose second item 
	 * populates the next cell to the right, and so on until each 
	 * cell in the top row is populated, at which point the next 
	 * item populates the left-most cell in the second row, and so 
	 * on. Note: If the array contains fewer strings than the table 
	 * contains cells, the remaining cells are left blank. Can 
	 * return: Array of Strings or SpecialCharacters enumerators. 
	 * Can also accept: Array of Strings, SpecialCharacters 
	 * enumerators or NothingEnum enumerators.
	 */
	contents: any;
	/** A property that can be set to any string. */
	label: string;
	/** The left inset of the graphic cell. */
	graphicLeftInset: number|string;
	/** The top inset of the graphic cell. */
	graphicTopInset: number|string;
	/** The right inset of the graphic cell. */
	graphicRightInset: number|string;
	/** The bottom inset of the graphic cell. */
	graphicBottomInset: number|string;
	/**
	 * If true, clips the graphic cell's content to width and 
	 * height of the cell.
	 */
	clipContentToGraphicCell: boolean;
	/** The top inset of the text cell. */
	textTopInset: number|string;
	/** The left inset of the text cell. */
	textLeftInset: number|string;
	/** The bottom inset of the text cell. */
	textBottomInset: number|string;
	/** The right inset of the text cell. */
	textRightInset: number|string;
	/**
	 * If true, clips the text cell's content to width and height 
	 * of the cell.
	 */
	clipContentToTextCell: boolean;
	/** The number of body rows. */
	bodyRowCount: number;
	/** The number of columns. */
	columnCount: number;
	/**
	 * The name of the Table; this is an alias to the Table's label 
	 * property.
	 */
	name: string;
	/**
	 * The table style applied to the table. Can also accept: 
	 * String.
	 */
	appliedTableStyle: TableStyle;
	/** The direction of the the table */
	tableDirection: TableDirectionOptions;
	/**
	 * If true, then the table will show collapsed in story and 
	 * galley views.
	 */
	displayCollapsed: boolean;
	/**
	 * Specifies the order the table cells will display in when 
	 * viewing in story and galley views.
	 */
	displayOrder: DisplayOrderOptions;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/** Recomposes the text in the Table. */
	recompose(): void;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/** Deletes the Table. */
	remove(): void;
	/** Unmerges all merged cells in the Table. */
	unmerge(): Cell;
	/**
	 * Converts the table to text.
	 * @param {string} columnSeparator - The character to insert 
	 * between the each column's content in the converted text. 
	 * Note: Can be defined as any single character, such as a 
	 * letter, number, or punctuation mark, or by typing a space or 
	 * tab. Use the actual character rather than its name, such as 
	 * ',' rather than 'Comma'. Precede double or single quotes or 
	 * a backslash with an extra backslash as an escape character. 
	 * For paragraphs, use ^p. (Optional)
	 * @param {string} rowSeparator - The character to use to 
	 * separate each row's content in the converted text. Note: Can 
	 * be defined as any single character, such as a letter, 
	 * number, or punctuation mark, or by typing a space or tab. 
	 * Use the actual character rather than its name, such as , 
	 * rather than Comma. Precede double or single quotes or a 
	 * backslash with an extra backslash as an escape character. 
	 * For paragraphs, use ^p. (Optional)
	 */
	convertToText(columnSeparator: string, rowSeparator: string): Text;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/** Clear Table Style Overrides */
	clearTableStyleOverrides(): void;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Table in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * Table.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Table;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of tables.
 * @class
 */
export declare class Tables {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Table. */
	count(): number;
	/**
	 * Creates a new table.
	 * @param {LocationOptions} to - The location of the new table 
	 * relative to the reference object or within the container 
	 * object.  (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to value specifies before or after. Can 
	 * accept: Table, XMLElement, XmlStory, TextFrame, Text, 
	 * InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, 
	 * Word, Character, Story or Cell. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Table (Optional)
	 */
	add(to?: LocationOptions, reference?: any, withProperties?: Object): Table;
	/**
	 * Returns the Table with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Table;
	/**
	 * Returns the Table with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Table;
	/**
	 * Returns the Table with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Table;
	/**
	 * Returns the Tables within the specified range.
	 * @param {any} _from - The Table, index, or name at the 
	 * beginning of the range. Can accept: Table, Long Integer or 
	 * String.
	 * @param {any} to - The Table, index, or name at the end of 
	 * the range. Can accept: Table, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Table;
	/** Returns the first Table in the collection. */
	firstItem(): Table;
	/** Returns the last Table in the collection. */
	lastItem(): Table;
	/** Returns the middle Table in the collection. */
	middleItem(): Table;
	/**
	 * Returns the Table with the index previous to the specified 
	 * index.
	 * @param {Table} obj - The index of the Table that follows the 
	 * desired Table.
	 */
	previousItem(obj: Table): Table;
	/**
	 * Returns the Table whose index follows the specified Table in 
	 * the collection.
	 * @param {Table} obj - The Table whose index comes before the 
	 * desired Table.
	 */
	nextItem(obj: Table): Table;
	/** Returns any Table in the collection. */
	anyItem(): Table;
	/** Returns every Table in the collection. */
	everyItem(): Table;
	/**
	 * Generates a string which, if executed, will return the 
	 * Table.
	 */
	toSource(): string;
	/**
	 * Returns the Table with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Table;
}

/**
 * A table column.
 * @class
 */
export declare class Column {
	/** The name of the Column. */
	readonly name: string;
	/** The index of the Column within its containing object. */
	readonly index: number;
	/** The number of rows that the object spans. */
	readonly rowSpan: number;
	/** The number of columns that the object spans. */
	readonly columnSpan: number;
	/** If true, the story has overset text. */
	readonly overflows: boolean;
	/** The parent row of the cell. */
	readonly parentRow: Row;
	/** The parent column of the cell. */
	readonly parentColumn: Column;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Column (a Table). */
	readonly parent: Table;
	/** A collection of table cells. */
	readonly cells: Cells;
	/** A collection of table rows. */
	readonly rows: Rows;
	/** A collection of table columns. */
	readonly columns: Columns;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The height of the Column. For a table or column, specifies 
	 * the sum of the row heights.
	 */
	height: number|string;
	/**
	 * The width of the Column. For a table or row, specifies the 
	 * sum of the column widths.
	 */
	width: number|string;
	/**
	 * The text contents. For rows or columns, when specified as a 
	 * string, the sting populates each cell in the row or column; 
	 * when specified as an array, the first value in the array 
	 * populates the left-most cell in the row or the top-most cell 
	 * in the column; the next value populates the next cell to the 
	 * right (for rows) or the next lowest cell (for columns), and 
	 * so on. Can return: PageItem, String, SpecialCharacters 
	 * enumerator or Array of Strings, SpecialCharacters 
	 * enumerators or PageItems. Can also accept: PageItem, 
	 * NothingEnum enumerator or Array of Strings, 
	 * SpecialCharacters enumerators, NothingEnum enumerators or 
	 * PageItems.
	 */
	contents: any;
	/**
	 * The length (of a linear gradient) or radius (of a radial 
	 * gradient) applied to the fill of the object.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * object. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Column, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The top inset of the cell. The API has been deprecated. Use 
	 * TextTopInset or GraphicTopInset
	 * @deprecated
	 */
	topInset: number|string;
	/**
	 * The left inset of the cell.The API has been deprecated. Use 
	 * TextLeftInset or GraphicLeftInset
	 * @deprecated
	 */
	leftInset: number|string;
	/**
	 * The bottom inset of the cell.The API has been deprecated. 
	 * Use TextBottomInset or GraphicBottomInset
	 * @deprecated
	 */
	bottomInset: number|string;
	/**
	 * The right inset of the cell.The API has been deprecated. Use 
	 * TextLeftInset or GraphicRightInset
	 * @deprecated
	 */
	rightInset: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the object. Can also accept: String.
	 */
	fillColor: Swatch;
	/** The tint (as a percentage) of the fill of the object. */
	fillTint: number;
	/** If true, the fill of the object will overprint. */
	overprintFill: boolean;
	/** If true, draws a diagonal line starting from the top left. */
	topLeftDiagonalLine: boolean;
	/** If true, draws a diagonal line starting from the top right. */
	topRightDiagonalLine: boolean;
	/** If true, draws the diagonal line in front of cell contents. */
	diagonalLineInFront: boolean;
	/** The diagonal line stroke weight. */
	diagonalLineStrokeWeight: number|string;
	/**
	 * The stroke type of the diagonal line(s). Can also accept: 
	 * String.
	 */
	diagonalLineStrokeType: StrokeStyle;
	/** The diagonal line color, specified as a swatch. */
	diagonalLineStrokeColor: Swatch;
	/** The diagonal line tint (as a percentage). (Range: 0 to 100) */
	diagonalLineStrokeTint: number;
	/** If true, the diagonal line stroke will overprint. */
	diagonalLineStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the diagonal line stroke. Note: Not valid when 
	 * diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the diagonal line stroke gap 
	 * color. Note: Not valid when diagonal line stroke type is 
	 * solid.
	 */
	diagonalLineStrokeGapTint: number;
	/**
	 * If true, the stroke gap of the diagonal line will overprint. 
	 * Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean;
	/**
	 * If true, clips the cell's content to width and height of the 
	 * cell. The API has been deprecated. Use 
	 * ClipContentsToTextCell or ClipContentsToPageItemCell
	 * @deprecated
	 */
	clipContentToCell: boolean;
	/**
	 * The distance between the baseline of the text and the top 
	 * inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline;
	/** The vertical alignment of cell. */
	verticalJustification: VerticalJustification;
	/**
	 * The maximum space that can be added between paragraphs in a 
	 * cell. Note: Valid only when vertical justification is 
	 * justified.
	 */
	paragraphSpacingLimit: number|string;
	/**
	 * The space between the baseline of the text and the top inset 
	 * of the frame or cell.
	 */
	minimumFirstBaselineOffset: number|string;
	/**
	 * The rotation angle (in degrees) of the cell, specified as 
	 * one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number;
	/** The stroke weight of the left edge border stroke. */
	leftEdgeStrokeWeight: number|string;
	/** The stroke type of the left edge. Can also accept: String. */
	leftEdgeStrokeType: StrokeStyle;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the left edge border stroke. 
	 * (Range: 0 to 100)
	 */
	leftEdgeStrokeTint: number;
	/** If true, the left edge border stroke will overprint. */
	leftEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the left edge border stroke. Note: Not valid when 
	 * left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the left edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when left edge 
	 * stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the left edge border stroke will 
	 * overprint. Note: Not valid when left edge stroke type is 
	 * solid.
	 */
	leftEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the top edge border stroke. */
	topEdgeStrokeWeight: number|string;
	/** The stroke type of the top edge. Can also accept: String. */
	topEdgeStrokeType: StrokeStyle;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the top edge border stroke. 
	 * (Range: 0 to 100)
	 */
	topEdgeStrokeTint: number;
	/** If true, the top edge border stroke will overprint. */
	topEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the top edge border stroke. Note: Not valid when 
	 * top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the top edge border stroke gap 
	 * color. (Range: 0 to 100) Note: Not valid when top edge 
	 * stroke type is solid.
	 */
	topEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the top edge border stroke will 
	 * overprint. Note: Not valid when top edge stroke type is 
	 * solid.
	 */
	topEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the right edge border stroke. */
	rightEdgeStrokeWeight: number|string;
	/** The stroke type of the right edge. Can also accept: String. */
	rightEdgeStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch, of the right edge border 
	 * stroke.
	 */
	rightEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the right edge border stroke. 
	 * (Range: 0 to 100)
	 */
	rightEdgeStrokeTint: number;
	/** If true, the right edge border stroke will overprint. */
	rightEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the right edge border stroke. Note: Not valid 
	 * when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the right edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when right edge 
	 * stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the right edge border stroke will 
	 * overprint. Note: Not valid when right edge stroke type is 
	 * solid.
	 */
	rightEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the bottom edge border stroke. */
	bottomEdgeStrokeWeight: number|string;
	/**
	 * The stroke type of the bottom edge. Can also accept: String.
	 */
	bottomEdgeStrokeType: StrokeStyle;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number;
	/** If true, the bottom edge border stroke will overprint. */
	bottomEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the bottom edge border stroke. Note: Not valid 
	 * when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the bottom edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when bottom 
	 * edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the bottom edge border stroke will 
	 * overprint. Note: Not valid when bottom edge stroke type is 
	 * solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the inner row border strokes. */
	innerRowStrokeWeight: number|string;
	/** The stroke type of the inner row. Can also accept: String. */
	innerRowStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch, of the inner row border 
	 * stroke.
	 */
	innerRowStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner row border stroke. 
	 * (Range: 0 to 100)
	 */
	innerRowStrokeTint: number;
	/** If true, the inner row border stroke will overprint. */
	innerRowStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the inner row border stroke. Note: Not valid when 
	 * inner row stroke type is solid.
	 */
	innerRowStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner row border stroke. 
	 * (Range: 0 to 100) Note: Not valid when inner row stroke type 
	 * is solid.
	 */
	innerRowStrokeGapTint: number;
	/**
	 * If true, the gap color of the inner row border stroke will 
	 * overprint. Note: Not valid when inner row stroke type is 
	 * solid.
	 */
	innerRowStrokeGapOverprint: boolean;
	/** The stroke weight of the inner column border stroke. */
	innerColumnStrokeWeight: number|string;
	/**
	 * The stroke type of the inner column. Can also accept: 
	 * String.
	 */
	innerColumnStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch, of the inner column border 
	 * stroke.
	 */
	innerColumnStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner column border 
	 * stroke. (Range: 0 to 100)
	 */
	innerColumnStrokeTint: number;
	/** If true, the inner column border stroke will overprint. */
	innerColumnStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the inner column border stroke. Note: Not valid 
	 * when inner column stroke type is solid.
	 */
	innerColumnStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner column border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when inner 
	 * column stroke type is solid.
	 */
	innerColumnStrokeGapTint: number;
	/**
	 * If true, the gap color of the inner column border stroke 
	 * will overprint. Note: Not valid when inner column stroke 
	 * type is solid.
	 */
	innerColumnStrokeGapOverprint: boolean;
	/**
	 * The minimum height of the cells in the Column. Note: When 
	 * auto grow is true, cells can automatically grow larger than 
	 * this amount when content is added. Also, the minimum height 
	 * can affect redistribution.
	 */
	minimumHeight: number|string;
	/**
	 * The maximum height to which cells in the Column may grow. 
	 * Note: The maximum height cannot be exceeded even when auto 
	 * grow is set to true. Also, the maximum height can affect 
	 * redistribution.
	 */
	maximumHeight: number|string;
	/**
	 * If true, keeps the row with the next row when the table is 
	 * split across text frames or pages.
	 */
	keepWithNextRow: boolean;
	/** Indicates where to start the row. */
	startRow: StartParagraph;
	/**
	 * If true, the height of the cell or the cells in the Column 
	 * can increase or decrease automatically to fit cell content. 
	 * Note: Allows cells to grow or shrink to the maximum or 
	 * minimum height, if specified.
	 */
	autoGrow: boolean;
	/** The row type. */
	rowType: RowTypes;
	/** The left inset of the graphic cell. */
	graphicLeftInset: number|string;
	/** The top inset of the graphic cell. */
	graphicTopInset: number|string;
	/** The right inset of the graphic cell. */
	graphicRightInset: number|string;
	/** The bottom inset of the graphic cell. */
	graphicBottomInset: number|string;
	/**
	 * If true, clips the graphic cell's content to width and 
	 * height of the cell.
	 */
	clipContentToGraphicCell: boolean;
	/** The top inset of the text cell. */
	textTopInset: number|string;
	/** The left inset of the text cell. */
	textLeftInset: number|string;
	/** The bottom inset of the text cell. */
	textBottomInset: number|string;
	/** The right inset of the text cell. */
	textRightInset: number|string;
	/**
	 * If true, clips the text cell's content to width and height 
	 * of the cell.
	 */
	clipContentToTextCell: boolean;
	/** The direction of the text in the cell. */
	writingDirection: HorizontalOrVertical;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Recomposes the text in the Column. */
	recompose(): void;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/** Deletes the Column. */
	remove(): void;
	/**
	 * Merges the cells.
	 * @param {any} _with - The cell(s) to merge with. Can accept: 
	 * Cell, Row or Column. (Optional)
	 */
	merge(_with: any): Cell;
	/** Unmerges all merged cells in the Column. */
	unmerge(): Cell;
	/**
	 * Splits the cell along the specified axis.
	 * @param {HorizontalOrVertical} using - The direction in which 
	 * to split the cell.
	 */
	split(using: HorizontalOrVertical): void;
	/**
	 * Redistributes the specified range of Columns so that the 
	 * Columns have a uniform size. Note: The maximum or minimum 
	 * height or width specified for some of the cells in the range 
	 * may prevent them from being exactly even.
	 * @param {HorizontalOrVertical} using - The direction in which 
	 * to redistribute.
	 * @param {any} thru - The last Column in the range. Can 
	 * accept: Cell, Column or Row. (Optional)
	 */
	redistribute(using: HorizontalOrVertical, thru: any): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Column in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * Column.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Column;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of table columns.
 * @class
 */
export declare class Columns {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Column.
	 * @param {LocationOptions} at - The Column's location relative 
	 * to the reference object or within the table.  (Optional)
	 * @param {any} reference - The reference object. Note: The 
	 * reference object must be within the table. Required only 
	 * when the at value contains before or after. Can accept: Row, 
	 * Column, Cell or Table. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Column (Optional)
	 */
	add(at?: LocationOptions, reference?: any, withProperties?: Object): any;
	/** Displays the number of elements in the Column. */
	count(): number;
	/**
	 * Returns the Column with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Column;
	/**
	 * Returns the Column with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Column;
	/**
	 * Returns the Columns within the specified range.
	 * @param {any} _from - The Column, index, or name at the 
	 * beginning of the range. Can accept: Column, Long Integer or 
	 * String.
	 * @param {any} to - The Column, index, or name at the end of 
	 * the range. Can accept: Column, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Column;
	/** Returns the first Column in the collection. */
	firstItem(): Column;
	/** Returns the last Column in the collection. */
	lastItem(): Column;
	/** Returns the middle Column in the collection. */
	middleItem(): Column;
	/**
	 * Returns the Column with the index previous to the specified 
	 * index.
	 * @param {Column} obj - The index of the Column that follows 
	 * the desired Column.
	 */
	previousItem(obj: Column): Column;
	/**
	 * Returns the Column whose index follows the specified Column 
	 * in the collection.
	 * @param {Column} obj - The Column whose index comes before 
	 * the desired Column.
	 */
	nextItem(obj: Column): Column;
	/** Returns any Column in the collection. */
	anyItem(): Column;
	/** Returns every Column in the collection. */
	everyItem(): Column;
	/**
	 * Generates a string which, if executed, will return the 
	 * Column.
	 */
	toSource(): string;
	/**
	 * Returns the Column with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Column;
}

/**
 * A table row.
 * @class
 */
export declare class Row {
	/** The name of the Row. */
	readonly name: string;
	/** The index of the Row within its containing object. */
	readonly index: number;
	/** The number of rows that the object spans. */
	readonly rowSpan: number;
	/** The number of columns that the object spans. */
	readonly columnSpan: number;
	/** If true, the story has overset text. */
	readonly overflows: boolean;
	/** The parent row of the cell. */
	readonly parentRow: Row;
	/** The parent column of the cell. */
	readonly parentColumn: Column;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Row (a Table). */
	readonly parent: Table;
	/** A collection of table cells. */
	readonly cells: Cells;
	/** A collection of table rows. */
	readonly rows: Rows;
	/** A collection of table columns. */
	readonly columns: Columns;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The height of the Row. For a table or column, specifies the 
	 * sum of the row heights.
	 */
	height: number|string;
	/**
	 * The width of the Row. For a table or row, specifies the sum 
	 * of the column widths.
	 */
	width: number|string;
	/**
	 * The text contents. For rows or columns, when specified as a 
	 * string, the sting populates each cell in the row or column; 
	 * when specified as an array, the first value in the array 
	 * populates the left-most cell in the row or the top-most cell 
	 * in the column; the next value populates the next cell to the 
	 * right (for rows) or the next lowest cell (for columns), and 
	 * so on. Can return: PageItem, String, SpecialCharacters 
	 * enumerator or Array of Strings, SpecialCharacters 
	 * enumerators or PageItems. Can also accept: PageItem, 
	 * NothingEnum enumerator or Array of Strings, 
	 * SpecialCharacters enumerators, NothingEnum enumerators or 
	 * PageItems.
	 */
	contents: any;
	/**
	 * The length (of a linear gradient) or radius (of a radial 
	 * gradient) applied to the fill of the object.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * object. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the Row, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The top inset of the cell. The API has been deprecated. Use 
	 * TextTopInset or GraphicTopInset
	 * @deprecated
	 */
	topInset: number|string;
	/**
	 * The left inset of the cell.The API has been deprecated. Use 
	 * TextLeftInset or GraphicLeftInset
	 * @deprecated
	 */
	leftInset: number|string;
	/**
	 * The bottom inset of the cell.The API has been deprecated. 
	 * Use TextBottomInset or GraphicBottomInset
	 * @deprecated
	 */
	bottomInset: number|string;
	/**
	 * The right inset of the cell.The API has been deprecated. Use 
	 * TextLeftInset or GraphicRightInset
	 * @deprecated
	 */
	rightInset: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the object. Can also accept: String.
	 */
	fillColor: Swatch;
	/** The tint (as a percentage) of the fill of the object. */
	fillTint: number;
	/** If true, the fill of the object will overprint. */
	overprintFill: boolean;
	/** If true, draws a diagonal line starting from the top left. */
	topLeftDiagonalLine: boolean;
	/** If true, draws a diagonal line starting from the top right. */
	topRightDiagonalLine: boolean;
	/** If true, draws the diagonal line in front of cell contents. */
	diagonalLineInFront: boolean;
	/** The diagonal line stroke weight. */
	diagonalLineStrokeWeight: number|string;
	/**
	 * The stroke type of the diagonal line(s). Can also accept: 
	 * String.
	 */
	diagonalLineStrokeType: StrokeStyle;
	/** The diagonal line color, specified as a swatch. */
	diagonalLineStrokeColor: Swatch;
	/** The diagonal line tint (as a percentage). (Range: 0 to 100) */
	diagonalLineStrokeTint: number;
	/** If true, the diagonal line stroke will overprint. */
	diagonalLineStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the diagonal line stroke. Note: Not valid when 
	 * diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the diagonal line stroke gap 
	 * color. Note: Not valid when diagonal line stroke type is 
	 * solid.
	 */
	diagonalLineStrokeGapTint: number;
	/**
	 * If true, the stroke gap of the diagonal line will overprint. 
	 * Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean;
	/**
	 * If true, clips the cell's content to width and height of the 
	 * cell. The API has been deprecated. Use 
	 * ClipContentsToTextCell or ClipContentsToPageItemCell
	 * @deprecated
	 */
	clipContentToCell: boolean;
	/**
	 * The distance between the baseline of the text and the top 
	 * inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline;
	/** The vertical alignment of cell. */
	verticalJustification: VerticalJustification;
	/**
	 * The maximum space that can be added between paragraphs in a 
	 * cell. Note: Valid only when vertical justification is 
	 * justified.
	 */
	paragraphSpacingLimit: number|string;
	/**
	 * The space between the baseline of the text and the top inset 
	 * of the frame or cell.
	 */
	minimumFirstBaselineOffset: number|string;
	/**
	 * The rotation angle (in degrees) of the cell, specified as 
	 * one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number;
	/** The stroke weight of the left edge border stroke. */
	leftEdgeStrokeWeight: number|string;
	/** The stroke type of the left edge. Can also accept: String. */
	leftEdgeStrokeType: StrokeStyle;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the left edge border stroke. 
	 * (Range: 0 to 100)
	 */
	leftEdgeStrokeTint: number;
	/** If true, the left edge border stroke will overprint. */
	leftEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the left edge border stroke. Note: Not valid when 
	 * left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the left edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when left edge 
	 * stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the left edge border stroke will 
	 * overprint. Note: Not valid when left edge stroke type is 
	 * solid.
	 */
	leftEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the top edge border stroke. */
	topEdgeStrokeWeight: number|string;
	/** The stroke type of the top edge. Can also accept: String. */
	topEdgeStrokeType: StrokeStyle;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the top edge border stroke. 
	 * (Range: 0 to 100)
	 */
	topEdgeStrokeTint: number;
	/** If true, the top edge border stroke will overprint. */
	topEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the top edge border stroke. Note: Not valid when 
	 * top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the top edge border stroke gap 
	 * color. (Range: 0 to 100) Note: Not valid when top edge 
	 * stroke type is solid.
	 */
	topEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the top edge border stroke will 
	 * overprint. Note: Not valid when top edge stroke type is 
	 * solid.
	 */
	topEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the right edge border stroke. */
	rightEdgeStrokeWeight: number|string;
	/** The stroke type of the right edge. Can also accept: String. */
	rightEdgeStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch, of the right edge border 
	 * stroke.
	 */
	rightEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the right edge border stroke. 
	 * (Range: 0 to 100)
	 */
	rightEdgeStrokeTint: number;
	/** If true, the right edge border stroke will overprint. */
	rightEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the right edge border stroke. Note: Not valid 
	 * when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the right edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when right edge 
	 * stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the right edge border stroke will 
	 * overprint. Note: Not valid when right edge stroke type is 
	 * solid.
	 */
	rightEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the bottom edge border stroke. */
	bottomEdgeStrokeWeight: number|string;
	/**
	 * The stroke type of the bottom edge. Can also accept: String.
	 */
	bottomEdgeStrokeType: StrokeStyle;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number;
	/** If true, the bottom edge border stroke will overprint. */
	bottomEdgeStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the bottom edge border stroke. Note: Not valid 
	 * when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the bottom edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when bottom 
	 * edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number;
	/**
	 * If true, the gap color of the bottom edge border stroke will 
	 * overprint. Note: Not valid when bottom edge stroke type is 
	 * solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean;
	/** The stroke weight of the inner row border strokes. */
	innerRowStrokeWeight: number|string;
	/** The stroke type of the inner row. Can also accept: String. */
	innerRowStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch, of the inner row border 
	 * stroke.
	 */
	innerRowStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner row border stroke. 
	 * (Range: 0 to 100)
	 */
	innerRowStrokeTint: number;
	/** If true, the inner row border stroke will overprint. */
	innerRowStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the inner row border stroke. Note: Not valid when 
	 * inner row stroke type is solid.
	 */
	innerRowStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner row border stroke. 
	 * (Range: 0 to 100) Note: Not valid when inner row stroke type 
	 * is solid.
	 */
	innerRowStrokeGapTint: number;
	/**
	 * If true, the gap color of the inner row border stroke will 
	 * overprint. Note: Not valid when inner row stroke type is 
	 * solid.
	 */
	innerRowStrokeGapOverprint: boolean;
	/** The stroke weight of the inner column border stroke. */
	innerColumnStrokeWeight: number|string;
	/**
	 * The stroke type of the inner column. Can also accept: 
	 * String.
	 */
	innerColumnStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch, of the inner column border 
	 * stroke.
	 */
	innerColumnStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner column border 
	 * stroke. (Range: 0 to 100)
	 */
	innerColumnStrokeTint: number;
	/** If true, the inner column border stroke will overprint. */
	innerColumnStrokeOverprint: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the inner column border stroke. Note: Not valid 
	 * when inner column stroke type is solid.
	 */
	innerColumnStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the inner column border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when inner 
	 * column stroke type is solid.
	 */
	innerColumnStrokeGapTint: number;
	/**
	 * If true, the gap color of the inner column border stroke 
	 * will overprint. Note: Not valid when inner column stroke 
	 * type is solid.
	 */
	innerColumnStrokeGapOverprint: boolean;
	/**
	 * The minimum height of the cells in the Row. Note: When auto 
	 * grow is true, cells can automatically grow larger than this 
	 * amount when content is added. Also, the minimum height can 
	 * affect redistribution.
	 */
	minimumHeight: number|string;
	/**
	 * The maximum height to which cells in the Row may grow. Note: 
	 * The maximum height cannot be exceeded even when auto grow is 
	 * set to true. Also, the maximum height can affect 
	 * redistribution.
	 */
	maximumHeight: number|string;
	/**
	 * If true, keeps the row with the next row when the table is 
	 * split across text frames or pages.
	 */
	keepWithNextRow: boolean;
	/** Indicates where to start the row. */
	startRow: StartParagraph;
	/**
	 * If true, the height of the cell or the cells in the Row can 
	 * increase or decrease automatically to fit cell content. 
	 * Note: Allows cells to grow or shrink to the maximum or 
	 * minimum height, if specified.
	 */
	autoGrow: boolean;
	/** The row type. */
	rowType: RowTypes;
	/** The left inset of the graphic cell. */
	graphicLeftInset: number|string;
	/** The top inset of the graphic cell. */
	graphicTopInset: number|string;
	/** The right inset of the graphic cell. */
	graphicRightInset: number|string;
	/** The bottom inset of the graphic cell. */
	graphicBottomInset: number|string;
	/**
	 * If true, clips the graphic cell's content to width and 
	 * height of the cell.
	 */
	clipContentToGraphicCell: boolean;
	/** The top inset of the text cell. */
	textTopInset: number|string;
	/** The left inset of the text cell. */
	textLeftInset: number|string;
	/** The bottom inset of the text cell. */
	textBottomInset: number|string;
	/** The right inset of the text cell. */
	textRightInset: number|string;
	/**
	 * If true, clips the text cell's content to width and height 
	 * of the cell.
	 */
	clipContentToTextCell: boolean;
	/** The direction of the text in the cell. */
	writingDirection: HorizontalOrVertical;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Recomposes the text in the Row. */
	recompose(): void;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/** Deletes the Row. */
	remove(): void;
	/**
	 * Merges the cells.
	 * @param {any} _with - The cell(s) to merge with. Can accept: 
	 * Cell, Row or Column. (Optional)
	 */
	merge(_with: any): Cell;
	/** Unmerges all merged cells in the Row. */
	unmerge(): Cell;
	/**
	 * Splits the cell along the specified axis.
	 * @param {HorizontalOrVertical} using - The direction in which 
	 * to split the cell.
	 */
	split(using: HorizontalOrVertical): void;
	/**
	 * Redistributes the specified range of Rows so that the Rows 
	 * have a uniform size. Note: The maximum or minimum height or 
	 * width specified for some of the cells in the range may 
	 * prevent them from being exactly even.
	 * @param {HorizontalOrVertical} using - The direction in which 
	 * to redistribute.
	 * @param {any} thru - The last Row in the range. Can accept: 
	 * Cell, Column or Row. (Optional)
	 */
	redistribute(using: HorizontalOrVertical, thru: any): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Row in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/** Generates a string which, if executed, will return the Row. */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Row;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of table rows.
 * @class
 */
export declare class Rows {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Row.
	 * @param {LocationOptions} at - The Row's location relative to 
	 * the reference object or within the table.  (Optional)
	 * @param {any} reference - The reference object. Note: The 
	 * reference object must be within the table. Required only 
	 * when the at value contains before or after. Can accept: Row, 
	 * Column, Cell or Table. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Row (Optional)
	 */
	add(at?: LocationOptions, reference?: any, withProperties?: Object): any;
	/** Displays the number of elements in the Row. */
	count(): number;
	/**
	 * Returns the Row with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Row;
	/**
	 * Returns the Row with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Row;
	/**
	 * Returns the Rows within the specified range.
	 * @param {any} _from - The Row, index, or name at the 
	 * beginning of the range. Can accept: Row, Long Integer or 
	 * String.
	 * @param {any} to - The Row, index, or name at the end of the 
	 * range. Can accept: Row, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Row;
	/** Returns the first Row in the collection. */
	firstItem(): Row;
	/** Returns the last Row in the collection. */
	lastItem(): Row;
	/** Returns the middle Row in the collection. */
	middleItem(): Row;
	/**
	 * Returns the Row with the index previous to the specified 
	 * index.
	 * @param {Row} obj - The index of the Row that follows the 
	 * desired Row.
	 */
	previousItem(obj: Row): Row;
	/**
	 * Returns the Row whose index follows the specified Row in the 
	 * collection.
	 * @param {Row} obj - The Row whose index comes before the 
	 * desired Row.
	 */
	nextItem(obj: Row): Row;
	/** Returns any Row in the collection. */
	anyItem(): Row;
	/** Returns every Row in the collection. */
	everyItem(): Row;
	/** Generates a string which, if executed, will return the Row. */
	toSource(): string;
	/**
	 * Returns the Row with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Row;
}

/**
 * A table style.
 * @class
 */
export declare class TableStyle {
	/** The unique ID of the TableStyle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TableStyle (a Document, Application or 
	 * TableStyleGroup).
	 */
	readonly parent: any;
	/** The index of the TableStyle within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The left inset of the graphic cell. */
	graphicLeftInset: number|string;
	/** The top inset of the graphic cell. */
	graphicTopInset: number|string;
	/** The right inset of the graphic cell. */
	graphicRightInset: number|string;
	/** The bottom inset of the graphic cell. */
	graphicBottomInset: number|string;
	/**
	 * If true, clips the graphic cell's content to width and 
	 * height of the cell.
	 */
	clipContentToGraphicCell: boolean;
	/** The top inset of the text cell. */
	textTopInset: number|string;
	/** The left inset of the text cell. */
	textLeftInset: number|string;
	/** The bottom inset of the text cell. */
	textBottomInset: number|string;
	/** The right inset of the text cell. */
	textRightInset: number|string;
	/**
	 * If true, clips the text cell's content to width and height 
	 * of the cell.
	 */
	clipContentToTextCell: boolean;
	/** The name of the TableStyle. */
	name: string;
	/**
	 * The style that this style is based on. Can return: 
	 * TableStyle or String.
	 */
	basedOn: any;
	/**
	 * The order in which to display row and column strokes at 
	 * corners.
	 */
	strokeOrder: StrokeOrderTypes;
	/** The stroke weight of the table's top border stroke. */
	topBorderStrokeWeight: number|string;
	/** The stroke type of the top border. Can also accept: String. */
	topBorderStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch (color, gradient, tint, or 
	 * mixed ink), of the table's top border stroke.
	 */
	topBorderStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the table's top border stroke. 
	 * (Range: 0 to 100)
	 */
	topBorderStrokeTint: number;
	/** If true, the top border strokes will overprint. */
	topBorderStrokeOverprint: boolean;
	/**
	 * The gap color, specified as a swatch (color, gradient, tint, 
	 * or mixed ink), of the table's top border stroke. Note: Valid 
	 * only when top border stroke type is not solid.
	 */
	topBorderStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of the table's 
	 * top border stroke. (Range: 0 to 100) Note: Valid only when 
	 * top border stroke type is not solid.
	 */
	topBorderStrokeGapTint: number;
	/**
	 * If true, the gap of the top border stroke will overprint. 
	 * Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapOverprint: boolean;
	/** The stroke weight of the left border stroke. */
	leftBorderStrokeWeight: number|string;
	/**
	 * The stroke type of the left border. Can also accept: String.
	 */
	leftBorderStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch (color, gradient, tint, or 
	 * mixed ink), of the left border stroke.
	 */
	leftBorderStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the left border stroke. 
	 * (Range: 0 to 100)
	 */
	leftBorderStrokeTint: number;
	/** If true, the left border stroke will overprint. */
	leftBorderStrokeOverprint: boolean;
	/**
	 * The gap color, specified as a swatch (color, gradient, tint, 
	 * or mixed ink), of the left border stroke. Note: Valid only 
	 * when left border stroke type is not solid.
	 */
	leftBorderStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of the left 
	 * border stroke. (Range: 0 to 100) Note: Valid only when left 
	 * border stroke type is not solid.
	 */
	leftBorderStrokeGapTint: number;
	/**
	 * If true, the gap of the left border stroke will overprint. 
	 * Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapOverprint: boolean;
	/** The stroke weight of the bottom border stroke. */
	bottomBorderStrokeWeight: number|string;
	/**
	 * The stroke type of the bottom border. Can also accept: 
	 * String.
	 */
	bottomBorderStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch (color, gradient, tint, or 
	 * mixed ink), of the bottom border stroke.
	 */
	bottomBorderStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the bottom border stroke. 
	 * (Range: 0 to 100)
	 */
	bottomBorderStrokeTint: number;
	/** If true, the bottom border stroke will overprint. */
	bottomBorderStrokeOverprint: boolean;
	/**
	 * The gap color, specified as a swatch (color, gradient, tint, 
	 * or mixed ink), of the bottom border stroke. Note: Valid only 
	 * when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of the bottom 
	 * border stroke. (Range: 0 to 100) Note: Valid only when 
	 * bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapTint: number;
	/**
	 * If true, the gap of the bottom border stroke will overprint. 
	 * Note: Valid only when bottom border stroke type is not 
	 * solid.
	 */
	bottomBorderStrokeGapOverprint: boolean;
	/** The stroke weight of the right border stroke. */
	rightBorderStrokeWeight: number|string;
	/**
	 * The stroke type of the right border. Can also accept: 
	 * String.
	 */
	rightBorderStrokeType: StrokeStyle;
	/**
	 * The color, specified as a swatch (color, gradient, tint, or 
	 * mixed ink), of the right border stroke.
	 */
	rightBorderStrokeColor: Swatch;
	/**
	 * The tint (as a percentage) of the right border stroke. 
	 * (Range: 0 to 100)
	 */
	rightBorderStrokeTint: number;
	/** If true, the right border stroke will overprint. */
	rightBorderStrokeOverprint: boolean;
	/**
	 * The gap color, specified as a swatch (color, gradient, tint, 
	 * or mixed ink), of the right border stroke. Note: Valid only 
	 * when right border stroke type is not solid.
	 */
	rightBorderStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of the right 
	 * border stroke. (Range: 0 to 100) Note: Valid only when right 
	 * border stroke type is not solid.
	 */
	rightBorderStrokeGapTint: number;
	/**
	 * If true, the gap color of the right border stroke will 
	 * overprint. Note: Valid only when right border stroke type is 
	 * not solid.
	 */
	rightBorderStrokeGapOverprint: boolean;
	/** The space above the table. */
	spaceBefore: number|string;
	/** The space below the table. */
	spaceAfter: number|string;
	/**
	 * The number of body rows at the beginning of the table in 
	 * which to skip border stroke formatting. Note: Valid when 
	 * start row stroke count is 1 or greater and/or end row stroke 
	 * count is 1 or greater.
	 */
	skipFirstAlternatingStrokeRows: number;
	/**
	 * The number of body rows at the end of the table in which to 
	 * skip border stroke formatting. Note: Valid when start row 
	 * stroke count is 1 or greater and/or end row stroke count is 
	 * 1 or greater.
	 */
	skipLastAlternatingStrokeRows: number;
	/**
	 * The number of rows in the first alternating row strokes 
	 * group.
	 */
	startRowStrokeCount: number;
	/**
	 * The color, specified as a swatch (color, gradient, tint, or 
	 * mixed ink), of row borders in the first alternating row 
	 * strokes group. Note: Valid when start row stroke count is 1 
	 * or greater.
	 */
	startRowStrokeColor: Swatch;
	/**
	 * The stroke weight of row borders in the first alternating 
	 * row strokes group. Note: Valid when start row stroke count 
	 * is 1 or greater.
	 */
	startRowStrokeWeight: number|string;
	/**
	 * The stroke type of rows in the first alternating strokes 
	 * group. Can also accept: String.
	 */
	startRowStrokeType: StrokeStyle;
	/**
	 * The tint (as a percentage) of the borders in the first 
	 * alternating row strokes group. (Range: 0 to 100) Note: Valid 
	 * when start row stroke count is 1 or greater.
	 */
	startRowStrokeTint: number;
	/**
	 * If true, the gap color of the row border stroke in the first 
	 * alternating row strokes group will overprint. Note: Valid 
	 * when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapOverprint: boolean;
	/**
	 * The stroke gap color of row borders in the first alternating 
	 * row strokes group, specified as a swatch (color, gradient, 
	 * tint, or mixed ink). Note: Valid when start row stroke count 
	 * is 1 or greater.
	 */
	startRowStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of row borders 
	 * in the first alternating rows group. (Range: 0 to 100) Note: 
	 * Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapTint: number;
	/**
	 * If true, the row borders in the first alternating row 
	 * strokes group will overprint. Note: Valid when start row 
	 * stroke count is 1 or greater.
	 */
	startRowStrokeOverprint: boolean;
	/**
	 * The number of rows in the second alternating row strokes 
	 * group.
	 */
	endRowStrokeCount: number;
	/**
	 * The stroke color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of row borders in the second 
	 * alternating row strokes group. Note: Valid when end row 
	 * stroke count is 1 or greater.
	 */
	endRowStrokeColor: Swatch;
	/**
	 * The stroke weight of row borders in the second alternating 
	 * row strokes group. Note: Valid when end row stroke count is 
	 * 1 or greater.
	 */
	endRowStrokeWeight: number|string;
	/**
	 * The stroke type of rows in the second alternating strokes 
	 * group. Can also accept: String.
	 */
	endRowStrokeType: StrokeStyle;
	/**
	 * The tint (as a percentage) of the row borders in the second 
	 * alternating strokes group. (Range: 0 to 100) Note: Valid 
	 * when end row stroke count is 1 or greater.
	 */
	endRowStrokeTint: number;
	/**
	 * If true, the rows in the second alternating rows group will 
	 * overprint. Note: Valid when end row stroke count is 1 or 
	 * greater.
	 */
	endRowStrokeOverprint: boolean;
	/**
	 * The gap color, specified as a swatch (color, gradient, tint, 
	 * or mixed ink), of row borders in the second alternating rows 
	 * group. Note: Valid when end row stroke count is 1 or 
	 * greater.
	 */
	endRowStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of rows in the 
	 * second alternating strokes group. (Range: 0 to 100) Note: 
	 * Valid when end row stroke count is 1 or greater and end row 
	 * stroke type is not solid.
	 */
	endRowStrokeGapTint: number;
	/**
	 * If true, the gap of the row borders in the second 
	 * alternating rows group will overprint. Note: Valid when end 
	 * row stroke count is 1 or greater.
	 */
	endRowStrokeGapOverprint: boolean;
	/**
	 * The number of columns on the left of the table in which to 
	 * skip border stroke formatting. Note: Valid when start column 
	 * stroke count is 1 or greater and/or end column stroke count 
	 * is 1 or greater.
	 */
	skipFirstAlternatingStrokeColumns: number;
	/**
	 * The number of columns on the right side of the table in 
	 * which to skip border stroke formatting. Note: Valid when 
	 * start column stroke count is 1 or greater and/or end column 
	 * stroke count is 1 or greater.
	 */
	skipLastAlternatingStrokeColumns: number;
	/**
	 * The number of columns in the first alternating column 
	 * strokes group.
	 */
	startColumnStrokeCount: number;
	/**
	 * The stroke color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of column borders in the first 
	 * alternating column strokes group.
	 */
	startColumnStrokeColor: Swatch;
	/**
	 * The stroke weight of column borders in the first alternating 
	 * column strokes group. Note: Valid when start column stroke 
	 * count is 1 or greater.
	 */
	startColumnStrokeWeight: number|string;
	/**
	 * The stroke type of columns in the first alternating strokes 
	 * group. Can also accept: String.
	 */
	startColumnStrokeType: StrokeStyle;
	/**
	 * The tint (as a percentage) of column borders in the first 
	 * alternating column strokes group. (Range: 0 to 100) Note: 
	 * Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeTint: number;
	/**
	 * If true, the column borders in the first alternating column 
	 * strokes group will overprint. Note: Valid when start column 
	 * stroke count is 1 or greater.
	 */
	startColumnStrokeOverprint: boolean;
	/**
	 * The stroke gap color, specified as a swatch (color, 
	 * gradient, tint, or mixed ink), of column borders in the 
	 * first alternating column strokes group. Note: Valid when 
	 * start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of column 
	 * borders in the first alternating column strokes group. 
	 * (Range: 0 to 100) Note: Valid when start column stroke count 
	 * is 1 or greater.
	 */
	startColumnStrokeGapTint: number;
	/**
	 * If true, the gap of the column borders in the first 
	 * alternating column strokes group will overprint. Note: Valid 
	 * when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapOverprint: boolean;
	/**
	 * The number of columns in the second alternating column 
	 * strokes group.
	 */
	endColumnStrokeCount: number;
	/**
	 * The stroke color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of column borders in the second 
	 * alternating column strokes group. Note: Valid when end 
	 * column stroke count is 1 or greater.
	 */
	endColumnStrokeColor: Swatch;
	/**
	 * The stroke weight of column borders in the second 
	 * alternating column strokes group. Note: Valid when end 
	 * column stroke count is 1 or greater.
	 */
	endColumnStrokeWeight: number|string;
	/**
	 * The stroke type of columns in the second alternating strokes 
	 * group. Can also accept: String.
	 */
	endColumnLineStyle: StrokeStyle;
	/**
	 * The tint (as a percentage) of column borders in the second 
	 * alternating column strokes group. (Range: 0 to 100) Note: 
	 * Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeTint: number;
	/**
	 * If true, the column borders in the second alternating column 
	 * strokes group will overprint. Note: Valid when end column 
	 * stroke count is 1 or greater.
	 */
	endColumnStrokeOverprint: boolean;
	/**
	 * The stroke gap color, specified as a swatch (color, 
	 * gradient, tint, or mixed ink), of column borders in the 
	 * second alternating column strokes group. Note: Valid when 
	 * end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapColor: Swatch;
	/**
	 * The tint (as a percentage) of the gap color of column 
	 * borders in the second alternating column strokes group. 
	 * (Range: 0 to 100) Note: Valid when end column stroke count 
	 * is 1 or greater.
	 */
	endColumnStrokeGapTint: number;
	/**
	 * If true, the gap of the column border stroke in the second 
	 * alternating column strokes group will overprint. Note: Valid 
	 * when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapOverprint: boolean;
	/**
	 * If true, hides alternating row fills. If false, hides 
	 * alternating column fills.
	 */
	columnFillsPriority: boolean;
	/**
	 * The number of body rows at the beginning of the table to 
	 * skip before applying the row fill color. Note: Valid when 
	 * alternating fills are defined for table rows.
	 */
	skipFirstAlternatingFillRows: number;
	/**
	 * The number of body rows at the end of the table in which to 
	 * not apply the row fill color. Note: Valid when alternating 
	 * fills are defined for table rows.
	 */
	skipLastAlternatingFillRows: number;
	/**
	 * The fill color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of rows in the first alternating fills 
	 * group. Note: Valid when alternating fills are defined for 
	 * table rows.
	 */
	startRowFillColor: Swatch;
	/**
	 * The number of rows in the first alternating fills group. 
	 * Note: Valid when alternating fills are defined for table 
	 * rows.
	 */
	startRowFillCount: number;
	/**
	 * The tint (as a percentage) of the rows in the first 
	 * alternating fills group. (Range: 0 to 100) Note: Valid when 
	 * alternating fills are defined for table rows.
	 */
	startRowFillTint: number;
	/**
	 * If true, the rows in the first alternating fills group will 
	 * overprint. Note: Valid when alternating fills are defined 
	 * for table rows.
	 */
	startRowFillOverprint: boolean;
	/**
	 * The number of rows in the second alternating fills group. 
	 * Note: Valid when alternating fills are defined for table 
	 * rows.
	 */
	endRowFillCount: number;
	/**
	 * The fill color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of rows in the second alternating fills 
	 * group. Note: Valid when alternating fills are defined for 
	 * table rows.
	 */
	endRowFillColor: Swatch;
	/**
	 * The tint (as a percentage) of the rows in the second 
	 * alternating fills group. (Range: 0 to 100) Note: Valid when 
	 * alternating fills are defined for table rows.
	 */
	endRowFillTint: number;
	/**
	 * If true, the rows in the second alternating fills group will 
	 * overprint. Note: Valid when alternating fills are defined 
	 * for table rows.
	 */
	endRowFillOverprint: boolean;
	/**
	 * The number of columns on the left side of the table to skip 
	 * before applying the column fill color. Note: Valid when 
	 * alternating fills are defined for table columns.
	 */
	skipFirstAlternatingFillColumns: number;
	/**
	 * The number columns on the right side of the table in which 
	 * to not apply the column fill color. Note: Valid when 
	 * alternating fills are defined for table columns.
	 */
	skipLastAlternatingFillColumns: number;
	/**
	 * The number of columns in the first alternating fills group. 
	 * Note: Valid when alternating fills are defined for table 
	 * columns.
	 */
	startColumnFillCount: number;
	/**
	 * The fill color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of columns in the first alternating 
	 * fills group. Note: Valid when alternating fills are defined 
	 * for table columns.
	 */
	startColumnFillColor: Swatch;
	/**
	 * The tint (as a percentage) of the columns in the first 
	 * alternating fills group. (Range: 0 to 100) Note: Valid when 
	 * alternating fills are defined for table columns.
	 */
	startColumnFillTint: number;
	/**
	 * If true, the columns in the first alternating fills group 
	 * will overprint. Note: Valid when alternating fills are 
	 * defined for table columns.
	 */
	startColumnFillOverprint: boolean;
	/**
	 * The number of columns in the second alternating fills group. 
	 * Note: Valid when alternating fills are defined for table 
	 * columns.
	 */
	endColumnFillCount: number;
	/**
	 * The fill color, specified as a swatch (color, gradient, 
	 * tint, or mixed ink), of columns in the second alternating 
	 * fill group. Note: Valid when alternating fills are defined 
	 * for table columns.
	 */
	endColumnFillColor: Swatch;
	/**
	 * The tint (as a percentage) of the columns in the second 
	 * alternating fills group. (Range: 0 to 100) Note: Valid when 
	 * alternating fills are defined for table columns.
	 */
	endColumnFillTint: number;
	/**
	 * If true, the columns in the second alternating fills group 
	 * will overprint. Note: Valid when alternating fills are 
	 * defined for table columns.
	 */
	endColumnFillOverprint: boolean;
	/**
	 * If true, use the cell style of the body region for the 
	 * header region.
	 */
	headerRegionSameAsBodyRegion: boolean;
	/**
	 * If true, uses the cell style of the body region for the 
	 * footer region.
	 */
	footerRegionSameAsBodyRegion: boolean;
	/**
	 * If true, uses the cell style of the body region for the left 
	 * column region.
	 */
	leftColumnRegionSameAsBodyRegion: boolean;
	/**
	 * If true, uses the cell style of the body region for the 
	 * right column region.
	 */
	rightColumnRegionSameAsBodyRegion: boolean;
	/**
	 * The cell style of the header region. Can also accept: 
	 * String.
	 */
	headerRegionCellStyle: CellStyle;
	/**
	 * The cell style of the footer region. Can also accept: 
	 * String.
	 */
	footerRegionCellStyle: CellStyle;
	/**
	 * The cell style of the left column region. Can also accept: 
	 * String.
	 */
	leftColumnRegionCellStyle: CellStyle;
	/**
	 * The cell style of the right column region. Can also accept: 
	 * String.
	 */
	rightColumnRegionCellStyle: CellStyle;
	/** The cell style of the body region. Can also accept: String. */
	bodyRegionCellStyle: CellStyle;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the style.
	 * @param {TableStyle} replacingWith - The style to apply in 
	 * place of the deleted style. (Optional)
	 */
	remove(replacingWith: TableStyle): void;
	/** Duplicates the TableStyle. */
	duplicate(): TableStyle;
	/**
	 * Moves the style to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: ParagraphStyle, ParagraphStyleGroup, 
	 * CharacterStyle, CharacterStyleGroup, CellStyle, 
	 * CellStyleGroup, TableStyle, TableStyleGroup, Document or 
	 * Application. (Optional)
	 */
	move(to: LocationOptions, reference: any): TableStyle;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * TableStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TableStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of table styles.
 * @class
 */
export declare class TableStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new TableStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TableStyle (Optional)
	 */
	add(withProperties: Object): TableStyle;
	/** Displays the number of elements in the TableStyle. */
	count(): number;
	/**
	 * Returns the TableStyle with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TableStyle;
	/**
	 * Returns the TableStyle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TableStyle;
	/**
	 * Returns the TableStyle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): TableStyle;
	/**
	 * Returns the TableStyles within the specified range.
	 * @param {any} _from - The TableStyle, index, or name at the 
	 * beginning of the range. Can accept: TableStyle, Long Integer 
	 * or String.
	 * @param {any} to - The TableStyle, index, or name at the end 
	 * of the range. Can accept: TableStyle, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): TableStyle;
	/** Returns the first TableStyle in the collection. */
	firstItem(): TableStyle;
	/** Returns the last TableStyle in the collection. */
	lastItem(): TableStyle;
	/** Returns the middle TableStyle in the collection. */
	middleItem(): TableStyle;
	/**
	 * Returns the TableStyle with the index previous to the 
	 * specified index.
	 * @param {TableStyle} obj - The index of the TableStyle that 
	 * follows the desired TableStyle.
	 */
	previousItem(obj: TableStyle): TableStyle;
	/**
	 * Returns the TableStyle whose index follows the specified 
	 * TableStyle in the collection.
	 * @param {TableStyle} obj - The TableStyle whose index comes 
	 * before the desired TableStyle.
	 */
	nextItem(obj: TableStyle): TableStyle;
	/** Returns any TableStyle in the collection. */
	anyItem(): TableStyle;
	/** Returns every TableStyle in the collection. */
	everyItem(): TableStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * TableStyle.
	 */
	toSource(): string;
	/**
	 * Returns the TableStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TableStyle;
}

/**
 * A table style group.
 * @class
 */
export declare class TableStyleGroup {
	/** All Table styles */
	readonly allTableStyles: TableStyle;
	/** The unique ID of the TableStyleGroup. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TableStyleGroup (a Document, Application 
	 * or TableStyleGroup).
	 */
	readonly parent: any;
	/**
	 * The index of the TableStyleGroup within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of table styles. */
	readonly tableStyles: TableStyles;
	/** A collection of table style groups. */
	readonly tableStyleGroups: TableStyleGroups;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the TableStyleGroup. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the TableStyleGroup. */
	duplicate(): TableStyleGroup;
	/**
	 * Moves the style to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: ParagraphStyle, ParagraphStyleGroup, 
	 * CharacterStyle, CharacterStyleGroup, CellStyle, 
	 * CellStyleGroup, TableStyle, TableStyleGroup, Document or 
	 * Application. (Optional)
	 */
	move(to: LocationOptions, reference: any): TableStyleGroup;
	/**
	 * Deletes the style.
	 * @param {any} replacingWith - The style to apply in place of 
	 * the deleted style. Can accept: ParagraphStyle or 
	 * CharacterStyle. (Optional)
	 */
	remove(replacingWith: any): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * TableStyleGroup.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TableStyleGroup;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of table style groups.
 * @class
 */
export declare class TableStyleGroups {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new TableStyleGroup.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TableStyleGroup (Optional)
	 */
	add(withProperties: Object): TableStyleGroup;
	/** Displays the number of elements in the TableStyleGroup. */
	count(): number;
	/**
	 * Returns the TableStyleGroup with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TableStyleGroup;
	/**
	 * Returns the TableStyleGroup with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TableStyleGroup;
	/**
	 * Returns the TableStyleGroup with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): TableStyleGroup;
	/**
	 * Returns the TableStyleGroups within the specified range.
	 * @param {any} _from - The TableStyleGroup, index, or name at 
	 * the beginning of the range. Can accept: TableStyleGroup, 
	 * Long Integer or String.
	 * @param {any} to - The TableStyleGroup, index, or name at the 
	 * end of the range. Can accept: TableStyleGroup, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): TableStyleGroup;
	/** Returns the first TableStyleGroup in the collection. */
	firstItem(): TableStyleGroup;
	/** Returns the last TableStyleGroup in the collection. */
	lastItem(): TableStyleGroup;
	/** Returns the middle TableStyleGroup in the collection. */
	middleItem(): TableStyleGroup;
	/**
	 * Returns the TableStyleGroup with the index previous to the 
	 * specified index.
	 * @param {TableStyleGroup} obj - The index of the 
	 * TableStyleGroup that follows the desired TableStyleGroup.
	 */
	previousItem(obj: TableStyleGroup): TableStyleGroup;
	/**
	 * Returns the TableStyleGroup whose index follows the 
	 * specified TableStyleGroup in the collection.
	 * @param {TableStyleGroup} obj - The TableStyleGroup whose 
	 * index comes before the desired TableStyleGroup.
	 */
	nextItem(obj: TableStyleGroup): TableStyleGroup;
	/** Returns any TableStyleGroup in the collection. */
	anyItem(): TableStyleGroup;
	/** Returns every TableStyleGroup in the collection. */
	everyItem(): TableStyleGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * TableStyleGroup.
	 */
	toSource(): string;
	/**
	 * Returns the TableStyleGroup with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TableStyleGroup;
}

/**
 * A cell style.
 * @class
 */
export declare class CellStyle {
	/** The unique ID of the CellStyle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CellStyle (a Document, Application or 
	 * CellStyleGroup).
	 */
	readonly parent: any;
	/** The index of the CellStyle within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The left inset of the graphic cell. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	graphicLeftInset: any;
	/**
	 * The top inset of the graphic cell. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	graphicTopInset: any;
	/**
	 * The right inset of the graphic cell. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	graphicRightInset: any;
	/**
	 * The bottom inset of the graphic cell. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	graphicBottomInset: any;
	/**
	 * If true, clips the graphic cell's content to width and 
	 * height of the cell. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	clipContentToGraphicCell: any;
	/**
	 * The top inset of the text cell. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	textTopInset: any;
	/**
	 * The left inset of the text cell. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	textLeftInset: any;
	/**
	 * The bottom inset of the text cell. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	textBottomInset: any;
	/**
	 * The right inset of the text cell. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	textRightInset: any;
	/**
	 * If true, clips the text cell's content to width and height 
	 * of the cell. Can return: Boolean or NothingEnum enumerator.
	 */
	clipContentToTextCell: any;
	/**
	 * The style that this style is based on. Can return: CellStyle 
	 * or String.
	 */
	basedOn: any;
	/**
	 * The paragraph style applied to the text. Can return: 
	 * ParagraphStyle or NothingEnum enumerator. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: any;
	/**
	 * The length (of a linear gradient) or radius (of a radial 
	 * gradient) applied to the fill of the object. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gradientFillLength: any;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * object. (Range: -180 to 180). Can return: Real or 
	 * NothingEnum enumerator.
	 */
	gradientFillAngle: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the CellStyle, in the format [x, y]. 
	 * Can return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientFillStart: any;
	/**
	 * The top inset of the cell. The API has been deprecated. Use 
	 * TextTopInset or GraphicTopInset. Can return: Unit or 
	 * NothingEnum enumerator.
	 * @deprecated
	 */
	topInset: any;
	/**
	 * The left inset of the cell.The API has been deprecated. Use 
	 * TextLeftInset or GraphicLeftInset. Can return: Unit or 
	 * NothingEnum enumerator.
	 * @deprecated
	 */
	leftInset: any;
	/**
	 * The bottom inset of the cell.The API has been deprecated. 
	 * Use TextBottomInset or GraphicBottomInset. Can return: Unit 
	 * or NothingEnum enumerator.
	 * @deprecated
	 */
	bottomInset: any;
	/**
	 * The right inset of the cell.The API has been deprecated. Use 
	 * TextLeftInset or GraphicRightInset. Can return: Unit or 
	 * NothingEnum enumerator.
	 * @deprecated
	 */
	rightInset: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the object. Can return: Swatch or NothingEnum 
	 * enumerator. Can also accept: String.
	 */
	fillColor: any;
	/**
	 * The tint (as a percentage) of the fill of the object. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	fillTint: any;
	/**
	 * If true, the fill of the object will overprint. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	overprintFill: any;
	/**
	 * If true, draws a diagonal line starting from the top left. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	topLeftDiagonalLine: any;
	/**
	 * If true, draws a diagonal line starting from the top right. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	topRightDiagonalLine: any;
	/**
	 * If true, draws the diagonal line in front of cell contents. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	diagonalLineInFront: any;
	/**
	 * The diagonal line stroke weight. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	diagonalLineStrokeWeight: any;
	/**
	 * The stroke type of the diagonal line(s). Can return: 
	 * StrokeStyle or NothingEnum enumerator. Can also accept: 
	 * String.
	 */
	diagonalLineStrokeType: any;
	/**
	 * The diagonal line color, specified as a swatch. Can return: 
	 * Swatch or NothingEnum enumerator.
	 */
	diagonalLineStrokeColor: any;
	/**
	 * The diagonal line tint (as a percentage). (Range: 0 to 100). 
	 * Can return: Real or NothingEnum enumerator.
	 */
	diagonalLineStrokeTint: any;
	/**
	 * If true, the diagonal line stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	diagonalLineStrokeOverprint: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the diagonal line stroke. Note: Not valid when 
	 * diagonal line stroke type is solid. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	diagonalLineStrokeGapColor: any;
	/**
	 * The tint (as a percentage) of the diagonal line stroke gap 
	 * color. Note: Not valid when diagonal line stroke type is 
	 * solid. Can return: Real or NothingEnum enumerator.
	 */
	diagonalLineStrokeGapTint: any;
	/**
	 * If true, the stroke gap of the diagonal line will overprint. 
	 * Note: Not valid when diagonal line stroke type is solid. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	diagonalLineStrokeGapOverprint: any;
	/**
	 * If true, clips the cell's content to width and height of the 
	 * cell. The API has been deprecated. Use 
	 * ClipContentsToTextCell or ClipContentsToPageItemCell. Can 
	 * return: Boolean or NothingEnum enumerator.
	 * @deprecated
	 */
	clipContentToCell: any;
	/**
	 * The distance between the baseline of the text and the top 
	 * inset of the cell. Can return: FirstBaseline enumerator or 
	 * NothingEnum enumerator.
	 */
	firstBaselineOffset: any;
	/**
	 * The vertical alignment of cell. Can return: 
	 * VerticalJustification enumerator or NothingEnum enumerator.
	 */
	verticalJustification: any;
	/**
	 * The maximum space that can be added between paragraphs in a 
	 * cell. Note: Valid only when vertical justification is 
	 * justified. Can return: Unit or NothingEnum enumerator.
	 */
	paragraphSpacingLimit: any;
	/**
	 * The space between the baseline of the text and the top inset 
	 * of the frame or cell. Can return: Unit (0 - 8640 points) or 
	 * NothingEnum enumerator.
	 */
	minimumFirstBaselineOffset: any;
	/**
	 * The rotation angle (in degrees) of the cell, specified as 
	 * one of the following values: 0, 90, 180, or 270. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	rotationAngle: any;
	/**
	 * The stroke weight of the left edge border stroke. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	leftEdgeStrokeWeight: any;
	/**
	 * The stroke type of the left edge. Can return: StrokeStyle or 
	 * NothingEnum enumerator. Can also accept: String.
	 */
	leftEdgeStrokeType: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the left edge border stroke. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	leftEdgeStrokeColor: any;
	/**
	 * The tint (as a percentage) of the left edge border stroke. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	leftEdgeStrokeTint: any;
	/**
	 * If true, the left edge border stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	leftEdgeStrokeOverprint: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the left edge border stroke. Note: Not valid when 
	 * left edge stroke type is solid. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	leftEdgeStrokeGapColor: any;
	/**
	 * The tint (as a percentage) of the left edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when left edge 
	 * stroke type is solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	leftEdgeStrokeGapTint: any;
	/**
	 * If true, the gap color of the left edge border stroke will 
	 * overprint. Note: Not valid when left edge stroke type is 
	 * solid. Can return: Boolean or NothingEnum enumerator.
	 */
	leftEdgeStrokeGapOverprint: any;
	/**
	 * The stroke weight of the top edge border stroke. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	topEdgeStrokeWeight: any;
	/**
	 * The stroke type of the top edge. Can return: StrokeStyle or 
	 * NothingEnum enumerator. Can also accept: String.
	 */
	topEdgeStrokeType: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the top edge border stroke. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	topEdgeStrokeColor: any;
	/**
	 * The tint (as a percentage) of the top edge border stroke. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	topEdgeStrokeTint: any;
	/**
	 * If true, the top edge border stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	topEdgeStrokeOverprint: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the top edge border stroke. Note: Not valid when 
	 * top edge stroke type is solid. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	topEdgeStrokeGapColor: any;
	/**
	 * The tint (as a percentage) of the top edge border stroke gap 
	 * color. (Range: 0 to 100) Note: Not valid when top edge 
	 * stroke type is solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	topEdgeStrokeGapTint: any;
	/**
	 * If true, the gap color of the top edge border stroke will 
	 * overprint. Note: Not valid when top edge stroke type is 
	 * solid. . Can return: Boolean or NothingEnum enumerator.
	 */
	topEdgeStrokeGapOverprint: any;
	/**
	 * The stroke weight of the right edge border stroke. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	rightEdgeStrokeWeight: any;
	/**
	 * The stroke type of the right edge. Can return: StrokeStyle 
	 * or NothingEnum enumerator. Can also accept: String.
	 */
	rightEdgeStrokeType: any;
	/**
	 * The color, specified as a swatch, of the right edge border 
	 * stroke. Can return: Swatch or NothingEnum enumerator.
	 */
	rightEdgeStrokeColor: any;
	/**
	 * The tint (as a percentage) of the right edge border stroke. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rightEdgeStrokeTint: any;
	/**
	 * If true, the right edge border stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	rightEdgeStrokeOverprint: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the right edge border stroke. Note: Not valid 
	 * when right edge stroke type is solid. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	rightEdgeStrokeGapColor: any;
	/**
	 * The tint (as a percentage) of the right edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when right edge 
	 * stroke type is solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rightEdgeStrokeGapTint: any;
	/**
	 * If true, the gap color of the right edge border stroke will 
	 * overprint. Note: Not valid when right edge stroke type is 
	 * solid. Can return: Boolean or NothingEnum enumerator.
	 */
	rightEdgeStrokeGapOverprint: any;
	/**
	 * The stroke weight of the bottom edge border stroke. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	bottomEdgeStrokeWeight: any;
	/**
	 * The stroke type of the bottom edge. Can return: StrokeStyle 
	 * or NothingEnum enumerator. Can also accept: String.
	 */
	bottomEdgeStrokeType: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the bottom edge border stroke. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	bottomEdgeStrokeColor: any;
	/**
	 * The tint (as a percentage) of the bottom edge border stroke. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	bottomEdgeStrokeTint: any;
	/**
	 * If true, the bottom edge border stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	bottomEdgeStrokeOverprint: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the bottom edge border stroke. Note: Not valid 
	 * when bottom edge stroke type is solid. Can return: Swatch or 
	 * NothingEnum enumerator.
	 */
	bottomEdgeStrokeGapColor: any;
	/**
	 * The tint (as a percentage) of the bottom edge border stroke 
	 * gap color. (Range: 0 to 100) Note: Not valid when bottom 
	 * edge stroke type is solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	bottomEdgeStrokeGapTint: any;
	/**
	 * If true, the gap color of the bottom edge border stroke will 
	 * overprint. Note: Not valid when bottom edge stroke type is 
	 * solid. Can return: Boolean or NothingEnum enumerator.
	 */
	bottomEdgeStrokeGapOverprint: any;
	/** The name of the style. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the style.
	 * @param {CellStyle} replacingWith - The style to apply in 
	 * place of the deleted style. (Optional)
	 */
	remove(replacingWith: CellStyle): void;
	/** Duplicates the CellStyle. */
	duplicate(): CellStyle;
	/**
	 * Moves the style to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: ParagraphStyle, ParagraphStyleGroup, 
	 * CharacterStyle, CharacterStyleGroup, CellStyle, 
	 * CellStyleGroup, TableStyle, TableStyleGroup, Document or 
	 * Application. (Optional)
	 */
	move(to: LocationOptions, reference: any): CellStyle;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * CellStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CellStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of cell styles.
 * @class
 */
export declare class CellStyles {
	/**
	 * The number of objects in the collection. Can return: Long 
	 * Integer or NothingEnum enumerator.
	 */
	readonly length: any;
	/**
	 * Creates a new CellStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CellStyle (Optional)
	 */
	add(withProperties: Object): CellStyle;
	/** Displays the number of elements in the CellStyle. */
	count(): number;
	/**
	 * Returns the CellStyle with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CellStyle;
	/**
	 * Returns the CellStyle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): CellStyle;
	/**
	 * Returns the CellStyle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CellStyle;
	/**
	 * Returns the CellStyles within the specified range.
	 * @param {any} _from - The CellStyle, index, or name at the 
	 * beginning of the range. Can accept: CellStyle, Long Integer 
	 * or String.
	 * @param {any} to - The CellStyle, index, or name at the end 
	 * of the range. Can accept: CellStyle, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): CellStyle;
	/** Returns the first CellStyle in the collection. */
	firstItem(): CellStyle;
	/** Returns the last CellStyle in the collection. */
	lastItem(): CellStyle;
	/** Returns the middle CellStyle in the collection. */
	middleItem(): CellStyle;
	/**
	 * Returns the CellStyle with the index previous to the 
	 * specified index.
	 * @param {CellStyle} obj - The index of the CellStyle that 
	 * follows the desired CellStyle.
	 */
	previousItem(obj: CellStyle): CellStyle;
	/**
	 * Returns the CellStyle whose index follows the specified 
	 * CellStyle in the collection.
	 * @param {CellStyle} obj - The CellStyle whose index comes 
	 * before the desired CellStyle.
	 */
	nextItem(obj: CellStyle): CellStyle;
	/** Returns any CellStyle in the collection. */
	anyItem(): CellStyle;
	/** Returns every CellStyle in the collection. */
	everyItem(): CellStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * CellStyle.
	 */
	toSource(): string;
	/**
	 * Returns the CellStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CellStyle;
}

/**
 * A cell style group.
 * @class
 */
export declare class CellStyleGroup {
	/** All Cell styles */
	readonly allCellStyles: CellStyle;
	/** The unique ID of the CellStyleGroup. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CellStyleGroup (a Document, Application or 
	 * CellStyleGroup).
	 */
	readonly parent: any;
	/**
	 * The index of the CellStyleGroup within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of cell styles. */
	readonly cellStyles: CellStyles;
	/** A collection of cell style groups. */
	readonly cellStyleGroups: CellStyleGroups;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the CellStyleGroup. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the CellStyleGroup. */
	duplicate(): CellStyleGroup;
	/**
	 * Moves the style to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: ParagraphStyle, ParagraphStyleGroup, 
	 * CharacterStyle, CharacterStyleGroup, CellStyle, 
	 * CellStyleGroup, TableStyle, TableStyleGroup, Document or 
	 * Application. (Optional)
	 */
	move(to: LocationOptions, reference: any): CellStyleGroup;
	/**
	 * Deletes the style.
	 * @param {any} replacingWith - The style to apply in place of 
	 * the deleted style. Can accept: ParagraphStyle or 
	 * CharacterStyle. (Optional)
	 */
	remove(replacingWith: any): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * CellStyleGroup.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CellStyleGroup;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of cell style groups.
 * @class
 */
export declare class CellStyleGroups {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new CellStyleGroup.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CellStyleGroup (Optional)
	 */
	add(withProperties: Object): CellStyleGroup;
	/** Displays the number of elements in the CellStyleGroup. */
	count(): number;
	/**
	 * Returns the CellStyleGroup with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CellStyleGroup;
	/**
	 * Returns the CellStyleGroup with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): CellStyleGroup;
	/**
	 * Returns the CellStyleGroup with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CellStyleGroup;
	/**
	 * Returns the CellStyleGroups within the specified range.
	 * @param {any} _from - The CellStyleGroup, index, or name at 
	 * the beginning of the range. Can accept: CellStyleGroup, Long 
	 * Integer or String.
	 * @param {any} to - The CellStyleGroup, index, or name at the 
	 * end of the range. Can accept: CellStyleGroup, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): CellStyleGroup;
	/** Returns the first CellStyleGroup in the collection. */
	firstItem(): CellStyleGroup;
	/** Returns the last CellStyleGroup in the collection. */
	lastItem(): CellStyleGroup;
	/** Returns the middle CellStyleGroup in the collection. */
	middleItem(): CellStyleGroup;
	/**
	 * Returns the CellStyleGroup with the index previous to the 
	 * specified index.
	 * @param {CellStyleGroup} obj - The index of the 
	 * CellStyleGroup that follows the desired CellStyleGroup.
	 */
	previousItem(obj: CellStyleGroup): CellStyleGroup;
	/**
	 * Returns the CellStyleGroup whose index follows the specified 
	 * CellStyleGroup in the collection.
	 * @param {CellStyleGroup} obj - The CellStyleGroup whose index 
	 * comes before the desired CellStyleGroup.
	 */
	nextItem(obj: CellStyleGroup): CellStyleGroup;
	/** Returns any CellStyleGroup in the collection. */
	anyItem(): CellStyleGroup;
	/** Returns every CellStyleGroup in the collection. */
	everyItem(): CellStyleGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * CellStyleGroup.
	 */
	toSource(): string;
	/**
	 * Returns the CellStyleGroup with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CellStyleGroup;
}

/**
 * A nested line style.
 * @class
 */
export declare class NestedLineStyle {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the NestedLineStyle (a TextDefault, Paragraph, 
	 * ParagraphStyle, Text, InsertionPoint, TextStyleRange, 
	 * TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	readonly parent: any;
	/**
	 * The index of the NestedLineStyle within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The number lines to which to apply the nested style. */
	lineCount: number;
	/** The number line-style rules to back up. */
	repeatLast: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the NestedLineStyle. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * NestedLineStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): NestedLineStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of nested line styles.
 * @class
 */
export declare class NestedLineStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new NestedLineStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new NestedLineStyle (Optional)
	 */
	add(withProperties: Object): NestedLineStyle;
	/** Displays the number of elements in the NestedLineStyle. */
	count(): number;
	/**
	 * Returns the NestedLineStyle with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): NestedLineStyle;
	/**
	 * Returns the NestedLineStyles within the specified range.
	 * @param {any} _from - The NestedLineStyle, index, or name at 
	 * the beginning of the range. Can accept: NestedLineStyle, 
	 * Long Integer or String.
	 * @param {any} to - The NestedLineStyle, index, or name at the 
	 * end of the range. Can accept: NestedLineStyle, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): NestedLineStyle;
	/** Returns the first NestedLineStyle in the collection. */
	firstItem(): NestedLineStyle;
	/** Returns the last NestedLineStyle in the collection. */
	lastItem(): NestedLineStyle;
	/** Returns the middle NestedLineStyle in the collection. */
	middleItem(): NestedLineStyle;
	/**
	 * Returns the NestedLineStyle with the index previous to the 
	 * specified index.
	 * @param {NestedLineStyle} obj - The index of the 
	 * NestedLineStyle that follows the desired NestedLineStyle.
	 */
	previousItem(obj: NestedLineStyle): NestedLineStyle;
	/**
	 * Returns the NestedLineStyle whose index follows the 
	 * specified NestedLineStyle in the collection.
	 * @param {NestedLineStyle} obj - The NestedLineStyle whose 
	 * index comes before the desired NestedLineStyle.
	 */
	nextItem(obj: NestedLineStyle): NestedLineStyle;
	/** Returns any NestedLineStyle in the collection. */
	anyItem(): NestedLineStyle;
	/** Returns every NestedLineStyle in the collection. */
	everyItem(): NestedLineStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * NestedLineStyle.
	 */
	toSource(): string;
	/**
	 * Returns the NestedLineStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: NestedLineStyle;
}

/**
 * A nested GREP style.
 * @class
 */
export declare class NestedGrepStyle {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the NestedGrepStyle (a TextDefault, Paragraph, 
	 * ParagraphStyle, Text, InsertionPoint, TextStyleRange, 
	 * TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	readonly parent: any;
	/**
	 * The index of the NestedGrepStyle within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The GREP expression used to apply automatic styling. */
	grepExpression: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the NestedGrepStyle. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * NestedGrepStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): NestedGrepStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of nested GREP styles.
 * @class
 */
export declare class NestedGrepStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new NestedGrepStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new NestedGrepStyle (Optional)
	 */
	add(withProperties: Object): NestedGrepStyle;
	/** Displays the number of elements in the NestedGrepStyle. */
	count(): number;
	/**
	 * Returns the NestedGrepStyle with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): NestedGrepStyle;
	/**
	 * Returns the NestedGrepStyles within the specified range.
	 * @param {any} _from - The NestedGrepStyle, index, or name at 
	 * the beginning of the range. Can accept: NestedGrepStyle, 
	 * Long Integer or String.
	 * @param {any} to - The NestedGrepStyle, index, or name at the 
	 * end of the range. Can accept: NestedGrepStyle, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): NestedGrepStyle;
	/** Returns the first NestedGrepStyle in the collection. */
	firstItem(): NestedGrepStyle;
	/** Returns the last NestedGrepStyle in the collection. */
	lastItem(): NestedGrepStyle;
	/** Returns the middle NestedGrepStyle in the collection. */
	middleItem(): NestedGrepStyle;
	/**
	 * Returns the NestedGrepStyle with the index previous to the 
	 * specified index.
	 * @param {NestedGrepStyle} obj - The index of the 
	 * NestedGrepStyle that follows the desired NestedGrepStyle.
	 */
	previousItem(obj: NestedGrepStyle): NestedGrepStyle;
	/**
	 * Returns the NestedGrepStyle whose index follows the 
	 * specified NestedGrepStyle in the collection.
	 * @param {NestedGrepStyle} obj - The NestedGrepStyle whose 
	 * index comes before the desired NestedGrepStyle.
	 */
	nextItem(obj: NestedGrepStyle): NestedGrepStyle;
	/** Returns any NestedGrepStyle in the collection. */
	anyItem(): NestedGrepStyle;
	/** Returns every NestedGrepStyle in the collection. */
	everyItem(): NestedGrepStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * NestedGrepStyle.
	 */
	toSource(): string;
	/**
	 * Returns the NestedGrepStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: NestedGrepStyle;
}

/**
 * A text object.
 * @class
 */
export declare class Text {
	/** The XML elements associated with the Text. */
	readonly associatedXMLElements: XMLItem;
	/** The number of objects in the collection. */
	readonly length: number;
	/** The index of the text in the collection or parent object. */
	readonly index: number;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * An array of the text frames that contain the text. Can 
	 * return: Array of TextFrames or TextPaths.
	 */
	readonly parentTextFrames: any;
	/** The maximum ascent of any character in the text. */
	readonly ascent: number|string;
	/** The maximum descent of any character in the text. */
	readonly descent: number|string;
	/** The vertical offset of the text. */
	readonly baseline: number|string;
	/** The horizontal offset of the text. */
	readonly horizontalOffset: number|string;
	/**
	 * If true, the applied style has been overridden with 
	 * additional attributes.
	 */
	readonly styleOverridden: boolean;
	/** Vertical offset of the end of the text. */
	readonly endBaseline: number|string;
	/** Horizontal offset of the end of the text. */
	readonly endHorizontalOffset: number|string;
	/** The applied character styles dictated by nested styles. */
	readonly appliedNestedStyles: CharacterStyle;
	/** Lists all page items contained by the Text. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Text. */
	readonly allGraphics: Graphic;
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Text (a XmlStory, TextPath, TextFrame, 
	 * Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, 
	 * Line, Word, Character, Story, Cell, XMLElement, Footnote, 
	 * Note, Change or HiddenText).
	 */
	readonly parent: any;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em.
	 */
	kerningValue: number;
	/**
	 * The font applied to the Text, specified as either a font 
	 * object or the name of font family. Can return: Font or 
	 * String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the Text. */
	horizontalScale: number;
	/** The vertical scaling applied to the Text. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the Text. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the Text. 
	 * (To specify a tint percentage, use a number in the range of 
	 * 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the Text. 
	 * (To specify a tint percentage, use a number in the range of 
	 * 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Text. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Text. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** The applied conditions. */
	appliedConditions: Condition;
	/**
	 * OpenType features. Can return: Array of Array of 2 Strings 
	 * or Long Integers.
	 */
	opentypeFeatures: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/** If true, ruby is on. */
	rubyFlag: boolean;
	/** The ruby string contents. */
	rubyString: string;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/** Deletes the Text. */
	remove(): void;
	/**
	 * Converts the text to a table.
	 * @param {string} columnSeparator - The character that starts 
	 * a new column in the new table. (Optional)
	 * @param {string} rowSeparator - The character starts a new 
	 * row in the new table. (Optional)
	 * @param {number} numberOfColumns - The number of columns in 
	 * the table. Note: Valid only when the column and row 
	 * separator characters are the same. (Optional)
	 */
	convertToTable(columnSeparator: string, rowSeparator: string, numberOfColumns?: number): Table;
	/**
	 * Sets the case of the text.
	 * @param {ChangecaseMode} using - The text case option.
	 */
	changecase(using: ChangecaseMode): void;
	/**
	 * Clears the specified types of override.
	 * @param {OverrideType} overridesToClear - The types of 
	 * override to clear. (Optional)
	 */
	clearOverrides(overridesToClear?: OverrideType): void;
	/** Recomposes the text in the Text. */
	recompose(): void;
	/** Jump to the text range. */
	showText(): void;
	/**
	 * Apply a paragraph style.
	 * @param {ParagraphStyle} using - The paragraph style to 
	 * apply.
	 * @param {boolean} clearingOverrides - If true, clear any text 
	 * attributes before applying the style. (Optional)
	 */
	applyParagraphStyle(using: ParagraphStyle, clearingOverrides?: boolean): void;
	/**
	 * Apply a character style.
	 * @param {CharacterStyle} using - The character style to 
	 * apply.
	 */
	applyCharacterStyle(using: CharacterStyle): void;
	/**
	 * Duplicates the text in the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	duplicate(to: LocationOptions, reference: any): Text;
	/**
	 * Moves the text to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	move(to: LocationOptions, reference: any): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/** Converts the text to a note. */
	convertToNote(): Note;
	/**
	 * Finds hyperlink sources that intersecting with specified 
	 * text range.
	 * @param {RangeSortOrder} sortOrder - The sort order of found 
	 * ranges. (Optional)
	 */
	findHyperlinks(sortOrder: RangeSortOrder): HyperlinkTextSource;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Text. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Text. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Text. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Text. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Text. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Apply one or more conditions.
	 * @param {Condition} using - The condition(s) to apply
	 * @param {boolean} removeExisting - If true, remove existing 
	 * conditions. (Optional)
	 */
	applyConditions(using: Condition, removeExisting?: boolean): void;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Text in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Create thumbnail for selected text with the given 
	 * properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File): boolean;
	/**
	 * If true, text has local overrides
	 * @param {StyleType} charOrParaStyle - Style type to look at.
	 * @param {boolean} charStyleAsOverride - Whether to consider 
	 * character styles as overrides or not (Optional)
	 */
	textHasOverrides(charOrParaStyle: StyleType, charStyleAsOverride?: boolean): boolean;
	/**
	 * Create thumbnail for selected text using the applied style 
	 * and overrides with the given properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 * @param {StyleType} charOrParaStyle - The applied style type 
	 * to use.
	 */
	createStyleThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File, charOrParaStyle: StyleType): boolean;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the Text.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Text;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of text objects.
 * @class
 */
export declare class Texts {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Text. */
	count(): number;
	/**
	 * Returns the Text with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Text;
	/**
	 * Returns the Texts within the specified range.
	 * @param {any} _from - The Text, index, or name at the 
	 * beginning of the range. Can accept: Text, Long Integer or 
	 * String.
	 * @param {any} to - The Text, index, or name at the end of the 
	 * range. Can accept: Text, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Text;
	/** Returns the first Text in the collection. */
	firstItem(): Text;
	/** Returns the last Text in the collection. */
	lastItem(): Text;
	/** Returns the middle Text in the collection. */
	middleItem(): Text;
	/**
	 * Returns the Text with the index previous to the specified 
	 * index.
	 * @param {Text} obj - The index of the Text that follows the 
	 * desired Text.
	 */
	previousItem(obj: Text): Text;
	/**
	 * Returns the Text whose index follows the specified Text in 
	 * the collection.
	 * @param {Text} obj - The Text whose index comes before the 
	 * desired Text.
	 */
	nextItem(obj: Text): Text;
	/** Returns any Text in the collection. */
	anyItem(): Text;
	/** Returns every Text in the collection. */
	everyItem(): Text;
	/**
	 * Generates a string which, if executed, will return the Text.
	 */
	toSource(): string;
	/**
	 * Returns the Text with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Text;
}

/**
 * A text character.
 * @class
 * @extends Text
 */
export declare class Character extends Text {
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/** The XML elements associated with the Character. */
	readonly associatedXMLElements: XMLItem;
	/** The number of objects in the collection. */
	readonly length: number;
	/** The index of the text in the collection or parent object. */
	readonly index: number;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * An array of the text frames that contain the text. Can 
	 * return: Array of TextFrames or TextPaths.
	 */
	readonly parentTextFrames: any;
	/** The maximum ascent of any character in the text. */
	readonly ascent: number|string;
	/** The maximum descent of any character in the text. */
	readonly descent: number|string;
	/** The vertical offset of the text. */
	readonly baseline: number|string;
	/** The horizontal offset of the text. */
	readonly horizontalOffset: number|string;
	/**
	 * If true, the applied style has been overridden with 
	 * additional attributes.
	 */
	readonly styleOverridden: boolean;
	/** Vertical offset of the end of the text. */
	readonly endBaseline: number|string;
	/** Horizontal offset of the end of the text. */
	readonly endHorizontalOffset: number|string;
	/** The applied character styles dictated by nested styles. */
	readonly appliedNestedStyles: CharacterStyle;
	/** Lists all page items contained by the Character. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Character. */
	readonly allGraphics: Graphic;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Character (a XmlStory, TextPath, 
	 * TextFrame, Text, InsertionPoint, TextStyleRange, Paragraph, 
	 * TextColumn, Line, Word, Character, Story, Cell, XMLElement, 
	 * Footnote, Note, Change or HiddenText).
	 */
	readonly parent: any;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em.
	 */
	kerningValue: number;
	/**
	 * The font applied to the Character, specified as either a 
	 * font object or the name of font family. Can return: Font or 
	 * String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the Character. */
	horizontalScale: number;
	/** The vertical scaling applied to the Character. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the Character. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * Character. (To specify a tint percentage, use a number in 
	 * the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * Character. (To specify a tint percentage, use a number in 
	 * the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Character. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Character. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/** The applied conditions. */
	appliedConditions: Condition;
	/**
	 * OpenType features. Can return: Array of Array of 2 Strings 
	 * or Long Integers.
	 */
	opentypeFeatures: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/** If true, ruby is on. */
	rubyFlag: boolean;
	/** The ruby string contents. */
	rubyString: string;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/** Deletes the Character. */
	remove(): void;
	/**
	 * Converts the text to a table.
	 * @param {string} columnSeparator - The character that starts 
	 * a new column in the new table. (Optional)
	 * @param {string} rowSeparator - The character starts a new 
	 * row in the new table. (Optional)
	 * @param {number} numberOfColumns - The number of columns in 
	 * the table. Note: Valid only when the column and row 
	 * separator characters are the same. (Optional)
	 */
	convertToTable(columnSeparator: string, rowSeparator: string, numberOfColumns?: number): Table;
	/**
	 * Sets the case of the text.
	 * @param {ChangecaseMode} using - The text case option.
	 */
	changecase(using: ChangecaseMode): void;
	/**
	 * Clears the specified types of override.
	 * @param {OverrideType} overridesToClear - The types of 
	 * override to clear. (Optional)
	 */
	clearOverrides(overridesToClear?: OverrideType): void;
	/** Recomposes the text in the Character. */
	recompose(): void;
	/** Jump to the text range. */
	showText(): void;
	/**
	 * Apply a paragraph style.
	 * @param {ParagraphStyle} using - The paragraph style to 
	 * apply.
	 * @param {boolean} clearingOverrides - If true, clear any text 
	 * attributes before applying the style. (Optional)
	 */
	applyParagraphStyle(using: ParagraphStyle, clearingOverrides?: boolean): void;
	/**
	 * Apply a character style.
	 * @param {CharacterStyle} using - The character style to 
	 * apply.
	 */
	applyCharacterStyle(using: CharacterStyle): void;
	/**
	 * Duplicates the text in the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	duplicate(to: LocationOptions, reference: any): Text;
	/**
	 * Moves the text to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	move(to: LocationOptions, reference: any): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/** Converts the text to a note. */
	convertToNote(): Note;
	/**
	 * Finds hyperlink sources that intersecting with specified 
	 * text range.
	 * @param {RangeSortOrder} sortOrder - The sort order of found 
	 * ranges. (Optional)
	 */
	findHyperlinks(sortOrder: RangeSortOrder): HyperlinkTextSource;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Character. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Character. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Character. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Character. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Character. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Apply one or more conditions.
	 * @param {Condition} using - The condition(s) to apply
	 * @param {boolean} removeExisting - If true, remove existing 
	 * conditions. (Optional)
	 */
	applyConditions(using: Condition, removeExisting?: boolean): void;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Character in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Create thumbnail for selected text with the given 
	 * properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File): boolean;
	/**
	 * If true, text has local overrides
	 * @param {StyleType} charOrParaStyle - Style type to look at.
	 * @param {boolean} charStyleAsOverride - Whether to consider 
	 * character styles as overrides or not (Optional)
	 */
	textHasOverrides(charOrParaStyle: StyleType, charStyleAsOverride?: boolean): boolean;
	/**
	 * Create thumbnail for selected text using the applied style 
	 * and overrides with the given properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 * @param {StyleType} charOrParaStyle - The applied style type 
	 * to use.
	 */
	createStyleThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File, charOrParaStyle: StyleType): boolean;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * Character.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Character;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of characters.
 * @class
 */
export declare class Characters {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Character. */
	count(): number;
	/**
	 * Returns the Character with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Character;
	/**
	 * Returns the Characters within the specified range.
	 * @param {any} _from - The Character, index, or name at the 
	 * beginning of the range. Can accept: Character, Long Integer 
	 * or String.
	 * @param {any} to - The Character, index, or name at the end 
	 * of the range. Can accept: Character, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Character;
	/** Returns the first Character in the collection. */
	firstItem(): Character;
	/** Returns the last Character in the collection. */
	lastItem(): Character;
	/** Returns the middle Character in the collection. */
	middleItem(): Character;
	/**
	 * Returns the Character with the index previous to the 
	 * specified index.
	 * @param {Character} obj - The index of the Character that 
	 * follows the desired Character.
	 */
	previousItem(obj: Character): Character;
	/**
	 * Returns the Character whose index follows the specified 
	 * Character in the collection.
	 * @param {Character} obj - The Character whose index comes 
	 * before the desired Character.
	 */
	nextItem(obj: Character): Character;
	/** Returns any Character in the collection. */
	anyItem(): Character;
	/** Returns every Character in the collection. */
	everyItem(): Character;
	/**
	 * Generates a string which, if executed, will return the 
	 * Character.
	 */
	toSource(): string;
	/**
	 * Returns the Character with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Character;
}

/**
 * A word.
 * @class
 * @extends Text
 */
export declare class Word extends Text {
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/** The XML elements associated with the Word. */
	readonly associatedXMLElements: XMLItem;
	/** The number of objects in the collection. */
	readonly length: number;
	/** The index of the text in the collection or parent object. */
	readonly index: number;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * An array of the text frames that contain the text. Can 
	 * return: Array of TextFrames or TextPaths.
	 */
	readonly parentTextFrames: any;
	/** The maximum ascent of any character in the text. */
	readonly ascent: number|string;
	/** The maximum descent of any character in the text. */
	readonly descent: number|string;
	/** The vertical offset of the text. */
	readonly baseline: number|string;
	/** The horizontal offset of the text. */
	readonly horizontalOffset: number|string;
	/**
	 * If true, the applied style has been overridden with 
	 * additional attributes.
	 */
	readonly styleOverridden: boolean;
	/** Vertical offset of the end of the text. */
	readonly endBaseline: number|string;
	/** Horizontal offset of the end of the text. */
	readonly endHorizontalOffset: number|string;
	/** The applied character styles dictated by nested styles. */
	readonly appliedNestedStyles: CharacterStyle;
	/** Lists all page items contained by the Word. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Word. */
	readonly allGraphics: Graphic;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Word (a XmlStory, TextPath, TextFrame, 
	 * Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, 
	 * Line, Word, Character, Story, Cell, XMLElement, Footnote, 
	 * Note, Change or HiddenText).
	 */
	readonly parent: any;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em.
	 */
	kerningValue: number;
	/**
	 * The font applied to the Word, specified as either a font 
	 * object or the name of font family. Can return: Font or 
	 * String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the Word. */
	horizontalScale: number;
	/** The vertical scaling applied to the Word. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the Word. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the Word. 
	 * (To specify a tint percentage, use a number in the range of 
	 * 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the Word. 
	 * (To specify a tint percentage, use a number in the range of 
	 * 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Word. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Word. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/** The applied conditions. */
	appliedConditions: Condition;
	/**
	 * OpenType features. Can return: Array of Array of 2 Strings 
	 * or Long Integers.
	 */
	opentypeFeatures: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/** If true, ruby is on. */
	rubyFlag: boolean;
	/** The ruby string contents. */
	rubyString: string;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/** Deletes the Word. */
	remove(): void;
	/**
	 * Converts the text to a table.
	 * @param {string} columnSeparator - The character that starts 
	 * a new column in the new table. (Optional)
	 * @param {string} rowSeparator - The character starts a new 
	 * row in the new table. (Optional)
	 * @param {number} numberOfColumns - The number of columns in 
	 * the table. Note: Valid only when the column and row 
	 * separator characters are the same. (Optional)
	 */
	convertToTable(columnSeparator: string, rowSeparator: string, numberOfColumns?: number): Table;
	/**
	 * Sets the case of the text.
	 * @param {ChangecaseMode} using - The text case option.
	 */
	changecase(using: ChangecaseMode): void;
	/**
	 * Clears the specified types of override.
	 * @param {OverrideType} overridesToClear - The types of 
	 * override to clear. (Optional)
	 */
	clearOverrides(overridesToClear?: OverrideType): void;
	/** Recomposes the text in the Word. */
	recompose(): void;
	/** Jump to the text range. */
	showText(): void;
	/**
	 * Apply a paragraph style.
	 * @param {ParagraphStyle} using - The paragraph style to 
	 * apply.
	 * @param {boolean} clearingOverrides - If true, clear any text 
	 * attributes before applying the style. (Optional)
	 */
	applyParagraphStyle(using: ParagraphStyle, clearingOverrides?: boolean): void;
	/**
	 * Apply a character style.
	 * @param {CharacterStyle} using - The character style to 
	 * apply.
	 */
	applyCharacterStyle(using: CharacterStyle): void;
	/**
	 * Duplicates the text in the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	duplicate(to: LocationOptions, reference: any): Text;
	/**
	 * Moves the text to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	move(to: LocationOptions, reference: any): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/** Converts the text to a note. */
	convertToNote(): Note;
	/**
	 * Finds hyperlink sources that intersecting with specified 
	 * text range.
	 * @param {RangeSortOrder} sortOrder - The sort order of found 
	 * ranges. (Optional)
	 */
	findHyperlinks(sortOrder: RangeSortOrder): HyperlinkTextSource;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Word. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Word. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Word. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Word. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Word. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Apply one or more conditions.
	 * @param {Condition} using - The condition(s) to apply
	 * @param {boolean} removeExisting - If true, remove existing 
	 * conditions. (Optional)
	 */
	applyConditions(using: Condition, removeExisting?: boolean): void;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Word in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Create thumbnail for selected text with the given 
	 * properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File): boolean;
	/**
	 * If true, text has local overrides
	 * @param {StyleType} charOrParaStyle - Style type to look at.
	 * @param {boolean} charStyleAsOverride - Whether to consider 
	 * character styles as overrides or not (Optional)
	 */
	textHasOverrides(charOrParaStyle: StyleType, charStyleAsOverride?: boolean): boolean;
	/**
	 * Create thumbnail for selected text using the applied style 
	 * and overrides with the given properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 * @param {StyleType} charOrParaStyle - The applied style type 
	 * to use.
	 */
	createStyleThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File, charOrParaStyle: StyleType): boolean;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the Word.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Word;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of words.
 * @class
 */
export declare class Words {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Word. */
	count(): number;
	/**
	 * Returns the Word with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Word;
	/**
	 * Returns the Words within the specified range.
	 * @param {any} _from - The Word, index, or name at the 
	 * beginning of the range. Can accept: Word, Long Integer or 
	 * String.
	 * @param {any} to - The Word, index, or name at the end of the 
	 * range. Can accept: Word, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Word;
	/** Returns the first Word in the collection. */
	firstItem(): Word;
	/** Returns the last Word in the collection. */
	lastItem(): Word;
	/** Returns the middle Word in the collection. */
	middleItem(): Word;
	/**
	 * Returns the Word with the index previous to the specified 
	 * index.
	 * @param {Word} obj - The index of the Word that follows the 
	 * desired Word.
	 */
	previousItem(obj: Word): Word;
	/**
	 * Returns the Word whose index follows the specified Word in 
	 * the collection.
	 * @param {Word} obj - The Word whose index comes before the 
	 * desired Word.
	 */
	nextItem(obj: Word): Word;
	/** Returns any Word in the collection. */
	anyItem(): Word;
	/** Returns every Word in the collection. */
	everyItem(): Word;
	/**
	 * Generates a string which, if executed, will return the Word.
	 */
	toSource(): string;
	/**
	 * Returns the Word with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Word;
}

/**
 * A line of text.
 * @class
 * @extends Text
 */
export declare class Line extends Text {
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/** The XML elements associated with the Line. */
	readonly associatedXMLElements: XMLItem;
	/** The number of objects in the collection. */
	readonly length: number;
	/** The index of the text in the collection or parent object. */
	readonly index: number;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * An array of the text frames that contain the text. Can 
	 * return: Array of TextFrames or TextPaths.
	 */
	readonly parentTextFrames: any;
	/** The maximum ascent of any character in the text. */
	readonly ascent: number|string;
	/** The maximum descent of any character in the text. */
	readonly descent: number|string;
	/** The vertical offset of the text. */
	readonly baseline: number|string;
	/** The horizontal offset of the text. */
	readonly horizontalOffset: number|string;
	/**
	 * If true, the applied style has been overridden with 
	 * additional attributes.
	 */
	readonly styleOverridden: boolean;
	/** Vertical offset of the end of the text. */
	readonly endBaseline: number|string;
	/** Horizontal offset of the end of the text. */
	readonly endHorizontalOffset: number|string;
	/** The applied character styles dictated by nested styles. */
	readonly appliedNestedStyles: CharacterStyle;
	/** Lists all page items contained by the Line. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Line. */
	readonly allGraphics: Graphic;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Line (a XmlStory, TextPath, TextFrame, 
	 * Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, 
	 * Line, Word, Character, Story, Cell, XMLElement, Footnote, 
	 * Note, Change or HiddenText).
	 */
	readonly parent: any;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em.
	 */
	kerningValue: number;
	/**
	 * The font applied to the Line, specified as either a font 
	 * object or the name of font family. Can return: Font or 
	 * String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the Line. */
	horizontalScale: number;
	/** The vertical scaling applied to the Line. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the Line. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the Line. 
	 * (To specify a tint percentage, use a number in the range of 
	 * 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the Line. 
	 * (To specify a tint percentage, use a number in the range of 
	 * 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Line. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Line. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/** The applied conditions. */
	appliedConditions: Condition;
	/**
	 * OpenType features. Can return: Array of Array of 2 Strings 
	 * or Long Integers.
	 */
	opentypeFeatures: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/** If true, ruby is on. */
	rubyFlag: boolean;
	/** The ruby string contents. */
	rubyString: string;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/** Deletes the Line. */
	remove(): void;
	/**
	 * Converts the text to a table.
	 * @param {string} columnSeparator - The character that starts 
	 * a new column in the new table. (Optional)
	 * @param {string} rowSeparator - The character starts a new 
	 * row in the new table. (Optional)
	 * @param {number} numberOfColumns - The number of columns in 
	 * the table. Note: Valid only when the column and row 
	 * separator characters are the same. (Optional)
	 */
	convertToTable(columnSeparator: string, rowSeparator: string, numberOfColumns?: number): Table;
	/**
	 * Sets the case of the text.
	 * @param {ChangecaseMode} using - The text case option.
	 */
	changecase(using: ChangecaseMode): void;
	/**
	 * Clears the specified types of override.
	 * @param {OverrideType} overridesToClear - The types of 
	 * override to clear. (Optional)
	 */
	clearOverrides(overridesToClear?: OverrideType): void;
	/** Recomposes the text in the Line. */
	recompose(): void;
	/** Jump to the text range. */
	showText(): void;
	/**
	 * Apply a paragraph style.
	 * @param {ParagraphStyle} using - The paragraph style to 
	 * apply.
	 * @param {boolean} clearingOverrides - If true, clear any text 
	 * attributes before applying the style. (Optional)
	 */
	applyParagraphStyle(using: ParagraphStyle, clearingOverrides?: boolean): void;
	/**
	 * Apply a character style.
	 * @param {CharacterStyle} using - The character style to 
	 * apply.
	 */
	applyCharacterStyle(using: CharacterStyle): void;
	/**
	 * Duplicates the text in the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	duplicate(to: LocationOptions, reference: any): Text;
	/**
	 * Moves the text to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	move(to: LocationOptions, reference: any): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/** Converts the text to a note. */
	convertToNote(): Note;
	/**
	 * Finds hyperlink sources that intersecting with specified 
	 * text range.
	 * @param {RangeSortOrder} sortOrder - The sort order of found 
	 * ranges. (Optional)
	 */
	findHyperlinks(sortOrder: RangeSortOrder): HyperlinkTextSource;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Line. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Line. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Line. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Line. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Line. Above parameters can also be 
	 * passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Apply one or more conditions.
	 * @param {Condition} using - The condition(s) to apply
	 * @param {boolean} removeExisting - If true, remove existing 
	 * conditions. (Optional)
	 */
	applyConditions(using: Condition, removeExisting?: boolean): void;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Line in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Create thumbnail for selected text with the given 
	 * properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File): boolean;
	/**
	 * If true, text has local overrides
	 * @param {StyleType} charOrParaStyle - Style type to look at.
	 * @param {boolean} charStyleAsOverride - Whether to consider 
	 * character styles as overrides or not (Optional)
	 */
	textHasOverrides(charOrParaStyle: StyleType, charStyleAsOverride?: boolean): boolean;
	/**
	 * Create thumbnail for selected text using the applied style 
	 * and overrides with the given properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 * @param {StyleType} charOrParaStyle - The applied style type 
	 * to use.
	 */
	createStyleThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File, charOrParaStyle: StyleType): boolean;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the Line.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Line;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of lines.
 * @class
 */
export declare class Lines {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Line. */
	count(): number;
	/**
	 * Returns the Line with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Line;
	/**
	 * Returns the Lines within the specified range.
	 * @param {any} _from - The Line, index, or name at the 
	 * beginning of the range. Can accept: Line, Long Integer or 
	 * String.
	 * @param {any} to - The Line, index, or name at the end of the 
	 * range. Can accept: Line, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Line;
	/** Returns the first Line in the collection. */
	firstItem(): Line;
	/** Returns the last Line in the collection. */
	lastItem(): Line;
	/** Returns the middle Line in the collection. */
	middleItem(): Line;
	/**
	 * Returns the Line with the index previous to the specified 
	 * index.
	 * @param {Line} obj - The index of the Line that follows the 
	 * desired Line.
	 */
	previousItem(obj: Line): Line;
	/**
	 * Returns the Line whose index follows the specified Line in 
	 * the collection.
	 * @param {Line} obj - The Line whose index comes before the 
	 * desired Line.
	 */
	nextItem(obj: Line): Line;
	/** Returns any Line in the collection. */
	anyItem(): Line;
	/** Returns every Line in the collection. */
	everyItem(): Line;
	/**
	 * Generates a string which, if executed, will return the Line.
	 */
	toSource(): string;
	/**
	 * Returns the Line with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Line;
}

/**
 * A text column.
 * @class
 * @extends Text
 */
export declare class TextColumn extends Text {
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/** The XML elements associated with the TextColumn. */
	readonly associatedXMLElements: XMLItem;
	/** The number of objects in the collection. */
	readonly length: number;
	/** The index of the text in the collection or parent object. */
	readonly index: number;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * An array of the text frames that contain the text. Can 
	 * return: Array of TextFrames or TextPaths.
	 */
	readonly parentTextFrames: any;
	/** The maximum ascent of any character in the text. */
	readonly ascent: number|string;
	/** The maximum descent of any character in the text. */
	readonly descent: number|string;
	/** The vertical offset of the text. */
	readonly baseline: number|string;
	/** The horizontal offset of the text. */
	readonly horizontalOffset: number|string;
	/**
	 * If true, the applied style has been overridden with 
	 * additional attributes.
	 */
	readonly styleOverridden: boolean;
	/** Vertical offset of the end of the text. */
	readonly endBaseline: number|string;
	/** Horizontal offset of the end of the text. */
	readonly endHorizontalOffset: number|string;
	/** The applied character styles dictated by nested styles. */
	readonly appliedNestedStyles: CharacterStyle;
	/** Lists all page items contained by the TextColumn. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the TextColumn. */
	readonly allGraphics: Graphic;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextColumn (a XmlStory, TextPath, 
	 * TextFrame, Text, InsertionPoint, TextStyleRange, Paragraph, 
	 * TextColumn, Line, Word, Character, Story, Cell, XMLElement, 
	 * Footnote, Note, Change or HiddenText).
	 */
	readonly parent: any;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em.
	 */
	kerningValue: number;
	/**
	 * The font applied to the TextColumn, specified as either a 
	 * font object or the name of font family. Can return: Font or 
	 * String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the TextColumn. */
	horizontalScale: number;
	/** The vertical scaling applied to the TextColumn. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the TextColumn. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * TextColumn. (To specify a tint percentage, use a number in 
	 * the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * TextColumn. (To specify a tint percentage, use a number in 
	 * the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the TextColumn. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the TextColumn. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/** The applied conditions. */
	appliedConditions: Condition;
	/**
	 * OpenType features. Can return: Array of Array of 2 Strings 
	 * or Long Integers.
	 */
	opentypeFeatures: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/** If true, ruby is on. */
	rubyFlag: boolean;
	/** The ruby string contents. */
	rubyString: string;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/** Deletes the TextColumn. */
	remove(): void;
	/**
	 * Converts the text to a table.
	 * @param {string} columnSeparator - The character that starts 
	 * a new column in the new table. (Optional)
	 * @param {string} rowSeparator - The character starts a new 
	 * row in the new table. (Optional)
	 * @param {number} numberOfColumns - The number of columns in 
	 * the table. Note: Valid only when the column and row 
	 * separator characters are the same. (Optional)
	 */
	convertToTable(columnSeparator: string, rowSeparator: string, numberOfColumns?: number): Table;
	/**
	 * Sets the case of the text.
	 * @param {ChangecaseMode} using - The text case option.
	 */
	changecase(using: ChangecaseMode): void;
	/**
	 * Clears the specified types of override.
	 * @param {OverrideType} overridesToClear - The types of 
	 * override to clear. (Optional)
	 */
	clearOverrides(overridesToClear?: OverrideType): void;
	/** Recomposes the text in the TextColumn. */
	recompose(): void;
	/** Jump to the text range. */
	showText(): void;
	/**
	 * Apply a paragraph style.
	 * @param {ParagraphStyle} using - The paragraph style to 
	 * apply.
	 * @param {boolean} clearingOverrides - If true, clear any text 
	 * attributes before applying the style. (Optional)
	 */
	applyParagraphStyle(using: ParagraphStyle, clearingOverrides?: boolean): void;
	/**
	 * Apply a character style.
	 * @param {CharacterStyle} using - The character style to 
	 * apply.
	 */
	applyCharacterStyle(using: CharacterStyle): void;
	/**
	 * Duplicates the text in the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	duplicate(to: LocationOptions, reference: any): Text;
	/**
	 * Moves the text to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	move(to: LocationOptions, reference: any): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/** Converts the text to a note. */
	convertToNote(): Note;
	/**
	 * Finds hyperlink sources that intersecting with specified 
	 * text range.
	 * @param {RangeSortOrder} sortOrder - The sort order of found 
	 * ranges. (Optional)
	 */
	findHyperlinks(sortOrder: RangeSortOrder): HyperlinkTextSource;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextColumn. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextColumn. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextColumn. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextColumn. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextColumn. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Apply one or more conditions.
	 * @param {Condition} using - The condition(s) to apply
	 * @param {boolean} removeExisting - If true, remove existing 
	 * conditions. (Optional)
	 */
	applyConditions(using: Condition, removeExisting?: boolean): void;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the TextColumn in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Create thumbnail for selected text with the given 
	 * properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File): boolean;
	/**
	 * If true, text has local overrides
	 * @param {StyleType} charOrParaStyle - Style type to look at.
	 * @param {boolean} charStyleAsOverride - Whether to consider 
	 * character styles as overrides or not (Optional)
	 */
	textHasOverrides(charOrParaStyle: StyleType, charStyleAsOverride?: boolean): boolean;
	/**
	 * Create thumbnail for selected text using the applied style 
	 * and overrides with the given properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 * @param {StyleType} charOrParaStyle - The applied style type 
	 * to use.
	 */
	createStyleThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File, charOrParaStyle: StyleType): boolean;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextColumn.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextColumn;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of text columns.
 * @class
 */
export declare class TextColumns {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the TextColumn. */
	count(): number;
	/**
	 * Returns the TextColumn with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TextColumn;
	/**
	 * Returns the TextColumns within the specified range.
	 * @param {any} _from - The TextColumn, index, or name at the 
	 * beginning of the range. Can accept: TextColumn, Long Integer 
	 * or String.
	 * @param {any} to - The TextColumn, index, or name at the end 
	 * of the range. Can accept: TextColumn, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): TextColumn;
	/** Returns the first TextColumn in the collection. */
	firstItem(): TextColumn;
	/** Returns the last TextColumn in the collection. */
	lastItem(): TextColumn;
	/** Returns the middle TextColumn in the collection. */
	middleItem(): TextColumn;
	/**
	 * Returns the TextColumn with the index previous to the 
	 * specified index.
	 * @param {TextColumn} obj - The index of the TextColumn that 
	 * follows the desired TextColumn.
	 */
	previousItem(obj: TextColumn): TextColumn;
	/**
	 * Returns the TextColumn whose index follows the specified 
	 * TextColumn in the collection.
	 * @param {TextColumn} obj - The TextColumn whose index comes 
	 * before the desired TextColumn.
	 */
	nextItem(obj: TextColumn): TextColumn;
	/** Returns any TextColumn in the collection. */
	anyItem(): TextColumn;
	/** Returns every TextColumn in the collection. */
	everyItem(): TextColumn;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextColumn.
	 */
	toSource(): string;
	/**
	 * Returns the TextColumn with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TextColumn;
}

/**
 * A paragraph.
 * @class
 * @extends Text
 */
export declare class Paragraph extends Text {
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/** The current bullets or numbering string. */
	readonly bulletsAndNumberingResultText: string;
	/** The current level number value. */
	readonly numberingResultNumber: number;
	/** The XML elements associated with the Paragraph. */
	readonly associatedXMLElements: XMLItem;
	/** The number of objects in the collection. */
	readonly length: number;
	/** The index of the text in the collection or parent object. */
	readonly index: number;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * An array of the text frames that contain the text. Can 
	 * return: Array of TextFrames or TextPaths.
	 */
	readonly parentTextFrames: any;
	/** The maximum ascent of any character in the text. */
	readonly ascent: number|string;
	/** The maximum descent of any character in the text. */
	readonly descent: number|string;
	/** The vertical offset of the text. */
	readonly baseline: number|string;
	/** The horizontal offset of the text. */
	readonly horizontalOffset: number|string;
	/**
	 * If true, the applied style has been overridden with 
	 * additional attributes.
	 */
	readonly styleOverridden: boolean;
	/** Vertical offset of the end of the text. */
	readonly endBaseline: number|string;
	/** Horizontal offset of the end of the text. */
	readonly endHorizontalOffset: number|string;
	/** The applied character styles dictated by nested styles. */
	readonly appliedNestedStyles: CharacterStyle;
	/** Lists all page items contained by the Paragraph. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Paragraph. */
	readonly allGraphics: Graphic;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Paragraph (a XmlStory, TextPath, 
	 * TextFrame, Text, InsertionPoint, TextStyleRange, Paragraph, 
	 * TextColumn, Line, Word, Character, Story, Cell, XMLElement, 
	 * Footnote, Note, Change or HiddenText).
	 */
	readonly parent: any;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em.
	 */
	kerningValue: number;
	/**
	 * The font applied to the Paragraph, specified as either a 
	 * font object or the name of font family. Can return: Font or 
	 * String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the Paragraph. */
	horizontalScale: number;
	/** The vertical scaling applied to the Paragraph. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the Paragraph. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * Paragraph. (To specify a tint percentage, use a number in 
	 * the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * Paragraph. (To specify a tint percentage, use a number in 
	 * the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Paragraph. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Paragraph. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/** The applied conditions. */
	appliedConditions: Condition;
	/**
	 * OpenType features. Can return: Array of Array of 2 Strings 
	 * or Long Integers.
	 */
	opentypeFeatures: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/** If true, ruby is on. */
	rubyFlag: boolean;
	/** The ruby string contents. */
	rubyString: string;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/** Deletes the Paragraph. */
	remove(): void;
	/**
	 * Converts the text to a table.
	 * @param {string} columnSeparator - The character that starts 
	 * a new column in the new table. (Optional)
	 * @param {string} rowSeparator - The character starts a new 
	 * row in the new table. (Optional)
	 * @param {number} numberOfColumns - The number of columns in 
	 * the table. Note: Valid only when the column and row 
	 * separator characters are the same. (Optional)
	 */
	convertToTable(columnSeparator: string, rowSeparator: string, numberOfColumns?: number): Table;
	/**
	 * Sets the case of the text.
	 * @param {ChangecaseMode} using - The text case option.
	 */
	changecase(using: ChangecaseMode): void;
	/**
	 * Clears the specified types of override.
	 * @param {OverrideType} overridesToClear - The types of 
	 * override to clear. (Optional)
	 */
	clearOverrides(overridesToClear?: OverrideType): void;
	/** Recomposes the text in the Paragraph. */
	recompose(): void;
	/** Jump to the text range. */
	showText(): void;
	/**
	 * Apply a paragraph style.
	 * @param {ParagraphStyle} using - The paragraph style to 
	 * apply.
	 * @param {boolean} clearingOverrides - If true, clear any text 
	 * attributes before applying the style. (Optional)
	 */
	applyParagraphStyle(using: ParagraphStyle, clearingOverrides?: boolean): void;
	/**
	 * Apply a character style.
	 * @param {CharacterStyle} using - The character style to 
	 * apply.
	 */
	applyCharacterStyle(using: CharacterStyle): void;
	/**
	 * Duplicates the text in the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	duplicate(to: LocationOptions, reference: any): Text;
	/**
	 * Moves the text to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	move(to: LocationOptions, reference: any): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/** Converts the text to a note. */
	convertToNote(): Note;
	/**
	 * Finds hyperlink sources that intersecting with specified 
	 * text range.
	 * @param {RangeSortOrder} sortOrder - The sort order of found 
	 * ranges. (Optional)
	 */
	findHyperlinks(sortOrder: RangeSortOrder): HyperlinkTextSource;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Paragraph. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Paragraph. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Paragraph. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Paragraph. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new Paragraph. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Apply one or more conditions.
	 * @param {Condition} using - The condition(s) to apply
	 * @param {boolean} removeExisting - If true, remove existing 
	 * conditions. (Optional)
	 */
	applyConditions(using: Condition, removeExisting?: boolean): void;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the Paragraph in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Create thumbnail for selected text with the given 
	 * properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File): boolean;
	/**
	 * If true, text has local overrides
	 * @param {StyleType} charOrParaStyle - Style type to look at.
	 * @param {boolean} charStyleAsOverride - Whether to consider 
	 * character styles as overrides or not (Optional)
	 */
	textHasOverrides(charOrParaStyle: StyleType, charStyleAsOverride?: boolean): boolean;
	/**
	 * Create thumbnail for selected text using the applied style 
	 * and overrides with the given properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 * @param {StyleType} charOrParaStyle - The applied style type 
	 * to use.
	 */
	createStyleThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File, charOrParaStyle: StyleType): boolean;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * Paragraph.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Paragraph;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of paragraphs.
 * @class
 */
export declare class Paragraphs {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Paragraph. */
	count(): number;
	/**
	 * Returns the Paragraph with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Paragraph;
	/**
	 * Returns the Paragraphs within the specified range.
	 * @param {any} _from - The Paragraph, index, or name at the 
	 * beginning of the range. Can accept: Paragraph, Long Integer 
	 * or String.
	 * @param {any} to - The Paragraph, index, or name at the end 
	 * of the range. Can accept: Paragraph, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Paragraph;
	/** Returns the first Paragraph in the collection. */
	firstItem(): Paragraph;
	/** Returns the last Paragraph in the collection. */
	lastItem(): Paragraph;
	/** Returns the middle Paragraph in the collection. */
	middleItem(): Paragraph;
	/**
	 * Returns the Paragraph with the index previous to the 
	 * specified index.
	 * @param {Paragraph} obj - The index of the Paragraph that 
	 * follows the desired Paragraph.
	 */
	previousItem(obj: Paragraph): Paragraph;
	/**
	 * Returns the Paragraph whose index follows the specified 
	 * Paragraph in the collection.
	 * @param {Paragraph} obj - The Paragraph whose index comes 
	 * before the desired Paragraph.
	 */
	nextItem(obj: Paragraph): Paragraph;
	/** Returns any Paragraph in the collection. */
	anyItem(): Paragraph;
	/** Returns every Paragraph in the collection. */
	everyItem(): Paragraph;
	/**
	 * Generates a string which, if executed, will return the 
	 * Paragraph.
	 */
	toSource(): string;
	/**
	 * Returns the Paragraph with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Paragraph;
}

/**
 * A continuous range of identical text formatting attributes.
 * @class
 * @extends Text
 */
export declare class TextStyleRange extends Text {
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/** The XML elements associated with the TextStyleRange. */
	readonly associatedXMLElements: XMLItem;
	/** The number of objects in the collection. */
	readonly length: number;
	/** The index of the text in the collection or parent object. */
	readonly index: number;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * An array of the text frames that contain the text. Can 
	 * return: Array of TextFrames or TextPaths.
	 */
	readonly parentTextFrames: any;
	/** The maximum ascent of any character in the text. */
	readonly ascent: number|string;
	/** The maximum descent of any character in the text. */
	readonly descent: number|string;
	/** The vertical offset of the text. */
	readonly baseline: number|string;
	/** The horizontal offset of the text. */
	readonly horizontalOffset: number|string;
	/**
	 * If true, the applied style has been overridden with 
	 * additional attributes.
	 */
	readonly styleOverridden: boolean;
	/** Vertical offset of the end of the text. */
	readonly endBaseline: number|string;
	/** Horizontal offset of the end of the text. */
	readonly endHorizontalOffset: number|string;
	/** The applied character styles dictated by nested styles. */
	readonly appliedNestedStyles: CharacterStyle;
	/** Lists all page items contained by the TextStyleRange. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the TextStyleRange. */
	readonly allGraphics: Graphic;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextStyleRange (a XmlStory, TextPath, 
	 * TextFrame, Text, InsertionPoint, TextStyleRange, Paragraph, 
	 * TextColumn, Line, Word, Character, Story, Cell, XMLElement, 
	 * Footnote, Note, Change or HiddenText).
	 */
	readonly parent: any;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** The applied conditions. */
	appliedConditions: Condition;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em.
	 */
	kerningValue: number;
	/**
	 * The font applied to the TextStyleRange, specified as either 
	 * a font object or the name of font family. Can return: Font 
	 * or String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the TextStyleRange. */
	horizontalScale: number;
	/** The vertical scaling applied to the TextStyleRange. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the TextStyleRange. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * TextStyleRange. (To specify a tint percentage, use a number 
	 * in the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * TextStyleRange. (To specify a tint percentage, use a number 
	 * in the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the TextStyleRange. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the TextStyleRange. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/**
	 * OpenType features. Can return: Array of Array of 2 Strings 
	 * or Long Integers.
	 */
	opentypeFeatures: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/** If true, ruby is on. */
	rubyFlag: boolean;
	/** The ruby string contents. */
	rubyString: string;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/** Deletes the TextStyleRange. */
	remove(): void;
	/**
	 * Converts the text to a table.
	 * @param {string} columnSeparator - The character that starts 
	 * a new column in the new table. (Optional)
	 * @param {string} rowSeparator - The character starts a new 
	 * row in the new table. (Optional)
	 * @param {number} numberOfColumns - The number of columns in 
	 * the table. Note: Valid only when the column and row 
	 * separator characters are the same. (Optional)
	 */
	convertToTable(columnSeparator: string, rowSeparator: string, numberOfColumns?: number): Table;
	/**
	 * Sets the case of the text.
	 * @param {ChangecaseMode} using - The text case option.
	 */
	changecase(using: ChangecaseMode): void;
	/**
	 * Clears the specified types of override.
	 * @param {OverrideType} overridesToClear - The types of 
	 * override to clear. (Optional)
	 */
	clearOverrides(overridesToClear?: OverrideType): void;
	/** Recomposes the text in the TextStyleRange. */
	recompose(): void;
	/** Jump to the text range. */
	showText(): void;
	/**
	 * Apply a paragraph style.
	 * @param {ParagraphStyle} using - The paragraph style to 
	 * apply.
	 * @param {boolean} clearingOverrides - If true, clear any text 
	 * attributes before applying the style. (Optional)
	 */
	applyParagraphStyle(using: ParagraphStyle, clearingOverrides?: boolean): void;
	/**
	 * Apply a character style.
	 * @param {CharacterStyle} using - The character style to 
	 * apply.
	 */
	applyCharacterStyle(using: CharacterStyle): void;
	/**
	 * Duplicates the text in the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	duplicate(to: LocationOptions, reference: any): Text;
	/**
	 * Moves the text to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	move(to: LocationOptions, reference: any): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/** Converts the text to a note. */
	convertToNote(): Note;
	/**
	 * Finds hyperlink sources that intersecting with specified 
	 * text range.
	 * @param {RangeSortOrder} sortOrder - The sort order of found 
	 * ranges. (Optional)
	 */
	findHyperlinks(sortOrder: RangeSortOrder): HyperlinkTextSource;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextStyleRange. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextStyleRange. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextStyleRange. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextStyleRange. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextStyleRange. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Apply one or more conditions.
	 * @param {Condition} using - The condition(s) to apply
	 * @param {boolean} removeExisting - If true, remove existing 
	 * conditions. (Optional)
	 */
	applyConditions(using: Condition, removeExisting?: boolean): void;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the TextStyleRange in relation to previously 
	 * selected objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Create thumbnail for selected text with the given 
	 * properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File): boolean;
	/**
	 * If true, text has local overrides
	 * @param {StyleType} charOrParaStyle - Style type to look at.
	 * @param {boolean} charStyleAsOverride - Whether to consider 
	 * character styles as overrides or not (Optional)
	 */
	textHasOverrides(charOrParaStyle: StyleType, charStyleAsOverride?: boolean): boolean;
	/**
	 * Create thumbnail for selected text using the applied style 
	 * and overrides with the given properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 * @param {StyleType} charOrParaStyle - The applied style type 
	 * to use.
	 */
	createStyleThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File, charOrParaStyle: StyleType): boolean;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextStyleRange.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextStyleRange;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of text style ranges.
 * @class
 */
export declare class TextStyleRanges {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the TextStyleRange. */
	count(): number;
	/**
	 * Returns the TextStyleRange with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TextStyleRange;
	/**
	 * Returns the TextStyleRanges within the specified range.
	 * @param {any} _from - The TextStyleRange, index, or name at 
	 * the beginning of the range. Can accept: TextStyleRange, Long 
	 * Integer or String.
	 * @param {any} to - The TextStyleRange, index, or name at the 
	 * end of the range. Can accept: TextStyleRange, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): TextStyleRange;
	/** Returns the first TextStyleRange in the collection. */
	firstItem(): TextStyleRange;
	/** Returns the last TextStyleRange in the collection. */
	lastItem(): TextStyleRange;
	/** Returns the middle TextStyleRange in the collection. */
	middleItem(): TextStyleRange;
	/**
	 * Returns the TextStyleRange with the index previous to the 
	 * specified index.
	 * @param {TextStyleRange} obj - The index of the 
	 * TextStyleRange that follows the desired TextStyleRange.
	 */
	previousItem(obj: TextStyleRange): TextStyleRange;
	/**
	 * Returns the TextStyleRange whose index follows the specified 
	 * TextStyleRange in the collection.
	 * @param {TextStyleRange} obj - The TextStyleRange whose index 
	 * comes before the desired TextStyleRange.
	 */
	nextItem(obj: TextStyleRange): TextStyleRange;
	/** Returns any TextStyleRange in the collection. */
	anyItem(): TextStyleRange;
	/** Returns every TextStyleRange in the collection. */
	everyItem(): TextStyleRange;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextStyleRange.
	 */
	toSource(): string;
	/**
	 * Returns the TextStyleRange with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TextStyleRange;
}

/**
 * An insertion point between two characters.
 * @class
 * @extends Text
 */
export declare class InsertionPoint extends Text {
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/** The XML elements associated with the InsertionPoint. */
	readonly associatedXMLElements: XMLItem;
	/** The number of objects in the collection. */
	readonly length: number;
	/** The index of the text in the collection or parent object. */
	readonly index: number;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * An array of the text frames that contain the text. Can 
	 * return: Array of TextFrames or TextPaths.
	 */
	readonly parentTextFrames: any;
	/** The maximum ascent of any character in the text. */
	readonly ascent: number|string;
	/** The maximum descent of any character in the text. */
	readonly descent: number|string;
	/** The vertical offset of the text. */
	readonly baseline: number|string;
	/** The horizontal offset of the text. */
	readonly horizontalOffset: number|string;
	/**
	 * If true, the applied style has been overridden with 
	 * additional attributes.
	 */
	readonly styleOverridden: boolean;
	/** Vertical offset of the end of the text. */
	readonly endBaseline: number|string;
	/** Horizontal offset of the end of the text. */
	readonly endHorizontalOffset: number|string;
	/** The applied character styles dictated by nested styles. */
	readonly appliedNestedStyles: CharacterStyle;
	/** Lists all page items contained by the InsertionPoint. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the InsertionPoint. */
	readonly allGraphics: Graphic;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the InsertionPoint (a XmlStory, TextPath, 
	 * TextFrame, Text, InsertionPoint, TextStyleRange, Paragraph, 
	 * TextColumn, Line, Word, Character, Story, Cell, XMLElement, 
	 * Footnote, Note, Change or HiddenText).
	 */
	readonly parent: any;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/**
	 * The amount of space to add or remove between characters, 
	 * specified in thousands of an em.
	 */
	kerningValue: number;
	/**
	 * The font applied to the InsertionPoint, specified as either 
	 * a font object or the name of font family. Can return: Font 
	 * or String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the InsertionPoint. */
	horizontalScale: number;
	/** The vertical scaling applied to the InsertionPoint. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the InsertionPoint. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * InsertionPoint. (To specify a tint percentage, use a number 
	 * in the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * InsertionPoint. (To specify a tint percentage, use a number 
	 * in the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the InsertionPoint. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the InsertionPoint. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/** The applied conditions. */
	appliedConditions: Condition;
	/**
	 * OpenType features. Can return: Array of Array of 2 Strings 
	 * or Long Integers.
	 */
	opentypeFeatures: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/** If true, ruby is on. */
	rubyFlag: boolean;
	/** The ruby string contents. */
	rubyString: string;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/** Deletes the InsertionPoint. */
	remove(): void;
	/**
	 * Converts the text to a table.
	 * @param {string} columnSeparator - The character that starts 
	 * a new column in the new table. (Optional)
	 * @param {string} rowSeparator - The character starts a new 
	 * row in the new table. (Optional)
	 * @param {number} numberOfColumns - The number of columns in 
	 * the table. Note: Valid only when the column and row 
	 * separator characters are the same. (Optional)
	 */
	convertToTable(columnSeparator: string, rowSeparator: string, numberOfColumns?: number): Table;
	/**
	 * Sets the case of the text.
	 * @param {ChangecaseMode} using - The text case option.
	 */
	changecase(using: ChangecaseMode): void;
	/**
	 * Clears the specified types of override.
	 * @param {OverrideType} overridesToClear - The types of 
	 * override to clear. (Optional)
	 */
	clearOverrides(overridesToClear?: OverrideType): void;
	/** Recomposes the text in the InsertionPoint. */
	recompose(): void;
	/** Jump to the text range. */
	showText(): void;
	/**
	 * Apply a paragraph style.
	 * @param {ParagraphStyle} using - The paragraph style to 
	 * apply.
	 * @param {boolean} clearingOverrides - If true, clear any text 
	 * attributes before applying the style. (Optional)
	 */
	applyParagraphStyle(using: ParagraphStyle, clearingOverrides?: boolean): void;
	/**
	 * Apply a character style.
	 * @param {CharacterStyle} using - The character style to 
	 * apply.
	 */
	applyCharacterStyle(using: CharacterStyle): void;
	/**
	 * Duplicates the text in the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	duplicate(to: LocationOptions, reference: any): Text;
	/**
	 * Moves the text to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	move(to: LocationOptions, reference: any): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/** Converts the text to a note. */
	convertToNote(): Note;
	/**
	 * Finds hyperlink sources that intersecting with specified 
	 * text range.
	 * @param {RangeSortOrder} sortOrder - The sort order of found 
	 * ranges. (Optional)
	 */
	findHyperlinks(sortOrder: RangeSortOrder): HyperlinkTextSource;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new InsertionPoint. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new InsertionPoint. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new InsertionPoint. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new InsertionPoint. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new InsertionPoint. Above parameters can 
	 * also be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Apply one or more conditions.
	 * @param {Condition} using - The condition(s) to apply
	 * @param {boolean} removeExisting - If true, remove existing 
	 * conditions. (Optional)
	 */
	applyConditions(using: Condition, removeExisting?: boolean): void;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the InsertionPoint in relation to previously 
	 * selected objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Create thumbnail for selected text with the given 
	 * properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File): boolean;
	/**
	 * If true, text has local overrides
	 * @param {StyleType} charOrParaStyle - Style type to look at.
	 * @param {boolean} charStyleAsOverride - Whether to consider 
	 * character styles as overrides or not (Optional)
	 */
	textHasOverrides(charOrParaStyle: StyleType, charStyleAsOverride?: boolean): boolean;
	/**
	 * Create thumbnail for selected text using the applied style 
	 * and overrides with the given properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 * @param {StyleType} charOrParaStyle - The applied style type 
	 * to use.
	 */
	createStyleThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File, charOrParaStyle: StyleType): boolean;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * InsertionPoint.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): InsertionPoint;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of insertion points.
 * @class
 */
export declare class InsertionPoints {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the InsertionPoint. */
	count(): number;
	/**
	 * Returns the InsertionPoint with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): InsertionPoint;
	/**
	 * Returns the InsertionPoints within the specified range.
	 * @param {any} _from - The InsertionPoint, index, or name at 
	 * the beginning of the range. Can accept: InsertionPoint, Long 
	 * Integer or String.
	 * @param {any} to - The InsertionPoint, index, or name at the 
	 * end of the range. Can accept: InsertionPoint, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): InsertionPoint;
	/** Returns the first InsertionPoint in the collection. */
	firstItem(): InsertionPoint;
	/** Returns the last InsertionPoint in the collection. */
	lastItem(): InsertionPoint;
	/** Returns the middle InsertionPoint in the collection. */
	middleItem(): InsertionPoint;
	/**
	 * Returns the InsertionPoint with the index previous to the 
	 * specified index.
	 * @param {InsertionPoint} obj - The index of the 
	 * InsertionPoint that follows the desired InsertionPoint.
	 */
	previousItem(obj: InsertionPoint): InsertionPoint;
	/**
	 * Returns the InsertionPoint whose index follows the specified 
	 * InsertionPoint in the collection.
	 * @param {InsertionPoint} obj - The InsertionPoint whose index 
	 * comes before the desired InsertionPoint.
	 */
	nextItem(obj: InsertionPoint): InsertionPoint;
	/** Returns any InsertionPoint in the collection. */
	anyItem(): InsertionPoint;
	/** Returns every InsertionPoint in the collection. */
	everyItem(): InsertionPoint;
	/**
	 * Generates a string which, if executed, will return the 
	 * InsertionPoint.
	 */
	toSource(): string;
	/**
	 * Returns the InsertionPoint with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: InsertionPoint;
}

/**
 * A text frame.
 * @class
 * @extends PageItem
 */
export declare class TextFrame extends PageItem {
	/**
	 * Dispatched before a TextFrame is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a TextFrame is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** Transparency settings. */
	readonly transparencySettings: TransparencySetting;
	/** Transparency settings for the stroke. */
	readonly strokeTransparencySettings: StrokeTransparencySetting;
	/**
	 * Transparency settings for the fill applied to the TextFrame.
	 */
	readonly fillTransparencySettings: FillTransparencySetting;
	/** Transparency settings for the content of the TextFrame. */
	readonly contentTransparencySettings: ContentTransparencySetting;
	/** Text frame preference settings. */
	readonly textFramePreferences: TextFramePreference;
	/** Baseline frame grid option settings. */
	readonly baselineFrameGridOptions: BaselineFrameGridOption;
	/** Text frame footnote options settings. */
	readonly textFrameFootnoteOptions: TextFrameFootnoteOptionsObject;
	/** Anchored object settings. */
	readonly anchoredObjectSettings: AnchoredObjectSetting;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * The first text frame in the thread. Can return: TextFrame or 
	 * TextPath.
	 */
	readonly startTextFrame: any;
	/**
	 * The last text frame in the thread. Can return: TextFrame or 
	 * TextPath.
	 */
	readonly endTextFrame: any;
	/** The index of the text frame within the story. */
	readonly textFrameIndex: number;
	/** If true, the story has overset text. */
	readonly overflows: boolean;
	/**
	 * The text wrap preference properties that define the default 
	 * formatting for wrapping text around objects.
	 */
	readonly textWrapPreferences: TextWrapPreference;
	/** Export options for the object */
	readonly objectExportOptions: ObjectExportOption;
	/**
	 * Default grid properties. Note: Applies to named, layout, and 
	 * frame (story) grids.
	 */
	readonly gridData: GridDataInformation;
	/** The XML element associated with the TextFrame. */
	readonly associatedXMLElement: XMLItem;
	/** Linked Page Item options */
	readonly linkedPageItemOptions: LinkedPageItemOption;
	/**
	 * If true, the object originated on a master spread and was 
	 * overridden. If false, the object either originated on a 
	 * master spread and was not overridden, or the object did not 
	 * originate on a master page.
	 */
	readonly overridden: boolean;
	/**
	 * An object that originated on a master page and has been 
	 * overridden. Can return: PageItem, Guide, Graphic, Movie or 
	 * Sound.
	 */
	readonly overriddenMasterPageItem: any;
	/** Lists all page items contained by the TextFrame. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the TextFrame. */
	readonly allGraphics: Graphic;
	/** The page on which this page item appears. */
	readonly parentPage: Page;
	/** The page item animation settings. */
	readonly animationSettings: AnimationSetting;
	/** The object timing settings. */
	readonly timingSettings: TimingSetting;
	/** The list of all articles this page item is part of */
	readonly allArticles: Article;
	/** The unique ID of the TextFrame. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextFrame (a ComboBox, ListBox, TextBox, 
	 * SignatureField, Spread, MasterSpread, SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, Group, State, Cell, Character, 
	 * PlaceGun or Snippet).
	 */
	readonly parent: any;
	/** The index of the TextFrame within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of paths. */
	readonly paths: Paths;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of text paths. */
	readonly textPaths: TextPaths;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/**
	 * The bounds of the TextFrame excluding the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: number|string;
	/**
	 * The bounds of the TextFrame including the stroke width, in 
	 * the format [y1, x1, y2, x2], which give the coordinates of 
	 * the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: number|string;
	/**
	 * The previous text frame in the thread. Can return: TextFrame 
	 * or TextPath. Can also accept: NothingEnum enumerator.
	 */
	previousTextFrame: any;
	/**
	 * The next text frame in the thread. Can return: TextFrame or 
	 * TextPath. Can also accept: NothingEnum enumerator.
	 */
	nextTextFrame: any;
	/**
	 * The contents of the text frame. Can return: String, 
	 * TextFrameContents enumerator or SpecialCharacters 
	 * enumerator.
	 */
	contents: any;
	/** The type of content that a frame can contain. */
	contentType: ContentType;
	/** If true, the master page item can be overridden. */
	allowOverrides: boolean;
	/**
	 * The left margin, width, and right margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints;
	/**
	 * The top margin, height, and bottom margin constraints this 
	 * item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the TextFrame. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The percent of tint to use in the TextFrame's fill color. 
	 * (To specify a tint percent, use a number in the range of 0 
	 * to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * If true, the TextFrame's fill color overprints any 
	 * underlying objects. If false, the fill color knocks out the 
	 * underlying colors.
	 */
	overprintFill: boolean;
	/** The weight (in points) to apply to the TextFrame's stroke. */
	strokeWeight: number|string;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The end shape of an open path. */
	endCap: EndCap;
	/** The corner join applied to the TextFrame. */
	endJoin: EndJoin;
	/**
	 * The name of the stroke style to apply. Can also accept: 
	 * String.
	 */
	strokeType: StrokeStyle;
	/** The corner adjustment applied to the TextFrame. */
	strokeCornerAdjustment: StrokeCornerAdjustment;
	/**
	 * The dash and gap measurements that define the pattern of a 
	 * custom dashed line. Define up to six values (in points) in 
	 * the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number|string;
	/** The arrowhead applied to the start of the path. */
	leftLineEnd: ArrowHead;
	/** The arrowhead applied to the end of the path. */
	rightLineEnd: ArrowHead;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the TextFrame. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The percent of tint to use in object's stroke color. (To 
	 * specify a tint percent, use a number in the range of 0 to 
	 * 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the TextFrame, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the TextFrame.
	 */
	gradientFillLength: number|string;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * TextFrame. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the TextFrame, in the format [x, 
	 * y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the TextFrame.
	 */
	gradientStrokeLength: number|string;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * TextFrame. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * If true, the TextFrame's stroke color overprints any 
	 * underlying objects. If false, the stroke color knocks out 
	 * the  underlying colors.
	 */
	overprintStroke: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of a dashed, dotted, or striped stroke. For 
	 * information, see stroke type.
	 */
	gapColor: Swatch;
	/**
	 * The tint as a percentage of the gap color. (To specify a 
	 * tint percent, use a number in the range of 0 to 100; to use 
	 * the inherited or overridden value, use -1.)
	 */
	gapTint: number;
	/**
	 * If true, the gap color overprints any underlying colors. If 
	 * false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean;
	/** The stroke alignment applied to the TextFrame. */
	strokeAlignment: StrokeAlignment;
	/** If true, the TextFrame does not print. */
	nonprinting: boolean;
	/** The layer that the TextFrame is on. */
	itemLayer: Layer;
	/** If true, the TextFrame is locked. */
	locked: boolean;
	/** Display performance options for the TextFrame. */
	localDisplaySetting: DisplaySettingOptions;
	/** The rotatation angle of the TextFrame. (Range: -360 to 360) */
	rotationAngle: number;
	/**
	 * The skewing angle applied to the TextFrame. (Range: -360 to 
	 * 360)
	 */
	shearAngle: number;
	/** The horizontal scaling applied to the TextFrame. */
	horizontalScale: number;
	/** The vertical scaling applied to the TextFrame. */
	verticalScale: number;
	/**
	 * The rotation angle of the TextFrame relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number;
	/**
	 * The skewing angle of the TextFrame relative to its 
	 * containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number;
	/**
	 * The horizontal scale of the TextFrame relative to its 
	 * containing object.
	 */
	absoluteHorizontalScale: number;
	/**
	 * The vertical scale of the TextFrame relative to its 
	 * containing object.
	 */
	absoluteVerticalScale: number;
	/** The object style applied to the TextFrame. */
	appliedObjectStyle: ObjectStyle;
	/** The direction in which to flip the printed image. */
	flip: Flip;
	/**
	 * Indicates whether the TextFrame has been flipped 
	 * independently of its parent object and, if yes, the 
	 * direction in which the TextFrame was flipped.
	 */
	absoluteFlip: Flip;
	/** If true, the TextFrame is visible. */
	visible: boolean;
	/** The name of the TextFrame. */
	name: string;
	/**
	 * The shape to be applied to the top left corner of 
	 * rectangular shapes and all corners of non-rectangular 
	 * shapes.Note: corner option differs from end join in which 
	 * you can set a radius for a corner option, whereas the 
	 * rounded or beveled effect of an end join depends on the 
	 * stroke weight.
	 */
	topLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the top right corner of rectangular 
	 * shapes
	 */
	topRightCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom left corner of rectangular 
	 * shapes.
	 */
	bottomLeftCornerOption: CornerOptions;
	/**
	 * The shape to apply to the bottom right corner of rectangular 
	 * shapes.
	 */
	bottomRightCornerOption: CornerOptions;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top left corner of rectangular shapes and all corners 
	 * of non-rectangular shapes
	 */
	topLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number|string;
	/**
	 * The radius in measurement units of the corner effect applied 
	 * to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number|string;
	/** The arrowhead alignment applied to the TextFrame. */
	arrowHeadAlignment: ArrowHeadAlignmentEnum;
	/**
	 * The scaling applied to the arrowhead at the start of the 
	 * path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number;
	/**
	 * The scaling applied to the arrowhead at the end of the path. 
	 * (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Recomposes the text in the TextFrame. */
	recompose(): void;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds objects that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds objects that match the find what value and replace the 
	 * objects with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeObject(reverseOrder: boolean): PageItem;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Deprecated: Use contentPlace method. Original Description: 
	 * Create a linked story and place it into the target page 
	 * item.
	 * @param {Story} parentStory - The story to place and link 
	 * from.
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	placeAndLink(parentStory: Story, showingOptions?: boolean): Story;
	/** Convert the text frame contents to raw text */
	convertToRawText(): void;
	/**
	 * Brings the TextFrame to the front of its layer or in front 
	 * of a particular item.
	 * @param {PageItem} reference - The reference object to bring 
	 * the object in front of (must have same parent) (Optional)
	 */
	bringToFront(reference: PageItem): void;
	/**
	 * Sends the TextFrame to the back of its layer or behind a 
	 * particular item (must have same parent).
	 * @param {PageItem} reference - The reference object to send 
	 * the object behind (Optional)
	 */
	sendToBack(reference: PageItem): void;
	/** Brings the TextFrame forward one level in its layer. */
	bringForward(): void;
	/** Sends the TextFrame back one level in its layer. */
	sendBackward(): void;
	/**
	 * Creates a compound path by combining the path(s) of the 
	 * TextFrame with the paths of other objects.
	 * @param {PageItem} _with - The other objects whose paths to 
	 * include in the new compound path.
	 */
	makeCompoundPath(_with: PageItem): PageItem;
	/** Releases a compound path. */
	releaseCompoundPath(): PageItem;
	/**
	 * Creates a new page item by intersecting the TextFrame with 
	 * other objects. Returns an error if the objects do not 
	 * intersect.
	 * @param {PageItem} _with - The object(s) with which to 
	 * intersect.
	 */
	intersectPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by combining the TextFrame with 
	 * other objects. Deletes the objects if they do not intersect.
	 * @param {PageItem} _with - The object(s) to add.
	 */
	addPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by subtracting the overlapping areas 
	 * of the TextFrame and other objects.
	 * @param {PageItem} _with - The object(s) to subtract.
	 */
	subtractPath(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by reverse subtracting the 
	 * overlapping areas of the TextFrame and other objects.
	 * @param {PageItem} _with - The object(s) to reverse subtract.
	 */
	minusBack(_with: PageItem): PageItem;
	/**
	 * Creates a new page item by excluding the overlapping areas 
	 * of the TextFrame and other objects.
	 * @param {PageItem} _with - The object(s) to exclude.
	 */
	excludeOverlapPath(_with: PageItem): PageItem;
	/**
	 * Converts the TextFrame to a different shape.
	 * @param {ConvertShapeOptions} given - The TextFrame's new 
	 * shape.
	 * @param {number} numberOfSides - The number of sides for the 
	 * resulting polygon. (Range: 3 to 100) (Optional)
	 * @param {number} insetPercentage - The star inset percentage 
	 * for the resulting polygon. (Range: 0.0 to 100.0)  (Optional)
	 * @param {number|string} cornerRadius - The corner radius of 
	 * the resulting rectangle. (Optional)
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number|string): void;
	/**
	 * Duplicate an object and place it into the target page item.
	 * @param {PageItem} pageItems - One or more page items to 
	 * place or load
	 * @param {boolean} linkPageItems - Whether to link pageItems 
	 * in content placer (if true it will override link stories 
	 * value) (Optional)
	 * @param {boolean} linkStories - Whether to link stories in 
	 * content placer (only applicable for single story, pageItem 
	 * links will also be created in case of more than one item) 
	 * (Optional)
	 * @param {boolean} mapStyles - Whether to map styles in 
	 * content placer (Optional)
	 * @param {boolean} showingOptions - Whether to display the 
	 * link options dialog (Optional)
	 */
	contentPlace(pageItems: PageItem, linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Places the file.
	 * @param {File} fileName - The file to place
	 * @param {boolean} showingOptions - Whether to display the 
	 * import options dialog (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the placed object(s) (Optional)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: Object): any;
	/**
	 * Overrides a master page item and places the item on the 
	 * document page as a new object.
	 * @param {Page} destinationPage - The document page that 
	 * contains the master page item to override.
	 */
	override(destinationPage: Page): any;
	/**
	 * Removes the override from a previously overridden master 
	 * page item.
	 */
	removeOverride(): void;
	/**
	 * Detaches an overridden master page item from the master 
	 * page.
	 */
	detach(): void;
	/** Deletes the TextFrame. */
	remove(): void;
	/**
	 * Applies the specified fit option to content in a frame.
	 * @param {FitOptions} given - The fit option to use.
	 */
	fit(given: FitOptions): void;
	/**
	 * Flips the TextFrame.
	 * @param {Flip} given - The axis around which to flip the 
	 * TextFrame.
	 * @param {any} around - The point around which to flip the 
	 * TextFrame. Can accept: Array of 2 Units or AnchorPoint 
	 * enumerator. (Optional)
	 */
	flipItem(given: Flip, around: any): void;
	/**
	 * Duplicates the TextFrame at the specified location or 
	 * offset.
	 * @param {any} to - The location of the new TextFrame, 
	 * specified in coordinates in the format [x, y]. Can accept: 
	 * Array of 2 Units, Spread, Page or Layer. (Optional)
	 * @param {number|string} by - Amount by which to offset the 
	 * new TextFrame from the original TextFrame's position. 
	 * (Optional)
	 */
	duplicate(to: any, by: number|string): PageItem;
	/**
	 * Moves the TextFrame to a new location. Note: Either the 'to' 
	 * or 'by' parameter is required; if both parameters are 
	 * defined, only the to value is used.
	 * @param {any} to - The new location of the TextFrame,in the 
	 * format (x, y). Can accept: Array of 2 Units, Spread, Page or 
	 * Layer. (Optional)
	 * @param {number|string} by - The amount (in measurement 
	 * units) to move the TextFrame relative to its current 
	 * position, in the format (x, y). (Optional)
	 */
	move(to: any, by: number|string): void;
	/**
	 * Applies the specified object style.
	 * @param {ObjectStyle} using - The object style to apply.
	 * @param {boolean} clearingOverrides - If true, clears the 
	 * TextFrame's existing attributes before applying the style. 
	 * (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears attributes and formatting applied to the 
	 * TextFrame that are not defined in the object style. 
	 * (Optional)
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/** Clear overrides for object style */
	clearObjectStyleOverrides(): void;
	/**
	 * Clears transformations from the TextFrame. Transformations 
	 * include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void;
	/**
	 * Transform the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 * @param {any} _from - The temporary origin during the 
	 * transformation. Can accept: Array of 2 Reals, AnchorPoint 
	 * enumerator or Array of Arrays of 2 Reals, CoordinateSpaces 
	 * enumerators, AnchorPoint enumerators, BoundingBoxLimits 
	 * enumerators or Long Integers.
	 * @param {any} withMatrix - Transform matrix. Can accept: 
	 * Array of 6 Reals or TransformationMatrix.
	 * @param {any} replacingCurrent - Transform components to 
	 * consider; providing this optional parameter causes the 
	 * target's existing transform components to be replaced with 
	 * new values.  Without this parameter, the given matrix is 
	 * concatenated onto the target's existing transform combining 
	 * the effect of the two. Can accept: MatrixContent enumerator, 
	 * Array of MatrixContent enumerators or Long Integer. 
	 * (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler based origin is interpreted using ruler units rather 
	 * than points. The default value is false. This parameter has 
	 * no effect unless the reference point is specified relative 
	 * to a page. (Optional)
	 */
	transform(_in: CoordinateSpaces, _from: any, withMatrix: any, replacingCurrent: any, consideringRulerUnits?: boolean): void;
	/**
	 * Get the transformation values of the page item.
	 * @param {CoordinateSpaces} _in - The coordinate space to use
	 */
	transformValuesOf(_in: CoordinateSpaces): TransformationMatrix;
	/**
	 * Get the coordinates of the given location in the specified 
	 * coordinate system.
	 * @param {any} location - The location requested. Can accept: 
	 * Array of 2 Reals, AnchorPoint enumerator or Array of Arrays 
	 * of 2 Reals, CoordinateSpaces enumerators, AnchorPoint 
	 * enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param {CoordinateSpaces} _in - The coordinate space to use.
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resolve(location: any, _in: CoordinateSpaces, consideringRulerUnits?: boolean): any;
	/**
	 * Apply an item's scaling to its content if possible.
	 * @param {number} to - The scale factors to be left on the 
	 * item.  The default is {1.0, 1.0}. (Optional)
	 */
	redefineScaling(to: number): void;
	/**
	 * Resize the page item.
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator, BoundingBoxLimits enumerator or 
	 * Ordered array containing coordinateSpace:CoordinateSpaces 
	 * enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} _from - The transform origin. Legal 
	 * specifications: relative to bounding box: anchor | {anchor | 
	 * {x,y}, bounds kind [, coordinate space]}; relative to 
	 * coordinate space: {x,y} | {{x,y}[, coordinate space]}; 
	 * relative to layout window ruler: {{x,y}, page index | bounds 
	 * kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator 
	 * or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, 
	 * AnchorPoint enumerators, BoundingBoxLimits enumerators or 
	 * Long Integers.
	 * @param {ResizeMethods} by - How the current dimensions are 
	 * affected by the given values
	 * @param {any} values - The width and height values. Legal 
	 * dimensions specifications: {x, y [, coordinate space]}, {x, 
	 * resize constraint [, coordinate space]}, or {resize 
	 * constraint, y [, coordinate space]}; where x and y are real 
	 * numbers and coordinate space is used to determine _only_ the 
	 * unit of length for x and y; coordinate space is ignored for 
	 * the 'current dimensions times' resize method). Can accept: 
	 * Array of Reals, ResizeConstraints enumerators or 
	 * CoordinateSpaces enumerators.
	 * @param {boolean} resizeIndividually - If false and multiple 
	 * page items are targeted, the new dimensions are attained 
	 * only by moving the individual items rather than resizing 
	 * them. (Optional)
	 * @param {boolean} consideringRulerUnits - If true then a 
	 * ruler location is interpreted using ruler units rather than 
	 * points. The default value is false. This parameter has no 
	 * effect unless the reference point is specified relative to a 
	 * page. (Optional)
	 */
	resize(_in: any, _from: any, by: ResizeMethods, values: any, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void;
	/**
	 * Move the bounding box of the page item
	 * @param {any} _in - The bounding box to resize. Can accept: 
	 * CoordinateSpaces enumerator or Ordered array containing 
	 * coordinateSpace:CoordinateSpaces enumerator, 
	 * boundsKind:BoundingBoxLimits enumerator.
	 * @param {any} opposingCorners - Opposing corners of new 
	 * bounding box in the given coordinate space
	 */
	reframe(_in: any, opposingCorners: any): void;
	/**
	 * Transforms the TextFrame using the last transformation 
	 * performed on any object. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string;
	/**
	 * Transforms the TextFrame using the last sequence of 
	 * transform operations performed on any single object or 
	 * performed at the same time on any group of objects. 
	 * Transformations include moving, rotating, shearing, scaling, 
	 * and flipping.
	 */
	transformSequenceAgain(): string;
	/**
	 * Transforms the TextFrame using the last transformation 
	 * performed on any TextFrame. Transformations include moving, 
	 * rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string;
	/**
	 * Transforms the TextFrame using the last sequence of 
	 * transformations performed on any single object or performed 
	 * at the same time on any group of objects. Transformations 
	 * include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string;
	/**
	 * Create Plain Text QR Code on the page item
	 * @param {string} plainText - QR code Plain Text  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextFrame. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param {string} urlLink - QR code Hyperlink URL  (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextFrame. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param {string} cellNumber - QR code Text Phone Number 
	 * (Optional)
	 * @param {string} textMessage - QR code Text Message 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextFrame. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Email QR Code on the page item or document
	 * @param {string} emailAddress - QR code Email Address 
	 * (Optional)
	 * @param {string} subject - QR code Email Subject (Optional)
	 * @param {string} body - QR code Email Body Message (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextFrame. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Create Business Card QR Code on the page item or load on 
	 * document's placegun
	 * @param {string} firstName - QR code Business Card First Name 
	 * (Optional)
	 * @param {string} lastName - QR code Business Card Last Name 
	 * (Optional)
	 * @param {string} jobTitle - QR code Business Card Title 
	 * (Optional)
	 * @param {string} cellPhone - QR code Business Card Cell Phone 
	 * Number (Optional)
	 * @param {string} phone - QR code Business Card Phone Number 
	 * (Optional)
	 * @param {string} email - QR code Business Card Email Address 
	 * (Optional)
	 * @param {string} organisation - QR code Business Card 
	 * Organisation (Optional)
	 * @param {string} streetAddress - QR code Business Card Street 
	 * Address (Optional)
	 * @param {string} city - QR code Business Card City (Optional)
	 * @param {string} adrState - QR code Business Card State 
	 * (Optional)
	 * @param {string} country - QR code Business Card Country 
	 * (Optional)
	 * @param {string} postalCode - QR code Business Card Postal 
	 * Code (Optional)
	 * @param {string} website - QR code Business Card URL 
	 * (Optional)
	 * @param {any} qrCodeSwatch - Swatch to be applied on 
	 * generated QR Code Graphic . Can accept: Swatch or String. 
	 * (Optional)
	 * @param {string} withProperties - Initial values for 
	 * properties of the new TextFrame. Above parameters can also 
	 * be passed as properties (Optional)
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: any, withProperties: string): void;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the TextFrame in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TextFrame (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextFrame.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextFrame;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of text frames.
 * @class
 */
export declare class TextFrames {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new TextFrame
	 * @param {Layer} layer - The layer on which to create the 
	 * TextFrame. (Optional)
	 * @param {LocationOptions} at - The location at which to 
	 * insert the TextFrame relative to the reference object or 
	 * within the container object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter is before or after. Can 
	 * accept: Document, Spread, MasterSpread, Page, Layer or 
	 * PageItem. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TextFrame (Optional)
	 */
	add(layer: Layer, at?: LocationOptions, reference?: any, withProperties?: Object): TextFrame;
	/** Displays the number of elements in the TextFrame. */
	count(): number;
	/**
	 * Returns the TextFrame with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TextFrame;
	/**
	 * Returns the TextFrame with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TextFrame;
	/**
	 * Returns the TextFrame with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): TextFrame;
	/**
	 * Returns the TextFrames within the specified range.
	 * @param {any} _from - The TextFrame, index, or name at the 
	 * beginning of the range. Can accept: TextFrame, Long Integer 
	 * or String.
	 * @param {any} to - The TextFrame, index, or name at the end 
	 * of the range. Can accept: TextFrame, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): TextFrame;
	/** Returns the first TextFrame in the collection. */
	firstItem(): TextFrame;
	/** Returns the last TextFrame in the collection. */
	lastItem(): TextFrame;
	/** Returns the middle TextFrame in the collection. */
	middleItem(): TextFrame;
	/**
	 * Returns the TextFrame with the index previous to the 
	 * specified index.
	 * @param {TextFrame} obj - The index of the TextFrame that 
	 * follows the desired TextFrame.
	 */
	previousItem(obj: TextFrame): TextFrame;
	/**
	 * Returns the TextFrame whose index follows the specified 
	 * TextFrame in the collection.
	 * @param {TextFrame} obj - The TextFrame whose index comes 
	 * before the desired TextFrame.
	 */
	nextItem(obj: TextFrame): TextFrame;
	/** Returns any TextFrame in the collection. */
	anyItem(): TextFrame;
	/** Returns every TextFrame in the collection. */
	everyItem(): TextFrame;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextFrame.
	 */
	toSource(): string;
	/**
	 * Returns the TextFrame with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TextFrame;
}

/**
 * A story.
 * @class
 */
export declare class Story {
	/**
	 * Dispatched before a Story is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a Story is placed. This event bubbles. This 
	 * event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/** The XML element associated with the Story. */
	readonly associatedXMLElement: XMLItem;
	/** Story preference settings. */
	readonly storyPreferences: StoryPreference;
	/** If true, the story has overset text. */
	readonly overflows: boolean;
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * If true, the applied style has been overridden with 
	 * additional attributes.
	 */
	readonly styleOverridden: boolean;
	/** The type of story. */
	readonly storyType: StoryTypes;
	/**
	 * Array of text frames or text paths. Can return: Array of 
	 * TextFrames or TextPaths.
	 */
	readonly textContainers: any;
	/** The applied character styles dictated by nested styles. */
	readonly appliedNestedStyles: CharacterStyle;
	/** Linked story options */
	readonly linkedStoryOptions: LinkedStoryOption;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** Export options for InCopy INCX document format. */
	readonly incopyExportOptions: InCopyExportOption;
	/** Lists all page items contained by the Story. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Story. */
	readonly allGraphics: Graphic;
	/**
	 * Default grid properties. Note: Applies to named, layout, and 
	 * frame (story) grids.
	 */
	readonly gridData: GridDataInformation;
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/** The lock state. */
	readonly lockState: LockStateValues;
	/** The unique ID of the Story. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Story (a XMLElement or Document). */
	readonly parent: any;
	/** The index of the Story within its containing object. */
	readonly index: number;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of para style mappings. */
	readonly paraStyleMappings: ParaStyleMappings;
	/** A collection of char style mappings. */
	readonly charStyleMappings: CharStyleMappings;
	/** A collection of table style mappings. */
	readonly tableStyleMappings: TableStyleMappings;
	/** A collection of cell style mappings. */
	readonly cellStyleMappings: CellStyleMappings;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of changes. */
	readonly changes: Changes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/** Indicates whether the text is user or placeholder text. */
	userText: boolean;
	/**
	 * The font applied to the Story, specified as either a font 
	 * object or the name of font family. Can return: Font or 
	 * String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the Story. */
	horizontalScale: number;
	/** The vertical scaling applied to the Story. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the Story. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the Story. 
	 * (To specify a tint percentage, use a number in the range of 
	 * 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the Story. 
	 * (To specify a tint percentage, use a number in the range of 
	 * 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the Story. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the Story. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** The IDML component name of the Story. */
	idmlComponentName: string;
	/** If true, track changes is turned on. */
	trackChanges: boolean;
	/** Title for this InCopy story. */
	storyTitle: string;
	/** The named grid in use. */
	appliedNamedGrid: NamedGrid;
	/**
	 * OpenType features. Can return: Array of Array of 2 Strings 
	 * or Long Integers.
	 */
	opentypeFeatures: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/** If true, ruby is on. */
	rubyFlag: boolean;
	/** The ruby string contents. */
	rubyString: string;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the Story; this is an alias to the Story's label 
	 * property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Places XML content into the specified object. Note: Replaces 
	 * any existing content.
	 * @param {XMLElement} using - The XML element whose content 
	 * you want to place.
	 */
	placeXML(using: XMLElement): void;
	/**
	 * Tag the object or the parent story using default tags 
	 * defined in XML preference.
	 */
	autoTag(): void;
	/**
	 * Associates the page item with the specified XML element 
	 * while preserving existing content.
	 * @param {XMLElement} using - The XML element.
	 */
	markup(using: XMLElement): void;
	/**
	 * Sets the case of the text.
	 * @param {ChangecaseMode} using - The text case option.
	 */
	changecase(using: ChangecaseMode): void;
	/**
	 * Clears the specified types of override.
	 * @param {OverrideType} overridesToClear - The types of 
	 * override to clear. (Optional)
	 */
	clearOverrides(overridesToClear?: OverrideType): void;
	/** Recomposes the text in the Story. */
	recompose(): void;
	/** Deletes the Story. */
	remove(): void;
	/**
	 * Duplicates the text in the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	duplicate(to: LocationOptions, reference: any): Text;
	/**
	 * Moves the text to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	move(to: LocationOptions, reference: any): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/** Opens the story in a story editor window. */
	storyEdit(): StoryWindow;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/** Checks out the story. */
	checkOut(): boolean;
	/**
	 * Checks in the story or stories.
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	checkIn(versionComments: string, forceSave?: boolean): boolean;
	/**
	 * Reverts the document to its state at the last save 
	 * operation.
	 */
	revert(): boolean;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Story.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Story;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of stories.
 * @class
 */
export declare class Stories {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Story. */
	count(): number;
	/**
	 * Returns the Story with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Story;
	/**
	 * Returns the Story with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Story;
	/**
	 * Returns the Story with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Story;
	/**
	 * Returns the Stories within the specified range.
	 * @param {any} _from - The Story, index, or name at the 
	 * beginning of the range. Can accept: Story, Long Integer or 
	 * String.
	 * @param {any} to - The Story, index, or name at the end of 
	 * the range. Can accept: Story, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Story;
	/** Returns the first Story in the collection. */
	firstItem(): Story;
	/** Returns the last Story in the collection. */
	lastItem(): Story;
	/** Returns the middle Story in the collection. */
	middleItem(): Story;
	/**
	 * Returns the Story with the index previous to the specified 
	 * index.
	 * @param {Story} obj - The index of the Story that follows the 
	 * desired Story.
	 */
	previousItem(obj: Story): Story;
	/**
	 * Returns the Story whose index follows the specified Story in 
	 * the collection.
	 * @param {Story} obj - The Story whose index comes before the 
	 * desired Story.
	 */
	nextItem(obj: Story): Story;
	/** Returns any Story in the collection. */
	anyItem(): Story;
	/** Returns every Story in the collection. */
	everyItem(): Story;
	/**
	 * Generates a string which, if executed, will return the 
	 * Story.
	 */
	toSource(): string;
	/**
	 * Returns the Story with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Story;
}

/**
 * A paragraph style.
 * @class
 */
export declare class ParagraphStyle {
	/** If true, the style was imported from another document. */
	readonly imported: boolean;
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/** The unique ID of the ParagraphStyle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ParagraphStyle (a Document, Application or 
	 * ParagraphStyleGroup).
	 */
	readonly parent: any;
	/**
	 * The index of the ParagraphStyle within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of style export tag maps. */
	readonly styleExportTagMaps: StyleExportTagMaps;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** The name of the ParagraphStyle. */
	name: string;
	/**
	 * The style that this style is based on. Can return: 
	 * ParagraphStyle or String.
	 */
	basedOn: any;
	/**
	 * The style to apply to new paragraphs that follow paragraphs 
	 * tagged with this style.
	 */
	nextStyle: ParagraphStyle;
	/** Split Document (EPUB only) */
	splitDocument: boolean;
	/** Emit CSS */
	emitCss: boolean;
	/**
	 * A unique id that can be assigned to a style. This can be 
	 * used to differentiate between the styles. Internal use only.
	 */
	styleUniqueId: string;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/**
	 * The font applied to the ParagraphStyle, specified as either 
	 * a font object or the name of font family. Can return: Font 
	 * or String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the ParagraphStyle. */
	horizontalScale: number;
	/** The vertical scaling applied to the ParagraphStyle. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the ParagraphStyle. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * ParagraphStyle. (To specify a tint percentage, use a number 
	 * in the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * ParagraphStyle. (To specify a tint percentage, use a number 
	 * in the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the ParagraphStyle. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the ParagraphStyle. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/**
	 * The color to use for preview, specified either as an array 
	 * of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Can 
	 * return: Array of 3 Reals (0 - 255) or UIColors enumerator or 
	 * NothingEnum enumerator.
	 */
	previewColor: any;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the paragraph style forcefully. For internal use 
	 * only.
	 * @param {ParagraphStyle} replacingWith - The style to apply 
	 * in place of the deleted style. (Optional)
	 */
	forceDelete(replacingWith: ParagraphStyle): void;
	/**
	 * Deletes the style.
	 * @param {ParagraphStyle} replacingWith - The style to apply 
	 * in place of the deleted style. (Optional)
	 */
	remove(replacingWith: ParagraphStyle): void;
	/** Duplicates the ParagraphStyle. */
	duplicate(): ParagraphStyle;
	/**
	 * Moves the style to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: ParagraphStyle, ParagraphStyleGroup, 
	 * CharacterStyle, CharacterStyleGroup, CellStyle, 
	 * CellStyleGroup, TableStyle, TableStyleGroup, Document or 
	 * Application. (Optional)
	 */
	move(to: LocationOptions, reference: any): ParagraphStyle;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Create thumbnail for selected text with the given 
	 * properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File): boolean;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ParagraphStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ParagraphStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of paragraph styles.
 * @class
 */
export declare class ParagraphStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new ParagraphStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ParagraphStyle (Optional)
	 */
	add(withProperties: Object): ParagraphStyle;
	/** Displays the number of elements in the ParagraphStyle. */
	count(): number;
	/**
	 * Returns the ParagraphStyle with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ParagraphStyle;
	/**
	 * Returns the ParagraphStyle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ParagraphStyle;
	/**
	 * Returns the ParagraphStyle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ParagraphStyle;
	/**
	 * Returns the ParagraphStyles within the specified range.
	 * @param {any} _from - The ParagraphStyle, index, or name at 
	 * the beginning of the range. Can accept: ParagraphStyle, Long 
	 * Integer or String.
	 * @param {any} to - The ParagraphStyle, index, or name at the 
	 * end of the range. Can accept: ParagraphStyle, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): ParagraphStyle;
	/** Returns the first ParagraphStyle in the collection. */
	firstItem(): ParagraphStyle;
	/** Returns the last ParagraphStyle in the collection. */
	lastItem(): ParagraphStyle;
	/** Returns the middle ParagraphStyle in the collection. */
	middleItem(): ParagraphStyle;
	/**
	 * Returns the ParagraphStyle with the index previous to the 
	 * specified index.
	 * @param {ParagraphStyle} obj - The index of the 
	 * ParagraphStyle that follows the desired ParagraphStyle.
	 */
	previousItem(obj: ParagraphStyle): ParagraphStyle;
	/**
	 * Returns the ParagraphStyle whose index follows the specified 
	 * ParagraphStyle in the collection.
	 * @param {ParagraphStyle} obj - The ParagraphStyle whose index 
	 * comes before the desired ParagraphStyle.
	 */
	nextItem(obj: ParagraphStyle): ParagraphStyle;
	/** Returns any ParagraphStyle in the collection. */
	anyItem(): ParagraphStyle;
	/** Returns every ParagraphStyle in the collection. */
	everyItem(): ParagraphStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * ParagraphStyle.
	 */
	toSource(): string;
	/**
	 * Returns the ParagraphStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ParagraphStyle;
}

/**
 * A character style.
 * @class
 */
export declare class CharacterStyle {
	/**
	 * If true, the style was imported from another document. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	readonly imported: any;
	/** The unique ID of the CharacterStyle. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CharacterStyle (a Document, Application or 
	 * CharacterStyleGroup).
	 */
	readonly parent: any;
	/**
	 * The index of the CharacterStyle within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of style export tag maps. */
	readonly styleExportTagMaps: StyleExportTagMaps;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The style that this style is based on. Can return: 
	 * CharacterStyle or String.
	 */
	basedOn: any;
	/**
	 * Split Document (EPUB only). Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	splitDocument: any;
	/** Emit CSS. Can return: Boolean or NothingEnum enumerator. */
	emitCss: any;
	/**
	 * A unique id that can be assigned to a style. This can be 
	 * used to differentiate between the styles. Internal use only. 
	 * Can return: String or NothingEnum enumerator.
	 */
	styleUniqueId: any;
	/**
	 * The font applied to the CharacterStyle, specified as either 
	 * a font object or the name of font family. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	appliedFont: any;
	/**
	 * The name of the font style. Can return: String or 
	 * NothingEnum enumerator.
	 */
	fontStyle: any;
	/** The text size. Can return: Unit or NothingEnum enumerator. */
	pointSize: any;
	/**
	 * The leading applied to the text. Can return: Unit, Leading 
	 * enumerator or NothingEnum enumerator.
	 */
	leading: any;
	/**
	 * The type of pair kerning. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kerningMethod: any;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	tracking: any;
	/**
	 * The capitalization scheme. Can return: Capitalization 
	 * enumerator or NothingEnum enumerator.
	 */
	capitalization: any;
	/**
	 * The text position relative to the baseline. Can return: 
	 * Position enumerator or NothingEnum enumerator.
	 */
	position: any;
	/**
	 * If true, underlines the text. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	underline: any;
	/**
	 * If true, draws a strikethrough line through the text. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThru: any;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	ligatures: any;
	/**
	 * If true, keeps the text on the same line. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	noBreak: any;
	/**
	 * The horizontal scaling applied to the CharacterStyle. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	horizontalScale: any;
	/**
	 * The vertical scaling applied to the CharacterStyle. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	verticalScale: any;
	/**
	 * The baseline shift applied to the text. Can return: Unit or 
	 * NothingEnum enumerator.
	 */
	baselineShift: any;
	/**
	 * The skew angle of the CharacterStyle. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	skew: any;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * CharacterStyle. (To specify a tint percentage, use a number 
	 * in the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.). Can return: Real or NothingEnum enumerator.
	 */
	fillTint: any;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * CharacterStyle. (To specify a tint percentage, use a number 
	 * in the range of 0 to 100; to use the inherited or overridden 
	 * value, use -1.). Can return: Real or NothingEnum enumerator.
	 */
	strokeTint: any;
	/**
	 * The stroke weight applied to the characters of the text. Can 
	 * return: Unit or NothingEnum enumerator.
	 */
	strokeWeight: any;
	/**
	 * If true, the stroke of the characters will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	overprintStroke: any;
	/**
	 * If true, the fill color of the characters will overprint. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	overprintFill: any;
	/**
	 * The figure style in OpenType fonts. Can return: 
	 * OTFFigureStyle enumerator or NothingEnum enumerator.
	 */
	otfFigureStyle: any;
	/**
	 * If true, uses ordinals in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfOrdinal: any;
	/**
	 * If true, uses fractions in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfFraction: any;
	/**
	 * If true, uses discretionary ligatures in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfDiscretionaryLigature: any;
	/**
	 * If true, uses titling forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfTitling: any;
	/**
	 * If true, uses contextual alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfContextualAlternate: any;
	/**
	 * If true, uses swash forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSwash: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch, String or NothingEnum 
	 * enumerator.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100). Can return: Real or NothingEnum enumerator.
	 */
	underlineTint: any;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid. Can return: Real or NothingEnum enumerator.
	 */
	underlineGapTint: any;
	/**
	 * If true, the underline stroke color will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	underlineOverprint: any;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint. Can return: Boolean or NothingEnum enumerator.
	 */
	underlineGapOverprint: any;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline. Can return: Unit or NothingEnum enumerator.
	 */
	underlineOffset: any;
	/**
	 * The stroke weight of the underline stroke. Can return: Unit 
	 * or NothingEnum enumerator.
	 */
	underlineWeight: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch, 
	 * String or NothingEnum enumerator.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughTint: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	strikeThroughGapTint: any;
	/**
	 * If true, the strikethrough stroke will overprint. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughOverprint: any;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid. Can return: Boolean or NothingEnum enumerator.
	 */
	strikeThroughGapOverprint: any;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle, String or NothingEnum enumerator.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline. Can return: Unit or NothingEnum 
	 * enumerator.
	 */
	strikeThroughOffset: any;
	/**
	 * The stroke weight of the strikethrough stroke. Can return: 
	 * Unit or NothingEnum enumerator.
	 */
	strikeThroughWeight: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the CharacterStyle. . Can return: Swatch or 
	 * NothingEnum enumerator. Can also accept: String.
	 */
	fillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the CharacterStyle. Can return: Swatch or 
	 * NothingEnum enumerator. Can also accept: String.
	 */
	strokeColor: any;
	/**
	 * The language of the text. Can return: LanguageWithVendors, 
	 * Language or NothingEnum enumerator. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * If true, use a slashed zeroes in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfSlashedZero: any;
	/**
	 * If true, use historical forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfHistorical: any;
	/**
	 * The stylistic sets to use in OpenType fonts. Can return: 
	 * Long Integer or NothingEnum enumerator.
	 */
	otfStylisticSets: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	gradientFillLength: any;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientFillAngle: any;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	gradientStrokeLength: any;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	gradientStrokeAngle: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientFillStart: any;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y]. Can 
	 * return: Array of 2 Units or NothingEnum enumerator.
	 */
	gradientStrokeStart: any;
	/**
	 * If true, uses mark positioning in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfMark: any;
	/**
	 * If true, uses localized forms in OpenType fonts. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	otfLocale: any;
	/**
	 * The OpenType positional form. Can return: PositionalForms 
	 * enumerator or NothingEnum enumerator.
	 */
	positionalForm: any;
	/** The name of the style. */
	name: string;
	/**
	 * The color to use for preview, specified either as an array 
	 * of three doubles, each in the range 0 to 255 and 
	 * representing R, G, and B values, or as a UI color. Can 
	 * return: Array of 3 Reals (0 - 255) or UIColors enumerator or 
	 * NothingEnum enumerator.
	 */
	previewColor: any;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join. Can return: Real (0 - 1000) or NothingEnum enumerator.
	 */
	miterLimit: any;
	/**
	 * The stroke alignment applied to the text. Can return: 
	 * TextStrokeAlign enumerator or NothingEnum enumerator.
	 */
	strokeAlignment: any;
	/**
	 * The stroke join type applied to the characters of the text. 
	 * Can return: OutlineJoin enumerator or NothingEnum 
	 * enumerator.
	 */
	endJoin: any;
	/**
	 * If true, use overlapping swash forms in OpenType fonts. Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfOverlapSwash: any;
	/**
	 * If true, use stylistic alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfStylisticAlternate: any;
	/**
	 * If true, use alternate justification forms in OpenType 
	 * fonts. Can return: Boolean or NothingEnum enumerator.
	 */
	otfJustificationAlternate: any;
	/**
	 * If true, use stretched alternate forms in OpenType fonts. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	otfStretchedAlternate: any;
	/**
	 * The direction of the character. Can return: 
	 * CharacterDirectionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	characterDirection: any;
	/**
	 * The keyboard direction of the character. Can return: 
	 * CharacterDirectionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	keyboardDirection: any;
	/**
	 * The digits type. Can return: DigitsTypeOptions enumerator or 
	 * NothingEnum enumerator.
	 */
	digitsType: any;
	/**
	 * Use of Kashidas for justification. Can return: 
	 * KashidasOptions enumerator or NothingEnum enumerator.
	 */
	kashidas: any;
	/**
	 * Position of diacriticical characters. Can return: 
	 * DiacriticPositionOptions enumerator or NothingEnum 
	 * enumerator.
	 */
	diacriticPosition: any;
	/**
	 * The x (horizontal) offset for diacritic adjustment. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	xOffsetDiacritic: any;
	/**
	 * The y (vertical) offset for diacritic adjustment. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	yOffsetDiacritic: any;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line. Can return: CharacterAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	characterAlignment: any;
	/**
	 * The amount of horizontal character compression. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	tsume: any;
	/**
	 * The amount of space before each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	leadingAki: any;
	/**
	 * The amount of space after each character. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	trailingAki: any;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	characterRotation: any;
	/**
	 * The number of grid squares in which to arrange the text. . 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	jidori: any;
	/**
	 * The amount (as a percentage) of shatai obliquing to apply. 
	 * Can return: Real or NothingEnum enumerator.
	 */
	shataiMagnification: any;
	/**
	 * The shatai lens angle (in degrees). Can return: Real or 
	 * NothingEnum enumerator.
	 */
	shataiDegreeAngle: any;
	/**
	 * If true, applies shatai rotation. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustRotation: any;
	/**
	 * If true, adjusts shatai tsume. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	shataiAdjustTsume: any;
	/**
	 * If true, makes the character horizontal in vertical text. 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	tatechuyoko: any;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoXOffset: any;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text. Can return: Real or NothingEnum enumerator.
	 */
	tatechuyokoYOffset: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch, String 
	 * or NothingEnum enumerator.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenTint: any;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100). Can return: Real or NothingEnum 
	 * enumerator.
	 */
	kentenStrokeTint: any;
	/**
	 * The stroke weight (in points) of kenten characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	kentenWeight: any;
	/**
	 * The method of overprinting the kenten fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintFill: any;
	/**
	 * The method of overprinting the kenten stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	kentenOverprintStroke: any;
	/**
	 * The style of kenten characters. Can return: KentenCharacter 
	 * enumerator or NothingEnum enumerator.
	 */
	kentenKind: any;
	/**
	 * The distance between kenten characters and their parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	kentenPlacement: any;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters. . Can return: KentenAlignment enumerator or 
	 * NothingEnum enumerator.
	 */
	kentenAlignment: any;
	/**
	 * The kenten position relative to the parent character. Can 
	 * return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	kentenPosition: any;
	/**
	 * The font to use for kenten characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/**
	 * The size (in points) of kenten characters. Can return: Real 
	 * or NothingEnum enumerator.
	 */
	kentenFontSize: any;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size. Can return: Real or NothingEnum enumerator.
	 */
	kentenXScale: any;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size. . Can return: Real or NothingEnum enumerator.
	 */
	kentenYScale: any;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom. Can return: String or NothingEnum 
	 * enumerator.
	 */
	kentenCustomCharacter: any;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom. . Can return: 
	 * KentenCharacterSet enumerator or NothingEnum enumerator.
	 */
	kentenCharacterSet: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch, String or 
	 * NothingEnum enumerator.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100). Can return: Real or NothingEnum enumerator.
	 */
	rubyTint: any;
	/**
	 * The stroke weight (in points) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyWeight: any;
	/**
	 * The method of overprinting the ruby fill. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintFill: any;
	/**
	 * The method of overprinting the ruby stroke. Can return: 
	 * AdornmentOverprint enumerator or NothingEnum enumerator.
	 */
	rubyOverprintStroke: any;
	/**
	 * The stroke tint (as a percentage) of ruby characters. Can 
	 * return: Real or NothingEnum enumerator.
	 */
	rubyStrokeTint: any;
	/**
	 * The font applied to ruby characters. Can return: Font, 
	 * String or NothingEnum enumerator.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/**
	 * The size (in points) of ruby characters. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyFontSize: any;
	/**
	 * If true, uses OpenType Pro fonts for ruby. Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyOpenTypePro: any;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyXScale: any;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	rubyYScale: any;
	/**
	 * The ruby type. Can return: RubyTypes enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyType: any;
	/**
	 * The ruby alignment. Can return: RubyAlignments enumerator or 
	 * NothingEnum enumerator.
	 */
	rubyAlignment: any;
	/**
	 * The position of ruby characters relative to the parent text. 
	 * Can return: RubyKentenPosition enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyPosition: any;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyXOffset: any;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters. Can return: Real or NothingEnum enumerator.
	 */
	rubyYOffset: any;
	/**
	 * The ruby spacing relative to the parent text. . Can return: 
	 * RubyParentSpacing enumerator or NothingEnum enumerator.
	 */
	rubyParentSpacing: any;
	/**
	 * If true, auto aligns ruby. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	rubyAutoAlign: any;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount. . Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyOverhang: any;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent. . Can return: 
	 * Boolean or NothingEnum enumerator.
	 */
	rubyAutoScaling: any;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size. Can return: Real or 
	 * NothingEnum enumerator.
	 */
	rubyParentScalingPercent: any;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text. Can return: RubyOverhang enumerator or NothingEnum 
	 * enumerator.
	 */
	rubyParentOverhangAmount: any;
	/**
	 * If true, turns on warichu. Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	warichu: any;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size. Can return: Real or NothingEnum 
	 * enumerator.
	 */
	warichuSize: any;
	/**
	 * The number of lines of warichu within a single normal line. 
	 * Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuLines: any;
	/**
	 * The gap between lines of warichu characters. Can return: 
	 * Real or NothingEnum enumerator.
	 */
	warichuLineSpacing: any;
	/**
	 * The warichu alignment. Can return: WarichuAlignment 
	 * enumerator or NothingEnum enumerator.
	 */
	warichuAlignment: any;
	/**
	 * The minimum number of characters allowed after a line break. 
	 * . Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsAfterBreak: any;
	/**
	 * The minimum number of characters allowed before a line 
	 * break. Can return: Short Integer or NothingEnum enumerator.
	 */
	warichuCharsBeforeBreak: any;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	otfProportionalMetrics: any;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical. . Can return: Boolean or 
	 * NothingEnum enumerator.
	 */
	otfHVKana: any;
	/**
	 * If true, applies italics to half-width alphanumerics. . Can 
	 * return: Boolean or NothingEnum enumerator.
	 */
	otfRomanItalics: any;
	/**
	 * If true, the line changes size when characters are scaled. . 
	 * Can return: Boolean or NothingEnum enumerator.
	 */
	scaleAffectsLineHeight: any;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids. Can return: Boolean or NothingEnum enumerator.
	 */
	cjkGridTracking: any;
	/**
	 * The glyph variant to substitute for standard glyphs. Can 
	 * return: AlternateGlyphForms enumerator or NothingEnum 
	 * enumerator.
	 */
	glyphForm: any;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby. Can return: Short Integer or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyDigits: any;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby. Can return: Boolean or NothingEnum 
	 * enumerator.
	 */
	rubyAutoTcyIncludeRoman: any;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em. Can return: Boolean 
	 * or NothingEnum enumerator.
	 */
	rubyAutoTcyAutoScale: any;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the style.
	 * @param {CharacterStyle} replacingWith - The style to apply 
	 * in place of the deleted style. (Optional)
	 */
	remove(replacingWith: CharacterStyle): void;
	/** Duplicates the CharacterStyle. */
	duplicate(): CharacterStyle;
	/**
	 * Moves the style to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: ParagraphStyle, ParagraphStyleGroup, 
	 * CharacterStyle, CharacterStyleGroup, CellStyle, 
	 * CellStyleGroup, TableStyle, TableStyleGroup, Document or 
	 * Application. (Optional)
	 */
	move(to: LocationOptions, reference: any): CharacterStyle;
	/**
	 * Create thumbnail for selected text with the given 
	 * properties.
	 * @param {string} previewText - Text to use as sample
	 * @param {number} pointSize - Text font size (in points)
	 * @param {ColorSpace} space - Color space RGB, CMYK or LAB
	 * @param {number} colorValue - Color values
	 * @param {File} to - The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number, to: File): boolean;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * CharacterStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CharacterStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of character styles.
 * @class
 */
export declare class CharacterStyles {
	/**
	 * The number of objects in the collection. Can return: Long 
	 * Integer or NothingEnum enumerator.
	 */
	readonly length: any;
	/**
	 * Creates a new CharacterStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CharacterStyle (Optional)
	 */
	add(withProperties: Object): CharacterStyle;
	/** Displays the number of elements in the CharacterStyle. */
	count(): number;
	/**
	 * Returns the CharacterStyle with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CharacterStyle;
	/**
	 * Returns the CharacterStyle with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): CharacterStyle;
	/**
	 * Returns the CharacterStyle with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CharacterStyle;
	/**
	 * Returns the CharacterStyles within the specified range.
	 * @param {any} _from - The CharacterStyle, index, or name at 
	 * the beginning of the range. Can accept: CharacterStyle, Long 
	 * Integer or String.
	 * @param {any} to - The CharacterStyle, index, or name at the 
	 * end of the range. Can accept: CharacterStyle, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): CharacterStyle;
	/** Returns the first CharacterStyle in the collection. */
	firstItem(): CharacterStyle;
	/** Returns the last CharacterStyle in the collection. */
	lastItem(): CharacterStyle;
	/** Returns the middle CharacterStyle in the collection. */
	middleItem(): CharacterStyle;
	/**
	 * Returns the CharacterStyle with the index previous to the 
	 * specified index.
	 * @param {CharacterStyle} obj - The index of the 
	 * CharacterStyle that follows the desired CharacterStyle.
	 */
	previousItem(obj: CharacterStyle): CharacterStyle;
	/**
	 * Returns the CharacterStyle whose index follows the specified 
	 * CharacterStyle in the collection.
	 * @param {CharacterStyle} obj - The CharacterStyle whose index 
	 * comes before the desired CharacterStyle.
	 */
	nextItem(obj: CharacterStyle): CharacterStyle;
	/** Returns any CharacterStyle in the collection. */
	anyItem(): CharacterStyle;
	/** Returns every CharacterStyle in the collection. */
	everyItem(): CharacterStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * CharacterStyle.
	 */
	toSource(): string;
	/**
	 * Returns the CharacterStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CharacterStyle;
}

/**
 * A tab stop.
 * @class
 */
export declare class TabStop {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TabStop (a TextDefault, Paragraph, 
	 * ParagraphStyle, Text, InsertionPoint, TextStyleRange, 
	 * TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	readonly parent: any;
	/** The index of the TabStop within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The tab stop alignment. */
	alignment: TabStopAlignment;
	/**
	 * The tab stop alignment character. Note: Valid when alignment 
	 * is character align.
	 */
	alignmentCharacter: string;
	/** The tab stop leader. */
	leader: string;
	/** The position of the tab stop. */
	position: number|string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the TabStop. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * TabStop.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TabStop;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of tab stops.
 * @class
 */
export declare class TabStops {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new TabStop.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TabStop (Optional)
	 */
	add(withProperties: Object): TabStop;
	/** Displays the number of elements in the TabStop. */
	count(): number;
	/**
	 * Returns the TabStop with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TabStop;
	/**
	 * Returns the TabStops within the specified range.
	 * @param {any} _from - The TabStop, index, or name at the 
	 * beginning of the range. Can accept: TabStop, Long Integer or 
	 * String.
	 * @param {any} to - The TabStop, index, or name at the end of 
	 * the range. Can accept: TabStop, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): TabStop;
	/** Returns the first TabStop in the collection. */
	firstItem(): TabStop;
	/** Returns the last TabStop in the collection. */
	lastItem(): TabStop;
	/** Returns the middle TabStop in the collection. */
	middleItem(): TabStop;
	/**
	 * Returns the TabStop with the index previous to the specified 
	 * index.
	 * @param {TabStop} obj - The index of the TabStop that follows 
	 * the desired TabStop.
	 */
	previousItem(obj: TabStop): TabStop;
	/**
	 * Returns the TabStop whose index follows the specified 
	 * TabStop in the collection.
	 * @param {TabStop} obj - The TabStop whose index comes before 
	 * the desired TabStop.
	 */
	nextItem(obj: TabStop): TabStop;
	/** Returns any TabStop in the collection. */
	anyItem(): TabStop;
	/** Returns every TabStop in the collection. */
	everyItem(): TabStop;
	/**
	 * Generates a string which, if executed, will return the 
	 * TabStop.
	 */
	toSource(): string;
	/**
	 * Returns the TabStop with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TabStop;
}

/**
 * A nested style.
 * @class
 */
export declare class NestedStyle {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the NestedStyle (a TextDefault, Paragraph, 
	 * ParagraphStyle, Text, InsertionPoint, TextStyleRange, 
	 * TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	readonly parent: any;
	/** The index of the NestedStyle within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/**
	 * The delimiting expression that indicates how deeply into the 
	 * paragraph the nested style is applied. Can return: String or 
	 * NestedStyleDelimiters enumerator.
	 */
	delimiter: any;
	/**
	 * The number instances of the specified delimiter up to which, 
	 * or through which, to apply the nested style.
	 */
	repetition: number;
	/**
	 * If true, the nested style is applied through the last 
	 * delimiter. If false, the nested style is applied up to the 
	 * last delimiter.
	 */
	inclusive: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the NestedStyle. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * NestedStyle.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): NestedStyle;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of nested styles.
 * @class
 */
export declare class NestedStyles {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new NestedStyle.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new NestedStyle (Optional)
	 */
	add(withProperties: Object): NestedStyle;
	/** Displays the number of elements in the NestedStyle. */
	count(): number;
	/**
	 * Returns the NestedStyle with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): NestedStyle;
	/**
	 * Returns the NestedStyles within the specified range.
	 * @param {any} _from - The NestedStyle, index, or name at the 
	 * beginning of the range. Can accept: NestedStyle, Long 
	 * Integer or String.
	 * @param {any} to - The NestedStyle, index, or name at the end 
	 * of the range. Can accept: NestedStyle, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): NestedStyle;
	/** Returns the first NestedStyle in the collection. */
	firstItem(): NestedStyle;
	/** Returns the last NestedStyle in the collection. */
	lastItem(): NestedStyle;
	/** Returns the middle NestedStyle in the collection. */
	middleItem(): NestedStyle;
	/**
	 * Returns the NestedStyle with the index previous to the 
	 * specified index.
	 * @param {NestedStyle} obj - The index of the NestedStyle that 
	 * follows the desired NestedStyle.
	 */
	previousItem(obj: NestedStyle): NestedStyle;
	/**
	 * Returns the NestedStyle whose index follows the specified 
	 * NestedStyle in the collection.
	 * @param {NestedStyle} obj - The NestedStyle whose index comes 
	 * before the desired NestedStyle.
	 */
	nextItem(obj: NestedStyle): NestedStyle;
	/** Returns any NestedStyle in the collection. */
	anyItem(): NestedStyle;
	/** Returns every NestedStyle in the collection. */
	everyItem(): NestedStyle;
	/**
	 * Generates a string which, if executed, will return the 
	 * NestedStyle.
	 */
	toSource(): string;
	/**
	 * Returns the NestedStyle with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: NestedStyle;
}

/**
 * The language on which to base hyphenation rules and spell 
 * checking.
 * @class
 */
export declare class Language {
	/** The name of the Language. */
	readonly name: string;
	/** The untranslated name of the language. */
	readonly untranslatedName: string;
	/** The full name of the Language object's ICU locale. */
	readonly icuLocaleName: string;
	/** The unique ID of the Language. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Language (a Document). */
	readonly parent: Document;
	/** The index of the Language within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The single quotes pair for the language. */
	singleQuotes: string;
	/** The double quotes pair for the language. */
	doubleQuotes: string;
	/** The hyphenation rules source. */
	hyphenationVendor: string;
	/** The spell-checking source. */
	spellingVendor: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Language.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Language;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of languages.
 * @class
 */
export declare class Languages {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Language. */
	count(): number;
	/**
	 * Returns the Language with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Language;
	/**
	 * Returns the Language with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Language;
	/**
	 * Returns the Language with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Language;
	/**
	 * Returns the Languages within the specified range.
	 * @param {any} _from - The Language, index, or name at the 
	 * beginning of the range. Can accept: Language, Long Integer 
	 * or String.
	 * @param {any} to - The Language, index, or name at the end of 
	 * the range. Can accept: Language, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Language;
	/** Returns the first Language in the collection. */
	firstItem(): Language;
	/** Returns the last Language in the collection. */
	lastItem(): Language;
	/** Returns the middle Language in the collection. */
	middleItem(): Language;
	/**
	 * Returns the Language with the index previous to the 
	 * specified index.
	 * @param {Language} obj - The index of the Language that 
	 * follows the desired Language.
	 */
	previousItem(obj: Language): Language;
	/**
	 * Returns the Language whose index follows the specified 
	 * Language in the collection.
	 * @param {Language} obj - The Language whose index comes 
	 * before the desired Language.
	 */
	nextItem(obj: Language): Language;
	/** Returns any Language in the collection. */
	anyItem(): Language;
	/** Returns every Language in the collection. */
	everyItem(): Language;
	/**
	 * Generates a string which, if executed, will return the 
	 * Language.
	 */
	toSource(): string;
	/**
	 * Returns the Language with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Language;
}

/**
 * A language that allows the specification of a hyphenation 
 * rules source, a spell-checking source, and a thesaurus.
 * @class
 */
export declare class LanguageWithVendors {
	/** The name of the LanguageWithVendors. */
	readonly name: string;
	/** The untranslated name of the language. */
	readonly untranslatedName: string;
	/** The full name of the Language object's ICU locale. */
	readonly icuLocaleName: string;
	/** A list of spelling vendors. */
	readonly spellingVendorList: string;
	/** A list of hyphenation vendors. */
	readonly hyphenationVendorList: string;
	/** The unique ID of the LanguageWithVendors. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the LanguageWithVendors (a Application). */
	readonly parent: Application;
	/**
	 * The index of the LanguageWithVendors within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The single quotes pair for the language. */
	singleQuotes: string;
	/** The double quotes pair for the language. */
	doubleQuotes: string;
	/** The hyphenation rules source. */
	hyphenationVendor: string;
	/** The spell-checking source. */
	spellingVendor: string;
	/** The thesaurus source. */
	thesaurusVendor: string;
	/** The user dictionaries for the language. */
	dictionaryPaths: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Adds the specified user dictionary.
	 * @param {string} filePath - The path to the dictionary file.
	 */
	addDictionaryPath(filePath: string): string;
	/**
	 * Removes the specified user dictionary.
	 * @param {string} filePath - The path to the dictionary file.
	 */
	removeDictionaryPath(filePath: string): string;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * LanguageWithVendors.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): LanguageWithVendors;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of languages with vendors.
 * @class
 */
export declare class LanguagesWithVendors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the LanguageWithVendors. */
	count(): number;
	/**
	 * Returns the LanguageWithVendors with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): LanguageWithVendors;
	/**
	 * Returns the LanguageWithVendors with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): LanguageWithVendors;
	/**
	 * Returns the LanguageWithVendors with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): LanguageWithVendors;
	/**
	 * Returns the LanguagesWithVendors within the specified range.
	 * @param {any} _from - The LanguageWithVendors, index, or name 
	 * at the beginning of the range. Can accept: 
	 * LanguageWithVendors, Long Integer or String.
	 * @param {any} to - The LanguageWithVendors, index, or name at 
	 * the end of the range. Can accept: LanguageWithVendors, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): LanguageWithVendors;
	/** Returns the first LanguageWithVendors in the collection. */
	firstItem(): LanguageWithVendors;
	/** Returns the last LanguageWithVendors in the collection. */
	lastItem(): LanguageWithVendors;
	/** Returns the middle LanguageWithVendors in the collection. */
	middleItem(): LanguageWithVendors;
	/**
	 * Returns the LanguageWithVendors with the index previous to 
	 * the specified index.
	 * @param {LanguageWithVendors} obj - The index of the 
	 * LanguageWithVendors that follows the desired 
	 * LanguageWithVendors.
	 */
	previousItem(obj: LanguageWithVendors): LanguageWithVendors;
	/**
	 * Returns the LanguageWithVendors whose index follows the 
	 * specified LanguageWithVendors in the collection.
	 * @param {LanguageWithVendors} obj - The LanguageWithVendors 
	 * whose index comes before the desired LanguageWithVendors.
	 */
	nextItem(obj: LanguageWithVendors): LanguageWithVendors;
	/** Returns any LanguageWithVendors in the collection. */
	anyItem(): LanguageWithVendors;
	/** Returns every LanguageWithVendors in the collection. */
	everyItem(): LanguageWithVendors;
	/**
	 * Generates a string which, if executed, will return the 
	 * LanguageWithVendors.
	 */
	toSource(): string;
	/**
	 * Returns the LanguageWithVendors with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: LanguageWithVendors;
}

/**
 * A font.
 * @class
 */
export declare class Font {
	/** If true, the font can be embedded. */
	readonly allowEditableEmbedding: boolean;
	/** If true, the font can be converted to outlines. */
	readonly allowOutlines: boolean;
	/** If true, the font can be embedded in a PDF document. */
	readonly allowPDFEmbedding: boolean;
	/** If true, the can font be printed. */
	readonly allowPrinting: boolean;
	/** The name of the font family */
	readonly fontFamily: string;
	/** The full path to the Font. */
	readonly location: string;
	/** The name of the Font. */
	readonly name: string;
	/** The PostScript name of the font. */
	readonly postscriptName: string;
	/** If true, the font allows only restricted printing. */
	readonly restrictedPrinting: boolean;
	/** The status of the font. */
	readonly status: FontStatus;
	/** The name of the font style. */
	readonly fontStyleName: string;
	/** The type of font. */
	readonly fontType: FontTypes;
	/** The writing script. */
	readonly writingScript: number;
	/** The full font name. */
	readonly fullName: string;
	/** The full native name of the font. */
	readonly fullNameNative: string;
	/** The native name of the font style. */
	readonly fontStyleNameNative: string;
	/** The platform font name. */
	readonly platformName: string;
	/** The font version. */
	readonly version: string;
	/** The registry of a CID font. */
	readonly registry: string;
	/** The ordering of a CID font. */
	readonly ordering: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Font (a Document or Application). */
	readonly parent: any;
	/** The index of the Font within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Checks whether the font supports the specified OpenType 
	 * feature.
	 * @param {any} using - The OpenType feature to check for, 
	 * specified either as an OpenType feature or a string. Can 
	 * accept: OpenTypeFeature enumerator or String.
	 */
	checkOpenTypeFeature(using: any): boolean;
	/**
	 * Create a copy of the font with just enough information to 
	 * render the list of characters given.
	 * @param {string} charactersForSubset - String with all the 
	 * characters used in the resulting font.
	 * @param {File} fontDestination - File location for the new 
	 * font.
	 */
	createSubsetFont(charactersForSubset: string, fontDestination: File): void;
	/**
	 * Generates a string which, if executed, will return the Font.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Font;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of fonts.
 * @class
 */
export declare class Fonts {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Font. */
	count(): number;
	/**
	 * Returns the Font with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Font;
	/**
	 * Returns the Font with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Font;
	/**
	 * Returns the Fonts within the specified range.
	 * @param {any} _from - The Font, index, or name at the 
	 * beginning of the range. Can accept: Font, Long Integer or 
	 * String.
	 * @param {any} to - The Font, index, or name at the end of the 
	 * range. Can accept: Font, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Font;
	/** Returns the first Font in the collection. */
	firstItem(): Font;
	/** Returns the last Font in the collection. */
	lastItem(): Font;
	/** Returns the middle Font in the collection. */
	middleItem(): Font;
	/**
	 * Returns the Font with the index previous to the specified 
	 * index.
	 * @param {Font} obj - The index of the Font that follows the 
	 * desired Font.
	 */
	previousItem(obj: Font): Font;
	/**
	 * Returns the Font whose index follows the specified Font in 
	 * the collection.
	 * @param {Font} obj - The Font whose index comes before the 
	 * desired Font.
	 */
	nextItem(obj: Font): Font;
	/** Returns any Font in the collection. */
	anyItem(): Font;
	/** Returns every Font in the collection. */
	everyItem(): Font;
	/**
	 * Generates a string which, if executed, will return the Font.
	 */
	toSource(): string;
	/**
	 * Returns the Font with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Font;
}

/**
 * The kinsoku table.
 * @class
 */
export declare class KinsokuTable {
	/** The unique ID of the KinsokuTable. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the KinsokuTable (a Document or Application). */
	readonly parent: any;
	/** The index of the KinsokuTable within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the KinsokuTable. */
	name: string;
	/** The characters in the kinsoku set that cannot begin lines. */
	cantBeginLineChars: string;
	/** That characters in the kinsoku set that cannot end lines. */
	cantEndLineChars: string;
	/** The hanging punctuation characters in the kinsoku set. */
	hangingPunctuationChars: string;
	/** The characters in the kinsoku set that cannot be separated. */
	cantBeSeparatedChars: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the KinsokuTable. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * KinsokuTable.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): KinsokuTable;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of kinsoku tables.
 * @class
 */
export declare class KinsokuTables {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new kinsoku table.
	 * @param {string} name - The name of the new kinsoku table.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new KinsokuTable (Optional)
	 */
	add(name: string, withProperties: Object): KinsokuTable;
	/** Displays the number of elements in the KinsokuTable. */
	count(): number;
	/**
	 * Returns the KinsokuTable with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): KinsokuTable;
	/**
	 * Returns the KinsokuTable with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): KinsokuTable;
	/**
	 * Returns the KinsokuTable with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): KinsokuTable;
	/**
	 * Returns the KinsokuTables within the specified range.
	 * @param {any} _from - The KinsokuTable, index, or name at the 
	 * beginning of the range. Can accept: KinsokuTable, Long 
	 * Integer or String.
	 * @param {any} to - The KinsokuTable, index, or name at the 
	 * end of the range. Can accept: KinsokuTable, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): KinsokuTable;
	/** Returns the first KinsokuTable in the collection. */
	firstItem(): KinsokuTable;
	/** Returns the last KinsokuTable in the collection. */
	lastItem(): KinsokuTable;
	/** Returns the middle KinsokuTable in the collection. */
	middleItem(): KinsokuTable;
	/**
	 * Returns the KinsokuTable with the index previous to the 
	 * specified index.
	 * @param {KinsokuTable} obj - The index of the KinsokuTable 
	 * that follows the desired KinsokuTable.
	 */
	previousItem(obj: KinsokuTable): KinsokuTable;
	/**
	 * Returns the KinsokuTable whose index follows the specified 
	 * KinsokuTable in the collection.
	 * @param {KinsokuTable} obj - The KinsokuTable whose index 
	 * comes before the desired KinsokuTable.
	 */
	nextItem(obj: KinsokuTable): KinsokuTable;
	/** Returns any KinsokuTable in the collection. */
	anyItem(): KinsokuTable;
	/** Returns every KinsokuTable in the collection. */
	everyItem(): KinsokuTable;
	/**
	 * Generates a string which, if executed, will return the 
	 * KinsokuTable.
	 */
	toSource(): string;
	/**
	 * Returns the KinsokuTable with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: KinsokuTable;
}

/**
 * The mojikumi table.
 * @class
 */
export declare class MojikumiTable {
	/** The unique ID of the MojikumiTable. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MojikumiTable (a Document or Application).
	 */
	readonly parent: any;
	/**
	 * The index of the MojikumiTable within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the MojikumiTable. */
	name: string;
	/**
	 * The existing mojikumi set on which to base the new mojikumi 
	 * set.
	 */
	basedOnMojikumiSet: MojikumiTableDefaults;
	/**
	 * The mojikumi overrides for aki. Can return: Ordered array 
	 * containing targetMojikumiClass:Short Integer, 
	 * sideMojikumiClass:Short Integer, sideIsAfterTarget:Boolean, 
	 * minimum:Real, desired:Real, maximum:Real, 
	 * compressionPriority:Short Integer, akiDoesNotFloat:Boolean.
	 */
	overrideMojikumiAkiList: any;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the MojikumiTable. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * MojikumiTable.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MojikumiTable;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of mojikumi tables.
 * @class
 */
export declare class MojikumiTables {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new mojikumi table.
	 * @param {string} name - The name of the new mojikumi table.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MojikumiTable (Optional)
	 */
	add(name: string, withProperties: Object): MojikumiTable;
	/** Displays the number of elements in the MojikumiTable. */
	count(): number;
	/**
	 * Returns the MojikumiTable with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MojikumiTable;
	/**
	 * Returns the MojikumiTable with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): MojikumiTable;
	/**
	 * Returns the MojikumiTable with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MojikumiTable;
	/**
	 * Returns the MojikumiTables within the specified range.
	 * @param {any} _from - The MojikumiTable, index, or name at 
	 * the beginning of the range. Can accept: MojikumiTable, Long 
	 * Integer or String.
	 * @param {any} to - The MojikumiTable, index, or name at the 
	 * end of the range. Can accept: MojikumiTable, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): MojikumiTable;
	/** Returns the first MojikumiTable in the collection. */
	firstItem(): MojikumiTable;
	/** Returns the last MojikumiTable in the collection. */
	lastItem(): MojikumiTable;
	/** Returns the middle MojikumiTable in the collection. */
	middleItem(): MojikumiTable;
	/**
	 * Returns the MojikumiTable with the index previous to the 
	 * specified index.
	 * @param {MojikumiTable} obj - The index of the MojikumiTable 
	 * that follows the desired MojikumiTable.
	 */
	previousItem(obj: MojikumiTable): MojikumiTable;
	/**
	 * Returns the MojikumiTable whose index follows the specified 
	 * MojikumiTable in the collection.
	 * @param {MojikumiTable} obj - The MojikumiTable whose index 
	 * comes before the desired MojikumiTable.
	 */
	nextItem(obj: MojikumiTable): MojikumiTable;
	/** Returns any MojikumiTable in the collection. */
	anyItem(): MojikumiTable;
	/** Returns every MojikumiTable in the collection. */
	everyItem(): MojikumiTable;
	/**
	 * Generates a string which, if executed, will return the 
	 * MojikumiTable.
	 */
	toSource(): string;
	/**
	 * Returns the MojikumiTable with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MojikumiTable;
}

/**
 * A hyphenation exceptions list.
 * @class
 */
export declare class HyphenationException {
	/** The name of the HyphenationException. */
	readonly name: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the HyphenationException (a Document). */
	readonly parent: Document;
	/**
	 * The index of the HyphenationException within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A list of words removed from the hyphenation exceptions 
	 * list.
	 */
	removedExceptions: string;
	/** A list of words added to the hyphenation exceptions list. */
	addedExceptions: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Adds the specified words to the hyphenation exceptions list.
	 * @param {string} addedExceptions - The list of words to add.
	 * @param {boolean} removedList - If true, adds the words to 
	 * the removed exceptions list. If false or unspecified, adds 
	 * the words to the added exceptions list. (Optional)
	 */
	addException(addedExceptions: string, removedList?: boolean): void;
	/**
	 * Removes the specified words from the hyphenation exceptions 
	 * list.
	 * @param {string} removedExceptions - The list of words to 
	 * remove.
	 * @param {boolean} removedList - If true, removes the words 
	 * from the removed exceptions list. If false or unspecified, 
	 * adds the words to the added exceptions list. (Optional)
	 */
	removeException(removedExceptions: string, removedList?: boolean): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyphenationException.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HyphenationException;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of hyphenation exceptions lists.
 * @class
 */
export declare class HyphenationExceptions {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the HyphenationException.
	 */
	count(): number;
	/**
	 * Returns the HyphenationException with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): HyphenationException;
	/**
	 * Returns the HyphenationException with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): HyphenationException;
	/**
	 * Returns the HyphenationExceptions within the specified 
	 * range.
	 * @param {any} _from - The HyphenationException, index, or 
	 * name at the beginning of the range. Can accept: 
	 * HyphenationException, Long Integer or String.
	 * @param {any} to - The HyphenationException, index, or name 
	 * at the end of the range. Can accept: HyphenationException, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): HyphenationException;
	/** Returns the first HyphenationException in the collection. */
	firstItem(): HyphenationException;
	/** Returns the last HyphenationException in the collection. */
	lastItem(): HyphenationException;
	/** Returns the middle HyphenationException in the collection. */
	middleItem(): HyphenationException;
	/**
	 * Returns the HyphenationException with the index previous to 
	 * the specified index.
	 * @param {HyphenationException} obj - The index of the 
	 * HyphenationException that follows the desired 
	 * HyphenationException.
	 */
	previousItem(obj: HyphenationException): HyphenationException;
	/**
	 * Returns the HyphenationException whose index follows the 
	 * specified HyphenationException in the collection.
	 * @param {HyphenationException} obj - The HyphenationException 
	 * whose index comes before the desired HyphenationException.
	 */
	nextItem(obj: HyphenationException): HyphenationException;
	/** Returns any HyphenationException in the collection. */
	anyItem(): HyphenationException;
	/** Returns every HyphenationException in the collection. */
	everyItem(): HyphenationException;
	/**
	 * Generates a string which, if executed, will return the 
	 * HyphenationException.
	 */
	toSource(): string;
	/**
	 * Returns the HyphenationException with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: HyphenationException;
}

/**
 * A user dictionary.
 * @class
 */
export declare class UserDictionary {
	/** The name of the UserDictionary. */
	readonly name: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the UserDictionary (a Application). */
	readonly parent: Application;
	/**
	 * The index of the UserDictionary within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A list of words added to the user dictionary. */
	addedWords: string;
	/** A list of words removed from the user dictionary. */
	removedWords: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Adds the specified words to the specified list in the 
	 * dictionary.
	 * @param {string} addedWords - The words to add.
	 * @param {boolean} removedList - If true, adds the words to 
	 * the removed words list. If false or unspecified, adds the 
	 * words to the added words list. (Optional)
	 */
	addWord(addedWords: string, removedList?: boolean): void;
	/**
	 * Removes the specified words from the specified list in the 
	 * dictionary.
	 * @param {string} removedWords - The words to remove.
	 * @param {boolean} removedList - If true, removes the words 
	 * from the removed words list. If false or unspecified, 
	 * removes the words from the added words list. (Optional)
	 */
	removeWord(removedWords: string, removedList?: boolean): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * UserDictionary.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): UserDictionary;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of user dictionaries.
 * @class
 */
export declare class UserDictionaries {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the UserDictionary. */
	count(): number;
	/**
	 * Returns the UserDictionary with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): UserDictionary;
	/**
	 * Returns the UserDictionary with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): UserDictionary;
	/**
	 * Returns the UserDictionaries within the specified range.
	 * @param {any} _from - The UserDictionary, index, or name at 
	 * the beginning of the range. Can accept: UserDictionary, Long 
	 * Integer or String.
	 * @param {any} to - The UserDictionary, index, or name at the 
	 * end of the range. Can accept: UserDictionary, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): UserDictionary;
	/** Returns the first UserDictionary in the collection. */
	firstItem(): UserDictionary;
	/** Returns the last UserDictionary in the collection. */
	lastItem(): UserDictionary;
	/** Returns the middle UserDictionary in the collection. */
	middleItem(): UserDictionary;
	/**
	 * Returns the UserDictionary with the index previous to the 
	 * specified index.
	 * @param {UserDictionary} obj - The index of the 
	 * UserDictionary that follows the desired UserDictionary.
	 */
	previousItem(obj: UserDictionary): UserDictionary;
	/**
	 * Returns the UserDictionary whose index follows the specified 
	 * UserDictionary in the collection.
	 * @param {UserDictionary} obj - The UserDictionary whose index 
	 * comes before the desired UserDictionary.
	 */
	nextItem(obj: UserDictionary): UserDictionary;
	/** Returns any UserDictionary in the collection. */
	anyItem(): UserDictionary;
	/** Returns every UserDictionary in the collection. */
	everyItem(): UserDictionary;
	/**
	 * Generates a string which, if executed, will return the 
	 * UserDictionary.
	 */
	toSource(): string;
	/**
	 * Returns the UserDictionary with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: UserDictionary;
}

/**
 * An auto-correct table.
 * @class
 */
export declare class AutoCorrectTable {
	/** The name of the AutoCorrectTable. */
	readonly name: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the AutoCorrectTable (a Application). */
	readonly parent: Application;
	/**
	 * The index of the AutoCorrectTable within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * An auto-correct word pair, specified as a misspelled word 
	 * and a corrected word. Can return: Array of Arrays of 2 
	 * Strings.
	 */
	autoCorrectWordPairList: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * AutoCorrectTable.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): AutoCorrectTable;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of auto-correct tables.
 * @class
 */
export declare class AutoCorrectTables {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the AutoCorrectTable. */
	count(): number;
	/**
	 * Returns the AutoCorrectTable with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): AutoCorrectTable;
	/**
	 * Returns the AutoCorrectTable with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): AutoCorrectTable;
	/**
	 * Returns the AutoCorrectTables within the specified range.
	 * @param {any} _from - The AutoCorrectTable, index, or name at 
	 * the beginning of the range. Can accept: AutoCorrectTable, 
	 * Long Integer or String.
	 * @param {any} to - The AutoCorrectTable, index, or name at 
	 * the end of the range. Can accept: AutoCorrectTable, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): AutoCorrectTable;
	/** Returns the first AutoCorrectTable in the collection. */
	firstItem(): AutoCorrectTable;
	/** Returns the last AutoCorrectTable in the collection. */
	lastItem(): AutoCorrectTable;
	/** Returns the middle AutoCorrectTable in the collection. */
	middleItem(): AutoCorrectTable;
	/**
	 * Returns the AutoCorrectTable with the index previous to the 
	 * specified index.
	 * @param {AutoCorrectTable} obj - The index of the 
	 * AutoCorrectTable that follows the desired AutoCorrectTable.
	 */
	previousItem(obj: AutoCorrectTable): AutoCorrectTable;
	/**
	 * Returns the AutoCorrectTable whose index follows the 
	 * specified AutoCorrectTable in the collection.
	 * @param {AutoCorrectTable} obj - The AutoCorrectTable whose 
	 * index comes before the desired AutoCorrectTable.
	 */
	nextItem(obj: AutoCorrectTable): AutoCorrectTable;
	/** Returns any AutoCorrectTable in the collection. */
	anyItem(): AutoCorrectTable;
	/** Returns every AutoCorrectTable in the collection. */
	everyItem(): AutoCorrectTable;
	/**
	 * Generates a string which, if executed, will return the 
	 * AutoCorrectTable.
	 */
	toSource(): string;
	/**
	 * Returns the AutoCorrectTable with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: AutoCorrectTable;
}

/**
 * A tracked change made to a story.
 * @class
 */
export declare class Change {
	/**
	 * The date on which the tracked change was made. Note: Valid 
	 * only when track changes is true.
	 */
	readonly date: Date;
	/**
	 * The type of tracked change. Note: Valid only when track 
	 * changes is true.
	 */
	readonly changeType: ChangeTypes;
	/**
	 * The user who made the change. Note: Valid only when track 
	 * changes is true.
	 */
	readonly userName: string;
	/**
	 * The location of the first insertion point in the object 
	 * (relative to the beginning of the story).
	 */
	readonly storyOffset: InsertionPoint;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Change (a Story, XmlStory or Cell). */
	readonly parent: any;
	/** The index of the Change within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Accepts the tracked change. Note: Valid only when track 
	 * changes is true.
	 */
	accept(): void;
	/**
	 * Rejects the tracked change. Note: Valid only when track 
	 * changes is true.
	 */
	reject(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * Change.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Change;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of changes.
 * @class
 */
export declare class Changes {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Change. */
	count(): number;
	/**
	 * Returns the Change with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Change;
	/**
	 * Returns the Changes within the specified range.
	 * @param {any} _from - The Change, index, or name at the 
	 * beginning of the range. Can accept: Change, Long Integer or 
	 * String.
	 * @param {any} to - The Change, index, or name at the end of 
	 * the range. Can accept: Change, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Change;
	/** Returns the first Change in the collection. */
	firstItem(): Change;
	/** Returns the last Change in the collection. */
	lastItem(): Change;
	/** Returns the middle Change in the collection. */
	middleItem(): Change;
	/**
	 * Returns the Change with the index previous to the specified 
	 * index.
	 * @param {Change} obj - The index of the Change that follows 
	 * the desired Change.
	 */
	previousItem(obj: Change): Change;
	/**
	 * Returns the Change whose index follows the specified Change 
	 * in the collection.
	 * @param {Change} obj - The Change whose index comes before 
	 * the desired Change.
	 */
	nextItem(obj: Change): Change;
	/** Returns any Change in the collection. */
	anyItem(): Change;
	/** Returns every Change in the collection. */
	everyItem(): Change;
	/**
	 * Generates a string which, if executed, will return the 
	 * Change.
	 */
	toSource(): string;
	/**
	 * Returns the Change with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Change;
}

/**
 * A text object that is on a path.
 * @class
 */
export declare class TextPath {
	/**
	 * Dispatched before a TextPath is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a TextPath is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/**
	 * The halfway point between the start bracket and the end 
	 * bracket.
	 */
	readonly centerBracket: number;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * The first text frame in the thread. Can return: TextFrame or 
	 * TextPath.
	 */
	readonly startTextFrame: any;
	/**
	 * The last text frame in the thread. Can return: TextFrame or 
	 * TextPath.
	 */
	readonly endTextFrame: any;
	/** The index of the text frame within the story. */
	readonly textFrameIndex: number;
	/** If true, the story has overset text. */
	readonly overflows: boolean;
	/** The unique ID of the TextPath. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextPath (a SplineItem, Polygon, 
	 * GraphicLine, Rectangle, Oval, TextFrame or EPSText).
	 */
	readonly parent: any;
	/** The index of the TextPath within its containing object. */
	readonly index: number;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The alignment of the type on a path. */
	pathAlignment: PathTypeAlignments;
	/** The alignment applied to the type on a path. */
	textAlignment: TextTypeAlignments;
	/** The effect applied to the type on a path. */
	pathEffect: TextPathEffects;
	/** The flip effect applied to the type on a path. */
	flipPathEffect: FlipValues;
	/** The spacing applied to the type on a path. */
	pathSpacing: number;
	/**
	 * The location of the start of the type on the path, expressed 
	 * in points. Note: 0 is the first point on the path.
	 */
	startBracket: number;
	/**
	 * The end of the type on a path. Note: Additional text becomes 
	 * overset text unless the text is linked to another path or 
	 * text frame.
	 */
	endBracket: number;
	/**
	 * The previous text frame in the thread. Can return: TextFrame 
	 * or TextPath. Can also accept: NothingEnum enumerator.
	 */
	previousTextFrame: any;
	/**
	 * The next text frame in the thread. Can return: TextFrame or 
	 * TextPath. Can also accept: NothingEnum enumerator.
	 */
	nextTextFrame: any;
	/**
	 * The contents of the text frame. Can return: String, 
	 * TextFrameContents enumerator or SpecialCharacters 
	 * enumerator.
	 */
	contents: any;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the TextPath; this is an alias to the TextPath's 
	 * label property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/** Deletes the TextPath. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextPath.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextPath;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of text paths.
 * @class
 */
export declare class TextPaths {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new TextPath.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TextPath (Optional)
	 */
	add(withProperties: Object): TextPath;
	/** Displays the number of elements in the TextPath. */
	count(): number;
	/**
	 * Returns the TextPath with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TextPath;
	/**
	 * Returns the TextPath with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TextPath;
	/**
	 * Returns the TextPath with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): TextPath;
	/**
	 * Returns the TextPaths within the specified range.
	 * @param {any} _from - The TextPath, index, or name at the 
	 * beginning of the range. Can accept: TextPath, Long Integer 
	 * or String.
	 * @param {any} to - The TextPath, index, or name at the end of 
	 * the range. Can accept: TextPath, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): TextPath;
	/** Returns the first TextPath in the collection. */
	firstItem(): TextPath;
	/** Returns the last TextPath in the collection. */
	lastItem(): TextPath;
	/** Returns the middle TextPath in the collection. */
	middleItem(): TextPath;
	/**
	 * Returns the TextPath with the index previous to the 
	 * specified index.
	 * @param {TextPath} obj - The index of the TextPath that 
	 * follows the desired TextPath.
	 */
	previousItem(obj: TextPath): TextPath;
	/**
	 * Returns the TextPath whose index follows the specified 
	 * TextPath in the collection.
	 * @param {TextPath} obj - The TextPath whose index comes 
	 * before the desired TextPath.
	 */
	nextItem(obj: TextPath): TextPath;
	/** Returns any TextPath in the collection. */
	anyItem(): TextPath;
	/** Returns every TextPath in the collection. */
	everyItem(): TextPath;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextPath.
	 */
	toSource(): string;
	/**
	 * Returns the TextPath with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TextPath;
}

/**
 * A note in a story.
 * @class
 */
export declare class Note {
	/** The date and time the note was created. */
	readonly creationDate: Date;
	/** The date and time the note was last modified. */
	readonly modificationDate: Date;
	/** The user who made the note. */
	readonly userName: string;
	/**
	 * The insertion point before the table in the story containing 
	 * the table.
	 */
	readonly storyOffset: InsertionPoint;
	/** The unique ID of the Note. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Note (a XmlStory, Story, TextFrame, 
	 * InsertionPoint or Cell).
	 */
	readonly parent: any;
	/** The index of the Note within its containing object. */
	readonly index: number;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** If true, the note is collapsed in galley view. */
	collapsed: boolean;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the Note; this is an alias to the Note's label 
	 * property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Note. */
	remove(): void;
	/** Converts the note to story text. */
	convertToText(): void;
	/**
	 * Moves the note to the specified location.
	 * @param {LocationOptions} to - The new location relative to 
	 * the reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text or Story. (Optional)
	 */
	move(to: LocationOptions, reference: any): Note;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the Note.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Note;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of notes.
 * @class
 */
export declare class Notes {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Note. */
	count(): number;
	/**
	 * Creates a new note.
	 * @param {LocationOptions} at - The location relative to the 
	 * reference object or within the containing object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required when the at parameter specifies before or after. 
	 * Can accept: Note or InsertionPoint. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Note (Optional)
	 */
	add(at?: LocationOptions, reference?: any, withProperties?: Object): Note;
	/**
	 * Returns the Note with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Note;
	/**
	 * Returns the Note with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Note;
	/**
	 * Returns the Note with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Note;
	/**
	 * Returns the Notes within the specified range.
	 * @param {any} _from - The Note, index, or name at the 
	 * beginning of the range. Can accept: Note, Long Integer or 
	 * String.
	 * @param {any} to - The Note, index, or name at the end of the 
	 * range. Can accept: Note, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Note;
	/** Returns the first Note in the collection. */
	firstItem(): Note;
	/** Returns the last Note in the collection. */
	lastItem(): Note;
	/** Returns the middle Note in the collection. */
	middleItem(): Note;
	/**
	 * Returns the Note with the index previous to the specified 
	 * index.
	 * @param {Note} obj - The index of the Note that follows the 
	 * desired Note.
	 */
	previousItem(obj: Note): Note;
	/**
	 * Returns the Note whose index follows the specified Note in 
	 * the collection.
	 * @param {Note} obj - The Note whose index comes before the 
	 * desired Note.
	 */
	nextItem(obj: Note): Note;
	/** Returns any Note in the collection. */
	anyItem(): Note;
	/** Returns every Note in the collection. */
	everyItem(): Note;
	/**
	 * Generates a string which, if executed, will return the Note.
	 */
	toSource(): string;
	/**
	 * Returns the Note with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Note;
}

/**
 * A footnote.
 * @class
 */
export declare class Footnote {
	/** The location of the footnote marker in the parent story. */
	readonly storyOffset: InsertionPoint;
	/** Lists all page items contained by the Footnote. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the Footnote. */
	readonly allGraphics: Graphic;
	/** The unique ID of the Footnote. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Footnote (a XmlStory, Story, TextFrame or 
	 * InsertionPoint).
	 */
	readonly parent: any;
	/** The index of the Footnote within its containing object. */
	readonly index: number;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/**
	 * The text contents of the footnote. Can return: String, 
	 * SpecialCharacters enumerator or Array of Strings or 
	 * SpecialCharacters enumerators. Can also accept: NothingEnum 
	 * enumerator or Array of Strings, SpecialCharacters 
	 * enumerators or NothingEnum enumerators.
	 */
	contents: any;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the Footnote; this is an alias to the Footnote's 
	 * label property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Footnote. */
	remove(): void;
	/**
	 * Converts the footnote to part of the story text and places 
	 * the converted text at the former location of the footnote 
	 * marker in the text.
	 */
	convertToText(): Text;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Footnote.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Footnote;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of footnotes.
 * @class
 */
export declare class Footnotes {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Footnote. */
	count(): number;
	/**
	 * Creates a new footnote.
	 * @param {LocationOptions} at - The location of the footnote 
	 * reference number in the main text relative to the reference 
	 * object or within the story. (Optional)
	 * @param {any} reference - The reference object. Note: Must be 
	 * an insertion point or a note. Required when the at parameter 
	 * specifies before or after. Can accept: Note or 
	 * InsertionPoint. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Footnote (Optional)
	 */
	add(at?: LocationOptions, reference?: any, withProperties?: Object): Footnote;
	/**
	 * Returns the Footnote with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Footnote;
	/**
	 * Returns the Footnote with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Footnote;
	/**
	 * Returns the Footnote with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Footnote;
	/**
	 * Returns the Footnotes within the specified range.
	 * @param {any} _from - The Footnote, index, or name at the 
	 * beginning of the range. Can accept: Footnote, Long Integer 
	 * or String.
	 * @param {any} to - The Footnote, index, or name at the end of 
	 * the range. Can accept: Footnote, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Footnote;
	/** Returns the first Footnote in the collection. */
	firstItem(): Footnote;
	/** Returns the last Footnote in the collection. */
	lastItem(): Footnote;
	/** Returns the middle Footnote in the collection. */
	middleItem(): Footnote;
	/**
	 * Returns the Footnote with the index previous to the 
	 * specified index.
	 * @param {Footnote} obj - The index of the Footnote that 
	 * follows the desired Footnote.
	 */
	previousItem(obj: Footnote): Footnote;
	/**
	 * Returns the Footnote whose index follows the specified 
	 * Footnote in the collection.
	 * @param {Footnote} obj - The Footnote whose index comes 
	 * before the desired Footnote.
	 */
	nextItem(obj: Footnote): Footnote;
	/** Returns any Footnote in the collection. */
	anyItem(): Footnote;
	/** Returns every Footnote in the collection. */
	everyItem(): Footnote;
	/**
	 * Generates a string which, if executed, will return the 
	 * Footnote.
	 */
	toSource(): string;
	/**
	 * Returns the Footnote with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Footnote;
}

/**
 * A text variable definition in a document.
 * @class
 */
export declare class TextVariable {
	/** Variable instances associated with the text variable. */
	readonly associatedInstances: TextVariableInstance;
	/**
	 * The preferences associated with the text variable. Can 
	 * return: PageNumberVariablePreference, 
	 * ChapterNumberVariablePreference, DateVariablePreference, 
	 * FileNameVariablePreference, MatchCharacterStylePreference, 
	 * MatchParagraphStylePreference, CustomTextVariablePreference 
	 * or CaptionMetadataVariablePreference.
	 */
	readonly variableOptions: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the TextVariable (a Application or Document). */
	readonly parent: any;
	/** The index of the TextVariable within its containing object. */
	readonly index: number;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the TextVariable. */
	name: string;
	/** The variable type. */
	variableType: VariableTypes;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the TextVariable. */
	remove(): void;
	/** Convert all of this variable's instances to text. */
	convertToText(): Text;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextVariable.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextVariable;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of text variables.
 * @class
 */
export declare class TextVariables {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new TextVariable.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TextVariable (Optional)
	 */
	add(withProperties: Object): TextVariable;
	/** Displays the number of elements in the TextVariable. */
	count(): number;
	/**
	 * Returns the TextVariable with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TextVariable;
	/**
	 * Returns the TextVariable with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TextVariable;
	/**
	 * Returns the TextVariables within the specified range.
	 * @param {any} _from - The TextVariable, index, or name at the 
	 * beginning of the range. Can accept: TextVariable, Long 
	 * Integer or String.
	 * @param {any} to - The TextVariable, index, or name at the 
	 * end of the range. Can accept: TextVariable, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): TextVariable;
	/** Returns the first TextVariable in the collection. */
	firstItem(): TextVariable;
	/** Returns the last TextVariable in the collection. */
	lastItem(): TextVariable;
	/** Returns the middle TextVariable in the collection. */
	middleItem(): TextVariable;
	/**
	 * Returns the TextVariable with the index previous to the 
	 * specified index.
	 * @param {TextVariable} obj - The index of the TextVariable 
	 * that follows the desired TextVariable.
	 */
	previousItem(obj: TextVariable): TextVariable;
	/**
	 * Returns the TextVariable whose index follows the specified 
	 * TextVariable in the collection.
	 * @param {TextVariable} obj - The TextVariable whose index 
	 * comes before the desired TextVariable.
	 */
	nextItem(obj: TextVariable): TextVariable;
	/** Returns any TextVariable in the collection. */
	anyItem(): TextVariable;
	/** Returns every TextVariable in the collection. */
	everyItem(): TextVariable;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextVariable.
	 */
	toSource(): string;
	/**
	 * Returns the TextVariable with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TextVariable;
}

/**
 * A text variable instance in the text.
 * @class
 */
export declare class TextVariableInstance {
	/** The name of the TextVariableInstance. */
	readonly name: string;
	/**
	 * The text that replaces the variable marker. Note: This 
	 * property cannot be set; it can be used only to update 
	 * variables. .
	 */
	readonly resultText: string;
	/**
	 * The insertion point before the table in the story containing 
	 * the table.
	 */
	readonly storyOffset: InsertionPoint;
	/** The unique ID of the TextVariableInstance. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextVariableInstance (a XmlStory, 
	 * TextFrame, Story, Note, Cell, Footnote or Change).
	 */
	readonly parent: any;
	/**
	 * The index of the TextVariableInstance within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The associated text variable. */
	associatedTextVariable: TextVariable;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the TextVariableInstance. */
	remove(): void;
	/**
	 * Converts the footnote to part of the story text and places 
	 * the converted text at the former location of the footnote 
	 * marker in the text.
	 */
	convertToText(): Text;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextVariableInstance.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextVariableInstance;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of text variable instances.
 * @class
 */
export declare class TextVariableInstances {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Displays the number of elements in the TextVariableInstance.
	 */
	count(): number;
	/**
	 * Creates a text variable instance at the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object. (Optional)
	 * @param {any} reference - The reference object. Note: 
	 * Required only when the to parameter specifies before or 
	 * after. Can accept: TextVariableInstance, XmlStory, 
	 * TextFrame, Story, Note, Cell, Footnote, Table, TextColumn, 
	 * TextStyleRange, Text, InsertionPoint, Paragraph, Line, Word, 
	 * Character or Change. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TextVariableInstance (Optional)
	 */
	add(to?: LocationOptions, reference?: any, withProperties?: Object): TextVariableInstance;
	/**
	 * Returns the TextVariableInstance with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TextVariableInstance;
	/**
	 * Returns the TextVariableInstance with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): TextVariableInstance;
	/**
	 * Returns the TextVariableInstance with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): TextVariableInstance;
	/**
	 * Returns the TextVariableInstances within the specified 
	 * range.
	 * @param {any} _from - The TextVariableInstance, index, or 
	 * name at the beginning of the range. Can accept: 
	 * TextVariableInstance, Long Integer or String.
	 * @param {any} to - The TextVariableInstance, index, or name 
	 * at the end of the range. Can accept: TextVariableInstance, 
	 * Long Integer or String.
	 */
	itemByRange(_from: any, to: any): TextVariableInstance;
	/** Returns the first TextVariableInstance in the collection. */
	firstItem(): TextVariableInstance;
	/** Returns the last TextVariableInstance in the collection. */
	lastItem(): TextVariableInstance;
	/** Returns the middle TextVariableInstance in the collection. */
	middleItem(): TextVariableInstance;
	/**
	 * Returns the TextVariableInstance with the index previous to 
	 * the specified index.
	 * @param {TextVariableInstance} obj - The index of the 
	 * TextVariableInstance that follows the desired 
	 * TextVariableInstance.
	 */
	previousItem(obj: TextVariableInstance): TextVariableInstance;
	/**
	 * Returns the TextVariableInstance whose index follows the 
	 * specified TextVariableInstance in the collection.
	 * @param {TextVariableInstance} obj - The TextVariableInstance 
	 * whose index comes before the desired TextVariableInstance.
	 */
	nextItem(obj: TextVariableInstance): TextVariableInstance;
	/** Returns any TextVariableInstance in the collection. */
	anyItem(): TextVariableInstance;
	/** Returns every TextVariableInstance in the collection. */
	everyItem(): TextVariableInstance;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextVariableInstance.
	 */
	toSource(): string;
	/**
	 * Returns the TextVariableInstance with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TextVariableInstance;
}

/**
 * A mapping object that maps an export type to an export tag.
 * @class
 */
export declare class StyleExportTagMap {
	/** The type of export. */
	readonly exportType: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the StyleExportTagMap (a CharacterStyle or 
	 * ParagraphStyle).
	 */
	readonly parent: any;
	/**
	 * The index of the StyleExportTagMap within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The tag to map. */
	exportTag: string;
	/** The class to map. */
	exportClass: string;
	/** The attributes to map. */
	exportAttributes: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the StyleExportTagMap. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * StyleExportTagMap.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): StyleExportTagMap;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of style export tag maps.
 * @class
 */
export declare class StyleExportTagMaps {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Create a new mapping
	 * @param {string} exportType - The type of export.
	 * @param {string} exportTag - The tag to map.
	 * @param {string} exportClass - The class to map.
	 * @param {string} exportAttributes - The attributes to map.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new StyleExportTagMap (Optional)
	 */
	add(exportType: string, exportTag: string, exportClass: string, exportAttributes: string, withProperties: Object): StyleExportTagMap;
	/** Displays the number of elements in the StyleExportTagMap. */
	count(): number;
	/**
	 * Returns the StyleExportTagMap with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): StyleExportTagMap;
	/**
	 * Returns the StyleExportTagMaps within the specified range.
	 * @param {any} _from - The StyleExportTagMap, index, or name 
	 * at the beginning of the range. Can accept: 
	 * StyleExportTagMap, Long Integer or String.
	 * @param {any} to - The StyleExportTagMap, index, or name at 
	 * the end of the range. Can accept: StyleExportTagMap, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): StyleExportTagMap;
	/** Returns the first StyleExportTagMap in the collection. */
	firstItem(): StyleExportTagMap;
	/** Returns the last StyleExportTagMap in the collection. */
	lastItem(): StyleExportTagMap;
	/** Returns the middle StyleExportTagMap in the collection. */
	middleItem(): StyleExportTagMap;
	/**
	 * Returns the StyleExportTagMap with the index previous to the 
	 * specified index.
	 * @param {StyleExportTagMap} obj - The index of the 
	 * StyleExportTagMap that follows the desired 
	 * StyleExportTagMap.
	 */
	previousItem(obj: StyleExportTagMap): StyleExportTagMap;
	/**
	 * Returns the StyleExportTagMap whose index follows the 
	 * specified StyleExportTagMap in the collection.
	 * @param {StyleExportTagMap} obj - The StyleExportTagMap whose 
	 * index comes before the desired StyleExportTagMap.
	 */
	nextItem(obj: StyleExportTagMap): StyleExportTagMap;
	/** Returns any StyleExportTagMap in the collection. */
	anyItem(): StyleExportTagMap;
	/** Returns every StyleExportTagMap in the collection. */
	everyItem(): StyleExportTagMap;
	/**
	 * Generates a string which, if executed, will return the 
	 * StyleExportTagMap.
	 */
	toSource(): string;
	/**
	 * Returns the StyleExportTagMap with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: StyleExportTagMap;
}

/**
 * A paragraph style group.
 * @class
 */
export declare class ParagraphStyleGroup {
	/** Lists all paragraph styles (regardless of their group). */
	readonly allParagraphStyles: ParagraphStyle;
	/** The unique ID of the ParagraphStyleGroup. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ParagraphStyleGroup (a Document, 
	 * Application or ParagraphStyleGroup).
	 */
	readonly parent: any;
	/**
	 * The index of the ParagraphStyleGroup within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of paragraph styles. */
	readonly paragraphStyles: ParagraphStyles;
	/** A collection of paragraph style groups. */
	readonly paragraphStyleGroups: ParagraphStyleGroups;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the ParagraphStyleGroup. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the ParagraphStyleGroup. */
	duplicate(): ParagraphStyleGroup;
	/**
	 * Moves the style to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: ParagraphStyle, ParagraphStyleGroup, 
	 * CharacterStyle, CharacterStyleGroup, CellStyle, 
	 * CellStyleGroup, TableStyle, TableStyleGroup, Document or 
	 * Application. (Optional)
	 */
	move(to: LocationOptions, reference: any): ParagraphStyleGroup;
	/**
	 * Deletes the style.
	 * @param {any} replacingWith - The style to apply in place of 
	 * the deleted style. Can accept: ParagraphStyle or 
	 * CharacterStyle. (Optional)
	 */
	remove(replacingWith: any): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ParagraphStyleGroup.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ParagraphStyleGroup;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of paragraph style groups.
 * @class
 */
export declare class ParagraphStyleGroups {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new ParagraphStyleGroup.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ParagraphStyleGroup (Optional)
	 */
	add(withProperties: Object): ParagraphStyleGroup;
	/** Displays the number of elements in the ParagraphStyleGroup. */
	count(): number;
	/**
	 * Returns the ParagraphStyleGroup with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ParagraphStyleGroup;
	/**
	 * Returns the ParagraphStyleGroup with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ParagraphStyleGroup;
	/**
	 * Returns the ParagraphStyleGroup with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ParagraphStyleGroup;
	/**
	 * Returns the ParagraphStyleGroups within the specified range.
	 * @param {any} _from - The ParagraphStyleGroup, index, or name 
	 * at the beginning of the range. Can accept: 
	 * ParagraphStyleGroup, Long Integer or String.
	 * @param {any} to - The ParagraphStyleGroup, index, or name at 
	 * the end of the range. Can accept: ParagraphStyleGroup, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): ParagraphStyleGroup;
	/** Returns the first ParagraphStyleGroup in the collection. */
	firstItem(): ParagraphStyleGroup;
	/** Returns the last ParagraphStyleGroup in the collection. */
	lastItem(): ParagraphStyleGroup;
	/** Returns the middle ParagraphStyleGroup in the collection. */
	middleItem(): ParagraphStyleGroup;
	/**
	 * Returns the ParagraphStyleGroup with the index previous to 
	 * the specified index.
	 * @param {ParagraphStyleGroup} obj - The index of the 
	 * ParagraphStyleGroup that follows the desired 
	 * ParagraphStyleGroup.
	 */
	previousItem(obj: ParagraphStyleGroup): ParagraphStyleGroup;
	/**
	 * Returns the ParagraphStyleGroup whose index follows the 
	 * specified ParagraphStyleGroup in the collection.
	 * @param {ParagraphStyleGroup} obj - The ParagraphStyleGroup 
	 * whose index comes before the desired ParagraphStyleGroup.
	 */
	nextItem(obj: ParagraphStyleGroup): ParagraphStyleGroup;
	/** Returns any ParagraphStyleGroup in the collection. */
	anyItem(): ParagraphStyleGroup;
	/** Returns every ParagraphStyleGroup in the collection. */
	everyItem(): ParagraphStyleGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * ParagraphStyleGroup.
	 */
	toSource(): string;
	/**
	 * Returns the ParagraphStyleGroup with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ParagraphStyleGroup;
}

/**
 * A character style group.
 * @class
 */
export declare class CharacterStyleGroup {
	/** Lists all character styles (regardless of their group). */
	readonly allCharacterStyles: CharacterStyle;
	/** The unique ID of the CharacterStyleGroup. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CharacterStyleGroup (a Document, 
	 * Application or CharacterStyleGroup).
	 */
	readonly parent: any;
	/**
	 * The index of the CharacterStyleGroup within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of character styles. */
	readonly characterStyles: CharacterStyles;
	/** A collection of character style groups. */
	readonly characterStyleGroups: CharacterStyleGroups;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the CharacterStyleGroup. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the CharacterStyleGroup. */
	duplicate(): CharacterStyleGroup;
	/**
	 * Moves the style to the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: ParagraphStyle, ParagraphStyleGroup, 
	 * CharacterStyle, CharacterStyleGroup, CellStyle, 
	 * CellStyleGroup, TableStyle, TableStyleGroup, Document or 
	 * Application. (Optional)
	 */
	move(to: LocationOptions, reference: any): CharacterStyleGroup;
	/**
	 * Deletes the style.
	 * @param {any} replacingWith - The style to apply in place of 
	 * the deleted style. Can accept: ParagraphStyle or 
	 * CharacterStyle. (Optional)
	 */
	remove(replacingWith: any): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * CharacterStyleGroup.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CharacterStyleGroup;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of character style groups.
 * @class
 */
export declare class CharacterStyleGroups {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new CharacterStyleGroup.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CharacterStyleGroup (Optional)
	 */
	add(withProperties: Object): CharacterStyleGroup;
	/** Displays the number of elements in the CharacterStyleGroup. */
	count(): number;
	/**
	 * Returns the CharacterStyleGroup with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CharacterStyleGroup;
	/**
	 * Returns the CharacterStyleGroup with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): CharacterStyleGroup;
	/**
	 * Returns the CharacterStyleGroup with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CharacterStyleGroup;
	/**
	 * Returns the CharacterStyleGroups within the specified range.
	 * @param {any} _from - The CharacterStyleGroup, index, or name 
	 * at the beginning of the range. Can accept: 
	 * CharacterStyleGroup, Long Integer or String.
	 * @param {any} to - The CharacterStyleGroup, index, or name at 
	 * the end of the range. Can accept: CharacterStyleGroup, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): CharacterStyleGroup;
	/** Returns the first CharacterStyleGroup in the collection. */
	firstItem(): CharacterStyleGroup;
	/** Returns the last CharacterStyleGroup in the collection. */
	lastItem(): CharacterStyleGroup;
	/** Returns the middle CharacterStyleGroup in the collection. */
	middleItem(): CharacterStyleGroup;
	/**
	 * Returns the CharacterStyleGroup with the index previous to 
	 * the specified index.
	 * @param {CharacterStyleGroup} obj - The index of the 
	 * CharacterStyleGroup that follows the desired 
	 * CharacterStyleGroup.
	 */
	previousItem(obj: CharacterStyleGroup): CharacterStyleGroup;
	/**
	 * Returns the CharacterStyleGroup whose index follows the 
	 * specified CharacterStyleGroup in the collection.
	 * @param {CharacterStyleGroup} obj - The CharacterStyleGroup 
	 * whose index comes before the desired CharacterStyleGroup.
	 */
	nextItem(obj: CharacterStyleGroup): CharacterStyleGroup;
	/** Returns any CharacterStyleGroup in the collection. */
	anyItem(): CharacterStyleGroup;
	/** Returns every CharacterStyleGroup in the collection. */
	everyItem(): CharacterStyleGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * CharacterStyleGroup.
	 */
	toSource(): string;
	/**
	 * Returns the CharacterStyleGroup with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CharacterStyleGroup;
}

/**
 * A composite font.
 * @class
 */
export declare class CompositeFont {
	/** The unique ID of the CompositeFont. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CompositeFont (a Application or Document).
	 */
	readonly parent: any;
	/**
	 * The index of the CompositeFont within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of composite font entries. */
	readonly compositeFontEntries: CompositeFontEntries;
	/** The name of the CompositeFont. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the CompositeFont. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * CompositeFont.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CompositeFont;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of composite fonts.
 * @class
 */
export declare class CompositeFonts {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new CompositeFont.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CompositeFont (Optional)
	 */
	add(withProperties: Object): CompositeFont;
	/** Displays the number of elements in the CompositeFont. */
	count(): number;
	/**
	 * Returns the CompositeFont with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CompositeFont;
	/**
	 * Returns the CompositeFont with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): CompositeFont;
	/**
	 * Returns the CompositeFont with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CompositeFont;
	/**
	 * Returns the CompositeFonts within the specified range.
	 * @param {any} _from - The CompositeFont, index, or name at 
	 * the beginning of the range. Can accept: CompositeFont, Long 
	 * Integer or String.
	 * @param {any} to - The CompositeFont, index, or name at the 
	 * end of the range. Can accept: CompositeFont, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): CompositeFont;
	/** Returns the first CompositeFont in the collection. */
	firstItem(): CompositeFont;
	/** Returns the last CompositeFont in the collection. */
	lastItem(): CompositeFont;
	/** Returns the middle CompositeFont in the collection. */
	middleItem(): CompositeFont;
	/**
	 * Returns the CompositeFont with the index previous to the 
	 * specified index.
	 * @param {CompositeFont} obj - The index of the CompositeFont 
	 * that follows the desired CompositeFont.
	 */
	previousItem(obj: CompositeFont): CompositeFont;
	/**
	 * Returns the CompositeFont whose index follows the specified 
	 * CompositeFont in the collection.
	 * @param {CompositeFont} obj - The CompositeFont whose index 
	 * comes before the desired CompositeFont.
	 */
	nextItem(obj: CompositeFont): CompositeFont;
	/** Returns any CompositeFont in the collection. */
	anyItem(): CompositeFont;
	/** Returns every CompositeFont in the collection. */
	everyItem(): CompositeFont;
	/**
	 * Generates a string which, if executed, will return the 
	 * CompositeFont.
	 */
	toSource(): string;
	/**
	 * Returns the CompositeFont with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CompositeFont;
}

/**
 * A composite font entry.
 * @class
 */
export declare class CompositeFontEntry {
	/** If true, the CompositeFontEntry is locked. */
	readonly locked: boolean;
	/** The unique ID of the CompositeFontEntry. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the CompositeFontEntry (a CompositeFont). */
	readonly parent: CompositeFont;
	/**
	 * The index of the CompositeFontEntry within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the CompositeFontEntry. */
	name: string;
	/**
	 * The font applied to the CompositeFontEntry, specified as 
	 * either a font object or the name of font family. Can return: 
	 * Font or String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/**
	 * The size of the entry relative to the base entry. Note: The 
	 * base entry cannot be modified.
	 */
	relativeSize: number;
	/** The horizontal scaling applied to the CompositeFontEntry. */
	horizontalScale: number;
	/** The vertical scaling applied to the CompositeFontEntry. */
	verticalScale: number;
	/** The characters that the set affects. */
	customCharacters: string;
	/** If true, scales characters from the center. */
	scaleOption: boolean;
	/** The amount of baseline shift. */
	baselineShift: number;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the CompositeFontEntry. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * CompositeFontEntry.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CompositeFontEntry;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of composite font entries.
 * @class
 */
export declare class CompositeFontEntries {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new CompositeFontEntry.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CompositeFontEntry (Optional)
	 */
	add(withProperties: Object): CompositeFontEntry;
	/** Displays the number of elements in the CompositeFontEntry. */
	count(): number;
	/**
	 * Returns the CompositeFontEntry with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CompositeFontEntry;
	/**
	 * Returns the CompositeFontEntry with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): CompositeFontEntry;
	/**
	 * Returns the CompositeFontEntry with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CompositeFontEntry;
	/**
	 * Returns the CompositeFontEntries within the specified range.
	 * @param {any} _from - The CompositeFontEntry, index, or name 
	 * at the beginning of the range. Can accept: 
	 * CompositeFontEntry, Long Integer or String.
	 * @param {any} to - The CompositeFontEntry, index, or name at 
	 * the end of the range. Can accept: CompositeFontEntry, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): CompositeFontEntry;
	/** Returns the first CompositeFontEntry in the collection. */
	firstItem(): CompositeFontEntry;
	/** Returns the last CompositeFontEntry in the collection. */
	lastItem(): CompositeFontEntry;
	/** Returns the middle CompositeFontEntry in the collection. */
	middleItem(): CompositeFontEntry;
	/**
	 * Returns the CompositeFontEntry with the index previous to 
	 * the specified index.
	 * @param {CompositeFontEntry} obj - The index of the 
	 * CompositeFontEntry that follows the desired 
	 * CompositeFontEntry.
	 */
	previousItem(obj: CompositeFontEntry): CompositeFontEntry;
	/**
	 * Returns the CompositeFontEntry whose index follows the 
	 * specified CompositeFontEntry in the collection.
	 * @param {CompositeFontEntry} obj - The CompositeFontEntry 
	 * whose index comes before the desired CompositeFontEntry.
	 */
	nextItem(obj: CompositeFontEntry): CompositeFontEntry;
	/** Returns any CompositeFontEntry in the collection. */
	anyItem(): CompositeFontEntry;
	/** Returns every CompositeFontEntry in the collection. */
	everyItem(): CompositeFontEntry;
	/**
	 * Generates a string which, if executed, will return the 
	 * CompositeFontEntry.
	 */
	toSource(): string;
	/**
	 * Returns the CompositeFontEntry with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CompositeFontEntry;
}

/**
 * A named grid.
 * @class
 */
export declare class NamedGrid {
	/**
	 * Default grid properties. Note: Applies to named, layout, and 
	 * frame (story) grids.
	 */
	readonly gridData: GridDataInformation;
	/** The unique ID of the NamedGrid. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the NamedGrid (a Document or Application). */
	readonly parent: any;
	/** The index of the NamedGrid within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** The name of the NamedGrid. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the NamedGrid. */
	remove(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * NamedGrid.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): NamedGrid;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of named grids.
 * @class
 */
export declare class NamedGrids {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new NamedGrid.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new NamedGrid (Optional)
	 */
	add(withProperties: Object): NamedGrid;
	/** Displays the number of elements in the NamedGrid. */
	count(): number;
	/**
	 * Returns the NamedGrid with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): NamedGrid;
	/**
	 * Returns the NamedGrid with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): NamedGrid;
	/**
	 * Returns the NamedGrid with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): NamedGrid;
	/**
	 * Returns the NamedGrids within the specified range.
	 * @param {any} _from - The NamedGrid, index, or name at the 
	 * beginning of the range. Can accept: NamedGrid, Long Integer 
	 * or String.
	 * @param {any} to - The NamedGrid, index, or name at the end 
	 * of the range. Can accept: NamedGrid, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): NamedGrid;
	/** Returns the first NamedGrid in the collection. */
	firstItem(): NamedGrid;
	/** Returns the last NamedGrid in the collection. */
	lastItem(): NamedGrid;
	/** Returns the middle NamedGrid in the collection. */
	middleItem(): NamedGrid;
	/**
	 * Returns the NamedGrid with the index previous to the 
	 * specified index.
	 * @param {NamedGrid} obj - The index of the NamedGrid that 
	 * follows the desired NamedGrid.
	 */
	previousItem(obj: NamedGrid): NamedGrid;
	/**
	 * Returns the NamedGrid whose index follows the specified 
	 * NamedGrid in the collection.
	 * @param {NamedGrid} obj - The NamedGrid whose index comes 
	 * before the desired NamedGrid.
	 */
	nextItem(obj: NamedGrid): NamedGrid;
	/** Returns any NamedGrid in the collection. */
	anyItem(): NamedGrid;
	/** Returns every NamedGrid in the collection. */
	everyItem(): NamedGrid;
	/**
	 * Generates a string which, if executed, will return the 
	 * NamedGrid.
	 */
	toSource(): string;
	/**
	 * Returns the NamedGrid with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: NamedGrid;
}

/**
 * An indexing sort option.
 * @class
 */
export declare class IndexingSortOption {
	/** The name of the IndexingSortOption. */
	readonly name: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the IndexingSortOption (a Application or 
	 * Document).
	 */
	readonly parent: any;
	/**
	 * The index of the IndexingSortOption within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, include this indexing sort option. */
	include: boolean;
	/**
	 * Priority of this indexing sort option (shuffles prior 
	 * entries down).
	 */
	priority: number;
	/**
	 * The header type. Can return: HeaderTypes enumerator or 
	 * NothingEnum enumerator.
	 */
	headerType: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * IndexingSortOption.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): IndexingSortOption;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of indexing sort options.
 * @class
 */
export declare class IndexingSortOptions {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the IndexingSortOption. */
	count(): number;
	/**
	 * Returns the IndexingSortOption with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): IndexingSortOption;
	/**
	 * Returns the IndexingSortOption with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): IndexingSortOption;
	/**
	 * Returns the IndexingSortOptions within the specified range.
	 * @param {any} _from - The IndexingSortOption, index, or name 
	 * at the beginning of the range. Can accept: 
	 * IndexingSortOption, Long Integer or String.
	 * @param {any} to - The IndexingSortOption, index, or name at 
	 * the end of the range. Can accept: IndexingSortOption, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): IndexingSortOption;
	/** Returns the first IndexingSortOption in the collection. */
	firstItem(): IndexingSortOption;
	/** Returns the last IndexingSortOption in the collection. */
	lastItem(): IndexingSortOption;
	/** Returns the middle IndexingSortOption in the collection. */
	middleItem(): IndexingSortOption;
	/**
	 * Returns the IndexingSortOption with the index previous to 
	 * the specified index.
	 * @param {IndexingSortOption} obj - The index of the 
	 * IndexingSortOption that follows the desired 
	 * IndexingSortOption.
	 */
	previousItem(obj: IndexingSortOption): IndexingSortOption;
	/**
	 * Returns the IndexingSortOption whose index follows the 
	 * specified IndexingSortOption in the collection.
	 * @param {IndexingSortOption} obj - The IndexingSortOption 
	 * whose index comes before the desired IndexingSortOption.
	 */
	nextItem(obj: IndexingSortOption): IndexingSortOption;
	/** Returns any IndexingSortOption in the collection. */
	anyItem(): IndexingSortOption;
	/** Returns every IndexingSortOption in the collection. */
	everyItem(): IndexingSortOption;
	/**
	 * Generates a string which, if executed, will return the 
	 * IndexingSortOption.
	 */
	toSource(): string;
	/**
	 * Returns the IndexingSortOption with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: IndexingSortOption;
}

/**
 * Bullet character.
 * @class
 * @extends Preference
 */
export declare class Bullet extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Bullet (a TextDefault, ParagraphStyle, 
	 * Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, 
	 * Line, Word, Character, Story, XmlStory, FindTextPreference, 
	 * ChangeTextPreference, FindGrepPreference, 
	 * ChangeGrepPreference, FindTransliteratePreference or 
	 * ChangeTransliteratePreference).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The type of bullet character. */
	characterType: BulletCharacterType;
	/** The bullet character as a unicode ID or a glyph ID. */
	characterValue: number;
	/**
	 * Font of the bullet character. Can return: Font, String or 
	 * AutoEnum enumerator.
	 */
	bulletsFont: any;
	/**
	 * Font style of the bullet character. Can return: String, 
	 * NothingEnum enumerator or AutoEnum enumerator.
	 */
	bulletsFontStyle: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * Bullet.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Bullet;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Numbering restart policy.
 * @class
 * @extends Preference
 */
export declare class NumberingRestartPolicy extends Preference {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the NumberingRestartPolicy (a TextDefault, 
	 * ParagraphStyle, Text, InsertionPoint, TextStyleRange, 
	 * Paragraph, TextColumn, Line, Word, Character, Story, 
	 * XmlStory, FindTextPreference, ChangeTextPreference, 
	 * FindGrepPreference or ChangeGrepPreference).
	 */
	readonly parent: any;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The numbering restart policy to use. */
	numberingPolicy: RestartPolicy;
	/** The lower numbering level for a numbered list. */
	numberingLowerLevel: number;
	/** The upper numbering level for a numbered list. */
	numberingUpperLevel: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * NumberingRestartPolicy.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): NumberingRestartPolicy;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A numbered list.
 * @class
 */
export declare class NumberingList {
	/** The unique ID of the NumberingList. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the NumberingList (a Application or Document).
	 */
	readonly parent: any;
	/**
	 * The index of the NumberingList within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the NumberingList. */
	name: string;
	/** If true, numbering will continue across stories. */
	continueNumbersAcrossStories: boolean;
	/** if true, numbering will continue across book documents. */
	continueNumbersAcrossDocuments: boolean;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Delete the NumberingList.
	 * @param {NumberingList} replacingWith - The NumberingList to 
	 * apply in place of this one. (Optional)
	 */
	remove(replacingWith: NumberingList): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * NumberingList.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): NumberingList;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of numbered lists.
 * @class
 */
export declare class NumberingLists {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Create a new list style.
	 * @param {string} name - Name
	 * @param {boolean} continueNumbersAcrossStories - If true, 
	 * numbering will continue across stories. (Optional)
	 * @param {boolean} continueNumbersAcrossDocuments - If true, 
	 * numbering will continue across book documents. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new NumberingList (Optional)
	 */
	add(name: string, continueNumbersAcrossStories: boolean, continueNumbersAcrossDocuments: boolean, withProperties: Object): NumberingList;
	/** Displays the number of elements in the NumberingList. */
	count(): number;
	/**
	 * Returns the NumberingList with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): NumberingList;
	/**
	 * Returns the NumberingList with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): NumberingList;
	/**
	 * Returns the NumberingList with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): NumberingList;
	/**
	 * Returns the NumberingLists within the specified range.
	 * @param {any} _from - The NumberingList, index, or name at 
	 * the beginning of the range. Can accept: NumberingList, Long 
	 * Integer or String.
	 * @param {any} to - The NumberingList, index, or name at the 
	 * end of the range. Can accept: NumberingList, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): NumberingList;
	/** Returns the first NumberingList in the collection. */
	firstItem(): NumberingList;
	/** Returns the last NumberingList in the collection. */
	lastItem(): NumberingList;
	/** Returns the middle NumberingList in the collection. */
	middleItem(): NumberingList;
	/**
	 * Returns the NumberingList with the index previous to the 
	 * specified index.
	 * @param {NumberingList} obj - The index of the NumberingList 
	 * that follows the desired NumberingList.
	 */
	previousItem(obj: NumberingList): NumberingList;
	/**
	 * Returns the NumberingList whose index follows the specified 
	 * NumberingList in the collection.
	 * @param {NumberingList} obj - The NumberingList whose index 
	 * comes before the desired NumberingList.
	 */
	nextItem(obj: NumberingList): NumberingList;
	/** Returns any NumberingList in the collection. */
	anyItem(): NumberingList;
	/** Returns every NumberingList in the collection. */
	everyItem(): NumberingList;
	/**
	 * Generates a string which, if executed, will return the 
	 * NumberingList.
	 */
	toSource(): string;
	/**
	 * Returns the NumberingList with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: NumberingList;
}

/**
 * An object style group.
 * @class
 */
export declare class ObjectStyleGroup {
	/** All object styles contained by the ObjectStyleGroup. */
	readonly allObjectStyles: ObjectStyle;
	/** The unique ID of the ObjectStyleGroup. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the ObjectStyleGroup (a Document, Application 
	 * or ObjectStyleGroup).
	 */
	readonly parent: any;
	/**
	 * The index of the ObjectStyleGroup within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of object styles. */
	readonly objectStyles: ObjectStyles;
	/** A collection of object style groups. */
	readonly objectStyleGroups: ObjectStyleGroups;
	/** The name of the ObjectStyleGroup. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Duplicates the ObjectStyleGroup. */
	duplicate(): ObjectStyleGroup;
	/**
	 * Moves the ObjectStyleGroup to the specified location.
	 * @param {LocationOptions} to - The new location relative to 
	 * the reference object or within the container object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter is before or after. Can 
	 * accept: ObjectStyle, ObjectStyleGroup, Document or 
	 * Application. (Optional)
	 */
	move(to: LocationOptions, reference: any): ObjectStyleGroup;
	/**
	 * Deletes the ObjectStyleGroup.
	 * @param {ObjectStyle} replacingWith - The ObjectStyleGroup to 
	 * apply in place of the deleted ObjectStyleGroup. (Optional)
	 */
	remove(replacingWith: ObjectStyle): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectStyleGroup.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ObjectStyleGroup;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of object style groups.
 * @class
 */
export declare class ObjectStyleGroups {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new ObjectStyleGroup.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ObjectStyleGroup (Optional)
	 */
	add(withProperties: Object): ObjectStyleGroup;
	/** Displays the number of elements in the ObjectStyleGroup. */
	count(): number;
	/**
	 * Returns the ObjectStyleGroup with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ObjectStyleGroup;
	/**
	 * Returns the ObjectStyleGroup with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ObjectStyleGroup;
	/**
	 * Returns the ObjectStyleGroup with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ObjectStyleGroup;
	/**
	 * Returns the ObjectStyleGroups within the specified range.
	 * @param {any} _from - The ObjectStyleGroup, index, or name at 
	 * the beginning of the range. Can accept: ObjectStyleGroup, 
	 * Long Integer or String.
	 * @param {any} to - The ObjectStyleGroup, index, or name at 
	 * the end of the range. Can accept: ObjectStyleGroup, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): ObjectStyleGroup;
	/** Returns the first ObjectStyleGroup in the collection. */
	firstItem(): ObjectStyleGroup;
	/** Returns the last ObjectStyleGroup in the collection. */
	lastItem(): ObjectStyleGroup;
	/** Returns the middle ObjectStyleGroup in the collection. */
	middleItem(): ObjectStyleGroup;
	/**
	 * Returns the ObjectStyleGroup with the index previous to the 
	 * specified index.
	 * @param {ObjectStyleGroup} obj - The index of the 
	 * ObjectStyleGroup that follows the desired ObjectStyleGroup.
	 */
	previousItem(obj: ObjectStyleGroup): ObjectStyleGroup;
	/**
	 * Returns the ObjectStyleGroup whose index follows the 
	 * specified ObjectStyleGroup in the collection.
	 * @param {ObjectStyleGroup} obj - The ObjectStyleGroup whose 
	 * index comes before the desired ObjectStyleGroup.
	 */
	nextItem(obj: ObjectStyleGroup): ObjectStyleGroup;
	/** Returns any ObjectStyleGroup in the collection. */
	anyItem(): ObjectStyleGroup;
	/** Returns every ObjectStyleGroup in the collection. */
	everyItem(): ObjectStyleGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * ObjectStyleGroup.
	 */
	toSource(): string;
	/**
	 * Returns the ObjectStyleGroup with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ObjectStyleGroup;
}

/**
 * A condition for conditional text.
 * @class
 */
export declare class Condition {
	/** The unique ID of the Condition. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Condition (a Application or Document). */
	readonly parent: any;
	/** The index of the Condition within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the Condition. */
	name: string;
	/**
	 * The color for the condition indicator; specified either as 
	 * an array of three doubles representing RGB values in the 
	 * range 0 to 255, or as a UI color. Can return: Array of 3 
	 * Reals (0 - 255) or UIColors enumerator.
	 */
	indicatorColor: any;
	/** The condition indicator method. */
	indicatorMethod: ConditionIndicatorMethod;
	/** The condition underline indicator appearance. */
	underlineIndicatorAppearance: ConditionUnderlineIndicatorAppearance;
	/** If true, the Condition is visible. */
	visible: boolean;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Delete the condition.
	 * @param {any} replacingWith - The condition to apply to text 
	 * in place of the deleted condition. By default, no condition 
	 * is applied in place of the deleted condition. Can accept: 
	 * Condition or String. (Optional)
	 */
	remove(replacingWith: any): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Condition.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Condition;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of conditions for conditional text.
 * @class
 */
export declare class Conditions {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Condition.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Condition (Optional)
	 */
	add(withProperties: Object): Condition;
	/** Displays the number of elements in the Condition. */
	count(): number;
	/**
	 * Returns the Condition with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Condition;
	/**
	 * Returns the Condition with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Condition;
	/**
	 * Returns the Condition with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Condition;
	/**
	 * Returns the Conditions within the specified range.
	 * @param {any} _from - The Condition, index, or name at the 
	 * beginning of the range. Can accept: Condition, Long Integer 
	 * or String.
	 * @param {any} to - The Condition, index, or name at the end 
	 * of the range. Can accept: Condition, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Condition;
	/** Returns the first Condition in the collection. */
	firstItem(): Condition;
	/** Returns the last Condition in the collection. */
	lastItem(): Condition;
	/** Returns the middle Condition in the collection. */
	middleItem(): Condition;
	/**
	 * Returns the Condition with the index previous to the 
	 * specified index.
	 * @param {Condition} obj - The index of the Condition that 
	 * follows the desired Condition.
	 */
	previousItem(obj: Condition): Condition;
	/**
	 * Returns the Condition whose index follows the specified 
	 * Condition in the collection.
	 * @param {Condition} obj - The Condition whose index comes 
	 * before the desired Condition.
	 */
	nextItem(obj: Condition): Condition;
	/** Returns any Condition in the collection. */
	anyItem(): Condition;
	/** Returns every Condition in the collection. */
	everyItem(): Condition;
	/**
	 * Generates a string which, if executed, will return the 
	 * Condition.
	 */
	toSource(): string;
	/**
	 * Returns the Condition with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Condition;
}

/**
 * A hidden text object.
 * @class
 */
export declare class HiddenText {
	/**
	 * The insertion point before the table in the story containing 
	 * the table.
	 */
	readonly storyOffset: InsertionPoint;
	/** The unique ID of the HiddenText. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the HiddenText (a Story, XmlStory, TextFrame, 
	 * InsertionPoint, Note, Cell or Footnote).
	 */
	readonly parent: any;
	/** The index of the HiddenText within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the HiddenText; this is an alias to the 
	 * HiddenText's label property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * HiddenText.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): HiddenText;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of hidden text objects.
 * @class
 */
export declare class HiddenTexts {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the HiddenText. */
	count(): number;
	/**
	 * Returns the HiddenText with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): HiddenText;
	/**
	 * Returns the HiddenText with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): HiddenText;
	/**
	 * Returns the HiddenText with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): HiddenText;
	/**
	 * Returns the HiddenTexts within the specified range.
	 * @param {any} _from - The HiddenText, index, or name at the 
	 * beginning of the range. Can accept: HiddenText, Long Integer 
	 * or String.
	 * @param {any} to - The HiddenText, index, or name at the end 
	 * of the range. Can accept: HiddenText, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): HiddenText;
	/** Returns the first HiddenText in the collection. */
	firstItem(): HiddenText;
	/** Returns the last HiddenText in the collection. */
	lastItem(): HiddenText;
	/** Returns the middle HiddenText in the collection. */
	middleItem(): HiddenText;
	/**
	 * Returns the HiddenText with the index previous to the 
	 * specified index.
	 * @param {HiddenText} obj - The index of the HiddenText that 
	 * follows the desired HiddenText.
	 */
	previousItem(obj: HiddenText): HiddenText;
	/**
	 * Returns the HiddenText whose index follows the specified 
	 * HiddenText in the collection.
	 * @param {HiddenText} obj - The HiddenText whose index comes 
	 * before the desired HiddenText.
	 */
	nextItem(obj: HiddenText): HiddenText;
	/** Returns any HiddenText in the collection. */
	anyItem(): HiddenText;
	/** Returns every HiddenText in the collection. */
	everyItem(): HiddenText;
	/**
	 * Generates a string which, if executed, will return the 
	 * HiddenText.
	 */
	toSource(): string;
	/**
	 * Returns the HiddenText with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: HiddenText;
}

/**
 * A condition set for conditional text.
 * @class
 */
export declare class ConditionSet {
	/** The unique ID of the ConditionSet. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ConditionSet (a Application or Document). */
	readonly parent: any;
	/** The index of the ConditionSet within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the ConditionSet. */
	name: string;
	/**
	 * List of conditions and visibilities in the set. Can return: 
	 * Ordered array containing condition:Condition, 
	 * visibility:Boolean.
	 */
	setConditions: any;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Delete a condition set for conditional text.
	 * @param {any} replacingWith - The condition set to apply to 
	 * the text in place of the deleted condition set. By default, 
	 * no condition set is applied in place of the deleted 
	 * condition set. Can accept: ConditionSet or String. 
	 * (Optional)
	 */
	remove(replacingWith: any): void;
	/**
	 * Redefine a condition set with the currently existing 
	 * conditions and visibilities.
	 */
	redefine(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ConditionSet.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ConditionSet;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of condition sets for conditional text.
 * @class
 */
export declare class ConditionSets {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new ConditionSet.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ConditionSet (Optional)
	 */
	add(withProperties: Object): ConditionSet;
	/** Displays the number of elements in the ConditionSet. */
	count(): number;
	/**
	 * Returns the ConditionSet with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ConditionSet;
	/**
	 * Returns the ConditionSet with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ConditionSet;
	/**
	 * Returns the ConditionSet with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ConditionSet;
	/**
	 * Returns the ConditionSets within the specified range.
	 * @param {any} _from - The ConditionSet, index, or name at the 
	 * beginning of the range. Can accept: ConditionSet, Long 
	 * Integer or String.
	 * @param {any} to - The ConditionSet, index, or name at the 
	 * end of the range. Can accept: ConditionSet, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): ConditionSet;
	/** Returns the first ConditionSet in the collection. */
	firstItem(): ConditionSet;
	/** Returns the last ConditionSet in the collection. */
	lastItem(): ConditionSet;
	/** Returns the middle ConditionSet in the collection. */
	middleItem(): ConditionSet;
	/**
	 * Returns the ConditionSet with the index previous to the 
	 * specified index.
	 * @param {ConditionSet} obj - The index of the ConditionSet 
	 * that follows the desired ConditionSet.
	 */
	previousItem(obj: ConditionSet): ConditionSet;
	/**
	 * Returns the ConditionSet whose index follows the specified 
	 * ConditionSet in the collection.
	 * @param {ConditionSet} obj - The ConditionSet whose index 
	 * comes before the desired ConditionSet.
	 */
	nextItem(obj: ConditionSet): ConditionSet;
	/** Returns any ConditionSet in the collection. */
	anyItem(): ConditionSet;
	/** Returns every ConditionSet in the collection. */
	everyItem(): ConditionSet;
	/**
	 * Generates a string which, if executed, will return the 
	 * ConditionSet.
	 */
	toSource(): string;
	/**
	 * Returns the ConditionSet with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ConditionSet;
}

/**
 * Pages panel.
 * @class
 * @extends Panel
 */
export declare class PagesPanel extends Panel {
	/** The name of the PagesPanel. */
	readonly name: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the PagesPanel (a Application). */
	readonly parent: Application;
	/** The index of the PagesPanel within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * View setting for how to arrange the pages in the page 
	 * section of the panel.
	 */
	pagesViewSetting: PageViewOptions;
	/** Page icon size. */
	iconSize: IconSizes;
	/** Master page icon size. */
	masterIconSize: IconSizes;
	/**
	 * If true, master page icons will be arranged vertically 
	 * around the binding spine. If false, master page icons will 
	 * be arranged horizontally.
	 */
	masterVerticalView: boolean;
	/**
	 * Specifies the behavior of the document and master page areas 
	 * of the panel when the panel is resized.
	 */
	resizeBehavior: PanelLayoutResize;
	/**
	 * If true, the pages area of the panel will be drawn above the 
	 * master pages area.
	 */
	pagesOnTop: boolean;
	/**
	 * If true, display thumbnails of the pages in the pages area 
	 * of the panel.
	 */
	pagesThumbnails: boolean;
	/**
	 * If true, display thumbnails of the pages in the master pages 
	 * area of the panel.
	 */
	mastersThumbnails: boolean;
	/**
	 * If true, a transparency icon will display next to spreads 
	 * with elements having transparency applied.
	 */
	transparencyIcons: boolean;
	/**
	 * If true, a page transitions icon will display next to 
	 * spreads with page transitions applied.
	 */
	transitionsIcons: boolean;
	/**
	 * If true, a rotation icon will display next to spreads with 
	 * non-zero rotation applied.
	 */
	rotationIcons: boolean;
	/** If true, the panel is visible. */
	visible: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PagesPanel.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PagesPanel;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * Library panel
 * @class
 * @extends Panel
 */
export declare class LibraryPanel extends Panel {
	/** The library displayed in this LibraryPanel */
	readonly associatedLibrary: Library;
	/** The name of the LibraryPanel. */
	readonly name: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the LibraryPanel (a Application). */
	readonly parent: Application;
	/** The index of the LibraryPanel within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** LibraryPanel view */
	view: LibraryPanelViews;
	/** The sort order of the assets in the LibraryPanel */
	sortOrder: SortAssets;
	/**
	 * The selected object(s). Can also accept: Object or 
	 * NothingEnum enumerator.
	 */
	selection: Object;
	/** If true, the panel is visible. */
	visible: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Show all assets */
	showAll(): void;
	/**
	 * Selects the specified object(s).
	 * @param {any} selectableItems - The objects to select. Can 
	 * accept: Object, Array of Objects, NothingEnum enumerator or 
	 * SelectAll enumerator.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the LibraryPanel in relation to previously 
	 * selected objects. (Optional)
	 */
	select(selectableItems: any, existingSelection?: SelectionOptions): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * LibraryPanel.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): LibraryPanel;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A menu action.
 * @class
 */
export declare class MenuAction {
	/**
	 * Dispatched before the MenuAction is invoked. This event does 
	 * not bubble. This event is cancelable.
	 */
	readonly BEFORE_INVOKE: string;
	/**
	 * Dispatched after the MenuAction is invoked. This event does 
	 * not bubble. This event is not cancelable.
	 */
	readonly AFTER_INVOKE: string;
	/** The name of the MenuAction. */
	readonly name: string;
	/**
	 * The name of the MenuAction for display in the user 
	 * interface. The title includes any ampersand characters (&), 
	 * which are used to tell the Windows OS to underline the 
	 * following character in the name for use with the Alt key to 
	 * navigate to a menu item. Double ampersands are used to 
	 * display an actual ampersand character in the name. The Mac 
	 * OS ignores and removes the extra ampersand characters.
	 */
	readonly title: string;
	/** The menu action area. */
	readonly area: string;
	/** If true, the MenuAction is enabled. */
	readonly enabled: boolean;
	/**
	 * If true, the menu item associated with the menu action is 
	 * checked.
	 */
	readonly checked: boolean;
	/** The unique ID of the MenuAction. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the MenuAction (a Application). */
	readonly parent: Application;
	/** The index of the MenuAction within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Invoke the action. */
	invoke(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * MenuAction.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MenuAction;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of menu actions.
 * @class
 */
export declare class MenuActions {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the MenuAction. */
	count(): number;
	/**
	 * Returns the MenuAction with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MenuAction;
	/**
	 * Returns the MenuAction with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): MenuAction;
	/**
	 * Returns the MenuAction with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MenuAction;
	/**
	 * Returns the MenuActions within the specified range.
	 * @param {any} _from - The MenuAction, index, or name at the 
	 * beginning of the range. Can accept: MenuAction, Long Integer 
	 * or String.
	 * @param {any} to - The MenuAction, index, or name at the end 
	 * of the range. Can accept: MenuAction, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): MenuAction;
	/** Returns the first MenuAction in the collection. */
	firstItem(): MenuAction;
	/** Returns the last MenuAction in the collection. */
	lastItem(): MenuAction;
	/** Returns the middle MenuAction in the collection. */
	middleItem(): MenuAction;
	/**
	 * Returns the MenuAction with the index previous to the 
	 * specified index.
	 * @param {MenuAction} obj - The index of the MenuAction that 
	 * follows the desired MenuAction.
	 */
	previousItem(obj: MenuAction): MenuAction;
	/**
	 * Returns the MenuAction whose index follows the specified 
	 * MenuAction in the collection.
	 * @param {MenuAction} obj - The MenuAction whose index comes 
	 * before the desired MenuAction.
	 */
	nextItem(obj: MenuAction): MenuAction;
	/** Returns any MenuAction in the collection. */
	anyItem(): MenuAction;
	/** Returns every MenuAction in the collection. */
	everyItem(): MenuAction;
	/**
	 * Generates a string which, if executed, will return the 
	 * MenuAction.
	 */
	toSource(): string;
	/**
	 * Returns the MenuAction with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MenuAction;
}

/**
 * A script menu action.
 * @class
 * @extends MenuAction
 */
export declare class ScriptMenuAction extends MenuAction {
	/**
	 * Dispatched when the ScriptMenuAction is invoked. This event 
	 * does not bubble. This event is not cancelable.
	 */
	readonly ON_INVOKE: string;
	/**
	 * Dispatched before the ScriptMenuAction is displayed. This 
	 * event does not bubble. This event is not cancelable.
	 */
	readonly BEFORE_DISPLAY: string;
	/**
	 * Dispatched before the ScriptMenuAction is invoked. This 
	 * event does not bubble. This event is cancelable.
	 */
	readonly BEFORE_INVOKE: string;
	/**
	 * Dispatched after the ScriptMenuAction is invoked. This event 
	 * does not bubble. This event is not cancelable.
	 */
	readonly AFTER_INVOKE: string;
	/** The unique ID of the ScriptMenuAction. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ScriptMenuAction (a Application). */
	readonly parent: Application;
	/**
	 * The index of the ScriptMenuAction within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the ScriptMenuAction. */
	name: string;
	/**
	 * The name of the ScriptMenuAction for display in the user 
	 * interface. The title includes any ampersand characters (&), 
	 * which are used to tell the Windows OS to underline the 
	 * following character in the name for use with the Alt key to 
	 * navigate to a menu item. Double ampersands are used to 
	 * display an actual ampersand character in the name. The Mac 
	 * OS ignores and removes the extra ampersand characters.
	 */
	title: string;
	/** The menu action area. */
	area: string;
	/** If true, the ScriptMenuAction is enabled. */
	enabled: boolean;
	/**
	 * If true, the menu item associated with the menu action is 
	 * checked.
	 */
	checked: boolean;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the ScriptMenuAction. */
	remove(): void;
	/** Invoke the action. */
	invoke(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * ScriptMenuAction.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ScriptMenuAction;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of script menu actions.
 * @class
 */
export declare class ScriptMenuActions {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new action.
	 * @param {string} title - The name of the ScriptMenuAction for 
	 * display in the user interface. The title includes any 
	 * ampersand characters (&), which are used to tell the Windows 
	 * OS to underline the following character in the name for use 
	 * with the Alt key to navigate to a menu item. Double 
	 * ampersands are used to display an actual ampersand character 
	 * in the name. The Mac OS ignores and removes the extra 
	 * ampersand characters. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new ScriptMenuAction (Optional)
	 */
	add(title: string, withProperties: Object): ScriptMenuAction;
	/** Displays the number of elements in the ScriptMenuAction. */
	count(): number;
	/**
	 * Returns the ScriptMenuAction with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ScriptMenuAction;
	/**
	 * Returns the ScriptMenuAction with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): ScriptMenuAction;
	/**
	 * Returns the ScriptMenuAction with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): ScriptMenuAction;
	/**
	 * Returns the ScriptMenuActions within the specified range.
	 * @param {any} _from - The ScriptMenuAction, index, or name at 
	 * the beginning of the range. Can accept: ScriptMenuAction, 
	 * Long Integer or String.
	 * @param {any} to - The ScriptMenuAction, index, or name at 
	 * the end of the range. Can accept: ScriptMenuAction, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): ScriptMenuAction;
	/** Returns the first ScriptMenuAction in the collection. */
	firstItem(): ScriptMenuAction;
	/** Returns the last ScriptMenuAction in the collection. */
	lastItem(): ScriptMenuAction;
	/** Returns the middle ScriptMenuAction in the collection. */
	middleItem(): ScriptMenuAction;
	/**
	 * Returns the ScriptMenuAction with the index previous to the 
	 * specified index.
	 * @param {ScriptMenuAction} obj - The index of the 
	 * ScriptMenuAction that follows the desired ScriptMenuAction.
	 */
	previousItem(obj: ScriptMenuAction): ScriptMenuAction;
	/**
	 * Returns the ScriptMenuAction whose index follows the 
	 * specified ScriptMenuAction in the collection.
	 * @param {ScriptMenuAction} obj - The ScriptMenuAction whose 
	 * index comes before the desired ScriptMenuAction.
	 */
	nextItem(obj: ScriptMenuAction): ScriptMenuAction;
	/** Returns any ScriptMenuAction in the collection. */
	anyItem(): ScriptMenuAction;
	/** Returns every ScriptMenuAction in the collection. */
	everyItem(): ScriptMenuAction;
	/**
	 * Generates a string which, if executed, will return the 
	 * ScriptMenuAction.
	 */
	toSource(): string;
	/**
	 * Returns the ScriptMenuAction with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ScriptMenuAction;
}

/**
 * A menu.
 * @class
 */
export declare class Menu {
	/**
	 * Dispatched before the Menu is displayed. This event does not 
	 * bubble. This event is not cancelable.
	 */
	readonly BEFORE_DISPLAY: string;
	/** The name of the Menu. */
	readonly name: string;
	/**
	 * The name of the Menu for display in the user interface. The 
	 * title includes any ampersand characters (&), which are used 
	 * to tell the Windows OS to underline the following character 
	 * in the name for use with the Alt key to navigate to a menu 
	 * item. Double ampersands are used to display an actual 
	 * ampersand character in the name. The Mac OS ignores and 
	 * removes the extra ampersand characters.
	 */
	readonly title: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Menu (a Application). */
	readonly parent: Application;
	/** The index of the Menu within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of menu elements. */
	readonly menuElements: MenuElements;
	/** A collection of submenus. */
	readonly submenus: Submenus;
	/** A collection of menu items. */
	readonly menuItems: MenuItems;
	/** A collection of menu separators. */
	readonly menuSeparators: MenuSeparators;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the Menu.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Menu;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of menus.
 * @class
 */
export declare class Menus {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Menu. */
	count(): number;
	/**
	 * Returns the Menu with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Menu;
	/**
	 * Returns the Menu with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Menu;
	/**
	 * Returns the Menus within the specified range.
	 * @param {any} _from - The Menu, index, or name at the 
	 * beginning of the range. Can accept: Menu, Long Integer or 
	 * String.
	 * @param {any} to - The Menu, index, or name at the end of the 
	 * range. Can accept: Menu, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Menu;
	/** Returns the first Menu in the collection. */
	firstItem(): Menu;
	/** Returns the last Menu in the collection. */
	lastItem(): Menu;
	/** Returns the middle Menu in the collection. */
	middleItem(): Menu;
	/**
	 * Returns the Menu with the index previous to the specified 
	 * index.
	 * @param {Menu} obj - The index of the Menu that follows the 
	 * desired Menu.
	 */
	previousItem(obj: Menu): Menu;
	/**
	 * Returns the Menu whose index follows the specified Menu in 
	 * the collection.
	 * @param {Menu} obj - The Menu whose index comes before the 
	 * desired Menu.
	 */
	nextItem(obj: Menu): Menu;
	/** Returns any Menu in the collection. */
	anyItem(): Menu;
	/** Returns every Menu in the collection. */
	everyItem(): Menu;
	/**
	 * Generates a string which, if executed, will return the Menu.
	 */
	toSource(): string;
	/**
	 * Returns the Menu with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Menu;
}

/**
 * A menu elements
 * @class
 */
export declare class MenuElement {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the MenuElement (a Menu or Submenu). */
	readonly parent: any;
	/** The index of the MenuElement within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the MenuElement. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * MenuElement.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MenuElement;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of menu elements.
 * @class
 */
export declare class MenuElements {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the MenuElement. */
	count(): number;
	/**
	 * Returns the MenuElement with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MenuElement;
	/**
	 * Returns the MenuElements within the specified range.
	 * @param {any} _from - The MenuElement, index, or name at the 
	 * beginning of the range. Can accept: MenuElement, Long 
	 * Integer or String.
	 * @param {any} to - The MenuElement, index, or name at the end 
	 * of the range. Can accept: MenuElement, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): MenuElement;
	/** Returns the first MenuElement in the collection. */
	firstItem(): MenuElement;
	/** Returns the last MenuElement in the collection. */
	lastItem(): MenuElement;
	/** Returns the middle MenuElement in the collection. */
	middleItem(): MenuElement;
	/**
	 * Returns the MenuElement with the index previous to the 
	 * specified index.
	 * @param {MenuElement} obj - The index of the MenuElement that 
	 * follows the desired MenuElement.
	 */
	previousItem(obj: MenuElement): MenuElement;
	/**
	 * Returns the MenuElement whose index follows the specified 
	 * MenuElement in the collection.
	 * @param {MenuElement} obj - The MenuElement whose index comes 
	 * before the desired MenuElement.
	 */
	nextItem(obj: MenuElement): MenuElement;
	/** Returns any MenuElement in the collection. */
	anyItem(): MenuElement;
	/** Returns every MenuElement in the collection. */
	everyItem(): MenuElement;
	/**
	 * Generates a string which, if executed, will return the 
	 * MenuElement.
	 */
	toSource(): string;
	/**
	 * Returns the MenuElement with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MenuElement;
}

/**
 * A submenu.
 * @class
 * @extends MenuElement
 */
export declare class Submenu extends MenuElement {
	/**
	 * Dispatched before the Submenu is displayed. This event does 
	 * not bubble. This event is not cancelable.
	 */
	readonly BEFORE_DISPLAY: string;
	/** The name of the Submenu. */
	readonly name: string;
	/**
	 * The name of the Submenu for display in the user interface. 
	 * The title includes any ampersand characters (&), which are 
	 * used to tell the Windows OS to underline the following 
	 * character in the name for use with the Alt key to navigate 
	 * to a menu item. Double ampersands are used to display an 
	 * actual ampersand character in the name. The Mac OS ignores 
	 * and removes the extra ampersand characters.
	 */
	readonly title: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Submenu (a Menu or Submenu). */
	readonly parent: any;
	/** The index of the Submenu within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of menu elements. */
	readonly menuElements: MenuElements;
	/** A collection of submenus. */
	readonly submenus: Submenus;
	/** A collection of menu items. */
	readonly menuItems: MenuItems;
	/** A collection of menu separators. */
	readonly menuSeparators: MenuSeparators;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the Submenu. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * Submenu.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Submenu;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of submenus.
 * @class
 */
export declare class Submenus {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new submenu.
	 * @param {string} title - The name of the Submenu for display 
	 * in the user interface. The title includes any ampersand 
	 * characters (&), which are used to tell the Windows OS to 
	 * underline the following character in the name for use with 
	 * the Alt key to navigate to a menu item. Double ampersands 
	 * are used to display an actual ampersand character in the 
	 * name. The Mac OS ignores and removes the extra ampersand 
	 * characters.
	 * @param {LocationOptions} at - The location of the submenu 
	 * relative to the reference object or within the containing 
	 * object. (Optional)
	 * @param {MenuElement} reference - The reference object. Note: 
	 * Required when the at parameter specifies before or after. 
	 * (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Submenu (Optional)
	 */
	add(title: string, at?: LocationOptions, reference?: MenuElement, withProperties?: Object): Submenu;
	/** Displays the number of elements in the Submenu. */
	count(): number;
	/**
	 * Returns the Submenu with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Submenu;
	/**
	 * Returns the Submenu with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Submenu;
	/**
	 * Returns the Submenus within the specified range.
	 * @param {any} _from - The Submenu, index, or name at the 
	 * beginning of the range. Can accept: Submenu, Long Integer or 
	 * String.
	 * @param {any} to - The Submenu, index, or name at the end of 
	 * the range. Can accept: Submenu, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Submenu;
	/** Returns the first Submenu in the collection. */
	firstItem(): Submenu;
	/** Returns the last Submenu in the collection. */
	lastItem(): Submenu;
	/** Returns the middle Submenu in the collection. */
	middleItem(): Submenu;
	/**
	 * Returns the Submenu with the index previous to the specified 
	 * index.
	 * @param {Submenu} obj - The index of the Submenu that follows 
	 * the desired Submenu.
	 */
	previousItem(obj: Submenu): Submenu;
	/**
	 * Returns the Submenu whose index follows the specified 
	 * Submenu in the collection.
	 * @param {Submenu} obj - The Submenu whose index comes before 
	 * the desired Submenu.
	 */
	nextItem(obj: Submenu): Submenu;
	/** Returns any Submenu in the collection. */
	anyItem(): Submenu;
	/** Returns every Submenu in the collection. */
	everyItem(): Submenu;
	/**
	 * Generates a string which, if executed, will return the 
	 * Submenu.
	 */
	toSource(): string;
	/**
	 * Returns the Submenu with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Submenu;
}

/**
 * A menu item.
 * @class
 * @extends MenuElement
 */
export declare class MenuItem extends MenuElement {
	/** The name of the MenuItem. */
	readonly name: string;
	/**
	 * The name of the MenuItem for display in the user interface. 
	 * The title includes any ampersand characters (&), which are 
	 * used to tell the Windows OS to underline the following 
	 * character in the name for use with the Alt key to navigate 
	 * to a menu item. Double ampersands are used to display an 
	 * actual ampersand character in the name. The Mac OS ignores 
	 * and removes the extra ampersand characters.
	 */
	readonly title: string;
	/** The unique ID of the MenuItem. */
	readonly id: number;
	/** If true, the MenuItem is enabled. */
	readonly enabled: boolean;
	/**
	 * If true, the menu item associated with the menu action is 
	 * checked.
	 */
	readonly checked: boolean;
	/** The menu action that implements the menu item. */
	readonly associatedMenuAction: MenuAction;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the MenuItem (a Menu or Submenu). */
	readonly parent: any;
	/** The index of the MenuItem within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Selects the MenuItem. */
	select(): void;
	/** Deletes the MenuItem. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * MenuItem.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MenuItem;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of menu items.
 * @class
 */
export declare class MenuItems {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new menu item.
	 * @param {MenuAction} associatedMenuAction - The menu action 
	 * that implements the  menu item.
	 * @param {LocationOptions} at - The location of the menu item 
	 * relative to the reference object or within the containing 
	 * object. (Optional)
	 * @param {MenuElement} reference - The reference object. Note: 
	 * Required when the at parameter specifies before or after. 
	 * (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MenuItem (Optional)
	 */
	add(associatedMenuAction: MenuAction, at?: LocationOptions, reference?: MenuElement, withProperties?: Object): MenuItem;
	/** Displays the number of elements in the MenuItem. */
	count(): number;
	/**
	 * Returns the MenuItem with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MenuItem;
	/**
	 * Returns the MenuItem with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): MenuItem;
	/**
	 * Returns the MenuItem with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MenuItem;
	/**
	 * Returns the MenuItems within the specified range.
	 * @param {any} _from - The MenuItem, index, or name at the 
	 * beginning of the range. Can accept: MenuItem, Long Integer 
	 * or String.
	 * @param {any} to - The MenuItem, index, or name at the end of 
	 * the range. Can accept: MenuItem, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): MenuItem;
	/** Returns the first MenuItem in the collection. */
	firstItem(): MenuItem;
	/** Returns the last MenuItem in the collection. */
	lastItem(): MenuItem;
	/** Returns the middle MenuItem in the collection. */
	middleItem(): MenuItem;
	/**
	 * Returns the MenuItem with the index previous to the 
	 * specified index.
	 * @param {MenuItem} obj - The index of the MenuItem that 
	 * follows the desired MenuItem.
	 */
	previousItem(obj: MenuItem): MenuItem;
	/**
	 * Returns the MenuItem whose index follows the specified 
	 * MenuItem in the collection.
	 * @param {MenuItem} obj - The MenuItem whose index comes 
	 * before the desired MenuItem.
	 */
	nextItem(obj: MenuItem): MenuItem;
	/** Returns any MenuItem in the collection. */
	anyItem(): MenuItem;
	/** Returns every MenuItem in the collection. */
	everyItem(): MenuItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * MenuItem.
	 */
	toSource(): string;
	/**
	 * Returns the MenuItem with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MenuItem;
}

/**
 * A menu separator.
 * @class
 * @extends MenuElement
 */
export declare class MenuSeparator extends MenuElement {
	/** The unique ID of the MenuSeparator. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the MenuSeparator (a Menu or Submenu). */
	readonly parent: any;
	/**
	 * The index of the MenuSeparator within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the MenuSeparator. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * MenuSeparator.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MenuSeparator;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of menu separators.
 * @class
 */
export declare class MenuSeparators {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new menu separator.
	 * @param {LocationOptions} at - The location of the menu 
	 * separator relative to the reference object or within the 
	 * containing object. (Optional)
	 * @param {MenuElement} reference - The reference object. Note: 
	 * Required when the at parameter specifies before or after. 
	 * (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MenuSeparator (Optional)
	 */
	add(at?: LocationOptions, reference?: MenuElement, withProperties?: Object): MenuSeparator;
	/** Displays the number of elements in the MenuSeparator. */
	count(): number;
	/**
	 * Returns the MenuSeparator with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MenuSeparator;
	/**
	 * Returns the MenuSeparator with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MenuSeparator;
	/**
	 * Returns the MenuSeparators within the specified range.
	 * @param {any} _from - The MenuSeparator, index, or name at 
	 * the beginning of the range. Can accept: MenuSeparator, Long 
	 * Integer or String.
	 * @param {any} to - The MenuSeparator, index, or name at the 
	 * end of the range. Can accept: MenuSeparator, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): MenuSeparator;
	/** Returns the first MenuSeparator in the collection. */
	firstItem(): MenuSeparator;
	/** Returns the last MenuSeparator in the collection. */
	lastItem(): MenuSeparator;
	/** Returns the middle MenuSeparator in the collection. */
	middleItem(): MenuSeparator;
	/**
	 * Returns the MenuSeparator with the index previous to the 
	 * specified index.
	 * @param {MenuSeparator} obj - The index of the MenuSeparator 
	 * that follows the desired MenuSeparator.
	 */
	previousItem(obj: MenuSeparator): MenuSeparator;
	/**
	 * Returns the MenuSeparator whose index follows the specified 
	 * MenuSeparator in the collection.
	 * @param {MenuSeparator} obj - The MenuSeparator whose index 
	 * comes before the desired MenuSeparator.
	 */
	nextItem(obj: MenuSeparator): MenuSeparator;
	/** Returns any MenuSeparator in the collection. */
	anyItem(): MenuSeparator;
	/** Returns every MenuSeparator in the collection. */
	everyItem(): MenuSeparator;
	/**
	 * Generates a string which, if executed, will return the 
	 * MenuSeparator.
	 */
	toSource(): string;
	/**
	 * Returns the MenuSeparator with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MenuSeparator;
}

/**
 * A panel (possibly within a panel group).
 * @class
 */
export declare class Panel {
	/** The name of the Panel. */
	readonly name: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Panel (a Application). */
	readonly parent: Application;
	/** The index of the Panel within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the panel is visible. */
	visible: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * Panel.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Panel;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of panels.
 * @class
 */
export declare class Panels {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Panel. */
	count(): number;
	/**
	 * Returns the Panel with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Panel;
	/**
	 * Returns the Panel with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Panel;
	/**
	 * Returns the Panels within the specified range.
	 * @param {any} _from - The Panel, index, or name at the 
	 * beginning of the range. Can accept: Panel, Long Integer or 
	 * String.
	 * @param {any} to - The Panel, index, or name at the end of 
	 * the range. Can accept: Panel, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Panel;
	/** Returns the first Panel in the collection. */
	firstItem(): Panel;
	/** Returns the last Panel in the collection. */
	lastItem(): Panel;
	/** Returns the middle Panel in the collection. */
	middleItem(): Panel;
	/**
	 * Returns the Panel with the index previous to the specified 
	 * index.
	 * @param {Panel} obj - The index of the Panel that follows the 
	 * desired Panel.
	 */
	previousItem(obj: Panel): Panel;
	/**
	 * Returns the Panel whose index follows the specified Panel in 
	 * the collection.
	 * @param {Panel} obj - The Panel whose index comes before the 
	 * desired Panel.
	 */
	nextItem(obj: Panel): Panel;
	/** Returns any Panel in the collection. */
	anyItem(): Panel;
	/** Returns every Panel in the collection. */
	everyItem(): Panel;
	/**
	 * Generates a string which, if executed, will return the 
	 * Panel.
	 */
	toSource(): string;
	/**
	 * Returns the Panel with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Panel;
}

/**
 * A dialog.
 * @class
 */
export declare class Dialog {
	/** The unique ID of the Dialog. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the Dialog (a Application). */
	readonly parent: Application;
	/** The index of the Dialog within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of dialog columns. */
	readonly dialogColumns: DialogColumns;
	/**
	 * If true, creates a Cancel button in the dialog that allows 
	 * users to close the dialog without saving any selections. If 
	 * false, the dialog contains an OK button but no Cancel 
	 * button.
	 */
	canCancel: boolean;
	/** The name of the Dialog. */
	name: string;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Destroys the dialog object. Note: Dialog objects remain in 
	 * memory until you destroy them or quit the program.
	 */
	destroy(): void;
	/** Displays the dialog. */
	show(): boolean;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * Dialog.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Dialog;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of dialogs.
 * @class
 */
export declare class Dialogs {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Dialog.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Dialog (Optional)
	 */
	add(withProperties: Object): Dialog;
	/** Displays the number of elements in the Dialog. */
	count(): number;
	/**
	 * Returns the Dialog with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Dialog;
	/**
	 * Returns the Dialog with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): Dialog;
	/**
	 * Returns the Dialog with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Dialog;
	/**
	 * Returns the Dialogs within the specified range.
	 * @param {any} _from - The Dialog, index, or name at the 
	 * beginning of the range. Can accept: Dialog, Long Integer or 
	 * String.
	 * @param {any} to - The Dialog, index, or name at the end of 
	 * the range. Can accept: Dialog, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Dialog;
	/** Returns the first Dialog in the collection. */
	firstItem(): Dialog;
	/** Returns the last Dialog in the collection. */
	lastItem(): Dialog;
	/** Returns the middle Dialog in the collection. */
	middleItem(): Dialog;
	/**
	 * Returns the Dialog with the index previous to the specified 
	 * index.
	 * @param {Dialog} obj - The index of the Dialog that follows 
	 * the desired Dialog.
	 */
	previousItem(obj: Dialog): Dialog;
	/**
	 * Returns the Dialog whose index follows the specified Dialog 
	 * in the collection.
	 * @param {Dialog} obj - The Dialog whose index comes before 
	 * the desired Dialog.
	 */
	nextItem(obj: Dialog): Dialog;
	/** Returns any Dialog in the collection. */
	anyItem(): Dialog;
	/** Returns every Dialog in the collection. */
	everyItem(): Dialog;
	/**
	 * Generates a string which, if executed, will return the 
	 * Dialog.
	 */
	toSource(): string;
	/**
	 * Returns the Dialog with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Dialog;
}

/**
 * Generic term for an object in a dialog column or dialog row, 
 * including dialog controls such as radio button groups, 
 * checkboxes, editboxes, dropdowns, and comboboxes; static 
 * text objects; enabling groups; border panels; and nested 
 * dialog columns and dialog rows. For information, see dialog 
 * column, dialog row, static text, border panel, enabling 
 * group, radiobutton group, checkbox control, angle editbox, 
 * angle combobox, integer editbox, integer combobox, 
 * measurement editbox, measurement combobox, percent editbox, 
 * percent combobox, real editbox, real combobox, and text 
 * editbox.
 * @class
 */
export declare class Widget {
	/** The unique ID of the Widget. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Widget (a DialogColumn, DialogRow, 
	 * EnablingGroup, BorderPanel or RadiobuttonGroup).
	 */
	readonly parent: any;
	/** The index of the Widget within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * Widget.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Widget;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of widgets.
 * @class
 */
export declare class Widgets {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the Widget. */
	count(): number;
	/**
	 * Returns the Widget with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Widget;
	/**
	 * Returns the Widget with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Widget;
	/**
	 * Returns the Widgets within the specified range.
	 * @param {any} _from - The Widget, index, or name at the 
	 * beginning of the range. Can accept: Widget, Long Integer or 
	 * String.
	 * @param {any} to - The Widget, index, or name at the end of 
	 * the range. Can accept: Widget, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Widget;
	/** Returns the first Widget in the collection. */
	firstItem(): Widget;
	/** Returns the last Widget in the collection. */
	lastItem(): Widget;
	/** Returns the middle Widget in the collection. */
	middleItem(): Widget;
	/**
	 * Returns the Widget with the index previous to the specified 
	 * index.
	 * @param {Widget} obj - The index of the Widget that follows 
	 * the desired Widget.
	 */
	previousItem(obj: Widget): Widget;
	/**
	 * Returns the Widget whose index follows the specified Widget 
	 * in the collection.
	 * @param {Widget} obj - The Widget whose index comes before 
	 * the desired Widget.
	 */
	nextItem(obj: Widget): Widget;
	/** Returns any Widget in the collection. */
	anyItem(): Widget;
	/** Returns every Widget in the collection. */
	everyItem(): Widget;
	/**
	 * Generates a string which, if executed, will return the 
	 * Widget.
	 */
	toSource(): string;
	/**
	 * Returns the Widget with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Widget;
}

/**
 * A text entry field.
 * @class
 * @extends Widget
 */
export declare class TextEditbox extends Widget {
	/** The unique ID of the TextEditbox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the TextEditbox (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/** The index of the TextEditbox within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextEditbox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): TextEditbox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of text editboxes.
 * @class
 */
export declare class TextEditboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new TextEditbox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new TextEditbox (Optional)
	 */
	add(withProperties: Object): TextEditbox;
	/** Displays the number of elements in the TextEditbox. */
	count(): number;
	/**
	 * Returns the TextEditbox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): TextEditbox;
	/**
	 * Returns the TextEditbox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): TextEditbox;
	/**
	 * Returns the TextEditboxes within the specified range.
	 * @param {any} _from - The TextEditbox, index, or name at the 
	 * beginning of the range. Can accept: TextEditbox, Long 
	 * Integer or String.
	 * @param {any} to - The TextEditbox, index, or name at the end 
	 * of the range. Can accept: TextEditbox, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): TextEditbox;
	/** Returns the first TextEditbox in the collection. */
	firstItem(): TextEditbox;
	/** Returns the last TextEditbox in the collection. */
	lastItem(): TextEditbox;
	/** Returns the middle TextEditbox in the collection. */
	middleItem(): TextEditbox;
	/**
	 * Returns the TextEditbox with the index previous to the 
	 * specified index.
	 * @param {TextEditbox} obj - The index of the TextEditbox that 
	 * follows the desired TextEditbox.
	 */
	previousItem(obj: TextEditbox): TextEditbox;
	/**
	 * Returns the TextEditbox whose index follows the specified 
	 * TextEditbox in the collection.
	 * @param {TextEditbox} obj - The TextEditbox whose index comes 
	 * before the desired TextEditbox.
	 */
	nextItem(obj: TextEditbox): TextEditbox;
	/** Returns any TextEditbox in the collection. */
	anyItem(): TextEditbox;
	/** Returns every TextEditbox in the collection. */
	everyItem(): TextEditbox;
	/**
	 * Generates a string which, if executed, will return the 
	 * TextEditbox.
	 */
	toSource(): string;
	/**
	 * Returns the TextEditbox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: TextEditbox;
}

/**
 * A static text control (typically a label for another control 
 * or a set of controls).
 * @class
 * @extends Widget
 */
export declare class StaticText extends Widget {
	/** The unique ID of the StaticText. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the StaticText (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/** The index of the StaticText within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Text that appears in the StaticText. */
	staticLabel: string;
	/** Text alignment for the StaticText. */
	staticAlignment: StaticAlignmentOptions;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * StaticText.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): StaticText;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of static text objects.
 * @class
 */
export declare class StaticTexts {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new StaticText.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new StaticText (Optional)
	 */
	add(withProperties: Object): StaticText;
	/** Displays the number of elements in the StaticText. */
	count(): number;
	/**
	 * Returns the StaticText with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): StaticText;
	/**
	 * Returns the StaticText with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): StaticText;
	/**
	 * Returns the StaticTexts within the specified range.
	 * @param {any} _from - The StaticText, index, or name at the 
	 * beginning of the range. Can accept: StaticText, Long Integer 
	 * or String.
	 * @param {any} to - The StaticText, index, or name at the end 
	 * of the range. Can accept: StaticText, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): StaticText;
	/** Returns the first StaticText in the collection. */
	firstItem(): StaticText;
	/** Returns the last StaticText in the collection. */
	lastItem(): StaticText;
	/** Returns the middle StaticText in the collection. */
	middleItem(): StaticText;
	/**
	 * Returns the StaticText with the index previous to the 
	 * specified index.
	 * @param {StaticText} obj - The index of the StaticText that 
	 * follows the desired StaticText.
	 */
	previousItem(obj: StaticText): StaticText;
	/**
	 * Returns the StaticText whose index follows the specified 
	 * StaticText in the collection.
	 * @param {StaticText} obj - The StaticText whose index comes 
	 * before the desired StaticText.
	 */
	nextItem(obj: StaticText): StaticText;
	/** Returns any StaticText in the collection. */
	anyItem(): StaticText;
	/** Returns every StaticText in the collection. */
	everyItem(): StaticText;
	/**
	 * Generates a string which, if executed, will return the 
	 * StaticText.
	 */
	toSource(): string;
	/**
	 * Returns the StaticText with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: StaticText;
}

/**
 * A dropdown control.
 * @class
 * @extends Widget
 */
export declare class Dropdown extends Widget {
	/** The unique ID of the Dropdown. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the Dropdown (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/** The index of the Dropdown within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The menu items on a dropdown or combobox control, as an 
	 * array of strings.
	 */
	stringList: string;
	/**
	 * The index of the selection in a dropdown or combobox 
	 * control.
	 */
	selectedIndex: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * Dropdown.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): Dropdown;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of dropdowns.
 * @class
 */
export declare class Dropdowns {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new Dropdown.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new Dropdown (Optional)
	 */
	add(withProperties: Object): Dropdown;
	/** Displays the number of elements in the Dropdown. */
	count(): number;
	/**
	 * Returns the Dropdown with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): Dropdown;
	/**
	 * Returns the Dropdown with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): Dropdown;
	/**
	 * Returns the Dropdowns within the specified range.
	 * @param {any} _from - The Dropdown, index, or name at the 
	 * beginning of the range. Can accept: Dropdown, Long Integer 
	 * or String.
	 * @param {any} to - The Dropdown, index, or name at the end of 
	 * the range. Can accept: Dropdown, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): Dropdown;
	/** Returns the first Dropdown in the collection. */
	firstItem(): Dropdown;
	/** Returns the last Dropdown in the collection. */
	lastItem(): Dropdown;
	/** Returns the middle Dropdown in the collection. */
	middleItem(): Dropdown;
	/**
	 * Returns the Dropdown with the index previous to the 
	 * specified index.
	 * @param {Dropdown} obj - The index of the Dropdown that 
	 * follows the desired Dropdown.
	 */
	previousItem(obj: Dropdown): Dropdown;
	/**
	 * Returns the Dropdown whose index follows the specified 
	 * Dropdown in the collection.
	 * @param {Dropdown} obj - The Dropdown whose index comes 
	 * before the desired Dropdown.
	 */
	nextItem(obj: Dropdown): Dropdown;
	/** Returns any Dropdown in the collection. */
	anyItem(): Dropdown;
	/** Returns every Dropdown in the collection. */
	everyItem(): Dropdown;
	/**
	 * Generates a string which, if executed, will return the 
	 * Dropdown.
	 */
	toSource(): string;
	/**
	 * Returns the Dropdown with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: Dropdown;
}

/**
 * A checkbox control.
 * @class
 * @extends Widget
 */
export declare class CheckboxControl extends Widget {
	/** The unique ID of the CheckboxControl. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the CheckboxControl (a DialogColumn, 
	 * DialogRow, EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/**
	 * The index of the CheckboxControl within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** If true, the control is checked by default in the dialog. */
	checkedState: boolean;
	/** Text that appears in the CheckboxControl. */
	staticLabel: string;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * CheckboxControl.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): CheckboxControl;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of checkbox controls.
 * @class
 */
export declare class CheckboxControls {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new CheckboxControl.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new CheckboxControl (Optional)
	 */
	add(withProperties: Object): CheckboxControl;
	/** Displays the number of elements in the CheckboxControl. */
	count(): number;
	/**
	 * Returns the CheckboxControl with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): CheckboxControl;
	/**
	 * Returns the CheckboxControl with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): CheckboxControl;
	/**
	 * Returns the CheckboxControls within the specified range.
	 * @param {any} _from - The CheckboxControl, index, or name at 
	 * the beginning of the range. Can accept: CheckboxControl, 
	 * Long Integer or String.
	 * @param {any} to - The CheckboxControl, index, or name at the 
	 * end of the range. Can accept: CheckboxControl, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): CheckboxControl;
	/** Returns the first CheckboxControl in the collection. */
	firstItem(): CheckboxControl;
	/** Returns the last CheckboxControl in the collection. */
	lastItem(): CheckboxControl;
	/** Returns the middle CheckboxControl in the collection. */
	middleItem(): CheckboxControl;
	/**
	 * Returns the CheckboxControl with the index previous to the 
	 * specified index.
	 * @param {CheckboxControl} obj - The index of the 
	 * CheckboxControl that follows the desired CheckboxControl.
	 */
	previousItem(obj: CheckboxControl): CheckboxControl;
	/**
	 * Returns the CheckboxControl whose index follows the 
	 * specified CheckboxControl in the collection.
	 * @param {CheckboxControl} obj - The CheckboxControl whose 
	 * index comes before the desired CheckboxControl.
	 */
	nextItem(obj: CheckboxControl): CheckboxControl;
	/** Returns any CheckboxControl in the collection. */
	anyItem(): CheckboxControl;
	/** Returns every CheckboxControl in the collection. */
	everyItem(): CheckboxControl;
	/**
	 * Generates a string which, if executed, will return the 
	 * CheckboxControl.
	 */
	toSource(): string;
	/**
	 * Returns the CheckboxControl with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: CheckboxControl;
}

/**
 * A borderless column for containing controls in a dialog.
 * @class
 */
export declare class DialogColumn {
	/** The unique ID of the DialogColumn. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the DialogColumn (a Dialog, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/** The index of the DialogColumn within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of dialog rows. */
	readonly dialogRows: DialogRows;
	/** A collection of widgets. */
	readonly widgets: Widgets;
	/** A collection of text editboxes. */
	readonly textEditboxes: TextEditboxes;
	/** A collection of integer editboxes. */
	readonly integerEditboxes: IntegerEditboxes;
	/** A collection of measurement editboxes. */
	readonly measurementEditboxes: MeasurementEditboxes;
	/** A collection of real number editboxes. */
	readonly realEditboxes: RealEditboxes;
	/** A collection of angle editboxes. */
	readonly angleEditboxes: AngleEditboxes;
	/** A collection of percent editboxes. */
	readonly percentEditboxes: PercentEditboxes;
	/** A collection of integer comboboxes. */
	readonly integerComboboxes: IntegerComboboxes;
	/** A collection of measurement comboboxes. */
	readonly measurementComboboxes: MeasurementComboboxes;
	/** A collection of real number comboboxes. */
	readonly realComboboxes: RealComboboxes;
	/** A collection of angle comboboxes. */
	readonly angleComboboxes: AngleComboboxes;
	/** A collection of percent comboboxes. */
	readonly percentComboboxes: PercentComboboxes;
	/** A collection of checkbox controls. */
	readonly checkboxControls: CheckboxControls;
	/** A collection of static text objects. */
	readonly staticTexts: StaticTexts;
	/** A collection of dropdowns. */
	readonly dropdowns: Dropdowns;
	/** A collection of border panels. */
	readonly borderPanels: BorderPanels;
	/** A collection of enabling groups. */
	readonly enablingGroups: EnablingGroups;
	/** A collection of radiobutton groups. */
	readonly radiobuttonGroups: RadiobuttonGroups;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DialogColumn.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DialogColumn;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of dialog columns.
 * @class
 */
export declare class DialogColumns {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new DialogColumn.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new DialogColumn (Optional)
	 */
	add(withProperties: Object): DialogColumn;
	/** Displays the number of elements in the DialogColumn. */
	count(): number;
	/**
	 * Returns the DialogColumn with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DialogColumn;
	/**
	 * Returns the DialogColumn with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): DialogColumn;
	/**
	 * Returns the DialogColumns within the specified range.
	 * @param {any} _from - The DialogColumn, index, or name at the 
	 * beginning of the range. Can accept: DialogColumn, Long 
	 * Integer or String.
	 * @param {any} to - The DialogColumn, index, or name at the 
	 * end of the range. Can accept: DialogColumn, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): DialogColumn;
	/** Returns the first DialogColumn in the collection. */
	firstItem(): DialogColumn;
	/** Returns the last DialogColumn in the collection. */
	lastItem(): DialogColumn;
	/** Returns the middle DialogColumn in the collection. */
	middleItem(): DialogColumn;
	/**
	 * Returns the DialogColumn with the index previous to the 
	 * specified index.
	 * @param {DialogColumn} obj - The index of the DialogColumn 
	 * that follows the desired DialogColumn.
	 */
	previousItem(obj: DialogColumn): DialogColumn;
	/**
	 * Returns the DialogColumn whose index follows the specified 
	 * DialogColumn in the collection.
	 * @param {DialogColumn} obj - The DialogColumn whose index 
	 * comes before the desired DialogColumn.
	 */
	nextItem(obj: DialogColumn): DialogColumn;
	/** Returns any DialogColumn in the collection. */
	anyItem(): DialogColumn;
	/** Returns every DialogColumn in the collection. */
	everyItem(): DialogColumn;
	/**
	 * Generates a string which, if executed, will return the 
	 * DialogColumn.
	 */
	toSource(): string;
	/**
	 * Returns the DialogColumn with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: DialogColumn;
}

/**
 * A single control that contains one or more radiobutton 
 * controls.
 * @class
 * @extends Widget
 */
export declare class RadiobuttonGroup extends Widget {
	/** The unique ID of the RadiobuttonGroup. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the RadiobuttonGroup (a DialogColumn, 
	 * DialogRow, EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/**
	 * The index of the RadiobuttonGroup within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of individual radiobutton controls. */
	readonly radiobuttonControls: RadiobuttonControls;
	/** A collection of widgets. */
	readonly widgets: Widgets;
	/** The index of the selection in a radiobutton group. */
	selectedButton: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * RadiobuttonGroup.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): RadiobuttonGroup;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of radiobutton groups.
 * @class
 */
export declare class RadiobuttonGroups {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new RadiobuttonGroup.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new RadiobuttonGroup (Optional)
	 */
	add(withProperties: Object): RadiobuttonGroup;
	/** Displays the number of elements in the RadiobuttonGroup. */
	count(): number;
	/**
	 * Returns the RadiobuttonGroup with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): RadiobuttonGroup;
	/**
	 * Returns the RadiobuttonGroup with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): RadiobuttonGroup;
	/**
	 * Returns the RadiobuttonGroups within the specified range.
	 * @param {any} _from - The RadiobuttonGroup, index, or name at 
	 * the beginning of the range. Can accept: RadiobuttonGroup, 
	 * Long Integer or String.
	 * @param {any} to - The RadiobuttonGroup, index, or name at 
	 * the end of the range. Can accept: RadiobuttonGroup, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): RadiobuttonGroup;
	/** Returns the first RadiobuttonGroup in the collection. */
	firstItem(): RadiobuttonGroup;
	/** Returns the last RadiobuttonGroup in the collection. */
	lastItem(): RadiobuttonGroup;
	/** Returns the middle RadiobuttonGroup in the collection. */
	middleItem(): RadiobuttonGroup;
	/**
	 * Returns the RadiobuttonGroup with the index previous to the 
	 * specified index.
	 * @param {RadiobuttonGroup} obj - The index of the 
	 * RadiobuttonGroup that follows the desired RadiobuttonGroup.
	 */
	previousItem(obj: RadiobuttonGroup): RadiobuttonGroup;
	/**
	 * Returns the RadiobuttonGroup whose index follows the 
	 * specified RadiobuttonGroup in the collection.
	 * @param {RadiobuttonGroup} obj - The RadiobuttonGroup whose 
	 * index comes before the desired RadiobuttonGroup.
	 */
	nextItem(obj: RadiobuttonGroup): RadiobuttonGroup;
	/** Returns any RadiobuttonGroup in the collection. */
	anyItem(): RadiobuttonGroup;
	/** Returns every RadiobuttonGroup in the collection. */
	everyItem(): RadiobuttonGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * RadiobuttonGroup.
	 */
	toSource(): string;
	/**
	 * Returns the RadiobuttonGroup with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: RadiobuttonGroup;
}

/**
 * An individual radiobutton control in a radiobutton group.
 * @class
 * @extends Widget
 */
export declare class RadiobuttonControl extends Widget {
	/** The unique ID of the RadiobuttonControl. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the RadiobuttonControl (a RadiobuttonGroup). */
	readonly parent: RadiobuttonGroup;
	/**
	 * The index of the RadiobuttonControl within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** Text that appears in the RadiobuttonControl. */
	staticLabel: string;
	/** If true, the control is checked by default in the dialog. */
	checkedState: boolean;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * RadiobuttonControl.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): RadiobuttonControl;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of individual radiobutton controls.
 * @class
 */
export declare class RadiobuttonControls {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new RadiobuttonControl.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new RadiobuttonControl (Optional)
	 */
	add(withProperties: Object): RadiobuttonControl;
	/** Displays the number of elements in the RadiobuttonControl. */
	count(): number;
	/**
	 * Returns the RadiobuttonControl with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): RadiobuttonControl;
	/**
	 * Returns the RadiobuttonControl with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): RadiobuttonControl;
	/**
	 * Returns the RadiobuttonControls within the specified range.
	 * @param {any} _from - The RadiobuttonControl, index, or name 
	 * at the beginning of the range. Can accept: 
	 * RadiobuttonControl, Long Integer or String.
	 * @param {any} to - The RadiobuttonControl, index, or name at 
	 * the end of the range. Can accept: RadiobuttonControl, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): RadiobuttonControl;
	/** Returns the first RadiobuttonControl in the collection. */
	firstItem(): RadiobuttonControl;
	/** Returns the last RadiobuttonControl in the collection. */
	lastItem(): RadiobuttonControl;
	/** Returns the middle RadiobuttonControl in the collection. */
	middleItem(): RadiobuttonControl;
	/**
	 * Returns the RadiobuttonControl with the index previous to 
	 * the specified index.
	 * @param {RadiobuttonControl} obj - The index of the 
	 * RadiobuttonControl that follows the desired 
	 * RadiobuttonControl.
	 */
	previousItem(obj: RadiobuttonControl): RadiobuttonControl;
	/**
	 * Returns the RadiobuttonControl whose index follows the 
	 * specified RadiobuttonControl in the collection.
	 * @param {RadiobuttonControl} obj - The RadiobuttonControl 
	 * whose index comes before the desired RadiobuttonControl.
	 */
	nextItem(obj: RadiobuttonControl): RadiobuttonControl;
	/** Returns any RadiobuttonControl in the collection. */
	anyItem(): RadiobuttonControl;
	/** Returns every RadiobuttonControl in the collection. */
	everyItem(): RadiobuttonControl;
	/**
	 * Generates a string which, if executed, will return the 
	 * RadiobuttonControl.
	 */
	toSource(): string;
	/**
	 * Returns the RadiobuttonControl with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: RadiobuttonControl;
}

/**
 * A numeric entry field that rounds to the nearest whole 
 * number. Note: .5 is rounded up.
 * @class
 * @extends Widget
 */
export declare class IntegerEditbox extends Widget {
	/** The unique ID of the IntegerEditbox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the IntegerEditbox (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/**
	 * The index of the IntegerEditbox within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The minumim value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	minimumValue: number;
	/**
	 * The maximum value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	maximumValue: number;
	/**
	 * The amount to increment/decrement the value when the user 
	 * selects the control and presses an arrow key on the 
	 * keyboard.
	 */
	smallNudge: number;
	/**
	 * The amount to increment/decrement the value when a user 
	 * selects the control and holds down the Shift key while 
	 * pressing an arrow key on the keyboard.
	 */
	largeNudge: number;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The real number default value of the editbox or combobox. 
	 * Note: For measurement controls, the value is interpreted in 
	 * points. The points value is converted to edit units when the 
	 * dialog opens. Note: Do not specify both edit value and edit 
	 * contents. If both are specified, the one that occurs later 
	 * in the script is used.
	 */
	editValue: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * IntegerEditbox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): IntegerEditbox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of integer editboxes.
 * @class
 */
export declare class IntegerEditboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new IntegerEditbox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new IntegerEditbox (Optional)
	 */
	add(withProperties: Object): IntegerEditbox;
	/** Displays the number of elements in the IntegerEditbox. */
	count(): number;
	/**
	 * Returns the IntegerEditbox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): IntegerEditbox;
	/**
	 * Returns the IntegerEditbox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): IntegerEditbox;
	/**
	 * Returns the IntegerEditboxes within the specified range.
	 * @param {any} _from - The IntegerEditbox, index, or name at 
	 * the beginning of the range. Can accept: IntegerEditbox, Long 
	 * Integer or String.
	 * @param {any} to - The IntegerEditbox, index, or name at the 
	 * end of the range. Can accept: IntegerEditbox, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): IntegerEditbox;
	/** Returns the first IntegerEditbox in the collection. */
	firstItem(): IntegerEditbox;
	/** Returns the last IntegerEditbox in the collection. */
	lastItem(): IntegerEditbox;
	/** Returns the middle IntegerEditbox in the collection. */
	middleItem(): IntegerEditbox;
	/**
	 * Returns the IntegerEditbox with the index previous to the 
	 * specified index.
	 * @param {IntegerEditbox} obj - The index of the 
	 * IntegerEditbox that follows the desired IntegerEditbox.
	 */
	previousItem(obj: IntegerEditbox): IntegerEditbox;
	/**
	 * Returns the IntegerEditbox whose index follows the specified 
	 * IntegerEditbox in the collection.
	 * @param {IntegerEditbox} obj - The IntegerEditbox whose index 
	 * comes before the desired IntegerEditbox.
	 */
	nextItem(obj: IntegerEditbox): IntegerEditbox;
	/** Returns any IntegerEditbox in the collection. */
	anyItem(): IntegerEditbox;
	/** Returns every IntegerEditbox in the collection. */
	everyItem(): IntegerEditbox;
	/**
	 * Generates a string which, if executed, will return the 
	 * IntegerEditbox.
	 */
	toSource(): string;
	/**
	 * Returns the IntegerEditbox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: IntegerEditbox;
}

/**
 * An integer entry control featuring both a pop-up menu and an 
 * entry field. Note: .5 is rounded up.
 * @class
 * @extends Widget
 */
export declare class IntegerCombobox extends Widget {
	/** The unique ID of the IntegerCombobox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the IntegerCombobox (a DialogColumn, 
	 * DialogRow, EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/**
	 * The index of the IntegerCombobox within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The menu items on a dropdown or combobox control, as an 
	 * array of strings.
	 */
	stringList: string;
	/**
	 * The minumim value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	minimumValue: number;
	/**
	 * The maximum value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	maximumValue: number;
	/**
	 * The amount to increment/decrement the value when the user 
	 * selects the control and presses an arrow key on the 
	 * keyboard.
	 */
	smallNudge: number;
	/**
	 * The amount to increment/decrement the value when a user 
	 * selects the control and holds down the Shift key while 
	 * pressing an arrow key on the keyboard.
	 */
	largeNudge: number;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The real number default value of the editbox or combobox. 
	 * Note: For measurement controls, the value is interpreted in 
	 * points. The points value is converted to edit units when the 
	 * dialog opens. Note: Do not specify both edit value and edit 
	 * contents. If both are specified, the one that occurs later 
	 * in the script is used.
	 */
	editValue: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * IntegerCombobox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): IntegerCombobox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of integer comboboxes.
 * @class
 */
export declare class IntegerComboboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new IntegerCombobox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new IntegerCombobox (Optional)
	 */
	add(withProperties: Object): IntegerCombobox;
	/** Displays the number of elements in the IntegerCombobox. */
	count(): number;
	/**
	 * Returns the IntegerCombobox with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): IntegerCombobox;
	/**
	 * Returns the IntegerCombobox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): IntegerCombobox;
	/**
	 * Returns the IntegerComboboxes within the specified range.
	 * @param {any} _from - The IntegerCombobox, index, or name at 
	 * the beginning of the range. Can accept: IntegerCombobox, 
	 * Long Integer or String.
	 * @param {any} to - The IntegerCombobox, index, or name at the 
	 * end of the range. Can accept: IntegerCombobox, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): IntegerCombobox;
	/** Returns the first IntegerCombobox in the collection. */
	firstItem(): IntegerCombobox;
	/** Returns the last IntegerCombobox in the collection. */
	lastItem(): IntegerCombobox;
	/** Returns the middle IntegerCombobox in the collection. */
	middleItem(): IntegerCombobox;
	/**
	 * Returns the IntegerCombobox with the index previous to the 
	 * specified index.
	 * @param {IntegerCombobox} obj - The index of the 
	 * IntegerCombobox that follows the desired IntegerCombobox.
	 */
	previousItem(obj: IntegerCombobox): IntegerCombobox;
	/**
	 * Returns the IntegerCombobox whose index follows the 
	 * specified IntegerCombobox in the collection.
	 * @param {IntegerCombobox} obj - The IntegerCombobox whose 
	 * index comes before the desired IntegerCombobox.
	 */
	nextItem(obj: IntegerCombobox): IntegerCombobox;
	/** Returns any IntegerCombobox in the collection. */
	anyItem(): IntegerCombobox;
	/** Returns every IntegerCombobox in the collection. */
	everyItem(): IntegerCombobox;
	/**
	 * Generates a string which, if executed, will return the 
	 * IntegerCombobox.
	 */
	toSource(): string;
	/**
	 * Returns the IntegerCombobox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: IntegerCombobox;
}

/**
 * A bordered panel that contains an enabling checkbox. A user 
 * makes the enabling group active or inactive by clicking the 
 * checkbox. An enabling group can contain any type and number 
 * of controls.
 * @class
 * @extends Widget
 */
export declare class EnablingGroup extends Widget {
	/** The unique ID of the EnablingGroup. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the EnablingGroup (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/**
	 * The index of the EnablingGroup within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of dialog columns. */
	readonly dialogColumns: DialogColumns;
	/** A collection of widgets. */
	readonly widgets: Widgets;
	/** A collection of text editboxes. */
	readonly textEditboxes: TextEditboxes;
	/** A collection of integer editboxes. */
	readonly integerEditboxes: IntegerEditboxes;
	/** A collection of measurement editboxes. */
	readonly measurementEditboxes: MeasurementEditboxes;
	/** A collection of real number editboxes. */
	readonly realEditboxes: RealEditboxes;
	/** A collection of angle editboxes. */
	readonly angleEditboxes: AngleEditboxes;
	/** A collection of percent editboxes. */
	readonly percentEditboxes: PercentEditboxes;
	/** A collection of integer comboboxes. */
	readonly integerComboboxes: IntegerComboboxes;
	/** A collection of measurement comboboxes. */
	readonly measurementComboboxes: MeasurementComboboxes;
	/** A collection of real number comboboxes. */
	readonly realComboboxes: RealComboboxes;
	/** A collection of angle comboboxes. */
	readonly angleComboboxes: AngleComboboxes;
	/** A collection of percent comboboxes. */
	readonly percentComboboxes: PercentComboboxes;
	/** A collection of checkbox controls. */
	readonly checkboxControls: CheckboxControls;
	/** A collection of static text objects. */
	readonly staticTexts: StaticTexts;
	/** A collection of dropdowns. */
	readonly dropdowns: Dropdowns;
	/** A collection of border panels. */
	readonly borderPanels: BorderPanels;
	/** A collection of enabling groups. */
	readonly enablingGroups: EnablingGroups;
	/** A collection of radiobutton groups. */
	readonly radiobuttonGroups: RadiobuttonGroups;
	/** If true, the control is checked by default in the dialog. */
	checkedState: boolean;
	/** Text that appears in the EnablingGroup. */
	staticLabel: string;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * EnablingGroup.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): EnablingGroup;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of enabling groups.
 * @class
 */
export declare class EnablingGroups {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new EnablingGroup.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new EnablingGroup (Optional)
	 */
	add(withProperties: Object): EnablingGroup;
	/** Displays the number of elements in the EnablingGroup. */
	count(): number;
	/**
	 * Returns the EnablingGroup with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): EnablingGroup;
	/**
	 * Returns the EnablingGroup with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): EnablingGroup;
	/**
	 * Returns the EnablingGroups within the specified range.
	 * @param {any} _from - The EnablingGroup, index, or name at 
	 * the beginning of the range. Can accept: EnablingGroup, Long 
	 * Integer or String.
	 * @param {any} to - The EnablingGroup, index, or name at the 
	 * end of the range. Can accept: EnablingGroup, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): EnablingGroup;
	/** Returns the first EnablingGroup in the collection. */
	firstItem(): EnablingGroup;
	/** Returns the last EnablingGroup in the collection. */
	lastItem(): EnablingGroup;
	/** Returns the middle EnablingGroup in the collection. */
	middleItem(): EnablingGroup;
	/**
	 * Returns the EnablingGroup with the index previous to the 
	 * specified index.
	 * @param {EnablingGroup} obj - The index of the EnablingGroup 
	 * that follows the desired EnablingGroup.
	 */
	previousItem(obj: EnablingGroup): EnablingGroup;
	/**
	 * Returns the EnablingGroup whose index follows the specified 
	 * EnablingGroup in the collection.
	 * @param {EnablingGroup} obj - The EnablingGroup whose index 
	 * comes before the desired EnablingGroup.
	 */
	nextItem(obj: EnablingGroup): EnablingGroup;
	/** Returns any EnablingGroup in the collection. */
	anyItem(): EnablingGroup;
	/** Returns every EnablingGroup in the collection. */
	everyItem(): EnablingGroup;
	/**
	 * Generates a string which, if executed, will return the 
	 * EnablingGroup.
	 */
	toSource(): string;
	/**
	 * Returns the EnablingGroup with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: EnablingGroup;
}

/**
 * A degree entry control featuring both a pop-up menu and and 
 * entry field.
 * @class
 * @extends Widget
 */
export declare class AngleCombobox extends Widget {
	/** The unique ID of the AngleCombobox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the AngleCombobox (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/**
	 * The index of the AngleCombobox within its containing object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The menu items on a dropdown or combobox control, as an 
	 * array of strings.
	 */
	stringList: string;
	/**
	 * The minumim value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	minimumValue: number;
	/**
	 * The maximum value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	maximumValue: number;
	/**
	 * The amount to increment/decrement the value when the user 
	 * selects the control and presses an arrow key on the 
	 * keyboard.
	 */
	smallNudge: number;
	/**
	 * The amount to increment/decrement the value when a user 
	 * selects the control and holds down the Shift key while 
	 * pressing an arrow key on the keyboard.
	 */
	largeNudge: number;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The real number default value of the editbox or combobox. 
	 * Note: For measurement controls, the value is interpreted in 
	 * points. The points value is converted to edit units when the 
	 * dialog opens. Note: Do not specify both edit value and edit 
	 * contents. If both are specified, the one that occurs later 
	 * in the script is used.
	 */
	editValue: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * AngleCombobox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): AngleCombobox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of angle comboboxes.
 * @class
 */
export declare class AngleComboboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new AngleCombobox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new AngleCombobox (Optional)
	 */
	add(withProperties: Object): AngleCombobox;
	/** Displays the number of elements in the AngleCombobox. */
	count(): number;
	/**
	 * Returns the AngleCombobox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): AngleCombobox;
	/**
	 * Returns the AngleCombobox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): AngleCombobox;
	/**
	 * Returns the AngleComboboxes within the specified range.
	 * @param {any} _from - The AngleCombobox, index, or name at 
	 * the beginning of the range. Can accept: AngleCombobox, Long 
	 * Integer or String.
	 * @param {any} to - The AngleCombobox, index, or name at the 
	 * end of the range. Can accept: AngleCombobox, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): AngleCombobox;
	/** Returns the first AngleCombobox in the collection. */
	firstItem(): AngleCombobox;
	/** Returns the last AngleCombobox in the collection. */
	lastItem(): AngleCombobox;
	/** Returns the middle AngleCombobox in the collection. */
	middleItem(): AngleCombobox;
	/**
	 * Returns the AngleCombobox with the index previous to the 
	 * specified index.
	 * @param {AngleCombobox} obj - The index of the AngleCombobox 
	 * that follows the desired AngleCombobox.
	 */
	previousItem(obj: AngleCombobox): AngleCombobox;
	/**
	 * Returns the AngleCombobox whose index follows the specified 
	 * AngleCombobox in the collection.
	 * @param {AngleCombobox} obj - The AngleCombobox whose index 
	 * comes before the desired AngleCombobox.
	 */
	nextItem(obj: AngleCombobox): AngleCombobox;
	/** Returns any AngleCombobox in the collection. */
	anyItem(): AngleCombobox;
	/** Returns every AngleCombobox in the collection. */
	everyItem(): AngleCombobox;
	/**
	 * Generates a string which, if executed, will return the 
	 * AngleCombobox.
	 */
	toSource(): string;
	/**
	 * Returns the AngleCombobox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: AngleCombobox;
}

/**
 * A percentage entry control featuring both a pop-up menu and 
 * an entry field.
 * @class
 * @extends Widget
 */
export declare class PercentCombobox extends Widget {
	/** The unique ID of the PercentCombobox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PercentCombobox (a DialogColumn, 
	 * DialogRow, EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/**
	 * The index of the PercentCombobox within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The menu items on a dropdown or combobox control, as an 
	 * array of strings.
	 */
	stringList: string;
	/**
	 * The minumim value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	minimumValue: number;
	/**
	 * The maximum value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	maximumValue: number;
	/**
	 * The amount to increment/decrement the value when the user 
	 * selects the control and presses an arrow key on the 
	 * keyboard.
	 */
	smallNudge: number;
	/**
	 * The amount to increment/decrement the value when a user 
	 * selects the control and holds down the Shift key while 
	 * pressing an arrow key on the keyboard.
	 */
	largeNudge: number;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The real number default value of the editbox or combobox. 
	 * Note: For measurement controls, the value is interpreted in 
	 * points. The points value is converted to edit units when the 
	 * dialog opens. Note: Do not specify both edit value and edit 
	 * contents. If both are specified, the one that occurs later 
	 * in the script is used.
	 */
	editValue: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PercentCombobox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PercentCombobox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of percent comboboxes.
 * @class
 */
export declare class PercentComboboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new PercentCombobox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PercentCombobox (Optional)
	 */
	add(withProperties: Object): PercentCombobox;
	/** Displays the number of elements in the PercentCombobox. */
	count(): number;
	/**
	 * Returns the PercentCombobox with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PercentCombobox;
	/**
	 * Returns the PercentCombobox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PercentCombobox;
	/**
	 * Returns the PercentComboboxes within the specified range.
	 * @param {any} _from - The PercentCombobox, index, or name at 
	 * the beginning of the range. Can accept: PercentCombobox, 
	 * Long Integer or String.
	 * @param {any} to - The PercentCombobox, index, or name at the 
	 * end of the range. Can accept: PercentCombobox, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): PercentCombobox;
	/** Returns the first PercentCombobox in the collection. */
	firstItem(): PercentCombobox;
	/** Returns the last PercentCombobox in the collection. */
	lastItem(): PercentCombobox;
	/** Returns the middle PercentCombobox in the collection. */
	middleItem(): PercentCombobox;
	/**
	 * Returns the PercentCombobox with the index previous to the 
	 * specified index.
	 * @param {PercentCombobox} obj - The index of the 
	 * PercentCombobox that follows the desired PercentCombobox.
	 */
	previousItem(obj: PercentCombobox): PercentCombobox;
	/**
	 * Returns the PercentCombobox whose index follows the 
	 * specified PercentCombobox in the collection.
	 * @param {PercentCombobox} obj - The PercentCombobox whose 
	 * index comes before the desired PercentCombobox.
	 */
	nextItem(obj: PercentCombobox): PercentCombobox;
	/** Returns any PercentCombobox in the collection. */
	anyItem(): PercentCombobox;
	/** Returns every PercentCombobox in the collection. */
	everyItem(): PercentCombobox;
	/**
	 * Generates a string which, if executed, will return the 
	 * PercentCombobox.
	 */
	toSource(): string;
	/**
	 * Returns the PercentCombobox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PercentCombobox;
}

/**
 * A high-precision numeric entry field.
 * @class
 * @extends Widget
 */
export declare class RealEditbox extends Widget {
	/** The unique ID of the RealEditbox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the RealEditbox (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/** The index of the RealEditbox within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The minumim value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	minimumValue: number;
	/**
	 * The maximum value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	maximumValue: number;
	/**
	 * The amount to increment/decrement the value when the user 
	 * selects the control and presses an arrow key on the 
	 * keyboard.
	 */
	smallNudge: number;
	/**
	 * The amount to increment/decrement the value when a user 
	 * selects the control and holds down the Shift key while 
	 * pressing an arrow key on the keyboard.
	 */
	largeNudge: number;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The real number default value of the editbox or combobox. 
	 * Note: For measurement controls, the value is interpreted in 
	 * points. The points value is converted to edit units when the 
	 * dialog opens. Note: Do not specify both edit value and edit 
	 * contents. If both are specified, the one that occurs later 
	 * in the script is used.
	 */
	editValue: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * RealEditbox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): RealEditbox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of real number editboxes.
 * @class
 */
export declare class RealEditboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new RealEditbox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new RealEditbox (Optional)
	 */
	add(withProperties: Object): RealEditbox;
	/** Displays the number of elements in the RealEditbox. */
	count(): number;
	/**
	 * Returns the RealEditbox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): RealEditbox;
	/**
	 * Returns the RealEditbox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): RealEditbox;
	/**
	 * Returns the RealEditboxes within the specified range.
	 * @param {any} _from - The RealEditbox, index, or name at the 
	 * beginning of the range. Can accept: RealEditbox, Long 
	 * Integer or String.
	 * @param {any} to - The RealEditbox, index, or name at the end 
	 * of the range. Can accept: RealEditbox, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): RealEditbox;
	/** Returns the first RealEditbox in the collection. */
	firstItem(): RealEditbox;
	/** Returns the last RealEditbox in the collection. */
	lastItem(): RealEditbox;
	/** Returns the middle RealEditbox in the collection. */
	middleItem(): RealEditbox;
	/**
	 * Returns the RealEditbox with the index previous to the 
	 * specified index.
	 * @param {RealEditbox} obj - The index of the RealEditbox that 
	 * follows the desired RealEditbox.
	 */
	previousItem(obj: RealEditbox): RealEditbox;
	/**
	 * Returns the RealEditbox whose index follows the specified 
	 * RealEditbox in the collection.
	 * @param {RealEditbox} obj - The RealEditbox whose index comes 
	 * before the desired RealEditbox.
	 */
	nextItem(obj: RealEditbox): RealEditbox;
	/** Returns any RealEditbox in the collection. */
	anyItem(): RealEditbox;
	/** Returns every RealEditbox in the collection. */
	everyItem(): RealEditbox;
	/**
	 * Generates a string which, if executed, will return the 
	 * RealEditbox.
	 */
	toSource(): string;
	/**
	 * Returns the RealEditbox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: RealEditbox;
}

/**
 * A percentage entry field.
 * @class
 * @extends Widget
 */
export declare class PercentEditbox extends Widget {
	/** The unique ID of the PercentEditbox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the PercentEditbox (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/**
	 * The index of the PercentEditbox within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The minumim value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	minimumValue: number;
	/**
	 * The maximum value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	maximumValue: number;
	/**
	 * The amount to increment/decrement the value when the user 
	 * selects the control and presses an arrow key on the 
	 * keyboard.
	 */
	smallNudge: number;
	/**
	 * The amount to increment/decrement the value when a user 
	 * selects the control and holds down the Shift key while 
	 * pressing an arrow key on the keyboard.
	 */
	largeNudge: number;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The real number default value of the editbox or combobox. 
	 * Note: For measurement controls, the value is interpreted in 
	 * points. The points value is converted to edit units when the 
	 * dialog opens. Note: Do not specify both edit value and edit 
	 * contents. If both are specified, the one that occurs later 
	 * in the script is used.
	 */
	editValue: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * PercentEditbox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): PercentEditbox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of percent editboxes.
 * @class
 */
export declare class PercentEditboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new PercentEditbox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new PercentEditbox (Optional)
	 */
	add(withProperties: Object): PercentEditbox;
	/** Displays the number of elements in the PercentEditbox. */
	count(): number;
	/**
	 * Returns the PercentEditbox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): PercentEditbox;
	/**
	 * Returns the PercentEditbox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): PercentEditbox;
	/**
	 * Returns the PercentEditboxes within the specified range.
	 * @param {any} _from - The PercentEditbox, index, or name at 
	 * the beginning of the range. Can accept: PercentEditbox, Long 
	 * Integer or String.
	 * @param {any} to - The PercentEditbox, index, or name at the 
	 * end of the range. Can accept: PercentEditbox, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): PercentEditbox;
	/** Returns the first PercentEditbox in the collection. */
	firstItem(): PercentEditbox;
	/** Returns the last PercentEditbox in the collection. */
	lastItem(): PercentEditbox;
	/** Returns the middle PercentEditbox in the collection. */
	middleItem(): PercentEditbox;
	/**
	 * Returns the PercentEditbox with the index previous to the 
	 * specified index.
	 * @param {PercentEditbox} obj - The index of the 
	 * PercentEditbox that follows the desired PercentEditbox.
	 */
	previousItem(obj: PercentEditbox): PercentEditbox;
	/**
	 * Returns the PercentEditbox whose index follows the specified 
	 * PercentEditbox in the collection.
	 * @param {PercentEditbox} obj - The PercentEditbox whose index 
	 * comes before the desired PercentEditbox.
	 */
	nextItem(obj: PercentEditbox): PercentEditbox;
	/** Returns any PercentEditbox in the collection. */
	anyItem(): PercentEditbox;
	/** Returns every PercentEditbox in the collection. */
	everyItem(): PercentEditbox;
	/**
	 * Generates a string which, if executed, will return the 
	 * PercentEditbox.
	 */
	toSource(): string;
	/**
	 * Returns the PercentEditbox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: PercentEditbox;
}

/**
 * A degree entry field.
 * @class
 * @extends Widget
 */
export declare class AngleEditbox extends Widget {
	/** The unique ID of the AngleEditbox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the AngleEditbox (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/** The index of the AngleEditbox within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The minumim value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	minimumValue: number;
	/**
	 * The maximum value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	maximumValue: number;
	/**
	 * The amount to increment/decrement the value when the user 
	 * selects the control and presses an arrow key on the 
	 * keyboard.
	 */
	smallNudge: number;
	/**
	 * The amount to increment/decrement the value when a user 
	 * selects the control and holds down the Shift key while 
	 * pressing an arrow key on the keyboard.
	 */
	largeNudge: number;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The real number default value of the editbox or combobox. 
	 * Note: For measurement controls, the value is interpreted in 
	 * points. The points value is converted to edit units when the 
	 * dialog opens. Note: Do not specify both edit value and edit 
	 * contents. If both are specified, the one that occurs later 
	 * in the script is used.
	 */
	editValue: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * AngleEditbox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): AngleEditbox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of angle editboxes.
 * @class
 */
export declare class AngleEditboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new AngleEditbox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new AngleEditbox (Optional)
	 */
	add(withProperties: Object): AngleEditbox;
	/** Displays the number of elements in the AngleEditbox. */
	count(): number;
	/**
	 * Returns the AngleEditbox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): AngleEditbox;
	/**
	 * Returns the AngleEditbox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): AngleEditbox;
	/**
	 * Returns the AngleEditboxes within the specified range.
	 * @param {any} _from - The AngleEditbox, index, or name at the 
	 * beginning of the range. Can accept: AngleEditbox, Long 
	 * Integer or String.
	 * @param {any} to - The AngleEditbox, index, or name at the 
	 * end of the range. Can accept: AngleEditbox, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): AngleEditbox;
	/** Returns the first AngleEditbox in the collection. */
	firstItem(): AngleEditbox;
	/** Returns the last AngleEditbox in the collection. */
	lastItem(): AngleEditbox;
	/** Returns the middle AngleEditbox in the collection. */
	middleItem(): AngleEditbox;
	/**
	 * Returns the AngleEditbox with the index previous to the 
	 * specified index.
	 * @param {AngleEditbox} obj - The index of the AngleEditbox 
	 * that follows the desired AngleEditbox.
	 */
	previousItem(obj: AngleEditbox): AngleEditbox;
	/**
	 * Returns the AngleEditbox whose index follows the specified 
	 * AngleEditbox in the collection.
	 * @param {AngleEditbox} obj - The AngleEditbox whose index 
	 * comes before the desired AngleEditbox.
	 */
	nextItem(obj: AngleEditbox): AngleEditbox;
	/** Returns any AngleEditbox in the collection. */
	anyItem(): AngleEditbox;
	/** Returns every AngleEditbox in the collection. */
	everyItem(): AngleEditbox;
	/**
	 * Generates a string which, if executed, will return the 
	 * AngleEditbox.
	 */
	toSource(): string;
	/**
	 * Returns the AngleEditbox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: AngleEditbox;
}

/**
 * A high-precision numeric entry control featuring both a 
 * pop-up menu and an entry field.
 * @class
 * @extends Widget
 */
export declare class RealCombobox extends Widget {
	/** The unique ID of the RealCombobox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the RealCombobox (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/** The index of the RealCombobox within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The menu items on a dropdown or combobox control, as an 
	 * array of strings.
	 */
	stringList: string;
	/**
	 * The minumim value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	minimumValue: number;
	/**
	 * The maximum value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	maximumValue: number;
	/**
	 * The amount to increment/decrement the value when the user 
	 * selects the control and presses an arrow key on the 
	 * keyboard.
	 */
	smallNudge: number;
	/**
	 * The amount to increment/decrement the value when a user 
	 * selects the control and holds down the Shift key while 
	 * pressing an arrow key on the keyboard.
	 */
	largeNudge: number;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The real number default value of the editbox or combobox. 
	 * Note: For measurement controls, the value is interpreted in 
	 * points. The points value is converted to edit units when the 
	 * dialog opens. Note: Do not specify both edit value and edit 
	 * contents. If both are specified, the one that occurs later 
	 * in the script is used.
	 */
	editValue: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * RealCombobox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): RealCombobox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of real number comboboxes.
 * @class
 */
export declare class RealComboboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new RealCombobox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new RealCombobox (Optional)
	 */
	add(withProperties: Object): RealCombobox;
	/** Displays the number of elements in the RealCombobox. */
	count(): number;
	/**
	 * Returns the RealCombobox with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): RealCombobox;
	/**
	 * Returns the RealCombobox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): RealCombobox;
	/**
	 * Returns the RealComboboxes within the specified range.
	 * @param {any} _from - The RealCombobox, index, or name at the 
	 * beginning of the range. Can accept: RealCombobox, Long 
	 * Integer or String.
	 * @param {any} to - The RealCombobox, index, or name at the 
	 * end of the range. Can accept: RealCombobox, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): RealCombobox;
	/** Returns the first RealCombobox in the collection. */
	firstItem(): RealCombobox;
	/** Returns the last RealCombobox in the collection. */
	lastItem(): RealCombobox;
	/** Returns the middle RealCombobox in the collection. */
	middleItem(): RealCombobox;
	/**
	 * Returns the RealCombobox with the index previous to the 
	 * specified index.
	 * @param {RealCombobox} obj - The index of the RealCombobox 
	 * that follows the desired RealCombobox.
	 */
	previousItem(obj: RealCombobox): RealCombobox;
	/**
	 * Returns the RealCombobox whose index follows the specified 
	 * RealCombobox in the collection.
	 * @param {RealCombobox} obj - The RealCombobox whose index 
	 * comes before the desired RealCombobox.
	 */
	nextItem(obj: RealCombobox): RealCombobox;
	/** Returns any RealCombobox in the collection. */
	anyItem(): RealCombobox;
	/** Returns every RealCombobox in the collection. */
	everyItem(): RealCombobox;
	/**
	 * Generates a string which, if executed, will return the 
	 * RealCombobox.
	 */
	toSource(): string;
	/**
	 * Returns the RealCombobox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: RealCombobox;
}

/**
 * A measurement entry control featuring both a pop-up menu and 
 * an entry field.
 * @class
 * @extends Widget
 */
export declare class MeasurementCombobox extends Widget {
	/** The unique ID of the MeasurementCombobox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MeasurementCombobox (a DialogColumn, 
	 * DialogRow, EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/**
	 * The index of the MeasurementCombobox within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The minumim value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	minimumValue: number;
	/**
	 * The maximum value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	maximumValue: number;
	/**
	 * The amount to increment/decrement the value when the user 
	 * selects the control and presses an arrow key on the 
	 * keyboard.
	 */
	smallNudge: number;
	/**
	 * The amount to increment/decrement the value when a user 
	 * selects the control and holds down the Shift key while 
	 * pressing an arrow key on the keyboard.
	 */
	largeNudge: number;
	/**
	 * The measurement units to display in the measurement control.
	 */
	editUnits: MeasurementUnits;
	/**
	 * The menu items on a dropdown or combobox control, as an 
	 * array of strings.
	 */
	stringList: string;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The real number default value of the editbox or combobox. 
	 * Note: For measurement controls, the value is interpreted in 
	 * points. The points value is converted to edit units when the 
	 * dialog opens. Note: Do not specify both edit value and edit 
	 * contents. If both are specified, the one that occurs later 
	 * in the script is used.
	 */
	editValue: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * MeasurementCombobox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MeasurementCombobox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of measurement comboboxes.
 * @class
 */
export declare class MeasurementComboboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new MeasurementCombobox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MeasurementCombobox (Optional)
	 */
	add(withProperties: Object): MeasurementCombobox;
	/** Displays the number of elements in the MeasurementCombobox. */
	count(): number;
	/**
	 * Returns the MeasurementCombobox with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MeasurementCombobox;
	/**
	 * Returns the MeasurementCombobox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MeasurementCombobox;
	/**
	 * Returns the MeasurementComboboxes within the specified 
	 * range.
	 * @param {any} _from - The MeasurementCombobox, index, or name 
	 * at the beginning of the range. Can accept: 
	 * MeasurementCombobox, Long Integer or String.
	 * @param {any} to - The MeasurementCombobox, index, or name at 
	 * the end of the range. Can accept: MeasurementCombobox, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): MeasurementCombobox;
	/** Returns the first MeasurementCombobox in the collection. */
	firstItem(): MeasurementCombobox;
	/** Returns the last MeasurementCombobox in the collection. */
	lastItem(): MeasurementCombobox;
	/** Returns the middle MeasurementCombobox in the collection. */
	middleItem(): MeasurementCombobox;
	/**
	 * Returns the MeasurementCombobox with the index previous to 
	 * the specified index.
	 * @param {MeasurementCombobox} obj - The index of the 
	 * MeasurementCombobox that follows the desired 
	 * MeasurementCombobox.
	 */
	previousItem(obj: MeasurementCombobox): MeasurementCombobox;
	/**
	 * Returns the MeasurementCombobox whose index follows the 
	 * specified MeasurementCombobox in the collection.
	 * @param {MeasurementCombobox} obj - The MeasurementCombobox 
	 * whose index comes before the desired MeasurementCombobox.
	 */
	nextItem(obj: MeasurementCombobox): MeasurementCombobox;
	/** Returns any MeasurementCombobox in the collection. */
	anyItem(): MeasurementCombobox;
	/** Returns every MeasurementCombobox in the collection. */
	everyItem(): MeasurementCombobox;
	/**
	 * Generates a string which, if executed, will return the 
	 * MeasurementCombobox.
	 */
	toSource(): string;
	/**
	 * Returns the MeasurementCombobox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MeasurementCombobox;
}

/**
 * A measurement entry field.
 * @class
 * @extends Widget
 */
export declare class MeasurementEditbox extends Widget {
	/** The unique ID of the MeasurementEditbox. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the MeasurementEditbox (a DialogColumn, 
	 * DialogRow, EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/**
	 * The index of the MeasurementEditbox within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The minumim value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	minimumValue: number;
	/**
	 * The maximum value that a user is allowed to type in a 
	 * numeric editbox or combobox. Note: The value for a 
	 * measurement editbox or combobox is interpreted in points, 
	 * regardless of the edit units specified for the control. The 
	 * points value is converted automatically to the edit unit 
	 * when the dialog is opened.
	 */
	maximumValue: number;
	/**
	 * The amount to increment/decrement the value when the user 
	 * selects the control and presses an arrow key on the 
	 * keyboard.
	 */
	smallNudge: number;
	/**
	 * The amount to increment/decrement the value when a user 
	 * selects the control and holds down the Shift key while 
	 * pressing an arrow key on the keyboard.
	 */
	largeNudge: number;
	/**
	 * The measurement units to display in the measurement control.
	 */
	editUnits: MeasurementUnits;
	/**
	 * The default value in an editbox control. Note: Do not 
	 * specify both edit contents and edit value. If both are 
	 * specified, the one that occurs later in the script is used.
	 */
	editContents: string;
	/**
	 * The real number default value of the editbox or combobox. 
	 * Note: For measurement controls, the value is interpreted in 
	 * points. The points value is converted to edit units when the 
	 * dialog opens. Note: Do not specify both edit value and edit 
	 * contents. If both are specified, the one that occurs later 
	 * in the script is used.
	 */
	editValue: number;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * MeasurementEditbox.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): MeasurementEditbox;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of measurement editboxes.
 * @class
 */
export declare class MeasurementEditboxes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new MeasurementEditbox.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new MeasurementEditbox (Optional)
	 */
	add(withProperties: Object): MeasurementEditbox;
	/** Displays the number of elements in the MeasurementEditbox. */
	count(): number;
	/**
	 * Returns the MeasurementEditbox with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): MeasurementEditbox;
	/**
	 * Returns the MeasurementEditbox with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): MeasurementEditbox;
	/**
	 * Returns the MeasurementEditboxes within the specified range.
	 * @param {any} _from - The MeasurementEditbox, index, or name 
	 * at the beginning of the range. Can accept: 
	 * MeasurementEditbox, Long Integer or String.
	 * @param {any} to - The MeasurementEditbox, index, or name at 
	 * the end of the range. Can accept: MeasurementEditbox, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): MeasurementEditbox;
	/** Returns the first MeasurementEditbox in the collection. */
	firstItem(): MeasurementEditbox;
	/** Returns the last MeasurementEditbox in the collection. */
	lastItem(): MeasurementEditbox;
	/** Returns the middle MeasurementEditbox in the collection. */
	middleItem(): MeasurementEditbox;
	/**
	 * Returns the MeasurementEditbox with the index previous to 
	 * the specified index.
	 * @param {MeasurementEditbox} obj - The index of the 
	 * MeasurementEditbox that follows the desired 
	 * MeasurementEditbox.
	 */
	previousItem(obj: MeasurementEditbox): MeasurementEditbox;
	/**
	 * Returns the MeasurementEditbox whose index follows the 
	 * specified MeasurementEditbox in the collection.
	 * @param {MeasurementEditbox} obj - The MeasurementEditbox 
	 * whose index comes before the desired MeasurementEditbox.
	 */
	nextItem(obj: MeasurementEditbox): MeasurementEditbox;
	/** Returns any MeasurementEditbox in the collection. */
	anyItem(): MeasurementEditbox;
	/** Returns every MeasurementEditbox in the collection. */
	everyItem(): MeasurementEditbox;
	/**
	 * Generates a string which, if executed, will return the 
	 * MeasurementEditbox.
	 */
	toSource(): string;
	/**
	 * Returns the MeasurementEditbox with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: MeasurementEditbox;
}

/**
 * A bordered panel on a dialog that can contain any type and 
 * number of controls.
 * @class
 * @extends Widget
 */
export declare class BorderPanel extends Widget {
	/** The unique ID of the BorderPanel. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the BorderPanel (a DialogColumn, DialogRow, 
	 * EnablingGroup or BorderPanel).
	 */
	readonly parent: any;
	/** The index of the BorderPanel within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of dialog columns. */
	readonly dialogColumns: DialogColumns;
	/** A collection of widgets. */
	readonly widgets: Widgets;
	/** A collection of text editboxes. */
	readonly textEditboxes: TextEditboxes;
	/** A collection of integer editboxes. */
	readonly integerEditboxes: IntegerEditboxes;
	/** A collection of measurement editboxes. */
	readonly measurementEditboxes: MeasurementEditboxes;
	/** A collection of real number editboxes. */
	readonly realEditboxes: RealEditboxes;
	/** A collection of angle editboxes. */
	readonly angleEditboxes: AngleEditboxes;
	/** A collection of percent editboxes. */
	readonly percentEditboxes: PercentEditboxes;
	/** A collection of integer comboboxes. */
	readonly integerComboboxes: IntegerComboboxes;
	/** A collection of measurement comboboxes. */
	readonly measurementComboboxes: MeasurementComboboxes;
	/** A collection of real number comboboxes. */
	readonly realComboboxes: RealComboboxes;
	/** A collection of angle comboboxes. */
	readonly angleComboboxes: AngleComboboxes;
	/** A collection of percent comboboxes. */
	readonly percentComboboxes: PercentComboboxes;
	/** A collection of checkbox controls. */
	readonly checkboxControls: CheckboxControls;
	/** A collection of static text objects. */
	readonly staticTexts: StaticTexts;
	/** A collection of dropdowns. */
	readonly dropdowns: Dropdowns;
	/** A collection of border panels. */
	readonly borderPanels: BorderPanels;
	/** A collection of enabling groups. */
	readonly enablingGroups: EnablingGroups;
	/** A collection of radiobutton groups. */
	readonly radiobuttonGroups: RadiobuttonGroups;
	/**
	 * The width of the control. For an editbox or combobox, 
	 * specifies the minimum width of the box.
	 */
	minWidth: number;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * BorderPanel.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): BorderPanel;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of border panels.
 * @class
 */
export declare class BorderPanels {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new BorderPanel.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new BorderPanel (Optional)
	 */
	add(withProperties: Object): BorderPanel;
	/** Displays the number of elements in the BorderPanel. */
	count(): number;
	/**
	 * Returns the BorderPanel with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): BorderPanel;
	/**
	 * Returns the BorderPanel with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): BorderPanel;
	/**
	 * Returns the BorderPanels within the specified range.
	 * @param {any} _from - The BorderPanel, index, or name at the 
	 * beginning of the range. Can accept: BorderPanel, Long 
	 * Integer or String.
	 * @param {any} to - The BorderPanel, index, or name at the end 
	 * of the range. Can accept: BorderPanel, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): BorderPanel;
	/** Returns the first BorderPanel in the collection. */
	firstItem(): BorderPanel;
	/** Returns the last BorderPanel in the collection. */
	lastItem(): BorderPanel;
	/** Returns the middle BorderPanel in the collection. */
	middleItem(): BorderPanel;
	/**
	 * Returns the BorderPanel with the index previous to the 
	 * specified index.
	 * @param {BorderPanel} obj - The index of the BorderPanel that 
	 * follows the desired BorderPanel.
	 */
	previousItem(obj: BorderPanel): BorderPanel;
	/**
	 * Returns the BorderPanel whose index follows the specified 
	 * BorderPanel in the collection.
	 * @param {BorderPanel} obj - The BorderPanel whose index comes 
	 * before the desired BorderPanel.
	 */
	nextItem(obj: BorderPanel): BorderPanel;
	/** Returns any BorderPanel in the collection. */
	anyItem(): BorderPanel;
	/** Returns every BorderPanel in the collection. */
	everyItem(): BorderPanel;
	/**
	 * Generates a string which, if executed, will return the 
	 * BorderPanel.
	 */
	toSource(): string;
	/**
	 * Returns the BorderPanel with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: BorderPanel;
}

/**
 * A borderless row for containing controls in a dialog.
 * @class
 */
export declare class DialogRow {
	/** The unique ID of the DialogRow. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DialogRow (a DialogColumn). */
	readonly parent: DialogColumn;
	/** The index of the DialogRow within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of dialog columns. */
	readonly dialogColumns: DialogColumns;
	/** A collection of widgets. */
	readonly widgets: Widgets;
	/** A collection of text editboxes. */
	readonly textEditboxes: TextEditboxes;
	/** A collection of integer editboxes. */
	readonly integerEditboxes: IntegerEditboxes;
	/** A collection of measurement editboxes. */
	readonly measurementEditboxes: MeasurementEditboxes;
	/** A collection of real number editboxes. */
	readonly realEditboxes: RealEditboxes;
	/** A collection of angle editboxes. */
	readonly angleEditboxes: AngleEditboxes;
	/** A collection of percent editboxes. */
	readonly percentEditboxes: PercentEditboxes;
	/** A collection of integer comboboxes. */
	readonly integerComboboxes: IntegerComboboxes;
	/** A collection of measurement comboboxes. */
	readonly measurementComboboxes: MeasurementComboboxes;
	/** A collection of real number comboboxes. */
	readonly realComboboxes: RealComboboxes;
	/** A collection of angle comboboxes. */
	readonly angleComboboxes: AngleComboboxes;
	/** A collection of percent comboboxes. */
	readonly percentComboboxes: PercentComboboxes;
	/** A collection of checkbox controls. */
	readonly checkboxControls: CheckboxControls;
	/** A collection of static text objects. */
	readonly staticTexts: StaticTexts;
	/** A collection of dropdowns. */
	readonly dropdowns: Dropdowns;
	/** A collection of border panels. */
	readonly borderPanels: BorderPanels;
	/** A collection of enabling groups. */
	readonly enablingGroups: EnablingGroups;
	/** A collection of radiobutton groups. */
	readonly radiobuttonGroups: RadiobuttonGroups;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * DialogRow.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DialogRow;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of dialog rows.
 * @class
 */
export declare class DialogRows {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new DialogRow.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new DialogRow (Optional)
	 */
	add(withProperties: Object): DialogRow;
	/** Displays the number of elements in the DialogRow. */
	count(): number;
	/**
	 * Returns the DialogRow with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DialogRow;
	/**
	 * Returns the DialogRow with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): DialogRow;
	/**
	 * Returns the DialogRows within the specified range.
	 * @param {any} _from - The DialogRow, index, or name at the 
	 * beginning of the range. Can accept: DialogRow, Long Integer 
	 * or String.
	 * @param {any} to - The DialogRow, index, or name at the end 
	 * of the range. Can accept: DialogRow, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): DialogRow;
	/** Returns the first DialogRow in the collection. */
	firstItem(): DialogRow;
	/** Returns the last DialogRow in the collection. */
	lastItem(): DialogRow;
	/** Returns the middle DialogRow in the collection. */
	middleItem(): DialogRow;
	/**
	 * Returns the DialogRow with the index previous to the 
	 * specified index.
	 * @param {DialogRow} obj - The index of the DialogRow that 
	 * follows the desired DialogRow.
	 */
	previousItem(obj: DialogRow): DialogRow;
	/**
	 * Returns the DialogRow whose index follows the specified 
	 * DialogRow in the collection.
	 * @param {DialogRow} obj - The DialogRow whose index comes 
	 * before the desired DialogRow.
	 */
	nextItem(obj: DialogRow): DialogRow;
	/** Returns any DialogRow in the collection. */
	anyItem(): DialogRow;
	/** Returns every DialogRow in the collection. */
	everyItem(): DialogRow;
	/**
	 * Generates a string which, if executed, will return the 
	 * DialogRow.
	 */
	toSource(): string;
	/**
	 * Returns the DialogRow with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: DialogRow;
}

/**
 * An XML element.
 * @class
 * @extends XMLItem
 */
export declare class XMLElement extends XMLItem {
	/**
	 * The insertion point before the table in the story containing 
	 * the table.
	 */
	readonly storyOffset: InsertionPoint;
	/** The story that contains the text. */
	readonly parentStory: Story;
	/**
	 * The text content or page item referred to by the element. 
	 * Can return: Text, Story, PageItem, Movie, Sound, Graphic, 
	 * Table or Cell.
	 */
	readonly xmlContent: any;
	/** The unique ID of the XMLElement. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XMLElement (a Document or XMLElement). */
	readonly parent: any;
	/** The index of the XMLElement within its containing object. */
	readonly index: number;
	/** A collection of XML attributes. */
	readonly xmlAttributes: XMLAttributes;
	/** A collection of XML elements. */
	readonly xmlElements: XMLElements;
	/** A collection of XML items. */
	readonly xmlItems: XMLItems;
	/** A collection of XML comments. */
	readonly xmlComments: XMLComments;
	/** A collection of XML instructions. */
	readonly xmlInstructions: XMLInstructions;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/**
	 * A collection of bitmap images in any bitmap file format 
	 * (including TIFF, JPEG, or GIF).
	 */
	readonly images: Images;
	/**
	 * A collection of imported graphics in any graphic file format 
	 * (vector, metafile, or bitmap).
	 */
	readonly graphics: Graphics;
	/** A collection of EPS files. */
	readonly epss: EPSs;
	/** A collection of WMF graphics. */
	readonly wmfs: WMFs;
	/** A collection of PICT graphics. */
	readonly picts: PICTs;
	/** A collection of PDF files. */
	readonly pdfs: PDFs;
	/** A collection of stories. */
	readonly stories: Stories;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of table cells. */
	readonly cells: Cells;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The XML tag applied to the element. Can also accept: String.
	 */
	markupTag: XMLTag;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	contents: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Moves the element to the specified location.
	 * @param {LocationOptions} to - The location in relation to 
	 * the reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. . 
	 * Can accept: XMLItem or Text. (Optional)
	 */
	move(to: LocationOptions, reference: any): XMLElement;
	/** Duplicates the XMLElement. */
	duplicate(): XMLElement;
	/**
	 * Associates the object with the specified XML element while 
	 * preserving existing content.
	 * @param {any} using - The object to mark up. Can accept: 
	 * PageItem, Movie, Sound, Graphic, Story, Text or Table.
	 */
	markup(using: any): void;
	/**
	 * Places XML content into the story, replacing the existing 
	 * content.
	 * @param {any} using - The object to place into. Can accept: 
	 * Story, PageItem, Graphic, Movie or Sound.
	 */
	placeXML(using: any): void;
	/** Untags an element. */
	untag(): void;
	/**
	 * Validates the element against a DTD.
	 * @param {number} maximumErrors - The maximum number of 
	 * validation errors to generate. (Optional)
	 */
	validate(maximumErrors?: number): ValidationError;
	/**
	 * Applies the specified paragraph style to the text content of 
	 * the XMLElement.
	 * @param {any} using - The paragraph style to apply. Can 
	 * accept: String or ParagraphStyle.
	 * @param {boolean} clearingOverrides - If true, clears any 
	 * attributes before applying the style. (Optional)
	 */
	applyParagraphStyle(using: any, clearingOverrides?: boolean): void;
	/**
	 * Applies the specified character style to the text content of 
	 * the XMLElement.
	 * @param {any} using - The character style to apply. Can 
	 * accept: String or CharacterStyle.
	 */
	applyCharacterStyle(using: any): void;
	/**
	 * Converts the XMLElement to an attribute of its parent 
	 * element.
	 * @param {string} using - The name to give to the new 
	 * attribute. (Optional)
	 */
	convertToAttribute(using: string): XMLAttribute;
	/**
	 * Converts the content of the XML element to a table.
	 * @param {XMLTag} rowTag - The XML tag that indicates a table 
	 * row.
	 * @param {XMLTag} cellTag - The XML tag that indicates a table 
	 * cell.
	 */
	convertElementToTable(rowTag: XMLTag, cellTag: XMLTag): Table;
	/**
	 * Places an XML element into an inline frame.
	 * @param {number|string} dimensions - The dimensions of the 
	 * inline frame in the format [width, height].
	 */
	placeIntoInlineFrame(dimensions: number|string): PageItem;
	/**
	 * Associates an existing page item with the XML element and 
	 * places it into an inline frame.
	 * @param {PageItem} copyItem - The page item to copy.
	 * @param {boolean} retainExistingFrame - If true, moves the 
	 * existing page item. If false, moves a copy of the page item. 
	 * (Optional)
	 */
	placeIntoInlineCopy(copyItem: PageItem, retainExistingFrame?: boolean): PageItem;
	/**
	 * Replaces the content of XML element with content imported 
	 * from a file.
	 * @param {string} using - The file path to the import file.
	 * @param {string} relativeBasePath - Base path used to resolve 
	 * relative paths. (Optional)
	 */
	setContent(using: string, relativeBasePath: string): PageItem;
	/**
	 * Inserts the specified text as content before, in, or after 
	 * the XML element.
	 * @param {any} using - The text to be inserted. Can accept: 
	 * String or SpecialCharacters enumerator.
	 * @param {XMLElementPosition} position - The position at which 
	 * to insert the text. Note that text inserted before or after 
	 * the element does not become part of the content of the 
	 * element. Instead, it becomes content of the parent of the 
	 * element.
	 */
	insertTextAsContent(using: any, position: XMLElementPosition): Text;
	/**
	 * Applies a table style to the table associated with the 
	 * XMLElement.
	 * @param {any} using - The table style to apply. Can accept: 
	 * String or TableStyle.
	 * @param {boolean} clearingOverrides - If true, removes local 
	 * formatting before applying the table style. (Optional)
	 */
	applyTableStyle(using: any, clearingOverrides?: boolean): void;
	/**
	 * Applies a cell style to the table cells associated with the 
	 * XMLElement.
	 * @param {any} using - The cell style to apply. Can accept: 
	 * String or CellStyle.
	 * @param {boolean} clearingOverrides - If true, removes local 
	 * formatting before applying the cell style. (Optional)
	 */
	applyCellStyle(using: any, clearingOverrides?: boolean): void;
	/**
	 * Applies an object style to the frame associated with the 
	 * XMLElement.
	 * @param {any} using - The object style to apply. Can accept: 
	 * String or ObjectStyle.
	 * @param {boolean} clearingOverrides - If true, removes local 
	 * formatting before applying the object style. (Optional)
	 * @param {boolean} clearingOverridesThroughRootObjectStyle - 
	 * If true, clears unchecked category attributes through the 
	 * root style. (Optional)
	 */
	applyObjectStyle(using: any, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void;
	/**
	 * Places the XML element into a new rectangular page item. If 
	 * the XML element was already associated with a page item, 
	 * that page item is deleted.
	 * @param {any} on - The page or spread on which to create the 
	 * new page item. Can accept: Spread, Page or MasterSpread.
	 * @param {number|string} geometricBounds - The bounds of the 
	 * page item excluding the stroke width, in the format [y1, x1, 
	 * y2, x2].
	 */
	placeIntoFrame(on: any, geometricBounds: number|string): PageItem;
	/**
	 * Associates the XML element with a copy of a page item.
	 * @param {any} on - The page or spread on which to create the 
	 * new page item. Can accept: Spread, Page or MasterSpread.
	 * @param {number|string} placePoint - The page coordinates of 
	 * the top left corner of the page item, in the format [y1, x1]
	 * @param {PageItem} copyItem - The page item to copy.
	 * @param {boolean} retainExistingFrame - If true, associates 
	 * the XML element with the existing page item and moves the 
	 * page item (rather than a copy of the page item). (Optional)
	 */
	placeIntoCopy(on: any, placePoint: number|string, copyItem: PageItem, retainExistingFrame?: boolean): PageItem;
	/**
	 * Imports the specified XML file into an InDesign document.
	 * @param {File} _from - The XML file.
	 */
	importXML(_from: File): void;
	/**
	 * Evaluates an XPath expression starting at this XML element 
	 * in the structure.
	 * @param {string} using - The XPath expression.
	 * @param {any} prefixMappingTable - The namespace mapping 
	 * table. Can accept: Array of Arrays of 2 Strings. (Optional)
	 */
	evaluateXPathExpression(using: string, prefixMappingTable: any): XMLItem;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * Exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	exportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/**
	 * Stores the object in the specified library.
	 * @param {Library} using - The library in which to store the 
	 * object.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new XMLElement (Optional)
	 */
	store(using: Library, withProperties: Object): Asset;
	/** Deletes the XMLElement. */
	remove(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the XMLElement in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLElement.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLElement;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of XML elements.
 * @class
 */
export declare class XMLElements {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the XMLElement. */
	count(): number;
	/**
	 * Creates a new XML element.
	 * @param {any} markupTag - The XML tag used to identify the 
	 * element. Can accept: String or XMLTag.
	 * @param {any} xmlContent - The content to be marked up. Can 
	 * accept: Text, Story, PageItem, Movie, Sound, Graphic, Table 
	 * or Cell. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new XMLElement (Optional)
	 */
	add(markupTag: any, xmlContent: any, withProperties: Object): XMLElement;
	/**
	 * Returns the XMLElement with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): XMLElement;
	/**
	 * Returns the XMLElement with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): XMLElement;
	/**
	 * Returns the XMLElements within the specified range.
	 * @param {any} _from - The XMLElement, index, or name at the 
	 * beginning of the range. Can accept: XMLElement, Long Integer 
	 * or String.
	 * @param {any} to - The XMLElement, index, or name at the end 
	 * of the range. Can accept: XMLElement, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): XMLElement;
	/** Returns the first XMLElement in the collection. */
	firstItem(): XMLElement;
	/** Returns the last XMLElement in the collection. */
	lastItem(): XMLElement;
	/** Returns the middle XMLElement in the collection. */
	middleItem(): XMLElement;
	/**
	 * Returns the XMLElement with the index previous to the 
	 * specified index.
	 * @param {XMLElement} obj - The index of the XMLElement that 
	 * follows the desired XMLElement.
	 */
	previousItem(obj: XMLElement): XMLElement;
	/**
	 * Returns the XMLElement whose index follows the specified 
	 * XMLElement in the collection.
	 * @param {XMLElement} obj - The XMLElement whose index comes 
	 * before the desired XMLElement.
	 */
	nextItem(obj: XMLElement): XMLElement;
	/** Returns any XMLElement in the collection. */
	anyItem(): XMLElement;
	/** Returns every XMLElement in the collection. */
	everyItem(): XMLElement;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLElement.
	 */
	toSource(): string;
	/**
	 * Returns the XMLElement with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: XMLElement;
}

/**
 * An XML attribute.
 * @class
 */
export declare class XMLAttribute {
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XMLAttribute (a XMLElement). */
	readonly parent: XMLElement;
	/** The index of the XMLAttribute within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the XMLAttribute. */
	name: string;
	/** The value of the XMLAttribute. */
	value: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the XMLAttribute. */
	remove(): void;
	/**
	 * Converts the XML attribute to a child element of its parent 
	 * element.
	 * @param {XMLElementLocation} located - The location of the 
	 * new XML element within the parent XML element of the XML 
	 * attribute. (Optional)
	 * @param {XMLTag} markupTag - The XML tag to apply to the new 
	 * XML element. (Optional)
	 */
	convertToElement(located?: XMLElementLocation, markupTag?: XMLTag): XMLElement;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the XMLAttribute in relation to previously 
	 * selected objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLAttribute.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLAttribute;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of XML attributes.
 * @class
 */
export declare class XMLAttributes {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new XML attribute.
	 * @param {string} name - The name of the attribute.
	 * @param {string} value - The value of the attribute.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new XMLAttribute (Optional)
	 */
	add(name: string, value: string, withProperties: Object): XMLAttribute;
	/** Displays the number of elements in the XMLAttribute. */
	count(): number;
	/**
	 * Returns the XMLAttribute with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): XMLAttribute;
	/**
	 * Returns the XMLAttribute with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): XMLAttribute;
	/**
	 * Returns the XMLAttributes within the specified range.
	 * @param {any} _from - The XMLAttribute, index, or name at the 
	 * beginning of the range. Can accept: XMLAttribute, Long 
	 * Integer or String.
	 * @param {any} to - The XMLAttribute, index, or name at the 
	 * end of the range. Can accept: XMLAttribute, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): XMLAttribute;
	/** Returns the first XMLAttribute in the collection. */
	firstItem(): XMLAttribute;
	/** Returns the last XMLAttribute in the collection. */
	lastItem(): XMLAttribute;
	/** Returns the middle XMLAttribute in the collection. */
	middleItem(): XMLAttribute;
	/**
	 * Returns the XMLAttribute with the index previous to the 
	 * specified index.
	 * @param {XMLAttribute} obj - The index of the XMLAttribute 
	 * that follows the desired XMLAttribute.
	 */
	previousItem(obj: XMLAttribute): XMLAttribute;
	/**
	 * Returns the XMLAttribute whose index follows the specified 
	 * XMLAttribute in the collection.
	 * @param {XMLAttribute} obj - The XMLAttribute whose index 
	 * comes before the desired XMLAttribute.
	 */
	nextItem(obj: XMLAttribute): XMLAttribute;
	/** Returns any XMLAttribute in the collection. */
	anyItem(): XMLAttribute;
	/** Returns every XMLAttribute in the collection. */
	everyItem(): XMLAttribute;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLAttribute.
	 */
	toSource(): string;
	/**
	 * Returns the XMLAttribute with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: XMLAttribute;
}

/**
 * An XML markup tag.
 * @class
 */
export declare class XMLTag {
	/** The unique ID of the XMLTag. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XMLTag (a Application or Document). */
	readonly parent: any;
	/** The index of the XMLTag within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The name of the XMLTag. */
	name: string;
	/**
	 * The color of the tag, specified either as an array of three 
	 * doubles, each in the range 0 to 255 and representing R, G, 
	 * and B values, or as a UI color. Can return: Array of 3 Reals 
	 * (0 - 255) or UIColors enumerator.
	 */
	tagColor: any;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Deletes the tag.
	 * @param {any} replacingWith - The tag to substitute. Can 
	 * accept: XMLTag or String.
	 */
	remove(replacingWith: any): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLTag.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLTag;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of XML tags.
 * @class
 */
export declare class XMLTags {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a tag.
	 * @param {string} name - The name of the tag. (Optional)
	 * @param {any} tagColor - The dolor of the tag, specified 
	 * either as an array of three doubles, each in the range 0 to 
	 * 255 and representing R, G, and B values, or as a UI color. 
	 * Can accept: Array of 3 Reals (0 - 255) or UIColors 
	 * enumerator. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new XMLTag (Optional)
	 */
	add(name: string, tagColor: any, withProperties: Object): XMLTag;
	/** Displays the number of elements in the XMLTag. */
	count(): number;
	/**
	 * Returns the XMLTag with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): XMLTag;
	/**
	 * Returns the XMLTag with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): XMLTag;
	/**
	 * Returns the XMLTag with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): XMLTag;
	/**
	 * Returns the XMLTags within the specified range.
	 * @param {any} _from - The XMLTag, index, or name at the 
	 * beginning of the range. Can accept: XMLTag, Long Integer or 
	 * String.
	 * @param {any} to - The XMLTag, index, or name at the end of 
	 * the range. Can accept: XMLTag, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): XMLTag;
	/** Returns the first XMLTag in the collection. */
	firstItem(): XMLTag;
	/** Returns the last XMLTag in the collection. */
	lastItem(): XMLTag;
	/** Returns the middle XMLTag in the collection. */
	middleItem(): XMLTag;
	/**
	 * Returns the XMLTag with the index previous to the specified 
	 * index.
	 * @param {XMLTag} obj - The index of the XMLTag that follows 
	 * the desired XMLTag.
	 */
	previousItem(obj: XMLTag): XMLTag;
	/**
	 * Returns the XMLTag whose index follows the specified XMLTag 
	 * in the collection.
	 * @param {XMLTag} obj - The XMLTag whose index comes before 
	 * the desired XMLTag.
	 */
	nextItem(obj: XMLTag): XMLTag;
	/** Returns any XMLTag in the collection. */
	anyItem(): XMLTag;
	/** Returns every XMLTag in the collection. */
	everyItem(): XMLTag;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLTag.
	 */
	toSource(): string;
	/**
	 * Returns the XMLTag with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: XMLTag;
}

/**
 * A mapping object that maps an XML tag to a style (paragraph, 
 * character, table, or cell).
 * @class
 */
export declare class XMLImportMap {
	/**
	 * The XML tag applied to the element. Can also accept: String.
	 */
	readonly markupTag: XMLTag;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XMLImportMap (a Application or Document). */
	readonly parent: any;
	/** The index of the XMLImportMap within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The style mapped to the XML tag. Can return: ParagraphStyle, 
	 * CharacterStyle, TableStyle or CellStyle. Can also accept: 
	 * String.
	 */
	mappedStyle: any;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the XMLImportMap. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLImportMap.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLImportMap;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of XML import maps.
 * @class
 */
export declare class XMLImportMaps {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Create a new mapping
	 * @param {any} markupTag - The tag to map. Can accept: XMLTag 
	 * or String.
	 * @param {any} mappedStyle - the mapped style. Can accept: 
	 * ParagraphStyle, CharacterStyle, TableStyle, CellStyle or 
	 * String.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new XMLImportMap (Optional)
	 */
	add(markupTag: any, mappedStyle: any, withProperties: Object): XMLImportMap;
	/** Displays the number of elements in the XMLImportMap. */
	count(): number;
	/**
	 * Returns the XMLImportMap with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): XMLImportMap;
	/**
	 * Returns the XMLImportMaps within the specified range.
	 * @param {any} _from - The XMLImportMap, index, or name at the 
	 * beginning of the range. Can accept: XMLImportMap, Long 
	 * Integer or String.
	 * @param {any} to - The XMLImportMap, index, or name at the 
	 * end of the range. Can accept: XMLImportMap, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): XMLImportMap;
	/** Returns the first XMLImportMap in the collection. */
	firstItem(): XMLImportMap;
	/** Returns the last XMLImportMap in the collection. */
	lastItem(): XMLImportMap;
	/** Returns the middle XMLImportMap in the collection. */
	middleItem(): XMLImportMap;
	/**
	 * Returns the XMLImportMap with the index previous to the 
	 * specified index.
	 * @param {XMLImportMap} obj - The index of the XMLImportMap 
	 * that follows the desired XMLImportMap.
	 */
	previousItem(obj: XMLImportMap): XMLImportMap;
	/**
	 * Returns the XMLImportMap whose index follows the specified 
	 * XMLImportMap in the collection.
	 * @param {XMLImportMap} obj - The XMLImportMap whose index 
	 * comes before the desired XMLImportMap.
	 */
	nextItem(obj: XMLImportMap): XMLImportMap;
	/** Returns any XMLImportMap in the collection. */
	anyItem(): XMLImportMap;
	/** Returns every XMLImportMap in the collection. */
	everyItem(): XMLImportMap;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLImportMap.
	 */
	toSource(): string;
	/**
	 * Returns the XMLImportMap with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: XMLImportMap;
}

/**
 * A mapping object that maps a style (paragraph, character, 
 * table, or cell) to an XML tag.
 * @class
 */
export declare class XMLExportMap {
	/**
	 * The style mapped to the XML tag. Can return: ParagraphStyle, 
	 * CharacterStyle, TableStyle or CellStyle. Can also accept: 
	 * String.
	 */
	readonly mappedStyle: any;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XMLExportMap (a Application or Document). */
	readonly parent: any;
	/** The index of the XMLExportMap within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * The XML tag applied to the element. Can also accept: String.
	 */
	markupTag: XMLTag;
	/**
	 * If true, includes stories on master spreads when mapping 
	 * styles to tags.
	 */
	includeMasterPageStories: boolean;
	/**
	 * If true, includes stories on the pasteboard when mapping 
	 * styles to tags.
	 */
	includePasteboardStories: boolean;
	/**
	 * If true, includes empty stories when mapping styles to tags.
	 */
	includeEmptyStories: boolean;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the XMLExportMap. */
	remove(): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLExportMap.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLExportMap;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of XML export maps.
 * @class
 */
export declare class XMLExportMaps {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Create a new mapping
	 * @param {any} mappedStyle - The mapped style. Can accept: 
	 * ParagraphStyle, CharacterStyle, TableStyle, CellStyle or 
	 * String.
	 * @param {any} markupTag - The tag to map. Can accept: XMLTag 
	 * or String.
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new XMLExportMap (Optional)
	 */
	add(mappedStyle: any, markupTag: any, withProperties: Object): XMLExportMap;
	/** Displays the number of elements in the XMLExportMap. */
	count(): number;
	/**
	 * Returns the XMLExportMap with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): XMLExportMap;
	/**
	 * Returns the XMLExportMaps within the specified range.
	 * @param {any} _from - The XMLExportMap, index, or name at the 
	 * beginning of the range. Can accept: XMLExportMap, Long 
	 * Integer or String.
	 * @param {any} to - The XMLExportMap, index, or name at the 
	 * end of the range. Can accept: XMLExportMap, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): XMLExportMap;
	/** Returns the first XMLExportMap in the collection. */
	firstItem(): XMLExportMap;
	/** Returns the last XMLExportMap in the collection. */
	lastItem(): XMLExportMap;
	/** Returns the middle XMLExportMap in the collection. */
	middleItem(): XMLExportMap;
	/**
	 * Returns the XMLExportMap with the index previous to the 
	 * specified index.
	 * @param {XMLExportMap} obj - The index of the XMLExportMap 
	 * that follows the desired XMLExportMap.
	 */
	previousItem(obj: XMLExportMap): XMLExportMap;
	/**
	 * Returns the XMLExportMap whose index follows the specified 
	 * XMLExportMap in the collection.
	 * @param {XMLExportMap} obj - The XMLExportMap whose index 
	 * comes before the desired XMLExportMap.
	 */
	nextItem(obj: XMLExportMap): XMLExportMap;
	/** Returns any XMLExportMap in the collection. */
	anyItem(): XMLExportMap;
	/** Returns every XMLExportMap in the collection. */
	everyItem(): XMLExportMap;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLExportMap.
	 */
	toSource(): string;
	/**
	 * Returns the XMLExportMap with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: XMLExportMap;
}

/**
 * An XML validation error.
 * @class
 */
export declare class ValidationError {
	/** The element that caused the validation error. */
	readonly element: XMLElement;
	/**
	 * The attribute name if the validation error refers to an 
	 * attribute.
	 */
	readonly attributeName: string;
	/** The validation error message. */
	readonly errorMessage: string;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the ValidationError (a Document). */
	readonly parent: Document;
	/**
	 * The index of the ValidationError within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * ValidationError.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): ValidationError;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of XML validation errors.
 * @class
 */
export declare class ValidationErrors {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the ValidationError. */
	count(): number;
	/**
	 * Returns the ValidationError with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): ValidationError;
	/**
	 * Returns the ValidationErrors within the specified range.
	 * @param {any} _from - The ValidationError, index, or name at 
	 * the beginning of the range. Can accept: ValidationError, 
	 * Long Integer or String.
	 * @param {any} to - The ValidationError, index, or name at the 
	 * end of the range. Can accept: ValidationError, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): ValidationError;
	/** Returns the first ValidationError in the collection. */
	firstItem(): ValidationError;
	/** Returns the last ValidationError in the collection. */
	lastItem(): ValidationError;
	/** Returns the middle ValidationError in the collection. */
	middleItem(): ValidationError;
	/**
	 * Returns the ValidationError with the index previous to the 
	 * specified index.
	 * @param {ValidationError} obj - The index of the 
	 * ValidationError that follows the desired ValidationError.
	 */
	previousItem(obj: ValidationError): ValidationError;
	/**
	 * Returns the ValidationError whose index follows the 
	 * specified ValidationError in the collection.
	 * @param {ValidationError} obj - The ValidationError whose 
	 * index comes before the desired ValidationError.
	 */
	nextItem(obj: ValidationError): ValidationError;
	/** Returns any ValidationError in the collection. */
	anyItem(): ValidationError;
	/** Returns every ValidationError in the collection. */
	everyItem(): ValidationError;
	/**
	 * Generates a string which, if executed, will return the 
	 * ValidationError.
	 */
	toSource(): string;
	/**
	 * Returns the ValidationError with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: ValidationError;
}

/**
 * An XML comment.
 * @class
 * @extends XMLItem
 */
export declare class XMLComment extends XMLItem {
	/**
	 * The insertion point before the table in the story containing 
	 * the table.
	 */
	readonly storyOffset: InsertionPoint;
	/** The unique ID of the XMLComment. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XMLComment (a Document or XMLElement). */
	readonly parent: any;
	/** The index of the XMLComment within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The text of the XML comment. */
	value: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Moves the element to the specified location.
	 * @param {LocationOptions} to - The location in relation to 
	 * the reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. . 
	 * Can accept: XMLItem or Text. (Optional)
	 */
	move(to: LocationOptions, reference: any): XMLComment;
	/** Duplicates the XMLComment. */
	duplicate(): XMLComment;
	/** Deletes the XMLComment. */
	remove(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the XMLComment in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLComment.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLComment;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of XML comments.
 * @class
 */
export declare class XMLComments {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Creates a new XML comment.
	 * @param {string} value - The value of the comment. (Optional)
	 * @param {any} storyOffset - The location within the story, 
	 * specified as an insertion point. Can accept: InsertionPoint 
	 * or Long Integer. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new XMLComment (Optional)
	 */
	add(value?: string, storyOffset?: any, withProperties?: Object): XMLComment;
	/** Displays the number of elements in the XMLComment. */
	count(): number;
	/**
	 * Returns the XMLComment with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): XMLComment;
	/**
	 * Returns the XMLComment with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): XMLComment;
	/**
	 * Returns the XMLComments within the specified range.
	 * @param {any} _from - The XMLComment, index, or name at the 
	 * beginning of the range. Can accept: XMLComment, Long Integer 
	 * or String.
	 * @param {any} to - The XMLComment, index, or name at the end 
	 * of the range. Can accept: XMLComment, Long Integer or 
	 * String.
	 */
	itemByRange(_from: any, to: any): XMLComment;
	/** Returns the first XMLComment in the collection. */
	firstItem(): XMLComment;
	/** Returns the last XMLComment in the collection. */
	lastItem(): XMLComment;
	/** Returns the middle XMLComment in the collection. */
	middleItem(): XMLComment;
	/**
	 * Returns the XMLComment with the index previous to the 
	 * specified index.
	 * @param {XMLComment} obj - The index of the XMLComment that 
	 * follows the desired XMLComment.
	 */
	previousItem(obj: XMLComment): XMLComment;
	/**
	 * Returns the XMLComment whose index follows the specified 
	 * XMLComment in the collection.
	 * @param {XMLComment} obj - The XMLComment whose index comes 
	 * before the desired XMLComment.
	 */
	nextItem(obj: XMLComment): XMLComment;
	/** Returns any XMLComment in the collection. */
	anyItem(): XMLComment;
	/** Returns every XMLComment in the collection. */
	everyItem(): XMLComment;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLComment.
	 */
	toSource(): string;
	/**
	 * Returns the XMLComment with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: XMLComment;
}

/**
 * An XML processing instruction.
 * @class
 * @extends XMLItem
 */
export declare class XMLInstruction extends XMLItem {
	/**
	 * The insertion point before the table in the story containing 
	 * the table.
	 */
	readonly storyOffset: InsertionPoint;
	/** The unique ID of the XMLInstruction. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/**
	 * The parent of the XMLInstruction (a Document or XMLElement).
	 */
	readonly parent: any;
	/**
	 * The index of the XMLInstruction within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A name that identifies the processing instruction to an 
	 * application reading the exported XML file.
	 */
	target: string;
	/**
	 * A value that tells the application reading the exported XML 
	 * file what to do with the processing instruction.
	 */
	data: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Moves the element to the specified location.
	 * @param {LocationOptions} to - The location in relation to 
	 * the reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. . 
	 * Can accept: XMLItem or Text. (Optional)
	 */
	move(to: LocationOptions, reference: any): XMLInstruction;
	/** Duplicates the XMLInstruction. */
	duplicate(): XMLInstruction;
	/** Deletes the XMLInstruction. */
	remove(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the XMLInstruction in relation to previously 
	 * selected objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLInstruction.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLInstruction;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of XML instructions.
 * @class
 */
export declare class XMLInstructions {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the XMLInstruction. */
	count(): number;
	/**
	 * Creates a new XML processing instruction.
	 * @param {string} target - A name that identifies the 
	 * processing instruction to an application reading the 
	 * exported XML file.
	 * @param {string} data - A value that tells the application 
	 * what to do with the processing instruction identified in the 
	 * target. (Optional)
	 * @param {any} storyOffset - The location within the story, 
	 * specified as an insertion point. Can accept: InsertionPoint 
	 * or Long Integer. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new XMLInstruction (Optional)
	 */
	add(target: string, data?: string, storyOffset?: any, withProperties?: Object): XMLInstruction;
	/**
	 * Returns the XMLInstruction with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): XMLInstruction;
	/**
	 * Returns the XMLInstruction with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): XMLInstruction;
	/**
	 * Returns the XMLInstructions within the specified range.
	 * @param {any} _from - The XMLInstruction, index, or name at 
	 * the beginning of the range. Can accept: XMLInstruction, Long 
	 * Integer or String.
	 * @param {any} to - The XMLInstruction, index, or name at the 
	 * end of the range. Can accept: XMLInstruction, Long Integer 
	 * or String.
	 */
	itemByRange(_from: any, to: any): XMLInstruction;
	/** Returns the first XMLInstruction in the collection. */
	firstItem(): XMLInstruction;
	/** Returns the last XMLInstruction in the collection. */
	lastItem(): XMLInstruction;
	/** Returns the middle XMLInstruction in the collection. */
	middleItem(): XMLInstruction;
	/**
	 * Returns the XMLInstruction with the index previous to the 
	 * specified index.
	 * @param {XMLInstruction} obj - The index of the 
	 * XMLInstruction that follows the desired XMLInstruction.
	 */
	previousItem(obj: XMLInstruction): XMLInstruction;
	/**
	 * Returns the XMLInstruction whose index follows the specified 
	 * XMLInstruction in the collection.
	 * @param {XMLInstruction} obj - The XMLInstruction whose index 
	 * comes before the desired XMLInstruction.
	 */
	nextItem(obj: XMLInstruction): XMLInstruction;
	/** Returns any XMLInstruction in the collection. */
	anyItem(): XMLInstruction;
	/** Returns every XMLInstruction in the collection. */
	everyItem(): XMLInstruction;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLInstruction.
	 */
	toSource(): string;
	/**
	 * Returns the XMLInstruction with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: XMLInstruction;
}

/**
 * An XML item.
 * @class
 */
export declare class XMLItem {
	/** The unique ID of the XMLItem. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XMLItem (a Document or XMLElement). */
	readonly parent: any;
	/** The index of the XMLItem within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the XMLItem. */
	remove(): void;
	/** Duplicates the XMLItem. */
	duplicate(): XMLItem;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the XMLItem in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLItem.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLItem;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of XML items.
 * @class
 */
export declare class XMLItems {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the XMLItem. */
	count(): number;
	/**
	 * Returns the XMLItem with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): XMLItem;
	/**
	 * Returns the XMLItem with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): XMLItem;
	/**
	 * Returns the XMLItems within the specified range.
	 * @param {any} _from - The XMLItem, index, or name at the 
	 * beginning of the range. Can accept: XMLItem, Long Integer or 
	 * String.
	 * @param {any} to - The XMLItem, index, or name at the end of 
	 * the range. Can accept: XMLItem, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): XMLItem;
	/** Returns the first XMLItem in the collection. */
	firstItem(): XMLItem;
	/** Returns the last XMLItem in the collection. */
	lastItem(): XMLItem;
	/** Returns the middle XMLItem in the collection. */
	middleItem(): XMLItem;
	/**
	 * Returns the XMLItem with the index previous to the specified 
	 * index.
	 * @param {XMLItem} obj - The index of the XMLItem that follows 
	 * the desired XMLItem.
	 */
	previousItem(obj: XMLItem): XMLItem;
	/**
	 * Returns the XMLItem whose index follows the specified 
	 * XMLItem in the collection.
	 * @param {XMLItem} obj - The XMLItem whose index comes before 
	 * the desired XMLItem.
	 */
	nextItem(obj: XMLItem): XMLItem;
	/** Returns any XMLItem in the collection. */
	anyItem(): XMLItem;
	/** Returns every XMLItem in the collection. */
	everyItem(): XMLItem;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLItem.
	 */
	toSource(): string;
	/**
	 * Returns the XMLItem with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: XMLItem;
}

/**
 * The document DTD.
 * @class
 * @extends XMLItem
 */
export declare class DTD extends XMLItem {
	/**
	 * The system ID of the DOCTYPE declaration. Note: Valid only 
	 * when the DTD is an external subset.
	 */
	readonly systemId: string;
	/**
	 * The public ID of the DOCTYPE declaration. Note: Valid only 
	 * when the DTD is an external subset.
	 */
	readonly publicId: string;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	readonly contents: any;
	/** The unique ID of the DTD. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the DTD (a Document). */
	readonly parent: Document;
	/** The index of the DTD within its containing object. */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** The tag of the root object. */
	rootTag: XMLTag;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the DTD. */
	remove(): void;
	/**
	 * Selects the object.
	 * @param {SelectionOptions} existingSelection - The selection 
	 * status of the DTD in relation to previously selected 
	 * objects. (Optional)
	 */
	select(existingSelection?: SelectionOptions): void;
	/** Generates a string which, if executed, will return the DTD. */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): DTD;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of DTDs.
 * @class
 */
export declare class DTDs {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the DTD. */
	count(): number;
	/**
	 * Returns the DTD with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): DTD;
	/**
	 * Returns the DTD with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): DTD;
	/**
	 * Returns the DTDs within the specified range.
	 * @param {any} _from - The DTD, index, or name at the 
	 * beginning of the range. Can accept: DTD, Long Integer or 
	 * String.
	 * @param {any} to - The DTD, index, or name at the end of the 
	 * range. Can accept: DTD, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): DTD;
	/** Returns the first DTD in the collection. */
	firstItem(): DTD;
	/** Returns the last DTD in the collection. */
	lastItem(): DTD;
	/** Returns the middle DTD in the collection. */
	middleItem(): DTD;
	/**
	 * Returns the DTD with the index previous to the specified 
	 * index.
	 * @param {DTD} obj - The index of the DTD that follows the 
	 * desired DTD.
	 */
	previousItem(obj: DTD): DTD;
	/**
	 * Returns the DTD whose index follows the specified DTD in the 
	 * collection.
	 * @param {DTD} obj - The DTD whose index comes before the 
	 * desired DTD.
	 */
	nextItem(obj: DTD): DTD;
	/** Returns any DTD in the collection. */
	anyItem(): DTD;
	/** Returns every DTD in the collection. */
	everyItem(): DTD;
	/** Generates a string which, if executed, will return the DTD. */
	toSource(): string;
	/**
	 * Returns the DTD with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: DTD;
}

/**
 * XML text content that has not yet been placed in the layout.
 * @class
 * @extends Story
 */
export declare class XmlStory extends Story {
	/**
	 * Dispatched before a XmlStory is placed. This event bubbles. 
	 * This event is cancelable.
	 */
	readonly BEFORE_PLACE: string;
	/**
	 * Dispatched after a XmlStory is placed. This event bubbles. 
	 * This event is not cancelable.
	 */
	readonly AFTER_PLACE: string;
	/**
	 * The contents of the text. Can return: String or 
	 * SpecialCharacters enumerator.
	 */
	readonly contents: any;
	/** The XML element associated with the XmlStory. */
	readonly associatedXMLElement: XMLItem;
	/** Story preference settings. */
	readonly storyPreferences: StoryPreference;
	/** If true, the story has overset text. */
	readonly overflows: boolean;
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * If true, the applied style has been overridden with 
	 * additional attributes.
	 */
	readonly styleOverridden: boolean;
	/** The type of story. */
	readonly storyType: StoryTypes;
	/**
	 * Array of text frames or text paths. Can return: Array of 
	 * TextFrames or TextPaths.
	 */
	readonly textContainers: any;
	/** The applied character styles dictated by nested styles. */
	readonly appliedNestedStyles: CharacterStyle;
	/** Linked story options */
	readonly linkedStoryOptions: LinkedStoryOption;
	/** The source file of the link. */
	readonly itemLink: Link;
	/** Export options for InCopy INCX document format. */
	readonly incopyExportOptions: InCopyExportOption;
	/** Lists all page items contained by the XmlStory. */
	readonly allPageItems: PageItem;
	/** Lists all graphics contained by the XmlStory. */
	readonly allGraphics: Graphic;
	/**
	 * Default grid properties. Note: Applies to named, layout, and 
	 * frame (story) grids.
	 */
	readonly gridData: GridDataInformation;
	/** Bullet character. */
	readonly bulletChar: Bullet;
	/** Numbering restart policies. */
	readonly numberingRestartPolicies: NumberingRestartPolicy;
	/** The lock state. */
	readonly lockState: LockStateValues;
	/** The unique ID of the XmlStory. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XmlStory (a Document). */
	readonly parent: Document;
	/** The index of the XmlStory within its containing object. */
	readonly index: number;
	/** A collection of footnotes. */
	readonly footnotes: Footnotes;
	/** A collection of notes. */
	readonly notes: Notes;
	/** A collection of text variable instances. */
	readonly textVariableInstances: TextVariableInstances;
	/** A collection of text objects. */
	readonly texts: Texts;
	/** A collection of characters. */
	readonly characters: Characters;
	/** A collection of words. */
	readonly words: Words;
	/** A collection of lines. */
	readonly lines: Lines;
	/** A collection of text columns. */
	readonly textColumns: TextColumns;
	/** A collection of paragraphs. */
	readonly paragraphs: Paragraphs;
	/** A collection of insertion points. */
	readonly insertionPoints: InsertionPoints;
	/** A collection of text style ranges. */
	readonly textStyleRanges: TextStyleRanges;
	/** A collection of tables. */
	readonly tables: Tables;
	/** A collection of preferences objects. */
	readonly preferences: Preferences;
	/** A collection of nested line styles. */
	readonly nestedLineStyles: NestedLineStyles;
	/** A collection of nested GREP styles. */
	readonly nestedGrepStyles: NestedGrepStyles;
	/** A collection of nested styles. */
	readonly nestedStyles: NestedStyles;
	/** A collection of tab stops. */
	readonly tabStops: TabStops;
	/** A collection of ellipses. */
	readonly ovals: Ovals;
	/** The spline items collection. */
	readonly splineItems: SplineItems;
	/**
	 * The page items collection, which can be used to process all 
	 * page items in a container (such as a document, page, or 
	 * group), regardless of type.
	 */
	readonly pageItems: PageItems;
	/** A collection of rectangles. */
	readonly rectangles: Rectangles;
	/** A collection of graphic lines. */
	readonly graphicLines: GraphicLines;
	/** A collection of text frames. */
	readonly textFrames: TextFrames;
	/** A collection of polygons. */
	readonly polygons: Polygons;
	/** A collection of para style mappings. */
	readonly paraStyleMappings: ParaStyleMappings;
	/** A collection of char style mappings. */
	readonly charStyleMappings: CharStyleMappings;
	/** A collection of table style mappings. */
	readonly tableStyleMappings: TableStyleMappings;
	/** A collection of cell style mappings. */
	readonly cellStyleMappings: CellStyleMappings;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A collection of changes. */
	readonly changes: Changes;
	/** A collection of groups. */
	readonly groups: Groups;
	/** EPSTexts */
	readonly epstexts: EPSTexts;
	/** A collection of form fields. */
	readonly formFields: FormFields;
	/** A collection of buttons. */
	readonly buttons: Buttons;
	/** A collection of multi-state objects. */
	readonly multiStateObjects: MultiStateObjects;
	/** A collection of checkboxes. */
	readonly checkBoxes: CheckBoxes;
	/** A collection of comboboxes. */
	readonly comboBoxes: ComboBoxes;
	/** A collection of listboxes. */
	readonly listBoxes: ListBoxes;
	/** A collection of radio buttons. */
	readonly radioButtons: RadioButtons;
	/** A collection of text boxes. */
	readonly textBoxes: TextBoxes;
	/** A collection of signature fields. */
	readonly signatureFields: SignatureFields;
	/** A collection of hidden text objects. */
	readonly hiddenTexts: HiddenTexts;
	/** The distance to offset the left edge of the paragraph. */
	paragraphShadingLeftOffset: number|string;
	/** The distance to offset the right edge of the paragraph. */
	paragraphShadingRightOffset: number|string;
	/** The distance to offset the top edge of the paragraph. */
	paragraphShadingTopOffset: number|string;
	/** The distance to offset the bottom edge of the paragraph. */
	paragraphShadingBottomOffset: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum;
	/**
	 * The basis (cap height, ascent or baseline) used to calculate 
	 * the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum;
	/**
	 * The basis (descent or baseline) used to calculate the bottom 
	 * origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum;
	/**
	 * If true, forces the shading of the paragraph to be clipped 
	 * with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean;
	/** If true, suppress printing of the shading of the paragraph. */
	paragraphShadingSuppressPrinting: boolean;
	/** If true, the paragraph shading is On. */
	paragraphShadingOn: boolean;
	/** If true, the paragraph shading will overprint. */
	paragraphShadingOverprint: boolean;
	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 
	 * 0 to 100)
	 */
	paragraphShadingTint: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph shading. Can return: Swatch or String.
	 */
	paragraphShadingColor: any;
	/** Indicates whether the text is user or placeholder text. */
	userText: boolean;
	/**
	 * The font applied to the XmlStory, specified as either a font 
	 * object or the name of font family. Can return: Font or 
	 * String.
	 */
	appliedFont: any;
	/** The name of the font style. */
	fontStyle: string;
	/** The text size. */
	pointSize: number|string;
	/**
	 * The leading applied to the text. Can return: Unit or Leading 
	 * enumerator.
	 */
	leading: any;
	/** The type of pair kerning. */
	kerningMethod: string;
	/**
	 * The amount by which to loosen or tighten a block of text, 
	 * specified in thousands of an em.
	 */
	tracking: number;
	/** The capitalization scheme. */
	capitalization: Capitalization;
	/** The text position relative to the baseline. */
	position: Position;
	/** If true, underlines the text. */
	underline: boolean;
	/** If true, draws a strikethrough line through the text. */
	strikeThru: boolean;
	/**
	 * If true, replaces specific character combinations (e.g., fl, 
	 * fi) with ligature characters.
	 */
	ligatures: boolean;
	/** If true, keeps the text on the same line. */
	noBreak: boolean;
	/** The horizontal scaling applied to the XmlStory. */
	horizontalScale: number;
	/** The vertical scaling applied to the XmlStory. */
	verticalScale: number;
	/** The baseline shift applied to the text. */
	baselineShift: number|string;
	/** The skew angle of the XmlStory. */
	skew: number;
	/**
	 * The tint (as a percentage) of the fill color of the 
	 * XmlStory. (To specify a tint percentage, use a number in the 
	 * range of 0 to 100; to use the inherited or overridden value, 
	 * use -1.)
	 */
	fillTint: number;
	/**
	 * The tint (as a percentage) of the stroke color of the 
	 * XmlStory. (To specify a tint percentage, use a number in the 
	 * range of 0 to 100; to use the inherited or overridden value, 
	 * use -1.)
	 */
	strokeTint: number;
	/** The stroke weight applied to the characters of the text. */
	strokeWeight: number|string;
	/** If true, the stroke of the characters will overprint. */
	overprintStroke: boolean;
	/** If true, the fill color of the characters will overprint. */
	overprintFill: boolean;
	/** The figure style in OpenType fonts. */
	otfFigureStyle: OTFFigureStyle;
	/** If true, uses ordinals in OpenType fonts. */
	otfOrdinal: boolean;
	/** If true, uses fractions in OpenType fonts. */
	otfFraction: boolean;
	/** If true, uses discretionary ligatures in OpenType fonts. */
	otfDiscretionaryLigature: boolean;
	/** If true, uses titling forms in OpenType fonts. */
	otfTitling: boolean;
	/** If true, uses contextual alternate forms in OpenType fonts. */
	otfContextualAlternate: boolean;
	/** If true, uses swash forms in OpenType fonts. */
	otfSwash: boolean;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the underline stroke. . Can return: Swatch or String.
	 */
	underlineColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the underline stroke. Note: Valid when underline 
	 * type is not solid. Can return: Swatch or String.
	 */
	underlineGapColor: any;
	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 
	 * 100)
	 */
	underlineTint: number;
	/**
	 * The tint (as a percentage) of the gap color of the underline 
	 * stroke. (Range: 0 to 100) Note: Valid when underline type is 
	 * not solid.
	 */
	underlineGapTint: number;
	/** If true, the underline stroke color will overprint. */
	underlineOverprint: boolean;
	/**
	 * If true, the gap color of the underline stroke will 
	 * overprint.
	 */
	underlineGapOverprint: boolean;
	/**
	 * The stroke type of the underline stroke. Can return: 
	 * StrokeStyle or String.
	 */
	underlineType: any;
	/**
	 * The amount by which to offset the underline from the text 
	 * baseline.
	 */
	underlineOffset: number|string;
	/** The stroke weight of the underline stroke. */
	underlineWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the strikethrough stroke. Can return: Swatch or String.
	 */
	strikeThroughColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the gap of the strikethrough stroke. Can return: Swatch or 
	 * String.
	 */
	strikeThroughGapColor: any;
	/**
	 * The tint (as a percentage) of the strikethrough stroke. 
	 * (Range: 0 to 100)
	 */
	strikeThroughTint: number;
	/**
	 * The tint (as a percentage) of the strikethrough stroke gap 
	 * color. (Range: 0 to 100) Note: Valid when strike through 
	 * type is not solid.
	 */
	strikeThroughGapTint: number;
	/** If true, the strikethrough stroke will overprint. */
	strikeThroughOverprint: boolean;
	/**
	 * If true, the gap color of the strikethrough stroke will 
	 * overprint. Note: Valid when strike through type is not 
	 * solid.
	 */
	strikeThroughGapOverprint: boolean;
	/**
	 * The stroke type of the strikethrough stroke. Can return: 
	 * StrokeStyle or String.
	 */
	strikeThroughType: any;
	/**
	 * The amount by which to offset the strikethrough stroke from 
	 * the text baseline.
	 */
	strikeThroughOffset: number|string;
	/** The stroke weight of the strikethrough stroke. */
	strikeThroughWeight: number|string;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of the XmlStory. . Can also accept: String.
	 */
	fillColor: Swatch;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of the XmlStory. Can also accept: String.
	 */
	strokeColor: Swatch;
	/**
	 * The language of the text. Can return: LanguageWithVendors or 
	 * Language. Can also accept: String.
	 */
	appliedLanguage: any;
	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 
	 * 3 is long
	 */
	paragraphKashidaWidth: number;
	/**
	 * If true, aligns the baseline of the text to the baseline 
	 * grid.
	 */
	alignToBaseline: boolean;
	/** The amount to indent the first line. */
	firstLineIndent: number|string;
	/** The width of the left indent. */
	leftIndent: number|string;
	/** The width of the right indent. */
	rightIndent: number|string;
	/** The height of the paragraph space above. */
	spaceBefore: number|string;
	/** The height of the paragraph space below. */
	spaceAfter: number|string;
	/**
	 * If true or set to an enumeration value, balances ragged 
	 * lines. Note: Not valid with a single-line text composer. Can 
	 * return: Boolean or BalanceLinesStyle enumerator.
	 */
	balanceRaggedLines: any;
	/** The paragraph alignment. */
	justification: Justification;
	/** The alignment to use for lines that contain a single word. */
	singleWordJustification: SingleWordJustification;
	/**
	 * The percent of the type size to use for auto leading. 
	 * (Range: 0 to 500).
	 */
	autoLeading: number;
	/** The number of lines to drop cap. */
	dropCapLines: number;
	/** The number of characters to drop cap. */
	dropCapCharacters: number;
	/**
	 * If true, keeps a specified number of lines together when the 
	 * paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean;
	/**
	 * If true, keeps all lines of the paragraph together. If 
	 * false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean;
	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * before allowing a page break.
	 */
	keepFirstLines: number;
	/**
	 * The minimum number of lines to keep together in a paragraph 
	 * after a page break.
	 */
	keepLastLines: number;
	/** The location at which to start the paragraph. */
	startParagraph: StartParagraph;
	/** The text composer to use to compose the text. */
	composer: string;
	/**
	 * The minimum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number;
	/**
	 * The maximum word spacing, specified as a percentage of the 
	 * font word space value. Note: Valid only when text is 
	 * justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number;
	/**
	 * The desired word spacing, specified as a percentage of the 
	 * font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number;
	/**
	 * The minimum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number;
	/**
	 * The maximum letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number;
	/**
	 * The desired letter spacing, specified as a percentge of the 
	 * built-in space between letters in the font. (Range: -100 to 
	 * 500)
	 */
	desiredLetterSpacing: number;
	/**
	 * The minimum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number;
	/**
	 * The maximum width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number;
	/**
	 * The desired width (as a percentage) of individual 
	 * characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number;
	/** If true, places a rule above the paragraph. */
	ruleAbove: boolean;
	/** If true, the paragraph rule above will overprint. */
	ruleAboveOverprint: boolean;
	/** The line weight of the rule above. */
	ruleAboveLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule above. 
	 * (Range: 0 to 100)
	 */
	ruleAboveTint: number;
	/**
	 * The amount to offset the paragraph rule above from the 
	 * baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * above (based on either the text width or the column width of 
	 * the first line in the paragraph.
	 */
	ruleAboveRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule above. Can return: Swatch or String.
	 */
	ruleAboveColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule above. Note: Valid only 
	 * when the paragraph rule above type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleAboveGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule. (Range: 0 to 100) Note: Valid only when the 
	 * rule above type is not solid.
	 */
	ruleAboveGapTint: number;
	/**
	 * If true, the stroke gap of the paragraph rule above will 
	 * overprint. Note: Valid only the rule above type is not 
	 * solid.
	 */
	ruleAboveGapOverprint: boolean;
	/**
	 * The stroke type of the rule above the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleAboveType: any;
	/** If true, applies a paragraph rule below. */
	ruleBelow: boolean;
	/** The line weight of the rule below. */
	ruleBelowLineWeight: number|string;
	/**
	 * The tint (as a percentage) of the paragraph rule below. 
	 * (Range: 0 to 100)
	 */
	ruleBelowTint: number;
	/**
	 * The amount to offset the the paragraph rule below from the 
	 * baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number|string;
	/**
	 * The distance to indent the left edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number|string;
	/**
	 * The distance to indent the right edge of the paragraph rule 
	 * below (based on either the text width or the column width of 
	 * the last line in the paragraph.
	 */
	ruleBelowRightIndent: number|string;
	/**
	 * The basis (text width or column width) used to calculate the 
	 * width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the paragraph rule below. Can return: Swatch or String.
	 */
	ruleBelowColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke gap of the paragraph rule below. Note: Valid only 
	 * when the paragraph rule below type is not solid. Can return: 
	 * Swatch or String.
	 */
	ruleBelowGapColor: any;
	/**
	 * The tint (as a percentage) of the stroke gap color of the 
	 * paragraph rule below. (Range: 0 to 100) Note: Valid only 
	 * when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number;
	/**
	 * The stroke type of the rule below the paragraph. Can return: 
	 * StrokeStyle or String.
	 */
	ruleBelowType: any;
	/** If true, allows hyphenation of capitalized words. */
	hyphenateCapitalizedWords: boolean;
	/** If true, allows hyphenation. */
	hyphenation: boolean;
	/**
	 * The minimum number of letters at the end of a word that can 
	 * be broken by a hyphen.
	 */
	hyphenateBeforeLast: number;
	/**
	 * The mininum number of letters at the beginning of a word 
	 * that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number;
	/**
	 * The minimum number of letters a word must have in order to 
	 * qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number;
	/**
	 * The maximum number of hyphens that can appear on consecutive 
	 * lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number;
	/**
	 * The amount of white space allowed at the end of a line of 
	 * non-justified text before hypenation begins. Note: Valid 
	 * when composer is single-line composer.
	 */
	hyphenationZone: number|string;
	/**
	 * The relative desirability of better spacing vs. fewer 
	 * hyphens. A lower value results in greater use of hyphens. 
	 * (Range: 0 to 100)
	 */
	hyphenWeight: number;
	/**
	 * The character style to apply to the drop cap. Can also 
	 * accept: String.
	 */
	dropCapStyle: CharacterStyle;
	/**
	 * The paragraph style applied to the text. Can also accept: 
	 * String.
	 */
	appliedParagraphStyle: ParagraphStyle;
	/**
	 * The character style applied to the text. Can also accept: 
	 * String.
	 */
	appliedCharacterStyle: CharacterStyle;
	/** The amount to indent the last line in the paragraph. */
	lastLineIndent: number|string;
	/**
	 * If true, allows hyphenation in the last word in a paragraph. 
	 * Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean;
	/** If true, use a slashed zeroes in OpenType fonts. */
	otfSlashedZero: boolean;
	/** If true, use historical forms in OpenType fonts. */
	otfHistorical: boolean;
	/** The stylistic sets to use in OpenType fonts. */
	otfStylisticSets: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the fill of the text.
	 */
	gradientFillLength: number;
	/**
	 * The angle of a linear gradient applied to the fill of the 
	 * text. (Range: -180 to 180)
	 */
	gradientFillAngle: number;
	/**
	 * The length (for a linear gradient) or radius (for a radial 
	 * gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number;
	/**
	 * The angle of a linear gradient applied to the stroke of the 
	 * text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: number|string;
	/**
	 * The starting point (in page coordinates) of a gradient 
	 * applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: number|string;
	/**
	 * If the first line in the paragraph should be kept with the 
	 * last line of previous paragraph.
	 */
	keepWithPrevious: boolean;
	/**
	 * The number of columns a paragraph spans or the number of 
	 * split columns. Can return: Short Integer (1 - 40) or 
	 * SpanColumnCountOptions enumerator.
	 */
	spanSplitColumnCount: any;
	/**
	 * Whether a paragraph should be a single column, span columns 
	 * or split columns
	 */
	spanColumnType: SpanColumnTypeOptions;
	/** The inside gutter if the paragraph splits columns */
	splitColumnInsideGutter: number|string;
	/** The outside gutter if the paragraph splits columns */
	splitColumnOutsideGutter: number|string;
	/** The minimum space before a span or a split column */
	spanColumnMinSpaceBefore: number|string;
	/** The minimum space after a span or a split column */
	spanColumnMinSpaceAfter: number|string;
	/** If true, the rule below will overprint. */
	ruleBelowOverprint: boolean;
	/** If true, the gap color of the rule below will overprint. */
	ruleBelowGapOverprint: boolean;
	/**
	 * Details about the drop cap based on the glyph outlines. 1 = 
	 * left side bearing. 2 = descenders. 0x100,0x200,0x400 are 
	 * used for Japanese frame grid.
	 */
	dropcapDetail: number;
	/**
	 * If true, allows the last word in a text column to be 
	 * hyphenated.
	 */
	hyphenateAcrossColumns: boolean;
	/**
	 * If true, forces the rule above the paragraph to remain in 
	 * the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean;
	/** If true, ignores optical edge alignment for the paragraph. */
	ignoreEdgeAlignment: boolean;
	/** If true, uses mark positioning in OpenType fonts. */
	otfMark: boolean;
	/** If true, uses localized forms in OpenType fonts. */
	otfLocale: boolean;
	/** The OpenType positional form. */
	positionalForm: PositionalForms;
	/** Paragraph direction. */
	paragraphDirection: ParagraphDirectionOptions;
	/** Paragraph justification. */
	paragraphJustification: ParagraphJustificationOptions;
	/**
	 * The limit of the ratio of stroke width to miter length 
	 * before a miter (pointed) join becomes a bevel (squared-off) 
	 * join.
	 */
	miterLimit: number;
	/** The stroke alignment applied to the text. */
	strokeAlignment: TextStrokeAlign;
	/** The stroke join type applied to the characters of the text. */
	endJoin: OutlineJoin;
	/** If true, use overlapping swash forms in OpenType fonts */
	otfOverlapSwash: boolean;
	/** If true, use stylistic alternate forms in OpenType fonts */
	otfStylisticAlternate: boolean;
	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean;
	/** If true, use stretched alternate forms in OpenType fonts */
	otfStretchedAlternate: boolean;
	/** The direction of the character. */
	characterDirection: CharacterDirectionOptions;
	/** The keyboard direction of the character. */
	keyboardDirection: CharacterDirectionOptions;
	/** The digits type. */
	digitsType: DigitsTypeOptions;
	/** Use of Kashidas for justification */
	kashidas: KashidasOptions;
	/** Position of diacriticical characters. */
	diacriticPosition: DiacriticPositionOptions;
	/** The x (horizontal) offset for diacritic adjustment. */
	xOffsetDiacritic: number;
	/** The y (vertical) offset for diacritic adjustment. */
	yOffsetDiacritic: number;
	/**
	 * A list of the tab stops in the paragraph. Can return: Array 
	 * of Arrays of Property Name/Value Pairs.
	 */
	tabList: any;
	/** If true, track changes is turned on. */
	trackChanges: boolean;
	/** Title for this InCopy story. */
	storyTitle: string;
	/** The named grid in use. */
	appliedNamedGrid: NamedGrid;
	/**
	 * OpenType features. Can return: Array of Array of 2 Strings 
	 * or Long Integers.
	 */
	opentypeFeatures: any;
	/**
	 * If true, aligns only the first line to the frame grid or 
	 * baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean;
	/** The alignment to the frame grid or baseline grid. */
	gridAlignment: GridAlignment;
	/** The manual gyoudori setting. */
	gridGyoudori: number;
	/**
	 * The number of half-width characters at or below which the 
	 * characters automatically run horizontally in vertical text.
	 */
	autoTcy: number;
	/** If true, auto tcy includes Roman characters. */
	autoTcyIncludeRoman: boolean;
	/**
	 * The kinsoku set that determines legitimate line breaks. Can 
	 * return: KinsokuTable, KinsokuSet enumerator or String.
	 */
	kinsokuSet: any;
	/**
	 * The type of kinsoku processing for preventing kinsoku 
	 * characters from beginning or ending a line. Note: Valid only 
	 * when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType;
	/**
	 * The type of hanging punctuation to allow. Note: Valid only 
	 * when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes;
	/**
	 * If true, adds the double period (..), ellipse (...), and 
	 * double hyphen (--) to the selected kinsoku set. Note: Valid 
	 * only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean;
	/**
	 * The mojikumi table. For information, see mojikumi table 
	 * defaults. Can return: MojikumiTable, String or 
	 * MojikumiTableDefaults enumerator.
	 */
	mojikumi: any;
	/**
	 * If true, disallows line breaks in numbers. If false, lines 
	 * can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean;
	/** If true, rotates Roman characters in vertical text. */
	rotateSingleByteCharacters: boolean;
	/** The point from which leading is measured from line to line. */
	leadingModel: LeadingModel;
	/**
	 * The alignment of small characters to the largest character 
	 * in the line.
	 */
	characterAlignment: CharacterAlignment;
	/** The amount of horizontal character compression. */
	tsume: number;
	/** The amount of space before each character. */
	leadingAki: number;
	/** The amount of space after each character. */
	trailingAki: number;
	/**
	 * The rotation angle (in degrees) of individual characters. 
	 * Note: The rotation is counterclockwise.
	 */
	characterRotation: number;
	/** The number of grid squares in which to arrange the text. */
	jidori: number;
	/** The amount (as a percentage) of shatai obliquing to apply. */
	shataiMagnification: number;
	/** The shatai lens angle (in degrees). */
	shataiDegreeAngle: number;
	/** If true, applies shatai rotation. */
	shataiAdjustRotation: boolean;
	/** If true, adjusts shatai tsume. */
	shataiAdjustTsume: boolean;
	/** If true, makes the character horizontal in vertical text. */
	tatechuyoko: boolean;
	/**
	 * The horizontal offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoXOffset: number;
	/**
	 * The vertical offset for horizontal characters in vertical 
	 * text.
	 */
	tatechuyokoYOffset: number;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of kenten characters. Can return: Swatch or String.
	 */
	kentenFillColor: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of kenten characters. Can return: Swatch or 
	 * String.
	 */
	kentenStrokeColor: any;
	/**
	 * The fill tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenTint: number;
	/**
	 * The stroke tint (as a percentage) of kenten characters. 
	 * (Range: 0 to 100)
	 */
	kentenStrokeTint: number;
	/** The stroke weight (in points) of kenten characters. */
	kentenWeight: number;
	/** The method of overprinting the kenten fill. */
	kentenOverprintFill: AdornmentOverprint;
	/** The method of overprinting the kenten stroke. */
	kentenOverprintStroke: AdornmentOverprint;
	/** The style of kenten characters. */
	kentenKind: KentenCharacter;
	/**
	 * The distance between kenten characters and their parent 
	 * characters.
	 */
	kentenPlacement: number;
	/**
	 * The alignment of kenten characters relative to the parent 
	 * characters.
	 */
	kentenAlignment: KentenAlignment;
	/** The kenten position relative to the parent character. */
	kentenPosition: RubyKentenPosition;
	/**
	 * The font to use for kenten characters. Can return: Font or 
	 * String.
	 */
	kentenFont: any;
	/**
	 * The font style of kenten characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	kentenFontStyle: any;
	/** The size (in points) of kenten characters. */
	kentenFontSize: number;
	/**
	 * The horizontal size of kenten characters as a percent of the 
	 * original size.
	 */
	kentenXScale: number;
	/**
	 * The vertical size of kenten charachers as a percent of the 
	 * original size.
	 */
	kentenYScale: number;
	/**
	 * The character used for kenten. Note: Valid only when kenten 
	 * kind is custom.
	 */
	kentenCustomCharacter: string;
	/**
	 * The character set used for the custom kenten character. 
	 * Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the fill of ruby characters. Can return: Swatch or String.
	 */
	rubyFill: any;
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to 
	 * the stroke of ruby characters. Can return: Swatch or String.
	 */
	rubyStroke: any;
	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 
	 * to 100)
	 */
	rubyTint: number;
	/** The stroke weight (in points) of ruby characters. */
	rubyWeight: number;
	/** The method of overprinting the ruby fill. */
	rubyOverprintFill: AdornmentOverprint;
	/** The method of overprinting the ruby stroke. */
	rubyOverprintStroke: AdornmentOverprint;
	/** The stroke tint (as a percentage) of ruby characters. */
	rubyStrokeTint: number;
	/**
	 * The font applied to ruby characters. Can return: Font or 
	 * String.
	 */
	rubyFont: any;
	/**
	 * The font style of ruby characters. Can return: String or 
	 * NothingEnum enumerator.
	 */
	rubyFontStyle: any;
	/** The size (in points) of ruby characters. */
	rubyFontSize: number;
	/** If true, uses OpenType Pro fonts for ruby. */
	rubyOpenTypePro: boolean;
	/**
	 * The horizontal size of ruby characters, specified as a 
	 * percent of the original size.
	 */
	rubyXScale: number;
	/**
	 * The vertical size of ruby characters, specified as a percent 
	 * of the original size.
	 */
	rubyYScale: number;
	/** The ruby type. */
	rubyType: RubyTypes;
	/** The ruby alignment. */
	rubyAlignment: RubyAlignments;
	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition;
	/**
	 * The amount of horizontal space between ruby and parent 
	 * characters.
	 */
	rubyXOffset: number;
	/**
	 * The amount of vertical space between ruby and parent 
	 * characters.
	 */
	rubyYOffset: number;
	/** The ruby spacing relative to the parent text. */
	rubyParentSpacing: RubyParentSpacing;
	/** If true, auto aligns ruby. */
	rubyAutoAlign: boolean;
	/**
	 * If true, constrains ruby overhang to the specified amount. 
	 * For information on specifying an amount, see ruby parent 
	 * overhang amount.
	 */
	rubyOverhang: boolean;
	/**
	 * If true, automatically scales ruby to the specified percent 
	 * of parent text size. For information on specifying a 
	 * percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean;
	/**
	 * The amount (as a percentage) to scale the parent text size 
	 * to determine the ruby text size.
	 */
	rubyParentScalingPercent: number;
	/**
	 * The amount by which ruby characters can overhang the parent 
	 * text.
	 */
	rubyParentOverhangAmount: RubyOverhang;
	/** If true, turns on warichu. */
	warichu: boolean;
	/**
	 * The amount (as a percentage) to scale parent text size to 
	 * determine warichu size.
	 */
	warichuSize: number;
	/** The number of lines of warichu within a single normal line. */
	warichuLines: number;
	/** The gap between lines of warichu characters. */
	warichuLineSpacing: number;
	/** The warichu alignment. */
	warichuAlignment: WarichuAlignment;
	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number;
	/**
	 * The minimum number of characters allowed before a line 
	 * break.
	 */
	warichuCharsBeforeBreak: number;
	/**
	 * If true, kerns according to proportional CJK metrics in 
	 * OpenType fonts.
	 */
	otfProportionalMetrics: boolean;
	/**
	 * If true, switches hiragana fonts, which have different 
	 * glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean;
	/** If true, applies italics to half-width alphanumerics. */
	otfRomanItalics: boolean;
	/** If true, the line changes size when characters are scaled. */
	scaleAffectsLineHeight: boolean;
	/**
	 * If true, uses grid tracking to track non-Roman characters in 
	 * CJK grids.
	 */
	cjkGridTracking: boolean;
	/** The glyph variant to substitute for standard glyphs. */
	glyphForm: AlternateGlyphForms;
	/** If true, ruby is on. */
	rubyFlag: boolean;
	/** The ruby string contents. */
	rubyString: string;
	/**
	 * If true, the gyoudori mode applies to the entire paragraph. 
	 * If false, the gyoudori mode applies to each line in the 
	 * paragraph.
	 */
	paragraphGyoudori: boolean;
	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) 
	 * in ruby.
	 */
	rubyAutoTcyDigits: number;
	/**
	 * If true, includes Roman characters in auto tcy 
	 * (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean;
	/**
	 * If true, automatically scales glyphs in auto tcy 
	 * (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean;
	/**
	 * If true, ideographic spaces will not wrap to the next line 
	 * like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean;
	/**
	 * If true, words unassociated with a hyphenation dictionary 
	 * can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean;
	/** List type for bullets and numbering. */
	bulletsAndNumberingListType: ListType;
	/**
	 * The character style to be used for the text after string. 
	 * Can return: CharacterStyle or String.
	 */
	bulletsCharacterStyle: any;
	/**
	 * The character style to be used for the number string. Can 
	 * return: CharacterStyle or String.
	 */
	numberingCharacterStyle: any;
	/** The number string expression for numbering. */
	numberingExpression: string;
	/** The text after string expression for bullets. */
	bulletsTextAfter: string;
	/**
	 * The list to be part of. Can return: NumberingList or String.
	 */
	appliedNumberingList: any;
	/** The level of the paragraph. */
	numberingLevel: number;
	/**
	 * Numbering format options. Can return: NumberingStyle 
	 * enumerator or String.
	 */
	numberingFormat: any;
	/** Continue the numbering at this level. */
	numberingContinue: boolean;
	/** Determines starting number in a numbered list. */
	numberingStartAt: number;
	/** If true, apply the numbering restart policy. */
	numberingApplyRestartPolicy: boolean;
	/** The alignment of the bullet character. */
	bulletsAlignment: ListAlignment;
	/** The alignment of the number. */
	numberingAlignment: ListAlignment;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the XmlStory; this is an alias to the XmlStory's 
	 * label property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Sets the case of the text.
	 * @param {ChangecaseMode} using - The text case option.
	 */
	changecase(using: ChangecaseMode): void;
	/**
	 * Clears the specified types of override.
	 * @param {OverrideType} overridesToClear - The types of 
	 * override to clear. (Optional)
	 */
	clearOverrides(overridesToClear?: OverrideType): void;
	/**
	 * Duplicates the text in the specified location.
	 * @param {LocationOptions} to - The location relative to the 
	 * reference object or within the containing object.
	 * @param {any} reference - The reference object. Note: 
	 * Required when the to parameter specifies before or after. 
	 * Can accept: Text, Story, Cell, Row, Column, Table or 
	 * PageItem. (Optional)
	 */
	duplicate(to: LocationOptions, reference: any): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeText(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGrep(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find what value and replaces the 
	 * text with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGrep(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds glyphs that match the find what value and replaces the 
	 * glyphs with the change to value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeGlyph(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	findTransliterate(reverseOrder: boolean): Text;
	/**
	 * Finds text that matches the find character type value and 
	 * replaces the text with the change character type value.
	 * @param {boolean} reverseOrder - If true, returns the results 
	 * in reverse order. (Optional)
	 */
	changeTransliterate(reverseOrder: boolean): Text;
	/**
	 * asynchronously exports the object(s) to a file.
	 * @param {any} format - The export format, specified as an 
	 * enumeration value or as an extension that appears in the 
	 * Save as type or Format menu in the Export dialog. Can 
	 * accept: ExportFormat enumerator or String.
	 * @param {File} to - The path to the export file.
	 * @param {boolean} showingOptions - If true, displays the 
	 * export options dialog. (Optional)
	 * @param {PDFExportPreset} using - The export style. 
	 * (Optional)
	 * @param {string} versionComments - The comment for this 
	 * version. (Optional)
	 * @param {boolean} forceSave - If true, forcibly saves a 
	 * version. (Optional)
	 */
	asynchronousExportFile(format: any, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask;
	/** Convert bullets and numbering to text. */
	convertBulletsAndNumberingToText(): void;
	/**
	 * Converts text to outlines. Each line of text becomes a 
	 * polygon object. When the converted text is a single letter 
	 * that has no internal spaces or detached parts, the polygon 
	 * contains only a single path. Note: To determine whether a 
	 * font allows the creation of outlines, see allow outlines.
	 * @param {boolean} deleteOriginal - If true, deletes the 
	 * original text. If false, creates the outlines as separate 
	 * object(s) on top of the text.  (Optional)
	 */
	createOutlines(deleteOriginal?: boolean): PageItem;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * XmlStory.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XmlStory;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of xml stories.
 * @class
 */
export declare class XmlStories {
	/** The number of objects in the collection. */
	readonly length: number;
	/** Displays the number of elements in the XmlStory. */
	count(): number;
	/**
	 * Returns the XmlStory with the specified index or name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): XmlStory;
	/**
	 * Returns the XmlStory with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): XmlStory;
	/**
	 * Returns the XmlStory with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): XmlStory;
	/**
	 * Returns the XmlStories within the specified range.
	 * @param {any} _from - The XmlStory, index, or name at the 
	 * beginning of the range. Can accept: XmlStory, Long Integer 
	 * or String.
	 * @param {any} to - The XmlStory, index, or name at the end of 
	 * the range. Can accept: XmlStory, Long Integer or String.
	 */
	itemByRange(_from: any, to: any): XmlStory;
	/** Returns the first XmlStory in the collection. */
	firstItem(): XmlStory;
	/** Returns the last XmlStory in the collection. */
	lastItem(): XmlStory;
	/** Returns the middle XmlStory in the collection. */
	middleItem(): XmlStory;
	/**
	 * Returns the XmlStory with the index previous to the 
	 * specified index.
	 * @param {XmlStory} obj - The index of the XmlStory that 
	 * follows the desired XmlStory.
	 */
	previousItem(obj: XmlStory): XmlStory;
	/**
	 * Returns the XmlStory whose index follows the specified 
	 * XmlStory in the collection.
	 * @param {XmlStory} obj - The XmlStory whose index comes 
	 * before the desired XmlStory.
	 */
	nextItem(obj: XmlStory): XmlStory;
	/** Returns any XmlStory in the collection. */
	anyItem(): XmlStory;
	/** Returns every XmlStory in the collection. */
	everyItem(): XmlStory;
	/**
	 * Generates a string which, if executed, will return the 
	 * XmlStory.
	 */
	toSource(): string;
	/**
	 * Returns the XmlStory with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: XmlStory;
}

/**
 * An XML rule processor.
 * @class
 */
export declare class XMLRuleProcessor {
	/** If true, the XML rule process has halted. */
	readonly halted: boolean;
	/** The XPath condition paths of the rules in the rule set. */
	readonly rulePaths: string;
	/** The unique ID of the XMLRuleProcessor. */
	readonly id: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XMLRuleProcessor (a Application). */
	readonly parent: Application;
	/**
	 * The index of the XMLRuleProcessor within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/** A property that can be set to any string. */
	label: string;
	/**
	 * The name of the XMLRuleProcessor; this is an alias to the 
	 * XMLRuleProcessor's label property.
	 */
	name: string;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/** Deletes the XMLRuleProcessor. */
	remove(): void;
	/**
	 * Start processing an XML rule set.
	 * @param {XMLElement} initialElement - The XML element at 
	 * which to start processing the rule set.
	 */
	startProcessingRuleSet(initialElement: XMLElement): XMLRuleMatchData;
	/** Finds the next matching XML element. */
	findNextMatch(): XMLRuleMatchData;
	/** Process the XML elements of the current XML element. */
	startProcessingSubtree(): XMLRuleMatchData;
	/**
	 * Do not process XML elements (children) of the current XML 
	 * element.
	 */
	skipChildren(): void;
	/** Stop processing XML rule set. */
	endProcessingRuleSet(): void;
	/** Halt the XML rule processor. */
	halt(): void;
	/**
	 * Sets the label to the value associated with the specified 
	 * key.
	 * @param {string} key - The key.
	 * @param {string} value - The value.
	 */
	insertLabel(key: string, value: string): void;
	/**
	 * Gets the label value associated with the specified key.
	 * @param {string} key - The key.
	 */
	extractLabel(key: string): string;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLRuleProcessor.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLRuleProcessor;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}

/**
 * A collection of XML rule processors.
 * @class
 */
export declare class XMLRuleProcessors {
	/** The number of objects in the collection. */
	readonly length: number;
	/**
	 * Create a new XMLRuleProcessor
	 * @param {string} rulePaths - The XPath condition paths of the 
	 * rules in the rule set.
	 * @param {any} prefixMappingTable - The namespace mapping 
	 * table. Can accept: Array of Arrays of 2 Strings. (Optional)
	 * @param {Object} withProperties - Initial values for 
	 * properties of the new XMLRuleProcessor (Optional)
	 */
	add(rulePaths: string, prefixMappingTable: any, withProperties: Object): XMLRuleProcessor;
	/** Displays the number of elements in the XMLRuleProcessor. */
	count(): number;
	/**
	 * Returns the XMLRuleProcessor with the specified index or 
	 * name.
	 * @param {any} index - The index or name. Can accept: Long 
	 * Integer or String.
	 */
	item(index: any): XMLRuleProcessor;
	/**
	 * Returns the XMLRuleProcessor with the specified name.
	 * @param {string} name - The name.
	 */
	itemByName(name: string): XMLRuleProcessor;
	/**
	 * Returns the XMLRuleProcessor with the specified ID.
	 * @param {number} id - The ID.
	 */
	itemByID(id: number): XMLRuleProcessor;
	/**
	 * Returns the XMLRuleProcessors within the specified range.
	 * @param {any} _from - The XMLRuleProcessor, index, or name at 
	 * the beginning of the range. Can accept: XMLRuleProcessor, 
	 * Long Integer or String.
	 * @param {any} to - The XMLRuleProcessor, index, or name at 
	 * the end of the range. Can accept: XMLRuleProcessor, Long 
	 * Integer or String.
	 */
	itemByRange(_from: any, to: any): XMLRuleProcessor;
	/** Returns the first XMLRuleProcessor in the collection. */
	firstItem(): XMLRuleProcessor;
	/** Returns the last XMLRuleProcessor in the collection. */
	lastItem(): XMLRuleProcessor;
	/** Returns the middle XMLRuleProcessor in the collection. */
	middleItem(): XMLRuleProcessor;
	/**
	 * Returns the XMLRuleProcessor with the index previous to the 
	 * specified index.
	 * @param {XMLRuleProcessor} obj - The index of the 
	 * XMLRuleProcessor that follows the desired XMLRuleProcessor.
	 */
	previousItem(obj: XMLRuleProcessor): XMLRuleProcessor;
	/**
	 * Returns the XMLRuleProcessor whose index follows the 
	 * specified XMLRuleProcessor in the collection.
	 * @param {XMLRuleProcessor} obj - The XMLRuleProcessor whose 
	 * index comes before the desired XMLRuleProcessor.
	 */
	nextItem(obj: XMLRuleProcessor): XMLRuleProcessor;
	/** Returns any XMLRuleProcessor in the collection. */
	anyItem(): XMLRuleProcessor;
	/** Returns every XMLRuleProcessor in the collection. */
	everyItem(): XMLRuleProcessor;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLRuleProcessor.
	 */
	toSource(): string;
	/**
	 * Returns the XMLRuleProcessor with the specified index.
	 * @param {number} index - The index.
	 */
	[index: number]: XMLRuleProcessor;
}

/**
 * An XML element matched by a rule or rules in the current XML 
 * rule set.
 * @class
 */
export declare class XMLRuleMatchData {
	/**
	 * An XML element matched by a rule or rules in the current XML 
	 * rule set.
	 */
	readonly element: XMLItem;
	/** The indices of matching XML rules in the rule set. */
	readonly matchRules: number;
	/**
	 * Returns true if the object specifier resolves to valid 
	 * objects.
	 */
	readonly isValid: boolean;
	/** The parent of the XMLRuleMatchData (a XMLRuleProcessor). */
	readonly parent: XMLRuleProcessor;
	/**
	 * The index of the XMLRuleMatchData within its containing 
	 * object.
	 */
	readonly index: number;
	/** A collection of events. */
	readonly events: Events;
	/** A collection of event listeners. */
	readonly eventListeners: EventListeners;
	/**
	 * A property that allows setting of several properties at the 
	 * same time.
	 */
	properties: Object;
	/**
	 * Generates a string which, if executed, will return the 
	 * XMLRuleMatchData.
	 */
	toSource(): string;
	/**
	 * Resolves the object specifier, creating an array of object 
	 * references.
	 */
	getElements(): XMLRuleMatchData;
	/** Retrieves the object specifier. */
	toSpecifier(): string;
	/**
	 * Adds an event listener.
	 * @param {string} eventType - The event type.
	 * @param {any} handler - The event handler. Can accept: File 
	 * or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	addEventListener(eventType: string, handler: any, captures?: boolean): EventListener;
	/**
	 * Removes the event listener.
	 * @param {string} eventType - The registered event type.
	 * @param {any} handler - The registered event handler. Can 
	 * accept: File or JavaScript Function.
	 * @param {boolean} captures - This parameter is obsolete. 
	 * (Optional)
	 */
	removeEventListener(eventType: string, handler: any, captures?: boolean): boolean;
}
